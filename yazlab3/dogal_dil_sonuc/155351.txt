parallel algorithm symbol comput use mapl mapl speak parallel mapl portabl system parallel symbol comput system built interfac parallel declar program languag strand sequenti comput algebra system mapl thu provid eleg strand power exist sequenti algorithm mapl implement differ parallel program paradigm show fairli easi parallel even complex algebra algorithm use system sampl applic among algorithm solv multivari nonlinear equat system implement variou parallel architectur exampl straightforward parallel complex import problem real root isol parallel use gener strand program fewer 20 line code slight modif 5 line origin sequenti mapl sourc even simpl modif gain speedup 5 time better report other literatur b introduct symbol comput import part appli themat physic engin area nowaday sequenti comput algebra system like mapl mathematica reduc wide use current possibl solv small exampl inher complex problem symbol comput particular lot problem involv nonlinear equat support austrian scienc foundat fwf espritiii posso project system solv symbol within reason amount time use today comput furthermor lot algorithm even possibl predict runtim memori demand given input deal problem obviou solut parallel today fast parallel comput theoret abl solv huge problem solv larg problem face follow situat ffl sequenti comput algebra system big sequenti librari fast implement basic algorithm yet suitabl parallel comput ffl parallel program languag well suit parallel program librari solv problem symbol comput thu goal reus huge librari exist comput algebra system addit get easi access power today parallel comput sever attempt parallel mapl made watt 1986 unix fork join primit use parallel programm develop parallel algorithm low level improv done char 1990 linda use linda hardwar independ programm still worri creation parallel process commun system implement share memori machin still problem commun job creation overhead also sever parallel comput algebra system avail c base sac algebra librari parallel share memori machin implement kuechlin 1990 call parsac use mach thread routin parallel parallel hong et al 1992 schreiner hong 1993 call includ sever high level function commun process gener system provid best effici avail distribut memori machin contrast kmaplek siegl 1993 especi design distribut memori architectur kept absolut portabl kmaplek program may run differ hardwar without modif recompil necessari commun done automat system without addit program effort sinc kmaplek use implicit parallel allow write parallel program without expert knowledg parallel program disadvantag compar share memori system design introduc higher overhead commun addit bigger memori overhead due need copi requir data mapl strand heap achiev goal develop interfac mapl char et al 1983 parallel program languag strand foster taylor 1989 result parallel program system full function mapl parallel power strand method allow easi write port parallel algorithm give sever sampl program describ differ techniqu quick parallel algorithm kmaplek experi done 20 processor sequent share memori machin test network sun workstat well 16processor transput distribut memori machin show good speedup minim program effort 2 kmaplek system kmaplek system two layer figur 1 top layer parallel declar program languag strand control parallel execut algorithm perform sequenti task may call arbitrari mapl function sequenc mapl statement underli mapl system method combin advantag strand well mapl 21 strand strand parallel program languag guard horn claus type mean basic construct claus bodi b j execut parallel soon guard g fulfil strand pattern match use instead unifica tion assign use describ output bind increas perform data depend express dataflow synchron stream commu nicat addit strand allow use arbitrari sequenti subroutin written c fortran guard bodi call describ basic commun featur give short exampl program type produc consum parallel request interest reader may find detail strand foster taylor 1989 main producerchannel consumerchannelfwd producerxx get empti variabl x createx gener valu x producerx outxx gener empti var x usex use valu x consumerx mode creat gener valu mode use take action mode declar procedur say argument annot use input match argument annot use output bin ding declar must use pattern use output allow dataflow synchron fwd annot mean annot goal execut next processor start main procedur gener two parallel subtask produc consum connect via share stream variabl channel consum process send request data instanti first con cell stream tell produc creat valu stream element x soon finish consum process use valu produc consum 22 mapl mapl well known comput algebra system one biggest librari avail known algorithm symbol comput alreadi implement mapl mapl program languag support function well procedur program style pascallik syntax mapl kernel written c link subroutin c program input output may handl via string repres mapl expressi on inform may found char et al 1983 char et al 1988 23 kmaplek kernel main task kernel system find minim set interfac routin combin syntact strand parallel program system iointerfac mapl iointerfac iointerfac mapl mapl figur 1 structur kmaplek system semant featur parallel declar program languag strand imper sequenti languag mapl final came interfac consist one new strand guard two bodi ffl mapl bodi call take arbitrari mapl function argument input return result comput mapl procedur cover sequenti call mapl use parallel program use call sequenti kmaplek program symbol integr exampl would look like intfxresult mapleintfxresult ffl extend nondeterminist guard check mapl express need test guard take boolean mapl function succe function evalu true fail otherwis abl write strand program find maximum arbitrari mapl data structur statement sinc also use guard oper solv arbitrari constraint guard kmaplek may also use constraint logic program languag ffl complex sequenti oper involv sever input output argument use inlin oper allow inclus sequenc arbitrari mapl statement addit may specifi variabl use input one output tupl form inmvarsvar mean content strand variabl svar assign mapl variabl mvar mapl program execut contrari outmvarsvar tupl stand assign mapl express denot mvar strand variabl svar comput procedur collect output express return list result one final find symbol express result want gener execut c program evalu result kmaplek program look like inlineintmpexpr readlibcctmpoptimizedcprog critic part interfac data type use commun possibl manipul data within strand well mapl addit effici commun parallel task requir structur may pack array easili commun primitiva distribut system may transfer array singl step decid use string contain mapl express legibl form commun strand mapl experi found method allow easi port develop parallel algorithm use symbol comput 3 parallel program kmaplek describ import program concept necessari parallel algorithm symbol comput kmaplek reader basic knowledg parallel logic program understand given program exampl 31 gener parallel task begin parallel program split sever task singl incom express kmaplek done help inlin function exampl consid problem integr sum express symbol integr may easili parallel comput individu term parallel kmaplek gener independ task follow procedur splitintsumexprtermlist inlineinsumsumexpr term sum term odtermlist inlin call assign sumexpr mapl variabl sum inlin mapl statement print individu term collect termlist result list understand strand part parallel manipul left list independ term accord integr rule may comput individu term independ 32 parallel evalu simplest parallel program consid case may comput task independ parallel continu integr exampl give program distribut data parallel shell simplic assum integr solv variabl x mode parintinputoutput parint parintttsyy mapleinttxi parinttsysfwd first step split list singl element return list unbound variabl result immedi individu valu variabl known stage integr term input list parallel result valu bound correspond variabl result list soon individu process integr singl term finish 33 combin result final combin individu subexpress singl express exampl done follow procedur combineintresultlistresultexpr listtomapleresultlistmaplelist mapleconvertmaplelistresultexpr builtin kmaplek call list mapl synchron resultlist convert element mapl list express final convert list back sum express use correspond mapl function whole parallel integr program look like sumintsumexprresult combineintresultlistresult improv perform may use dynam load balanc scheme base managerwork concept see section 43 experi exampl show higher amount garbag collect sequenti system allow superlinear speedup low number processor mapl abil rememb previous comput function need comput function twice fact parallel system util featur unbalanc natur problem restrict speedup achiev high number processor 34 meta program method mapl abil return partial evalu function use fact alreadi sequenti program avail would like parallel minimum effort instead immedi evalu function return evalu argument control process pick partial evalu function distribut parallel processor exampl consid parallel follow mapl procedur procedur gener valu var return list three element comput independ sub procedur p13 parallel procedur use gener parallel evalu procedur take list mapl statement input return list result mode parlistinputoutput parlist parlistexprexprlistyy inlineexpri parlistexprlistysfwd parallel mapl program look like mapl evalu variabl var return independ sub procedur p13 unevalu complet program combin strand mapl part exampleresult mapletolistresultlistresult effici parallel complic mapl program also implement gener version parallel evalu gener divid conquer see section 41 method base dynam load balanc use managerwork scheme see section 43 4 main parallel techniqu describ sever program techniqu use parallel algorithm kmaplek techniqu explain exampl import algorithm use symbol comput 41 divideconqu real root isol import problem symbol comput real root isol problem goal procedur find ration interv around real root polynomi real coeffici interv contain singl root mapl done uspenski procedur collin loo 1982 algorithm divid conquer style idea parallel divideandconqu algorithm clear input split independ subproblem type subproblem solv differ node recurs solv subproblem base case reach lead tree structur parallel process uspenski procedur split rang root two piec call recurs found isol interv sinc root normal equal balan ced one half worth search fact expect high speedup problem parallel algorithm use gener divid conquer algorithm figur 2 base meta program techniqu 34 modifi origin mapl algorithm way mapl return recurs call unevalu instead comput result call distribut parallel processor comput detail mapl routin mcall call gener divid conquer algorithm divconq simpli print recurs call unevalu collect strand list part addit global mapl variabl compos fun assign function compos evalu part case base case compos fun assign 0 base case yet reach split comp procedur collect result recurs call split procedur transfer mapl list mlist final composit function compos fun return result execut divconqmcallresult inlineoutcompos funcomp mcallpart divid split compcomppartsresult mode split comp split comp0xx base case 0 function split compcomppartsresult splitpartsresult wait subproc comp list mapleresultsmlist compos partial result inlineinin argsmlistcompr strip listresresult mode split splitxjxsyji divconqxi splitxsysfwd split figur 2 gener divideconqu algorithm function access result recurs call mapl list variabl arg improv version algorithm use dynam load balanc algorithm base managerwork scheme recurs call give result instanc chebyshev polynomi 20 processor sequent share memori machin time given second total execut time includ time garbag collect load requir modul number parenthes denot speedup gain mapl v kmaplek expect analysi program speedup gain high compar paral leliz report literatur char 1990 maximum speedup 17 exampl achiev found rather success better perform come mainli lower commun program overhead system 42 pipelin grobner base comput grobner base algorithm invent buchberg 1965 one import time intens algorithm symbol comput use solv mani problem polynomi ideal theori particular use symbol solut arbitrari nonlinear multivari polynomi equat parallel implement grobner base algorithm describ siegl 1990 siegl 1991 use pipelin principl polynomi reduc tion give sketch overal method detail proof given siegl 1990 pipelin algorithm test modifi input respect set properti test modifi part may like well known concurr prolog implement siev eratosthen shapiro 1987 append test valu set order use test rest input case result test use gener new input valu typic exampl critic pair complet procedur set critic pair built test respect given set properti pair cancel append test set new critic pair built parallel method assign element test set one parallel process connect pipe input valu driven subsequ pipe intermedi process take first element previou neighbor test modifi cancel result sent next process wait next input comput result whenev valu reach end pipelin possibl extend test set simpli creat new process hold new valu end pipe thu futur input valu test respect new valu necessari send comput valu back pipe gener new input intermedi pipe process gener new input valu send back front end front end process take new valu come back pipe send pipe sequenti grobner base algorithm critic pair complet algorithm given set input polynomi initi basi one comput critic polynomi reduc respect basi polynomi result polynomi ad basi new critic pair form parallel version pipelin process reduc input polynomi respect increas set basi polynomi irreduc input valu append reduct process gener new critic polynomi call spolynomi input new polynomi join basi sent back pipe build spolynomi earlier comput basi polynomi process front pipe need collect comput spolynomi send reduct process result get bidirect pipe form dyna mode maininpolybasi maininpolybasi main loop append spolinpolyspoltestpoli top end sievetestpolyspolbasisfwd back end mode sievetestpolysspolysbasispoli poli filterbptpsspsrpssps1 sieverpsspsbpsfwd extend pipe reduct sievetpsspsb inpoli append spol oe oe spoli testpoli basispoli f iltern oe siev basi oe figur 3 organ pipe comput grobner base mical expand ring organ pipe comput grobner basi shown figur 3 detail main procedur gener top append spol back end siev process pipe top end process collect newli gener polynomi spol pipe append initi input polynomi inpoli send whole pipe intermedi filter process take po lynomi reduc respect basi polynomi return result next pipe process soon back end receiv non zero polynomi extend pipe new intermedi filter process send new basi polynomi bp back pipe gener new spolynomi polynomi reduc zero cancel soon polynomi flow pipe algorithm termin benchmark done standard exampl literatur boeg et al 1986 comput differ term order total degre pure lexicograph term order exampl order kmaplek trinks2 tdeg 125 53 24 28 45 katsura3 plex 147 38 39 11 134 katsura3 tdeg 196 51 38 14 140 grobner base algorithm nondeterminist havior possibl decid advanc order reduct chosen implement polynomi flow pipe allow overtak reduc faster gener turn use faster gener therefor simpler polynomi earlier reduc overal comput time may lead superlinear speedup 43 managerwork parallel interact user interfac kmaplek may use develop parallel algorithm even possibl parallel mapl interact user interfac way sever user queri fullfil simultan user interfac kmaplek intern parallel use manag worker scheme parallel shelln shell n worker stream init workernwork spawn n worker shellinputwork get user request mode init worker init worker0 init workernmergerequestjr n0 j workerrequestn place worker n1 n1 init workern1r managerfmexprresgjworkmexprmresjrequest exprmexpr send expr worker resmr send result user managerworkrequest mode worker workerxmmexprresultjrequest instanc per proc workerresultrequest figur 4 parallel user shell managerwork approach use parallel algorithm big set independ part limit number node use comput time variou part may vari load equal distribut among node mani problem may parallel method may also parallel use managerwork approach practic method often use avoid load balanc problem shell user request process differ node comput time request vari greatli parallel user interfac figur 4 use set worker process subsequ solv one queri worker request piec work manag pro cess manag respond request next user queri whenev one worker finish job send result back manag receiv new queri allow user make queri without wait result detail spawn set worker init worker manag process whenev worker idl send request new work mmexprresult tupl empti variabl merger combin individu request worker singl stream connect mana ger whenev manag get new input comput fmexprmresg find worker request new work send work correspond worker exprmexpr return locat result ioprocess resmr worker may comput user quest soon readi result sent directli ioprocess new request work sent manag actual implement kmaplek user terfac may also describ depend parallel task parallel user interfac advantag user may type one queri never block wait result one give object valu perform gain user interfac soon one type queri faster whole system solv one gain linear speedup subject perform due non block behavior much higher measur tell give signific speedup problem solv capac 5 conclus show usag system parallel algorithm symbol comput simpl eleg way sever program techniqu given develop parallel algorithm found even quick parallel possibl get linear speedup long enough inher parallel grain size larg enough due high level approach use kmaplek could keep algorithm portabl across differ parallel architectur sinc kmaplek avail mani parallel comput rang share memori system sever distribut memori system workstat network abl develop algorithm one machin architectur test differ other without modif util whole sequenti librari mapl enabl us parallel rather complic algorithm variou test found main problem achiev high speedup find proper divis strategi algorithm exploit inher parallel algorithm symbol comput effici 50 percent may success result util coars grain parallel actual commun time system minor influenc perform current interfac use string commun introduc small linear overhead pars pars transfer exampl factori 1000 2568 digit long number strand mapl back requir approxim 03 sec i386 pro cessor wherea squar number mapl requir around 3 second independ oper sequenti mapl kernel larg enough cover overhead pars express string suitabl inter later releas use linear form intern data structur commun allow finer granular also investig variou algorithm detail tri find better parallel strategi better effici r exampl solv system algebra equat calcul grobner base ein algorithmu zum auffinden der basiselement de restklassenring nach einem nulldimensionalen polynomid algorithm find basi residu class ring zerodimension polynomi ideal german design mapl compact progress report system generalpurpos parallel symbol algebra compu tation real zero polynomi ian foster stephen tay lor paclib user manual parallel sac2 base thread concurr prolog parallel grobner base comput kmaplek bound parallel comput algebra tr real zero polynomi exampl solv system algebra equat calcul groebner concurr prolog collect paper progress report system generalpurpos parallel symbol algebra comput new concept parallel program design mapl ctr wolfgang schreiner christian mittermai karoli bosa distribut mapl parallel comput algebra network environ journal symbol comput v35 n3 p305347 march