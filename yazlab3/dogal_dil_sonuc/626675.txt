effici instruct sequenc inlin target insert inlin target insert specif compil pipelin implement method delay branch squash defin method shown offer two import featur discov previou studi first branch insert branch slot correctli execut second execut return correctli interrupt except one program counter two featur result better perform less softwarehardwar complex convent delay branch mechan b introduct instruct sequenc mechan processor determin instruct fetch memori system execut absenc branch instruct instruct sequenc mechan keep request next sequenti instruct linear memori space research support nation scienc foundat nsf grant mip8809478 dr lee hoevel ncr joint servic engin program jsep contract n0001490j1270 nation aeronaut space administr nasa contract nasa nag 1613 cooper illinoi comput laboratori aerospac system softwar iclass offic naval research contract n0001488k0656 w w hwu depart electr comput engin univers illinoi urbana champaign illinoi 61801 3 p p chang intel corpor 5200 ne elam young parkway hillsboro 97124 work present paper conduct depart electr comput engin univers illinoi urbanachampaign illinoi 61801 sequenti mode easi maintain steadi suppli instruct execut branch instruct howev disrupt sequenti mode instruct sequenc without special hardwar andor softwar support branch significantli reduc perform pipelin processor break steadi suppli instruct pipelin 26 mani hardwar method handl branch pipelin processor studi 39289291710 import class hardwar method call branch target buffer branch target cach use buffer extra logic detect branch earli stage pipelin predict branch direct fetch instruct accord predict nullifi instruct fetch due incorrect prediction28 branch target buffer adopt mani commerci processor 2816 perform hardwar method determin abil detect branch earli predict branch direct accu rate high branch predict accuraci 8590 hit ratio report hardwar methods392829 anoth advantag use branch target buffer requir recompil binari translat exist code howev hardwar method suffer disadvantag requir larg amount fast hardwar effective2820 effect also sensit frequenc context switch 28 compilerassist method also propos handl branch pipelin processor tabl list three method delay branch popular method absorb branch delay microsequenc microprogram microengin techniqu also adopt mani recent processor architectur includ ibm 80137 stanford mips14 berkeley risc 33 hp spectrum 3 sun sparc 43 mip r2000 25 motorola 8800030 amd 290001 approach instruct slot immedi branch reserv delay slot branch number delay slot larg enough cover delay evalu branch direct compiletim delay slot follow branch fill instruct independ branch direct data control depend allow code movement13 regardless branch direct instruct delay slot alway execut mcfarl hennessi report first delay slot success fill compil approxim 70 branch second delay slot fill 25 time29 clear delay branch effect processor requir one slot anoth compilerassist method call delay branch squash adopt recent processor complement delay branching291583023 method use compil complet fill delay slot delay branch scheme number slot branch still larg enough cover branch delay howev instead move independ instruct branch delay slot compil fill slot predict successor branch actual branch direct differ predict instruct branch slot scratch squash nullifi pipelin least expens side hardwar predict condit branch either alway taken stanford mipsx 8 alway nottaken motorola 88000 30 predict instruct taken achiev 65 accuraci wherea predict nottaken 11 predict branch either taken taken limit perform delay branch squash furthermor fill branch slot predictedtaken branch requir code copi gener predict branch taken result larg amount code expans mcfarl hennessi propos profil delay branch squash scheme execut profil use collect dynam execut behavior program prefer direct branch29 profil inform use compiletim code restructur predict branch direct fill branch slot accord predict order allow branch predict differ addit bit indic predict direct requir branch opcod general23 bit compil convey predict decis hardwar mcfarl hennessi also suggest method avoid ad predict bit branch opcod use pipelin one two branch slot mcfarl hennessi show method offer compar perform hardwar method much lower hardwar cost suggest stabil use execut profil inform compiletim code restructur evalu paper examin extens mcfarl hennessi idea processor employ deep pipelin multipl instruct issu techniqu increas number slot branch result four issu aris first 3 5 instruct branch static program see section 42 order fill larg number slot order ten one must abl insert branch branch slot question aris regard correct execut branch branch slot second state inform branch instruct instruct pipelin becom larg brute forc implement return interrupt except involv savingrestor larg amount state inform instruct sequenc mechan third code expans due code restructur larg import control code expans without sacrif perform fourth time penalti refil instruct fetch pipelin due incorrectli predict branch larg import show extens empir result perform stabil use profil inform compiletim code restructur first three issu address mcfarl hennessi 29 second issu address previou studi hardwar support precis interrupt 18 40 order address issu specifi compil pipelin implement method delay branch squash refer method inlin target insert reflect fact compil restructur code insert predict successor branch sequenti locat base specif show method exhibit desir properti simpl compil hardwar implement clean inter ruptexcept return moder code expans high instruct sequenc effici also provid proof inlin target insert correct correct proof fill branch slot branch instruct also applic previous propos hardwar scheme 34 paper organ five section section 2 present background motiv inlin target insert section 3 defin compil pipelin implement prove correct propos implement suggest clean method return interrupt except section 4 provid empir result code expans control instruct sequenc effici section 5 offer conclud remark regard costeffect applic inlin target insert background motiv 21 branch instruct branch instruct reflect decis made program algorithm figur 1a show c program segment find largest element array two major decis algorithm one decid element visit decid current element larger one visit far regist allocationassign assumpt figur 1b machin languag program gener given figur 2 three branch machin languag program instruct ensur loop condit check first iter instruct check loop iter instruct f determin current array element larger other visit far simplifi view machin languag program figur 2 highlight effect branch arc correspond branch head arc target instruct percentag arc indic probabl correspond branch occur execut percentag deriv program analysi andor execut profil percentag arc greater 50 correspond like branch otherwis correspond unlik branch instruct shown figur 2a static instruct instruct gener compil machin languag programm program execut static instruct execut multipl time due loop time static instruct execut gener dynam instruct dynam branch instruct redirect instruct fetch call taken branch 22 instruct sequenc pipelin processor problem instruct sequenc pipelin processor due latenc decod andor execut branch simpl hardwar exampl suffic illustr problem instruct sequenc pipelin processor processor shown figur 3 divid four stage instruct fetch instruct decod id instruct execut ex result writeback wb instruct sequenc logic implement ex stage sequenc pipelin consist id ex stage processor pipelin compareandbranch 4 instruct process ex stage 5 instruct sequenc logic determin next instruct fetch memori system base comparison result dynam pipelin behavior illustr time diagram figur 4 vertic dimens give clock cycl horizont dimens pipelin stage cycl time diagram indic pipelin stage instruct found pipelin fetch instruct sequenti memori branch encount figur 4 instruct execut direct branch known cycl 7 time instruct j k alreadi enter pipelin therefor cycl 8 instruct e enter pipelin j k scratch nonproduct cycl introduc incorrectli fetch j k reduc throughput pipelin 23 deep pipelin multipl instruct issu rate instruct execut equal clock frequenc time number instruct execut per clock cycl one way improv instruct execut rate increas clock frequenc pipelin stage longest delay critic path limit clock frequenc therefor subdivid stage potenti increas clock frequenc improv overal perform add stage pipelin creat deeper pipelin exampl instruct cach access instruct execut limit clock frequenc subdivid stage may improv clock frequenc time diagram result pipelin shown figur 5 four instruct scratch compareandbranch redirect instruct fetch exampl 2 may scratch 1 redirect instruct fetch anoth method improv instruct execut rate increas number instruct execut per cycl done fetch decod execut multipl instruct per cycl often refer multipl instruct issu 44 12 27 31 32 19 35 36 time diagram pipelin shown figur 6 exampl two 4 although compareandbranch instruct assum exampl method paper appli condit code branch well 5 although uncondit branch instruct redirect instruct fetch id stage ignor optim exampl simplic instruct fetch per cycl compareandbranch 1 reach ex stage five instruct may scratch pipelin 6 far instruct sequenc concern multipl instruct issu effect deep pipel result increas number instruct may scratch branch redirect instruct fetch 7 combin deep pipelin multipl instruct issu increas number instruct scratch rel larg number exampl tandem cyclon processor requir 14 branch slot due deep pipelin multipl instruct issue16 8 discuss paper distinguish deep pipelin multipl instruct issu base number instruct scratch branch 3 inlin target insert inlin target insert consist compiletim code restructur algorithm runtim pipelin instruct fetch algorithm compiletim code restructur algorithm transform sequenti program p parallel program p p inlin target insert correct instruct sequenc gener execut p p pipelin instruct fetch unit ident gener execut p sequenti instruct fetch unit section first formal defin sequenti instruct fetch algorithm formal defin code restructur algorithm pipelin instruct fetch algorithm inlin target insert formal model implement deriv proof correct 31 sequenti instruct fetch sequenti instruct fetch unit defin dynam instruct cycl address refer target instruct branch instruct refer targeti next sequenti instruct branch instruct 6 number instruct scratch pipelin depend instruct align i2 rather i1 branch four instruct would scratch 7 differ multipl instruct issu deep pipelin multipl like control transfer instruct could issu one cycl handl multipl like control transfer instruct per cycl multipl instruct issu processor difficult inlin target insert detail within scope paper 8 processor current employ extens instruct cach approxim effect branch target buffer cope branch problem refer fallthrui sequenti instruct fetch algorithm sif shown algorithm sif begin taken branch els correct successor dynam instruct defin dynam instruct execut specifi sif k th correct successor denot csi k note csi k sequenti program p whose execut start instruct 0 instruct sequenc 0 n first termin instruct 32 compil implement compil implement inlin target insert involv compiletim branch predict code restructur branch predict mark static branch either like unlik predict base estim probabl branch redirect instruct fetch run time probabl deriv program analysi andor execut profil predict encod branch instruct predict successor ps instruct instruct tend execut definit predict successor complic frequent occurr branch refer k th predict successor predict successor instruct defin recurs 9 discuss address arithmet term instruct word exampl address address1 advanc address next instruct 1 like branch psi 1 targeti otherwis psi 1 fallthrui 2 1 exampl one identifi first five predict successor f figur 2 shown sinc f like branch first predict successor target instruct h second predict successor f like branch thu third predict successor f target instruct e code restruct algorithm inlin target insert shown also illustr figur 7 algorithm itin begin 1 open n insert slot everi like branch 10 2 like branch adjust target label address psi 1 address psi 3 like branch copi first n predict successor psi 1psi 2 slot 11 insert instruct branch make sure branch target copi 12 possibl extend proof nonuniform number slot pipelin detail scope paper step perform iter first iter first predict successor like branch determin insert subsequ iter insert one predict successor like branch take n iter insert target instruct assign slot 12 trivial code restructur work assembl code case branch target specifi label assembl automat gener correct branch offset insert branch goal iti ensur origin instruct find predict successor next sequenti locat achiev insert predict successor like branch next sequenti locat refer slot open iti algorithm insert slot instead tradit term delay slot squash delay slot insert slot associ like branch instruct insert slot duplic copi other origin differ term delay slot squash delay slot usual mean often refer sequenti locat like unlik branch contain origin well duplic copi figur 8 illustr applic part machin program figur 2 step 1 open two insert slot like branch f step 2 adjust branch label f branch h branch 2 step 3 copi predict successor f h e f insert slot f h 0 0 ie 0 f 0 note offset adjust 0 f 0 branch target instruct f reader encourag appli code insight algorithm inlin target insert instruct may duplic multipl locat fore instruct may fetch one sever locat origin address dynam instruct address origin copi fetch address f dynam instruct address fetch figur 8 origin address 0 address fetch address 0 individu address note move fallthrui like branch origin address 33 sequenc pipelin implement sequenc pipelin divid n 1 stage sequenc pipelin process instruct fetch order instruct delay due condit sequenc pipelin eg instruct cach miss instruct sequenc pipelin delay includ instruct ahead one delay net effect entir sequenc pipelin freez ensur rel pipelin time among instruct accur expos 1to compil guarante branch redirect instruct fetch instruct insert slot enter sequenc pipelin note restrict appli instruct sequenc pipelin instruct execut pipelin eg data memori access float point evalu still proceed instruct sequenc pipelin freez definit time instruct sequenc separ freez cycl execut cycl freez cycl affect rel time among instruct sequenc pipelin paper cycl refer th cycl program execut exclud freez cycl ik defin dynam instruct k th stage sequenc pipelin cycl implement keep array fetch address instruct sequenc pipelin fetch address instruct stage cycl refer f hardwar function ref ill 13 provid reload instruct fetch pipelin origin address ref ill call program startup incorrect branch predict return interruptexcept easi guarante program startup address origin address show next subsect appropri origin address program resum incorrect branch predict interruptexcept handl alway avail ref illpc begin f pipelin instruct fetch algorithm pif implement hardwar shown sequenc pipelin fetch instruct sequenti default branch 13 refil exclud account time prove correct inlin target insert refil may physic implement load initi address af i1 subsequ comput af refil includ account time evalu perform inlin target insert section 4 redirect instruct fetch andor scratch subsequ instruct reach end sequenc pipelin branch redirect instruct fetch next fetch address adjust target address determin algorithm decis branch incorrectli predict scratch subsequ instruct sequenc pipelin algorithm p n begin branch f els like taken f els unlik taken f els unlik taken els like taken figur 9a show time diagram execut instruct sequenc e machin program figur 8a inlin target insert figur 8e instruct sequenc becom case branch decis f predict correctli compil time f reach ex stage cycl 4 instruct scratch pipelin sinc f redirect instruct fetch instruct fetch stage cycl 5 e 0 adjust target f rather next sequenti instruct g figur 9b show similar time diagram execut instruct sequenc g inlin target insert instruct fetch sequenc becom case branch decis f predict incorrectli compil time f reach ex stage cycl 4 instruct h 0 0 scratch pipelin sinc f redirect instruct fetch instruct fetch pipelin refil next sequenti instruct g 34 correct implement branch central issu inlin target insert without branch sequenc pipelin would simpli fetch instruct sequenti instruct emerg sequenc pipelin would correct sequenc therefor correct proof compil pipelin implement focu correct execut branch pipelin mani slot highli probabl branch insert insert slot see section 42 case branch insert slot correct follow descript iti algorithm branch instruct would origin would first predict successor next n sequenti locat wherea branch instruct insert slot n predict successor next n sequenti locat exampl figur 8e question aris regard correct execut f 0 f 0 redirect instruct fetch know result instruct sequenc alway equival correct sequenc f insert correct instruct sequenc gener n first stop instruct shall prove instruct sequenc issu p p p ident sif p unfortun difficult compar output pif sif step step basi first identifi suffici condit pif p p gener instruct sequenc sif p show condit guarante inlin target insert help reader read follow lemma theorem list import term tabl 2 defin two equal relat state variabl instruct fetch pipelin theorem 1 state two equal relat suffici ensur correct inlin target insert theorem 1 rt st true proof theorem prove induct induct basi definit ref ill induct step assum p true show case 1 incorrectli predict branch accord p in1 impli 1 correctli predict instruct equal csin 1 henc case 2 unlik taken pif perform accord definit ref ill csin1 1 henc in1 case 3 like taken pif perform accord definit ref ill 1 like branch alloc n insert slot taken csin note like branch origin copi fallthruin alway accord iti therefor aoin argument refil theorem 1 show rt st suffici ensur correct execut therefor formul next theorem ultim correct proof inlin target insert theorem 2 pif ensur rt st true theorem 2 standard induct proof start prove r0 s0 true show rt st true rt1 st1 also true pif complex algorithm need consid sever case step proof instead present proof whole first present sever lemma proof theorem 2 natur follow perform time entri true proof ensur origin instruct find n predict successor next n sequenti address rt natur follow definit refil impli definit refil therefor show refil instruct fetch pipelin origin address ensur rt1 st1 true instruct sequenc pipelin initi 0 entri point program follow lemma 1 r0 s0 true proceed prove rt st true st 1 also true first prove case fetch origin address prove case fetch one duplic address lemma 2 rt st true f also true proof fetch origin address like branch need consid follow two case case 1 branch unlik branch taken pif perform f ad 1 side st result f alloc insert slot like branch like branch origin address must adjac word true case 2 unlik branch taken pif perform ref correct st lemma 1 note origin therefor legal address refillth case fetch insert slot fairli difficult prove first prove intermedi lemma lemma 3 f 1 must k satisfi follow four condit like branch 3 like branch inclus 4 incorrectli predict branch inclus proof fetch origin address must fetch insert slot therefor must least one like branch among n instruct fetch 1 one fetch closest 1 2 3 prove 4 contradict assum incorrectli predict branch inclus ref ill perform origin address like branch inclus must fetch origin address contradict precondit lemma f therefor assumpt incorrectli predict branch truelemma 4 f st true also true proof use k found lemma 3 case 1 like branch case p perform f impli 1 pif perform f case 2 1 like branch pif perform f 2 like branch 3 like branch inclus 1 2 3 f 5 like branch inclus 4 5 f could includ case 2 proof separ two case make proof clear lemma 2 lemma 4 collect ensur si ri true also true proceed show rt 1 also true lemma 5 rt st st 1 true rt 1 also true proof case 1 incorrectli predict branch case pif perform refil lemma 1 ensur ii refil remain shown argument ref ill origin address 1 unlik branch argument refil origin address like branch argument ref ill f 1 accord like branch iti ensur case 2 incorrectli predict branch 1 lemma 2 lemma 4 f 2 accord origin instruct find predict successor next sequenti instruct therefor must psin place 3 incorrectli predict branch p perform f 1n f therefor rt impli ii 2 3 rt 1 trueproof theorem 2 induct follow lemma 1 r0 s0 true lemma 2 lemma 4 lemma 5 rt st true rt also true 35 interruptexcept return problem interruptexcept return aris interrupt except occur instruct insert slot exampl assum execut code figur 8e involv instruct sequenc branch f correctli predict taken question h 0 caus page fault much instruct sequenc inform must save process resum properli page fault handl one save address h 0 inform f taken lost sinc h 0 branch hardwar would assum 0 execut h 0 sinc 0 like branch taken hardwar would incorrectli assum g h resid insert slot 0 instruct execut sequenc would becom incorrect problem resum execut h 0 violat restrict empti sequenc pipelin alway start fetch origin instruct hardwar inform h 0 first branch slot f f taken page occur interrupt except occur instruct insert slot branch mani like branch slot problem solv simpli rememb branch decis one previou branch popular solut problem save previou n fetch address plu fetch address reentri instruct except return n use reload correspond instruct restor instruct sequenc state except disadvantag solut increas number state pipelin control logic therefor slow circuit problem becom sever pipelin larg number slot inlin target insert interruptexcept return instruct correctli perform avail form f theorem 2 one record origin address deliv instruct execut unit guarante origin address instruct activ execut unit avail therefor interruptexcept occur instruct processor save origin address instruct return address lemma 1 ensur rt true ref ill origin address figur show effect except sequenc pipelin figur 10a show time correct instruct sequenc figur 8e without except figur 10b show time except h 0 h 0 reach end sequenc pipelin ex stage availbl form f i1 2 address maintain hardwar h 0 finish execut 16 except detect save return address except return sequenc pipelin resum instruct fetch h origin copi h 0 note instruct sequenc produc h equival one without except note origin copi must preserv guarante clean implement inter ruptexcept return figur 8e normal control transfer alway enter section opportun remov e f inlin target insert reduc code size ever would prevent clean interruptexcept return one occur e 0 f 0 section 42 present altern approach reduc code expans 36 extens outoford execut inlin target insert extend handl instruct sequenc outoford execut machin 46 47 45 18 19 41 major instruct sequenc problem outoford execut machin indetermin time deriv branch condit target address feasibl gener design effici sequenc pipelin branch alway condit target address end sequenc pipelin allow effici outoford execut sequenc pipelin must allow subsequ instruct proceed whenev possibl make inlin target insert correct proof applic outoford execut machin follow chang made pipelin implement 1 sequenc pipelin design long enough identifi target address programcounterrel branch whose target address deriv without interlock 2 branch reach end sequenc pipelin follow condit may occur real origin address calcul except detect one simpli save af i1 calcul aoin except actual occur avoid requir extra subtractor sequenc pipelin branch like one target address avail yet case sequenc pipelin freez interlock resolv b branch unlik one target address yet avail case sequenc pipelin proce subsequ instruct extra hardwar must ad secur target address becom avail recov incorrect branch predict execut pipelin must also abl cancel effect subsequ instruct emerg sequenc pipelin reason c branch condit yet avail case sequenc pipelin proce subsequ instruct extra hardwar must ad secur repair address recov incorrect branch predict execut pipelin must abl cancel effect subsequ instruct emerg sequenc pipelin reason branch program counter rel predict altern address avail end sequenc pipelin differ origin sequenc piplin model condit might deriv later sinc hardwar secur altern address sequenc state properli recov incorrectli predict branch branch target address deriv runtim data target address like branch may unavail end sequenc pipelin freez sequenc pipelin specif ensur theorem hold case unlik branch target address altern address sequenc pipelin proceed long altern address secur becom avail therefor proof hold outoford execut machin experiment code expans cost instruct sequenc effici inlin target insert evalu empir section report experiment result base set product qualiti softwar unix 17 cad domain purpos show inlin target insert 17 unix trademark att effect method achiev high instruct sequenc effici pipelin processor experi base instruct set architectur close resembl mip r2000300025 modif accommod inlin target insert impacti c compil optim c compil develop deep pipelin multipl instruct issu univers illinoi use gener code experi 42167 41 benchmark tabl 3 present benchmark chosen experi c line column describ size benchmark program number line c code count comment run column show number input use gener profil databas perform measur input descript column briefli describ natur input benchmark input realist repres typic use benchmark exampl grammar c compil lisp interpret two ten realist input bison yacc twenti file sever product qualiti c program rang 100 3000 line input cccp program twenti origin benchmark input form input espresso experiment result report base mean sampl deviat program input combin shown tabl 3 use mani differ real input program intend verifi stabil inlin target insert use profil inform impacti compil automat appli trace select placement remov unnecessari uncondit branch via code restructur 46 42 code expans problem code expans frequent occurr branch program insert target instruct branch add n instruct static program figur 8 target insert f increas size loop 5 9 instruct gener q probabl static instruct like branch among benchmark inlin target insert potenti increas code size n q 180 one may argu origin insert instruct may delet save space flow control allow shown howev preserv origin crucial clean return except insert slot see section 35 larg code expans significantli reduc effici hierarch memori system problem code expans must address pipelin larg number slot tabl 4 show static control transfer characterist benchmark static cond static uncond column give percentag condit uncondit branch among static instruct program number present tabl 4 confirm branch appear frequent static program show need abl insert branch insert slot see section 34 high percentag branch suggest code expans must care control benchmark simpl solut reduc number like branch static program use threshold method condit branch execut fewer number time threshold valu automat convert unlik branch uncondit branch instruct execut fewer number time threshold valu also convert unlik branch whose branch condit alway satisfi method reduc number like branch cost perform degrad similar idea implement ibm second gener risc architecture2 exampl two like branch b program execut 100 time redirect instruct fetch 95 time b execut 5 time redirect instruct fetch 4 time mark b like branch achiev correct branch predict 99 954 time total 105 1005 code size increas 2 n sinc b execut nearli frequent one mark b unlik branch case accuraci branch predict reduc 96 951 time 105 code size increas n therefor larg save code expans could achiev cost small loss perform idea static like branch caus amount code expans execut frequenc may vari wide therefor revers predict infrequ execut like branch reduc code expans cost slight loss predict accuraci confirm result shown tabl 5 threshold column specifi minimum dynam execut count per run like branch convert unlik branch eq column list mean percentag like branch among instruct sdq column indic sampl deviat code expans pipelin n slot n eq exampl threshold valu 100 one expect 22 increas static code size without code expans control threshold0 static code size increas would 362 sequenc pipelin anoth exampl 11stage sequenc pipelin threshold valu 100 one expect 11 increas static code size code expans control threshold0 static code size increas would 181 sequenc pipelin note result base control intens program code expans cost much lower program simpl control structur scientif applic 43 instruct sequenc effici problem instruct sequenc effici concern total number dynam instruct scratch pipelin due dynam branch sinc insert slot insert predict successor cost instruct sequenc function n branch predict accuraci key issu whether accuraci compiletim branch predict high enough ensur instruct sequenc effici remain high larg valu n evalu instruct sequenc effici inlin target insert straighforward one profil program find frequenc dynam instanc branch go one possibl direct branch predict go one direct frequenc branch go direct contribut frequenc incorrect predict note correct dynam instruct reach end sequenc pipelin branch execut therefor frequenc execut incorrectli predict branch affect inlin target insert figur 11a execut frequenc f 100 e f redirect instruct fetch 80 99 time respect mark f like branch predict correctli 179 time 200 21 dynam branch incorrectli predict sinc incorrectli predict dynam branch creat n nonproduct cycl sequenc pipelin know instruct frequenc cost 21n note number chang inlin target insert figur 11b show code gener iti2 although know exactli mani time f f 0 execut respect know total execut count 100 also know total number incorrect predict f f 0 20 therefor instruct sequenc cost figur 11b deriv count incorrect predict figur 11a multipli n let p denot probabl dynam instruct incorrectli predict note probabl calcul dynam instruct includ branch non branch averag instruct sequenc cost estim follow equat rel sequenc cost per instruct peak sequenc rate 1k cycl per instruct actual rate would 1 cycl per instruct 19 tabl 4 highlight dynam branch behavior benchmark dynam cond dy namic uncond column give percentag condit uncondit branch among dynam instruct measur dynam percentag branch confirm branch handl critic perform processor larg number branch slot exampl 20 dynam instruct bison branch p valu program branch predict miss ratio time 20 assum sequenc pipelin peak sequenc rate one cycl per instruct three slot 3 requir predict accuraci achiev sequenc rate 11 cycl per instruct calcul follow predict accuraci must least 833 tabl 6 provid mean sampl deviat p spectrum threshhold averag benchmark increas threshhold effect convert branch unlik branch 2 rel sequenc cost per instruct 1036 per instruct threshhold equal zero optim sequenc pipelin whose peak sequenc rate one instruct per cycl mean sustain rate 1036 cycl per instruct sequenc pipelin sequenc k instruct per cycl translat 1036k 518 formula provid measur effici instruct sequenc take extern event instruct miss account sinc extern event freez sequenc pipelin one simpli add extra freez cycl formula deriv actual instruct fetch rate cycl per instruct threshhold set 100 rel sequenc cost per instruct 104 10 rel sequenc cost per instruct 118 threshhold equal zero optim threshhold set 100 sequenc cost per instruct instruct becom 120 compar tabl 5 tabl 6 obviou convert infrequ execut branch unlik branch reduc code expans littl cost instruct sequenc effici 5 conclus defin inlin target insert costeffect instruct sequenc method extend work mcfarl hennessy29 compil pipelin implement offer two import featur first branch freeli insert branch slot instruct sequenc effici limit sole accuraci compiletim branch predict second execut return interruptionexcept program one singl program counter need reload sequenc pipelin state inform two featur make inlin target insert superior altern better perform less softwarehardwar complex convent delay branch mechan inlin target insert implement impacti c compil verifi compil implement complex softwar implement simpl straightforward impacti c compil use experi report paper code expans control method also propos includ impacti c compil implement code expans instruct sequenc effici inlin target insert measur unix cad program experi involv execut billion struction size program varieti program varieti input program significantli larger use previou experi overal compiletim branch predict accuraci 92 benchmark studi pipelin requir 10 branch slot fetch two instruct per cycl translat effect instruct fetch rate 06 cycl per instructionse section 43 order achiev perform level report paper instruct format must give compil complet freedom predict direct static branch easili achiev new instruct set architectur could also incorpor exist architectur upward compat featur straightforward compar perform inlin target insert branch target buffer pipelin perform determin branch predict accuraci hwu cont chang20 perform direct comparison inlin target insert branch target buffer base similar set benchmark conclus without context switch branch target buffer achiev instruct sequenc effici slightli lower inlin target insert context switch could significantli enlarg difference28 branch target buffer advantag binari compat exist architectur code expans inlin target insert advantag requir extra hardwar buffer better perform perform insensit context switch result paper suggest inlin target insert alway superior branch target buffer rather contribut show inlin target insert costeffect altern branch target buffer perform major concern achiev good perform deep pipelin multipl instruct issu compil complex inlin target insert simpl enough major concern either proven impacti c compil implement cost fast hardwar buffer context switch major concern binari code compat code size branch target buffer use otherwis inlin target insert employ better perform characterist lower hardwar cost acknowledg author would like thank michael loui guri sohi nanci warter sadun anik thoma cont member impact research group support comment sugg tion also like thank anonym refere comment extrem help improv qualiti paper research support nation scienc foundat nsf grant mip8809478 dr lee hoevel ncr joint servic engin program jsep contract n0001490j1270 nation aeronaut space administr nasa contract nasa nag 1613 cooper illinoi comput laboratori aerospac system softwar iclass offic naval research contract n0001488k0656 r am29000 streamlin instruct processor advanc informa tion ibm secondgener risc machin organ beyond risc high precis architectur trace select compil larg c applic program microcod forward semant compilerassist instruct fetch method heavili pipelin processor control flow optim supercomput scalar pro cess aggress code improv techniqu base control flow analysi architectur tradeoff design mipsx evalu branch architectur branch fold crisp microprocessor reduc branch delay zero character processor perform vax11780 percol code enhanc parallel dispatch execut optim delay branch mip vlsi processor architectur design decis spur multipl instruct issu nonstop cyclon processor highli concurr scalar process checkpoint repair high perform outoford execut machin exploit concurr achiev high perform singlechip microar chitectur compar softwar hardwar scheme reduc cost branch inlin function expans compil realist c pro gram effici instruct sequenc inlin target insert i860tm 64bit microprocessor avail instructionlevel parallel superscalar superpipelin machin mip r2000 risc architectur architectur pipelin comput number oper simultan execut fortranlikeprogram result speedup branch predict strategi branch target buffer design reduc cost branch design 88000 risc famili measur parallel avail long instruct word architectur hp new microarchitectur rational introduct vlsi risc wisq restart architectur use queue multipl instruct issu singlechip processor perform potenti multipl function unit processor 801 minicomput espressomv algorithm multiplevalu logic minim studi branch predict strategi implement precis interrupt pipelin processor limit multipl instruct issu tradeoff instruct format design horizont ar chitectur sparctm architectur manual detect parallel execut independ instruc tion instruct issu approach enhanc perform multipl function unit processor effici algorithm exploit multipl arithmet unit instruct issu logic pipelin supercomput tr design decis spur instruct issu approach enhanc perform multipl functin unit processor highli concurr scalar process reduc cost branch hp new microarchitectur rational introduct branch fold crisp microprocessor reduc branch delay zero wisq restart architectur use queue architectur tradeoff design mipsx checkpoint repair highperform outoford execut machin perform potenti multipl function unit processor trace select compil larg c applic program microcod multipl instruct issu singlechip processor tradeoff instruct format design horizont architectur avail instructionlevel parallel superscalar superpipelin machin limit multipl instruct issu inlin function expans compil c program compar softwar hardwar scheme reduc cost branch forward semant compilerassist instruct fetch method heavili pipelin processor control flow optim supercomput scalar process multipl instruct issu nonstop cyclon processor implement precis interrupt pipelin processor design 88000 risc famili optim delay branch 801 minicomput studi branch predict strategi character processor perform vax11780 hpsm ctr apoorv srivastava alvin despain prophet branch branch architectur code compact effici execut proceed 26th annual intern symposium microarchitectur p9499 decemb 0103 1993 austin texa unit state oliv rthing jen knoop bernhard steffen spars code motion proceed 27th acm sigplansigact symposium principl program languag p170183 januari 1921 2000 boston usa sofin tahar ramayya kumar practic methodolog formal verif risc processor formal method system design v13 n2 p159225 sept 1998