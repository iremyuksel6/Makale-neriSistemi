astoot approach test objectori program articl describ new approach unit test objectori program set tool base approach two case studi approach test case consist tupl sequenc messag along tag indic whether sequenc put object class test equival state andor return object equival state test execut send sequenc object class test invok usersuppli equivalencecheck mechan approach allow substanti autom mani aspect test includ test case gener test driver gener test execut test check experiment prototyp tool test gener test execut describ test gener tool requir avail algebra specif abstract data type test test execut tool use formal specif avail use test execut tool case studi involv execut ten thousand test case variou sequenc length paramet combin oper perform relationship among likelihood detect error sequenc length rang paramet rel frequenc variou oper investig prioriti queue sortedlist implement subtl error case long sequenc tend like detect error provid rang paramet suffici larg likelihood detect error tend increas threshold valu paramet rang increas b introduct objectori program base concept data abstract inherit dynam bind becom increasingli popular softwar develop methodolog much research done develop objectori analysi design techniqu develop objectori program languag explor methodolog research support part nsf grant ccr8810287 ccr9003006 new york state scienc technolog foundat perform first author polytechn univers author address depart comput scienc polytechn univers 6 metrotech center brooklyn ny 11201 email phyllismorphpolyedu chang softwar develop process yet rel littl research address question objectori program test develop new approach unit test objectori program base idea natur unit test class test class one focu question whether sequenc messag put object class test correct state approach roughli speak test case consist pair sequenc messag along tag indic whether sequenc result object abstract state test case execut send sequenc messag object class test invok usersuppli equival check routin check whether object abstract state compar result check tag test scheme sever nice properti ffl expect result test includ test case concis format one boolean independ class test facilit automat check test result ffl test driver differ class similar one anoth henc automat gener class interfac ffl algebra specif class test avail term rewrit use gener test case automat algebra specif avail person develop test case reason inform specif approach embodi prototyp test system astoot set tool objectori test includ interact specificationbas test case gener tool tool automat gener test driver class c astoot automat gener test driver turn automat execut test case check result addit algebra specif c avail astoot partial autom test gener thu system allow substanti autom entir test process current version astoot target test program written eiffel 1 throughout paper assum class test written eiffel ever underli idea tool adapt rel easili objectori languag section 2 paper review relev background materi softwar test objectori program algebra specif abstract data type section 3 describ idea underli astoot correct class implement abstract data type test case format test result check tool describ section 4 section 5 describ two case studi perform order gain insight gener good test case compar approach relat work section 6 note direct futur work section 7 1 eiffel trademark nonprofit intern consortium eiffel nice background 21 background softwar test test one timeconsum part softwar develop process increas autom test process could lead signific save time thu allow thorough test three aspect test process could potenti least partial autom test data gener test execut test check approach test objectori program involv three area perhap obviou opportun partial autom test gener test case order autom test gener necessari analyz formal object sourc code formal specif research autom test gener involv programbas whitebox techniqu ie techniqu base analysi sourc code program test howev whitebox test suffer certain limit inabl gener test case intend exercis aspect specif inadvert omit program blackbox specificationbas techniqu base analysi program specif overcom limit autom unless kind formal specif avail manual blackbox test gener techniqu base inform specif wide use practic test scheme describ paper blackbox approach automat formal algebra specif avail appli manual otherwis anoth area potenti autom construct test driver mani test method appli individu subprogram program unit test whole program input output usual set file unit test procedur function input output may includ valu paramet global variabl well valu read written file order test procedur necessari build driver program initi global variabl actual paramet appropri valu call procedur output final valu relev global paramet quit cumbersom initi input check valu output particularli unwieldi often case objectori program paramet complic type model describ test objectori program circumv problem anoth problem aris test softwar oracl problem run program p test case necessari check whether result agre specif p often nontrivi problem exampl great deal output difficult calcul correct valu 30 test method use novel approach allow correct test case check automat test execut system 22 overview objectori program objectori languag support abstract data type inherit dynam bind abstract data type entiti encapsul data oper manipul data objectori program programm write class definit implement abstract data type object instanc class creat dynam instanti oper often call new creat languag support inherit class organ direct acycl graph definit share reflect common behavior object relat class class consist interfac list oper perform object class bodi implement oper state object store instanc variabl sometim call attribut static variabl local object classs oper sometim call method objectori program comput perform send messag object messag invok one object method perhap argument invok method may modifi state object andor send messag object method complet execut return control case return result sender messag inherit mechan objectori languag facilit develop new class share aspect behavior old one descend subclass c class c inherit instanc variabl method c c may extend behavior c ad addit instanc variabl method andor special c redefin cs method provid altern implement dynam bind mechan use associ method object strongli type objectori languag legal assign object class c variabl class c viceversa messag sent object invok method associ class c exampl consid class polygon subclass triangl squar redefin polygon perimet method assign object class squar variabl class polygon send perimet messag invok squar perimet method allow construct polymorph data type exampl objectori languag includ smalltalk c eiffel 13 29 27 ada modula2 strictli speak objectori languag provid support data abstract thu idea discuss relev see 27 overview objectori approach 23 algebra specif abstract data type talk test class c must concept mean c correct thu must mean formal inform specifi entiti c intend implement state condit implement conform specif case c intend implement abstract data type algebra specif provid formal mean algebra specif syntact part semant part syntact part consist function name signatur type take input produc output algebra specif type function return valu type call observ provid way us queri content function return valu type call constructor transform 2 2 transform call extens 16 distinct constructor transform clarifi semant part specif consist list axiom describ relat function specif techniqu allow list precondit describ domain function other allow function return error valu indic function appli element outsid domain rewrit 24 use defin formal semant algebra specif 28 12 two sequenc 1 2 oper adt equival use axiom rewrit rule transform 1 2 3 specif model heterogen word algebra element equival class sequenc oper specif use must consist suffici complet 16 consist specif must contain contradictori axiom ie contradict deriv oper sequenc specif let w set contain oper sequenc consist constructor transform suffici complet everi sequenc w w result appli observ w defin discuss construct use algebra specif found 14 15 1 algebra specif languag use function notat conveni design specif languag loba whose syntax similar oo program languag syntax 6 syntact part loba specif includ export section list oper avail user adt loba design specif classifi oper three categori constructor transform observ classif process help design produc suffici complet specif facilit test gener scheme describ section 42 addit advantag notat point section 31 algebra specif prioriti queue loba function notat shown figur 1a figur 1b sequenc oper separ dot read left right exampl createadd5add3 repres result creat prioriti queue ad item 5 3 order accord specif createadd5add3delet equival createadd3 appli axiom 6 twice give createadd5add3delet createadd3 differ constructor transform becom clear point simplif complet constructor left oper sequenc role transform transform sequenc constructor anoth sequenc constructor note appear oper sequenc loba bear strong resembl trace specif data abstract specifi legal equival valu trace oper sequenc 3 20 21 two advantag trace specif 3 definit follow assumpt goguen 11 guttag 18 make opposit assumpt ie two sequenc may assum equival unless provabl inequival specif loba class prioriti queue export creat largest add delet empti eqn constructor creat add x integ transform delet observ empti boolean largest eqn b prioriti queue boolean var axiom 2 3 createlargest 4 aaddxlargest gamma alargest x els alargest 5 alargest els adeleteaddx 7 aempti bempti true els aempti bempti aempti bempti fals els alargest blargest adeleteeqnbdelet els fals b specif function notat type prioriti queue add prioriti queue theta integ delet prioriti queue gamma prioriti queue largest prioriti queue gamma eqn prioriti queue theta prioriti queue declar semant 1 2 3 4 els largesta 5 els adddeleteax 7 emptya emptyb true els emptya emptyb emptya emptyb fals els largest els fals figur 1 specif prioriti queue loba abil specifi function observ side effect abil handl oper sequenc intermingl procedur function howev axiom loba algebra languag facilit automat test case gener discuss section 42 3 selfcheck test case section describ main concept underli astoot includ notion correct class model test case execut test check mechan one earli paper specif data abstract 25 liskov zill point possibl specifi data abstract specifi intend inputoutput behavior oper individu usual cumbersom may lead overspecif underli represent data instead other 11 14 17 propos algebra specif abstract data type adt defin intend behavior adt give axiom describ interact oper similarli possibl test class test method individu treat function map input space output space select element input space examin output see correct howev shift focu test away essenc data abstract interact oper furthermor test method individu necessit construct complic driver output check mechan exampl test case add oper prioriti queue would consist prioriti queue item output would anoth prioriti queue thu driver would initi input prioriti queue check output would entail examin output prioriti queue see correct result contrast approach test class focus interact oper section restrict attent class intend implement adt requir 1 oper side effect paramet 2 function observ side effect 3 function observ appear last oper sequenc 4 sequenc pass paramet oper must contain function observ main reason place restrict 1 2 specifi kind side effect use either loba pure algebra languag reason behind restrict 3 sequenc mix function procedur syntact valid loba algebra specif languages26 restrict 4 make easier gener test case use astoot note restrict 4 hinder abil express test case involv paramet oper sinc function f side effect target object object messag sent target object sequenc sf observ equival target object techniqu relax restrict restrict 2 3 4 discuss 6 31 correct adt implement consid class c intend implement abstract data type function correspond method c input valu type function correspond send messag object class c eiffel constructor transform typic code procedur rather explicitli return object class c procedur return valu modifi state object ap pli observ code function explicitli return object anoth class refer object function procedur messag sent target object object return return object procedur target object return object though typic valu target object chang procedur call notic addit explicitli return object function also implicitli return target object function side effect free valu target object unchang function call syntax loba unlik function syntax algebra specif lan guag allow us differenti target return valu exampl sequenc createadd5add3largest final valu target prioriti queue whose element 5 3 return valu 5 say object 1 2 class c observ equival ffl c builtin class 1 2 ident valu ffl c userdefin class sequenc oper c end function return object class c 0 1 observ equival 2 object class c 0 thu 1 observ equival 2 imposs distinguish 1 2 use oper c relat class two observ equival object abstract state even though detail represent may differ exampl consid circular array implement firstinfirstout fifo queue two array contain element order would observ equival queue even though element could occupi differ portion underli array defin notion correct underli approach class c correct implement adt signaturepreserv map oper c ffl pair 1 sequenc oper 1 equival 2 correspond sequenc messag give rise observ equival return object word onetoon correspond abstract state abstract state c preserv transit abstract state note base definit return object definit correct demand oper sequenc consist entir constructor transform give rise observ equival target object oper sequenc end observ return observ equival object notion correct correspond specif methodolog also investig 3 11 18 8 definit base observ equival similar correspond trace specif 3 base limit algebra specif methodolog pragmat intuit appeal one lend conveni test strategi 32 test case format definit correct give rise natur way framework test infinit amount time way check whether two object observ equival could exhaust test class c follow ffl consid set u consist 3tupl 1 sequenc messag tag equival 1 equival 2 accord specif notequival otherwis ffl element u send messag sequenc 1 2 object 1 2 c respect check whether return object 1 observ equival return object 2 ffl observ equival check agre tag implement correct otherwis incorrect unfortun neither infinit amount time test foolproof way check observ equival nonetheless scheme suggest approach test demand c class return function c includ method call eqn approxim observ equival checker select element u test case addit shift emphasi test function individu method notion state approach test facilit autom mani aspect test process note element u view selfcheck test case test case includ inform form tag describ expect result execut furthermor format expect result singl boolean concis independ particular class test pair sequenc execut facilit autom execut check test case cours gener test case necessari consid specif adt order deriv tag either done semiautomat manipul formal specif describ section 4 manual reason formal inform specif exampl consid prioriti queue integ whose function describ inform follow creat creat empti prioriti queue add add integ prioriti queue delet remov largest element prioriti queue largest return valu largest element prioriti queue without modifi content prioriti queue empti determin whether prioriti queue empti reason inform specif person gener test case 1 createadd5add3deletecreateadd3equival 2 createadd5add3deletelargestcreateadd3largestequival 3 createadd5add3deletecreateadd5notequival 4 createadd5add3createadd3add5equival test case 1 say creat empti prioriti queue ad 5 3 appli delet creat empti prioriti queue ad 3 test case 2 say object return appli largest two prioriti queue equival test case 3 say creat empti prioriti queue add 5 3 delet creat empti prioriti queue add 5 test case 4 say prioriti queue obtain ad 5 ad 3 observ equival one obtain ad 3 ad 5 unlik previou three test case test case captur aspect inform specif express formal specif thu deriv formal specif use term rewrit 4 indic even formal specif partial describ intend semant adt avail manual gener addit test case may use refer test case consist pair sequenc along tag restrict format test case gener test case format use test class involv side effect dynam bind introduc 6 33 eqn method discuss eqn oper ideal eqn oper class c check whether two object 1 2 class c observ equival check whether sequenc messag end observ yield result sent 1 sent 2 sinc clearli imposs send everi messag sequenc object practic eqn approxim check observ equival 4 axiom aaddxaddi aaddyaddxwer ad specif aspect inform specif would captur howev result specif would longer satisfi finit termin condit often quit easi produc recurs version eqn specif c intend implement exampl axiom 7 figur 1 specifi eqn function base prioriti queue specif note actual approxim true observ equival neglect possibl effect build prioriti queue remov element thu might say two object equival 5 also sinc eqn call largest delet error one oper may propag eqn caus mask error hand error propag also help error detect demonstr section 51 anoth approach develop eqn function write implement level approach eqn base detail knowledg data repres manipul class bodi exampl know fifo queue repres link list one travers two list compar element gener suffici attent paid detail represent eqn implement observ equival exactli hand possibl misconcept lead implement error cs method may lead error eqn furthermor represent data structur write implementationlevel eqn oper may extrem difficult errorpron even method rel simpl also sometim possibl use coars approxim observ equival eqn function exampl might consid two fifo queue equival number element front element version eqn may consid two inequival object equival natur use coarser approxim observ equival lead less accuraci test result bernot et al 4 discuss close relat problem suggest oracl hypothesi explicitli state context approach test hypothesi would describ condit implement eqn equival actual check observ equival 4 tool astoot set tool base approach describ section 3 current prototyp handl test case restrict format three compon driver gener compil simplifi driver gener take input interfac specif class test cut relat class output test driver test driver execut read test case check syntax execut check result compil simplifi togeth form interact tool semiautomat gener test case algebra specif note algebra specif avail driver produc driver gener 5 exampl consid implement complet empti prioriti queue whenev total number add perform reach particular number n 2 recurs eqn would consid o1 createadd1add2delet equival o2createadd1 fact perform addit add follow delet object would leav o1 empti leav o2 nonempti use execut test case deriv person reason inform specif structur astoot illustr figur 2 screen dump astoot session shown figur 4 41 driver gener approach test lead rel simpl test driver oper read test case form 1 one time check sequenc syntact valid send sequenc 1 2 object 1 2 cut compar return object 1 2 eqn check whether valu return eqn agre tag hand driver complic enough write manual tediou errorpron task particular check syntact valid oper sequenc involv complic pars type check exampl driver prioriti queue class 400 line code count inherit class deal check syntax oper sequenc luckili driver test differ class similar one anoth structur allow us write tool driver gener automat gener test driver drivergener view specialpurpos parser gener base syntax describ class interfac gener test driver pars test case well execut check driver gener dg oper three phase first phase collect inform interfac cut ancestor class paramet type return type cut oper dg first check whether class export eqn oper 6 like eiffel implement languag facil select export let eqn export test driver integr implement preserv second phase dg build test driver class implement languag current version driver gener target eiffel 21 underli idea appli oo languag third phase dg compil execut test driver test case suppli user 42 test gener tool astoot test gener compon two part compil simplifi base intern represent call adt tree compil read specif written loba syntact semant check specif 7 translat axiom pair adt tree adt tree tree node repres oper along argument path root leaf adt tree repres possibl state adt branch adt tree aris axiom els express right 6 astoot access function hidden implement cut export function test driver gener astoot eiffel achiev select export test driver c achiev make test driver friend class cut 7 simplifi driver gener oper assumpt creat instanti oper compil make sure constructor name creat specif also simplifi insist first oper sequenc creat oper simplifi oe driver gener compil axiom compil test driver sourc compil driver origin sequenc implement cut algebra specif cut case figur 2 compon astoot figur 3 screen dump astoot session upper left window show execut test gener batch mode prioriti queue specif file pqseq contain initi sequenc suppli user test gener gener five test case base initi sequenc write along correspond constraint free variabl file pqsim constraint test case obtain conjoin condit test case negat condit previou test case upper right window show four test case user develop instanti free variabl valu satisfi constraint first gener test case unsatisfi constraint elimin user driver gener invok incorrect implement prioriti queue describ section 51 invok eiffel compil class test gener test driver class compil execut given test case first two test case detect bug second two lower left window show small portion test driver automat gener driver gener void addxm alargest alargest figur 4 axiom 6 prioriti queue adt tree form hand side edg adt tree boolean express call edg condit attach path condit path root leaf conjunct edg condit path indic condit oper sequenc path equival origin sequenc path condit given tree mutual exclus figur 4 illustr adt tree pair axiom 6 figur 1 clariti edg condit shown rectangl figur implement paramet oper operand boolean express repres adt tree simplifi input oper sequenc suppli user translat adt tree appli transform obtain equival oper sequenc process simplif follow 1 search axiom find axiom lefthand side match partial path adt tree ignor edg condit 2 axiom found bind variabl axiom proper argument partial path adt tree simplifi argument replac partial branch righthand side axiom 3 repeat step 1 2 match axiom worst case adt tree aris sequenc oper may path maximum number branch axiom deal complex current prototyp oper either batch mode build entir equival adt tree interact mode allow user select guid construct particular path tree order simplifi work properli set axiom specif must converg ie axiom must properti finit uniqu termin 28 properti finit termin ensur process simplif go infinit loop properti uniqu termin make sure two termin sequenc start oper sequenc result matter choic made axiom rewrit axiom appli first qk void creat creat addi creat void qk void creat delet addi figur 5 simplif sequenc createaddxaddydelet exampl involv batchmod simplif sequenc createaddxaddi delet prioriti queue shown figur 5 simplifi gener test case form createaddxaddydelet createaddx equival path condit x createaddxaddydelet createaddi equival path condit x note simplifi also suggest test case notequival tag instanc exchang path condit test case get follow test case createaddxaddydelet createaddx notequival constraint x createaddxaddydelet createaddi notequival constraint x adt tree n path simplifi gener n test case equival tag principl simplifi could also gener nn gamma 1 test case notequival tag n om length origin sequenc maximum number branch axiom mani case adt tree current version simplifi leav select test case user note test case gener simplifi contain symbol valu make accept test driver user resolv path condit constraint instanti symbol valu correspond actual valu principl could sometim done automat constraint solv system current prototyp constraint solv left user two import question remain one select origin sequenc input simplifi one select path result adt tree order increas likelihood expos error 5 case studi gain insight kind origin sequenc person use test gener tool select kind path adt tree gener interact mode perform two case studi involv gener mani test buggi prioriti queue implement buggi sortedlist implement choos prioriti queue adt knew suffici complic exhibit mani interest phenomena purpos introduc bug believ one could easili occur practic sortedlist base 23 tree implement graduat algorithm class bug slight variat one actual occur program develop wish gain insight follow question length origin sequenc affect likelihood test case detect error select paramet oper origin sequenc affect likelihood test case detect error ratio add delet origin sequenc affect likelihood test case detect error address question randomli gener execut sever thousand test case variou origin sequenc length variou rang paramet could lie variou frequenc occurr differ oper origin sequenc gener correspond simplifi sequenc execut test case origin sequenc simplifi sequenc equival note would extrem difficult execut check mani test case astoot selfcheck test case concept 51 test buggi implement prioriti queue case studi cut prioriti queue implement use heap bug delet oper 8 specif downheap sift oper perform delet offbyon error caus sometim fail swap bottom row erron delet code shown appendix 8 recal heap complet binari tree node greater equal children heap implement prioriti queue delet oper perform remov root replac rightmost leaf sift element proper posit ka origin b correct c incorrect figur illustr buggi prioriti queue figur 6 heap result sequenc createadd5add4add3 add2add1 b heap result appli correct delet c result heap incorrect delet appli note 1 fail swap 2 bottom row discuss section 33 sinc eqn call delet bug delet propag eqn even though origin sequenc test case createadd5add4add3 produc incorrect heap figur 6c eqn report origin sequenc simplifi sequenc equival due bug delet thu case error mask propag bug delet eqn hand consid test case createadd4add3add2add1 deletecreateadd3add2add1equival origin sequenc produc heap 3 root 1 root left child 2 root right child simplifi sequenc produc heap 3 root 2 root left child 1 root right child two heap correct observ equival howev check execut eqn check observ equival call erron delet routin first call delet origin heap 2 root 1 left child incorrect heap result simplifi sequenc 1 root 2 left child one call largest compar root eqn report two sequenc equival bug detect thu case propag error eqn help error detect order carri case studi need gener ten thousand test case principl could done use astoot test case gener randomli gener origin sequenc symbol valu paramet send origin sequenc simplifi gener test case would give o2 test case origin sequenc oper test case would symbol valu constrain path condit correspond path realist would randomli choos test case would randomli instanti symbol valu test case actual valu satisfi constraint test case either manual aid constraint solver note number test case need experi sever order magnitud larger number test case one would typic use practic test implement size order gener huge number test case effici broad rang test three variabl p r test set r use c program randomli gener test case actual valu three variabl rather use astoot test gener c program consist three modul first modul gener origin sequenc one time accord three paramet r number oper exclud creat origin sequenc paramet add integ rang r ratio add delet appear origin sequenc oper origin sequenc read second modul one time appli prioriti queue implement list third modul inspect content list gener simplifi sequenc output appropri test case note simplifi sequenc gener test case gener astoot instanti real valu satisfi constraint test set gener 1000 test case averag number add simplifi sequenc approxim 8 result prioriti queue case studi percentag test case expos bug test set shown figur 7 inspect graph show larg valu p paramet rang long origin sequenc better short one howev paramet rang small longer origin sequenc may wors shorter one fact result test set r 100103 r 100106 r 100109 worst respect despit fact long origin sequenc p paramet rang p increas test case tend get better howev case appear threshold error detect probabl level likelihood expos error depend somewhat r buggi implement failur occur necessari swap rightmost element bottom row heap appar long sequenc potenti like caus object enter state either applic origin simplifi sequenc propog error eqn oper howev simpli use long sequenc without regard paramet chosen could lead object never got interest state rang paramet valu small mani duplic heap item delet less like sift item strictli smaller element compar thu less like suppos swap bottom row number oper rang paramet p c e s103050ffl phi phi phi rang paramet p c e s103050ffl omega omega omega omega pi rang paramet p c e s103050ffl omega omega omega omega omega pi rang paramet p c e s103050ffl omega omega omega omega pi figur 7 result test prioriti queue use randomli gener test suit sort list without duplic element class sort list export creat add delet nb element find eqn constructor creat creat empti list addx integ x list add x list proper order transform deletei integ nb element delet ith element observ nb element integ number element list findi integ integ return valu ith element eqn sort list boolean equival list figur 8 specif sort list 52 test buggi implement sort list second case studi use abstract data type sort list integ six oper creat add delet find nb element eqn interfac precondit inform specif sortedlist shown figur 8 eqn oper compar length list compar elementbyel note use formal specif sort list test case gener use c program similar one case studi prioriti queue sort list implement use 23 tree special case btree implement approxim 1000 line eiffel 21 code buggi version produc delet one particular line correct version implement absenc statement affect state 23 tree follow situat occur 1 node figur 9a three children first child ff three children second child fi third child fl two children 2 one fl children delet c incorrect44 b correct origin figur 9 illustr buggi 23 tree exampl delet 6 fl 23 tree figur 9a correct procedur 1 copi 5 fi fl 2 delet 5 fi 3 copi 3 ff fi 4 delet 3 ff line miss buggi version step 4 procedur illustr figur 9 delet 6 get 23 tree c prioriti queue case studi test set randomli gener variou origin sequenc length variou paramet rang variou ratio add delet origin sequenc contain creat add delet oper simplifi sequenc contain creat add oper result sort list case studi result shown figur 10 exhibit similar phenomena discuss prioriti queue exampl sinc number element sortedlist equal rang paramet valu long sequenc oper larg rang paramet valu produc 23 tree larg number leav error program failur occur delet perform 23 tree particular kind state appar 23 tree larg number leav like enter state number oper rang paramet p phi phi phi rang paramet p theta theta theta theta theta theta theta theta phi phi phi pi rang paramet p phi phi phi rang paramet p figur 10 result test 23 tree use randomli gener test suit 53 discuss case studi case studi intend provid insight effect factor length origin sequenc rel frequenc differ oper origin sequenc rang paramet oper case studi result show long origin sequenc better short one provid rang paramet larg enough take advantag length addit differ ratio add delet origin sequenc gave differ result certainli want overgener two small exampl howev seem safe say potenti rel valu paramet would import appar specif case specif involv comparison item use less oper thu reason expect differ order paramet ad would lead differ state might like other expos error hand test stack queue adt would expect particular paramet would matter test set adt would expect number duplic import would necessarili expect rel order paramet import unless cours set implement use adt base comparison 23 tree anoth phenomenon notic differ ratio add delet led differ probabl error detect ratio one unlik object grow larg cours test exampl small object appar usual complic enough excit failur offer follow tent guidelin gener test case ffl use least long origin sequenc varieti rel frequenc differ constructor transform ffl specif condit axiom comparison oper choos varieti test case origin sequenc variou paramet chosen larg rang equival choos varieti differ path adt tree aris origin sequenc guidelin might seem obviou previou research suggest limit complex sequenc 9 5 10 ignor semant specif 23 22 6 relat work compar approach relat work test data abstract previou system gener fall one two categori test execut tool test gener tool contrast approach give rise test gener test execut tool 9 gaudel group suggest use rel simpl sequenc includ regular hypothesi assert simpl sequenc length less n give correct output complex sequenc result interpret say regular hypothes hold adt examin small n similar observ lead gaudel et al introduc addit uniform hypothes 61 test execut tool one first system address question test data abstract daist data abstract implement specif test use axiom algebra specif provid oracl test implement adt test case tupl argument lefthand side axiom daist execut test case give input lefthand side righthand side axiom check output invok usersuppli equal function similar eqn test execut tool consid gener daist exampl recal axiom 6 prioriti queue specif shown figur 1 say alargest els adeleteaddx execut daist test case axiom equival test case createadd1add2add3deletecreateadd1add2 equival second sequenc obtain use axiom 6 rewrit first sequenc howev daist analog test case form 1 2 notequival signific ramif even exhaust test daist may fail detect error result two state erron combin singl state extrem exampl consid erron implement none oper chang state object two side axiom return state input thu error detect second distinct daist approach daist requir avail formal specif test execut tool ie driver produc driver gener use inform specif avail second case studi hoffman et al 21 19 develop sever test execut tool abstract data type base tracespecif 3 recent system protest consist two subsystem 1 protest1 test c implement use test case contain expect output 2 protest2 compar behavior c implement usersuppli oracl written prolog test case protest1 5tupl trace expexc actval expval type trace sequenc oper put adt state expexc except rais trace actval observ expval expect valu appli observ state type data type actval expval protest2 valu expexc expval gener prolog oracl written user protest program written prolog execut test case call oper implement test interfac suppli user oper interfac defin prolog predic call correspond c function implement user also need write function call construct object userdefin class pass paramet oper implemen tation like astoot daist protest use function suppli user check equival object correspond adt unlik astoot daist use specif test gener expect output protest2 use prolog oracl produc expect output oracl anoth program need test anoth distinct approach use eqn function check output effect combin mani protest test case singl test case hand protest handl except certainli import idea would like tri incorpor futur version astoot antoy hamlet 2 propos system compar class implement abstract represent base term rewrit deriv directli specif user suppli explicit represent function map concret represent abstract represent code instrument check diagram correspond method commut ie appli represent function abstract analog method give rise abstract state equival one obtain appli method appli represent function system would case give accur check correct would approach use approxim observ equival eqn function compar concret represent howev impos programm highli nontrivi task write correct represent function 62 test case gener two previou approach gener test case algebra specif report gaudel research group 4 5 10 develop gener theori test base test context tripl consist set hypothes program set test data oracl approach nice properti establish hypothes hold test set expos error program guarante correct cours establish hypothes nontrivi task involv analysi program text approach provid test data oracl furthermor oracl appear simpl uniform format interest direct futur research would extend approach includ hypothes perhap deriv condit one sequenc pair use repres class sequenc pair condit one instanti paramet use repres class instanti gaudel group also built tool test data abstract base theori test context tool input specif written dialect prolog base definit complex sequenc use prolog interpret gener sequenc oper given complex sometim subject addit constraint approach might provid use mean gener interest origin sequenc simplifi jalot et al 23 22 suggest effect test case gener syntact part algebra specif without refer semant experi tool indic fact import consid semant part well sinc differ instanti argument sequenc correspond differ path adt tree lead profoundli differ abstract state specif thu necessari select mani differ path adt tree aris given origin sequenc equival choos valu paramet exhibit differ relationship one anoth phenomenon demonstr case studi prioriti queue failur occur necessari swap bottom row heap 7 conclus describ new approach test class place emphasi fact class implement data abstract set tool base approach two case studi approach test case consist tupl sequenc messag along tag indic whether sequenc put object classundertest equival state andor return object equival state test case restrict format consist singl pair sequenc tag indic whether two object result applic sequenc observ equival test execut send sequenc object classundertest invok usersuppli equival check mechan approach allow substanti autom mani aspect test includ test case gener test driver gener test execut test check astoot set tool base approach astoot consist tool automat gener test driver class interfac specif tool semiautomat gener test case algebra specif class test driver gener astoot driver gener automat execut check test case suppli either test gener manual gener consequ astoot allow substanti autom entir test process perform two case studi one use buggi implement prioriti queue use buggi 23 tree implement sort list case studi provid insight effect factor length origin sequenc rel frequenc differ oper origin sequenc rang paramet oper approach tool describ paper assum specif implement satifi sever restrict limit kind sideeffect oper may sever extens basic model intend make test scheme applic realworld objectori program rather pure abstract data type implement describ elsewher 6 7 includ gener format test case allow test class whose method side effect dynam format allow test virtual class observ impact inherit test direct futur research includ follow ffl interfac test gener constraintsolv system order decreas need manual intervent test gener ffl perform addit case studi includ explor complic adt implent larger varieti error particular error case studi tend expos number duplic element sequenc insert low easi envis error opposit would true much experi need order develop better intuit kind test sequenc gener arbitrari class unknown error ultim intuit incorport heurist guid select initi sequenc path adt tree thu enhanc test gener ffl explor whether variou strategi involv pick special valu paramet insert element ascend descend order help hinder ffl develop specif languag better abl express aspect objectori program sideeffect inherit dynam bind build tool base ffl explor impact inherit test focus far unittest also mani interest question pertain systemtest objectori softwar hope address question futur ultim use result expand improv astoot acknowledg author would like thank dan hoffman anonym refere sever use suggest r systemat design algebra specif automat check implement formal specif use assert trace write abstract specif softwar modul softwar test base formal specif theori tool test data gener use prolog constraint approach test objectori program case studi test objectori program theori modul gener test data algebra specif initi algebra approach specif introduc obj3 abstract data type develop data structur note type abstract version 2 algebra specif abstract data type extens algebra specif abstract data type softwar valida tion modul test case gener trace specif methodolog model autom modul test prolog test complet specif autom testcas gener data abstract simpl word problem univers algebra specif techniqu data abstract formal method abstract specif softwar abstract data type specif affirm system test nontest program tr smalltalk80 languag implement formal method abstract specif softwar theori modul trace specif test complet specif systemat design algebra specif c program languag 2nd ed case studi test objectori program autom modul test prolog softwar test base formal specif approach test objectori program objectori softwar construct 2nd ed data abstract implement specif test abstract data type develop data structur abstract data type softwar valid extens algebra specif ctr merlin hugh david stott test oo program presenc sideeffect acm sigsoft softwar engin note v21 n3 p5361 may 1996 david kung jerri gao pei hsia yasufumi toyoshima chri chen youngsi kim youngke song develop objectori softwar test mainten environ commun acm v38 n10 p7587 oct 1995 mauro pezz michal young test object orient softwar proceed 26th intern confer softwar engin p739740 may 2328 2004 amit paradkar interclass test oo softwar presenc polymorph proceed 1996 confer centr advanc studi collabor research p30 novemb 1214 1996 toronto ontario canada labich p thvenodfoss h waeselynck mh durand test level objectori softwar proceed 22nd intern confer softwar engin p136145 june 0411 2000 limerick ireland roy patrick tan stephen h edward experi evalu effect jmljunit test acm sigsoft softwar engin note v29 n5 septemb 2004 donald j yantzi jame h andrew industri evalu log file analysi methodolog proceed 5th intern workshop dynam analysi p4 may 2026 2007 ugo buy alessandro orso mauro pezz autom test class acm sigsoft softwar engin note v25 n5 p3948 sept 2000 pei hsia xiaolin li david c kung augment data flow criteria class test proceed 1997 confer centr advanc studi collabor research p9 novemb 1013 1997 toronto ontario canada daniel hoffman jayakrishnan nair paul strooper test gener ada packag ape acm sigada ada letter vxviii n6 p255262 novdec 1998 ashok sreeniva panel discuss test research relev industri user acm sigsoft softwar engin note v27 n4 juli 2002 daniel hoffman durga prabhakar paul strooper test iptabl proceed confer centr advanc studi collabor research p8091 octob 0609 2003 toronto ontario canada richard denney comparison modelbas algebra style specif basi test specif acm sigsoft softwar engin note v21 n5 p6064 sept 1996 jame h andrew yingjun zhang broadspectrum studi log file analysi proceed 22nd intern confer softwar engin p105114 june 0411 2000 limerick ireland johann henkel amer diwan tool write debug algebra specif proceed 26th intern confer softwar engin p449458 may 2328 2004 juei chang debra j richardson structur specificationbas test autom support experiment evalu acm sigsoft softwar engin note v24 n6 p285302 nov 1999 taewoong jeon hyon woo seung sungyoung lee embed builtin test hot spot objectori framework acm sigplan notic v37 n8 august 2002 gill bernot laurent bouaziz pascal le gall theori probabilist function test proceed 19th intern confer softwar engin p216226 may 1723 1997 boston massachusett unit state david chay saikat dan phylli g frankl filippo vokolo elain j weber framework test databas applic acm sigsoft softwar engin note v25 n5 p147157 sept 2000 willem visser corina psreanu radek pelnek test input gener java contain use state match proceed 2006 intern symposium softwar test analysi juli 1720 2006 portland main usa jame h andrew yingjun zhang gener test check log file analysi ieee transact softwar engin v29 n7 p634648 juli qing xie atif memon design compar autom test oracl guibas softwar applic acm transact softwar engin methodolog tosem v16 n1 p4e februari 2007 pei hsia xiaolin li david c kung class test codebas criteria proceed 1996 confer centr advanc studi collabor research p14 novemb 1214 1996 toronto ontario canada lijun hong zhu test softwar model tool use data mutat proceed 2006 intern workshop autom softwar test may 2323 2006 shanghai china huo yan chen h tse f chan chen black white integr approach classlevel test objectori program acm transact softwar engin methodolog tosem v7 n3 p250295 juli 1998 jame h andrew susmita haldar yong lei felix chun hang li tool support random unit test proceed 1st intern workshop random test juli 2020 2006 portland main huo yan chen h tse chen taccl methodolog objectori softwar test class cluster level acm transact softwar engin methodolog tosem v10 n1 p56109 jan 2001 mari jean harrold test roadmap proceed confer futur softwar engin p6172 june 0411 2000 limerick ireland nikolai tillmann wolfram schult parameter unit test acm sigsoft softwar engin note v30 n5 septemb 2005 willem visser corina psreanu sarfraz khurshid test input gener java pathfind acm sigsoft softwar engin note v29 n4 juli 2004 issa traor demissi b aredo enhanc structur review modelbas verif ieee transact softwar engin v30 n11 p736753 novemb 2004 axel van lamsweerd formal specif roadmap proceed confer futur softwar engin p147159 june 0411 2000 limerick ireland n robinson suzann pawlowski vecheslav volkov requir interact manag acm comput survey csur v35 n2 p132190 june