achiev scalabl local time skew microprocessor speed grow exponenti faster memori system speed recent past paper explor long term implic trend defin scalabl local measur abil appli ever faster processor increasingli larg problem scalabl parallel measur abil appli numer processor larger problem provid algorithm call time skew deriv execut order storag map produc desir degre local certain program made exhibit scalabl local approach unusu deriv transform algorithm dataflow fundament characterist algorithm instead search space transform execut order array layout use programm artifact express algorithm provid empir result data set use l2 cach main memori virtual memori b introduct widen gap processor speed main memori speed gener interest compiletim optim improv memori local degre valu reus still cach wl91 number techniqu develop improv local scientic program program use loop travers larg array data gj88 wl91 wol92 mct96 ros98 techniqu gener success achiev good perform modern architectur howev possibl processor continu outpac memori system rais question whether techniqu scale produc ever higher degre local say calcul exhibit scalabl local local made grow least linearli problem size use cach memori grow less linearli problem size articl show calcul exhibit scalabl local other typic requir tile discuss use compiletim optim produc scalabl local identifi class calcul exist techniqu gener produc scalabl local give algorithm obtain scalabl local subset class techniqu make use valuebas depend relat pw93 won95 pw98 provid inform ow valu individu array element among iter calcul initi ignor issu cach interfer spatial local return address issu later dene balanc calcul comput balanc ratio oper perform total number valu involv calcul live start end ratio measur support nsf grant ccr9808694 int int figur 1 threepoint stencil singleassign form initi c zero int int int figur 2 matrix multipl degre valu reus calcul thu play role determin local run code similar mccalpin denit machin balanc ratio processor sustain oat point oper rate memori system sustain rate transfer oat point number mcc95 case limit total number oper perform valu produc place absolut limit comput balanc therefor local could achiev code run isol exampl entir array live end loop nest shown figur 1 balanc nest approxim 3 n valu live entri n live exit 3 n oper valu produc written main memori valu live come main memori must gener one unit memori trac one oat point valu read written everi three calcul perform code matrix multipl figur 2 balanc grow problem size thu larg matric may principl achiev high cach hit rate note comput balanc depend inform valu live exampl live end figur 1 balanc code 3t rais hope achiev scalabl local store valu main memori comput balanc also depend scope calcul consid element kill second loop nest follow code figur 1 nest produc n valu balanc two nest could higher balanc figur 1 alon rais hope improv local time keep valu cach two nest one way achiev local proport comput balanc would requir fulli associ cach larg enough hold intermedi valu gener calcul denit scalabl local explicitli rule approach achiev scalabl local must divid calcul order sequenc stripe execut calcul stripebystrip produc result b stripe balanc proport problem size c calcul stripe execut order number temporari valu simultan live small valu consid temporari lifetim contain within stripe live entri entir calcul use within stripe small mean captur idea data cach without refer initi c zero int int int int int figur 3 tile matrix multipl wl91 int int int figur 4 timestep three point stencil particular architectur particular wish avoid cach requir grow linearli wors size problem case simpl stencil calcul discuss mw98 limit size function machin balanc case tomcatv benchmark discuss section 4 cach requir grow sublinearli problem size tomcatv grow squar root size input well balanc exist techniqu produc scalabl local code exampl tile matrix multipl produc scalabl local figur 3 show result code tile size terminolog jb kb loop enumer 2 stripe execut n tile size 2 balanc 2n 2 within stripe total number temporari live simultan exceed one tile b one column tile c thu increas match machin balanc could achiev appropri local use cach size os 2 ignor cach interfer howev calcul current techniqu produc scalabl local see next section remaind paper devot discuss achiev scalabl local class calcul call timestep calcul section 2 dene class calcul show produc scalabl local simpl exampl via time skew mw98 section 3 gener time skew beyond limit class problem discuss mw98 section 4 present empir studi benchmark code section 5 discuss techniqu improv local section 6 give conclus calcul time skew say calcul timestep calcul consist entir assign statement surround structur if loop possibl loop loop break statement loopcarri valu base ow depend come previou iter outer loop call time loop exampl three point stencil calcul figur 4 timestep calcul comput new valu int int figur 5 three point inplac stencil wl91 curi valu curi1i1 previou iter ow valu essenti shown figur 1 contrast valu comput iter inplac stencil shown figur 5 use iter call loop nest timestep calcul valu last time step live end time loop valu live entri calcul read rst time step balanc timestep calcul proport number time step thu may abl achiev scalabl local calcul produc stripe combin sever time step techniqu present wolf lam wl91 wol92 use achiev scalabl local figur 5 appli calcul sever loop nest timestep calcul figur 4 mw98 describ time skew transform use achiev scalabl local figur 4 origin formul transform could appli timestep stencil calcul array element updat use combin element neighbor stencil one statement perform calcul statement simpli move valu second assign figur 4 allow next section describ gener form time skew remaind section review origin formul time skew appli figur 4 essenti insight understand time skew appli fairli convent combin skew tile set depend repres ow valu rather memori alias exampl figur 4 valu produc iter calcul use iter t1 1 singl loop nest depend pattern algorithm wolf lam would skew inner loop respect time loop produc fulli permut nest would tile loop nest achiev appropri degre local perform skew tile rst expand cur array forward substitut valu old result code ob valu produc tile consumpt next tile b tile size stripe n tile produc valu perform b oper b temporari ob live simultan thu may hope achiev scalabl local unfortun expand cur array caus temporari place uniqu memori locat yield improv memori local improv local must either recompress expand array manner compat new order execut perform skew tile origin imperfect loop nest requir combin unimodular nonunimodular transform approach discuss detail mw98 code result rst iter except border tile work singl array small enough cach array resid entir cach iter allow us ignor issu spatial local cach interfer furthermor techniqu let us optim code origin present singleassign like figur 1 howev approach tax code gener system use limit even singlestat stencil caus extrem long compil time produc code great deal addit integ math overhead due loop structur sw98 3 gener algorithm time skew section present gener algorithm time skew timestep calcul use exampl code tomcatv program spec95 benchmark set shown figur 6 begin give domain algorithm techniqu coerc aberr program domain present algorithm 31 domain algorithm timestep calcul loopcarri data ow must come previou iter time loop tomcatv loop note j loop second nest determin maximum nest carri reduct depend won95 inhibit time skew j loop fourth sixth nest two dimension loop solv tridiagon carri data ow rst appear prevent applic time skew howev proceed algorithm treat column array singl vector valu attempt block dimens iter space consequ cach requir shall see may possibl extend algorithm handl case loop carri depend one direct along vector investig possibl case fourth nest carri inform forward j dimens sixth carri backward along dimens rule skew dimens algorithm restrict subset timestep calcul meet follow criteria 311 ane control ow loop step must known loop bound condit test statement must ane function outer loop indic set symbol constant make possibl describ iter space set ane constraint integ variabl necessari use omega librari kmp 95 repres transform space allow one except rule howev condit control execut outer loop need ane condit may occur due break loop simpli complic loop bound handl way though present discuss term break statement sinc occur tomcatv 312 uniform loop depth restrict intraiter data ow everi statement within time loop must nest within number loop ow inform within iter time loop must connect ident indic loop surround denit use exampl consid valu produc last statement rst nest nd residu valu produc iter j store ryij use iter j fourth nest note refer ryij1 statement caus troubl alreadi given skew j dimens case may abl convert program proper form simpli reindex iter space exampl rst loop ran 1 n2 produc ryi1j could simpli bump loop 1 calcul involv nest dierent depth add singleiter loop around shallow statement third loop nest tomcatv rst solv tridiagon set two dimens add addit j loop 2 2 around loop perform reindex work backward valu live end iter time loop exampl rxmt rymt use later x find residu iter 2 2 2 2 determin maximum valu rxm rym residu solv tridiagon system aaddaa parallel lu decomposit add correct iter figur benchmark spec95 use iter 1 tag loop contain write produc valu xed follow data ow depend back sourc iter exampl data ow iter j write last nest come iter j sixth nest j n 1 fth nest adjust iter space loop reach way x sixth nest simpli xed fth j loop n1 n1 wrap around sinc iter n 1 read valu ever need adjust xed loop algorithm fail least one dimens follow data ow statement reach nest explor data ow arc cross iter time loop loop reach process dead may omit 313 finit interiter data ow depend distanc code gener system work must know factor skew mean must abl put known nonsymbol upper lower bound dierenc inner loop indic timeloopcarri ow valu exampl rst loop nest tomcatv read xi1j produc iter upper bound dierenc dimens must least 1 appli current algorithm code coupl depend eg rst nest read xijj 32 time skew consid calcul domain describ calcul tomcatv certain dimens within domain valu use iter time loop come within xed distanc l iter loop l previou time step therefor ow inform interfer tile rst skew loop factor l observ made figur 4 section 2 fact think j dimens seven array singl 7 n matrix valu data ow tomcatv ident figur 4 therefor proceed skew tile loop describ requir fuse variou loop nest may size fortun rel straightforward code gener system kpr95 omega librari simpli need provid linear map old iter space new librari gener code travers iter space lexicograph order given g loop l 1 within domain e loop e produc iter space l nn number nest origin order b size tile wish produc formul given mw98 addit constant level level within domain tomcatv transform origin set iter space nn nn rang 1 8 initi rxm rym count nest 0 loop result g outer loop travers set stripe contain b g iter run statement e loop g e inner loop constitut tile perform ob g e oper ob g e oat point valu e total size matrix constitut valu produc e loop execut statement ob g 1 e valu consum next tile provid stripe ob balanc long e grow less linearli size problem hope scalabl local tomcatv e set seven array size n problem involv array size n 2 cach requir grow squar root problem size end section 2 left question store valu without either corrupt result calcul eg use origin storag layout write temporari main memori sucient quantiti inhibit scalabl local eg fulli expand array principl know e could appli layout algorithm given mw98 produc array temporari entir cach may even possibl develop algorithm perform oper b e symbol paramet howev absenc major improv implement code gener system kpr95 sw98 method impract instead simpli expand array factor two use t2 subscript new dimens caus temporari written main memori number proport number nontemporari valu creat number oper perform inhibit scalabl local method also forc us contend cach interfer simpli ignor point though could presum appli algorithm reduc interfer code gener final code may may travers memori unit stride possibl array transpos dimens correspond innermost loop scan consecut memori locat 321 break statement appli algorithm calcul involv break guard nonan condit follow creat array boolean valu repres valu condit iter convert statement express simpli comput save valu end iter outer loop step block iter origin time loop scan array determin break occur time step time block complet record number iter break occur roll back calcul begin time block restart upper bound time loop set iter break preserv data present end time block use two array valu live end time block one even block one odd block doubl total memori usag aect balanc local calcul except degre chang interfer eect possibl determin break aect correct result avoid overhead scheme simpli stop calcul end time block break occur unfortun know way determin purpos break statement without input programm possibl form machineread comment within program 4 empir result review time result tomcatv benchmark run virtual memori nal version also expect result one workstat sun ultra60 sever sgi machin includ larger set benchmark base experi stencil calcul expect machin show either small gain small loss perform get peak perform requir manual hoist loopinvari express get better complier verifi valu time skew compens extrem high machin balanc test use virtual memori dell 200mhz pentium system run linux system 64 main memori 128k l2 cach 300m virtual memori page swap partit scsi disk test design test valu time skew system extrem high balanc transform tomcatv benchmark accord algorithm given previou section except break statement break taken execut sampl data also increas array size 513 513 1340 1340 ensur seven array could main memori seven array togeth use 96 megabyt origin code requir 9 minut per time step complet run t8 4500 second run t12 6900 second time skew code increas 192 allow sucient larg block size code requir 20 second per time step complet 192 iter 3500 second thu long run perform improv factor 30 loop nest produc time skew transform may complic origin loop transform code may slower origin small problem exampl origin tomcatv data set use entir data set ts main memori tile size greater 2 exce size l2 cach case time skew code slower factor two 5 relat work current techniqu improv local gj88 wl91 wol92 mct96 base search group refer may refer cach line assum valu store address use origin unoptim program appli sequenc transform tri bring togeth refer address howev transform system power enough perform time skew transform limit system use wolf lam given section 27 wol92 mckinley carr tseng appli loop skew ground wolf lam nd use practic thu transform system may limit bandwidth loop abl transform exampl without time loop none inner loop tomcatv exhibit scalabl local thu limit local produc transform bodi time loop recent work pugh rosser ros98 use iter space slice nd set calcul use product given element array order calcul term nal array element produc achiev eect similar combin loop align fusion exampl produc version tomcatv time step perform singl scan array rather dierent scan origin code howev system transform bodi time loop without reorder iter time loop thu limit nite balanc calcul loop bodi work toler memori latenc mlg92 complement work bandwidth issu optim hide latenc compens inadequ memori bandwidth bandwidth optim elimin problem latenc howev see reason latenc hide optim use success combin time skew 6 conclus calcul matrix multipl achiev scalabl local via wellunderstood transform loop tile mean abl obtain good perform calcul comput extrem high machin balanc long increas tile size provid match comput balanc howev current techniqu local optim gener provid scalabl local timestep calcul time skew transform describ use produc scalabl local mani calcul though increas complex loop bound subscript express system extrem high balanc local issu domin time skew provid signic perform improv exampl obtain speedup factor run tomcatv benchmark array requir virtual memori r strategi cach local memori manag global program transform omega librari interfac guid code gener multipl map memori bandwidth machin balanc current high perform comput improv data local loop transform design evalu compil algorithm prefetch time skew valuebas approach optim memori local exact method analysi valuebas array data depend code gener memori map data local optim algorithm improv local parallel nest loop tr ctr guohua jin john mellorcrummey experi tune smg98 semicoarsen multigrid benchmark base hypr librari proceed 16th intern confer supercomput june 2226 2002 new york new york usa armando solarlezama gilad arnold liviu tancau rastislav bodik vijay saraswat sanjit seshia sketch stencil acm sigplan notic v42 n6 june 2007 kristof beyl erik h dholland intermedi execut code key find refactor improv tempor data local proceed 3rd confer comput frontier may 0305 2006 ischia itali michel mill strout larri carter jeann ferrant barbara kreaseck spars tile stationari iter method intern journal high perform comput applic v18 n1 p95113 februari 2004 chen ding maksim orlovich potenti comput regroup improv local proceed 2004 acmiee confer supercomput p13 novemb 0612 2004 zhiyuan li yonghong song automat tile iter stencil loop acm transact program languag system topla v26 n6 p9751028 novemb 2004 chen ding ken kennedi improv effect bandwidth compil enhanc global cach reus journal parallel distribut comput v64 n1 p108134 januari 2004