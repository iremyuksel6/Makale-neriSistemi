test sequenc gener model check use dynam transit relat task find set test sequenc provid good coverag industri circuit infeas size circuit small critic subcircuit design howev design creat set test sequenc achiev good coverag sequenc use full design input subcircuit may access work present effici test gener algorithm receiv test sequenc creat subcircuit find test sequenc full design reproduc given sequenc subcircuit algorithm use new techniqu call dynam transit relat increas effici common expens step algorithm comput set predecessor set state make comput effici exploit partit transit relat set simpler relat everi step use necessari result smaller relat origin one differ relat use step henc name dynam transit relat idea use improv symbol model check tempor logic ctlwe implement new method smv run sever larg circuit experi indic new method provid gain two order magnitud time space verif result show dynam transit relat make possibl verifi circuit previous unmanag due size complex b introduct recent year seen rapid growth complex size industri de sign verif task system becom extrem complex requir new techniqu handl larg scale design formal method exampl new technolog gain popular recent context one method symbol model check success hardwar verif model checker abl find sever previous unknown error industri circuit mani compani start use symbol model check design cycl complement dynam valid propos new techniqu base symbol model check call dynam transit relat enhanc formal verif dynam valid dynam valid simul check given run system correct input sequenc signal test sequenc design observ result output sinc number run infinit method exhaust ie check possibl run thu import obtain set test sequenc provid good coverag design howev task might feasibl design larg creat set test sequenc cover behavior circuit extrem difficult due larg number behavior exhibit situat howev set test sequenc assum exist ffl import test small critic subcircuit extens small circuit easier gener effici test sequenc critic circuit worth extra effort identifi test sequenc provid good coverag ffl subcircuit frequent reus new design case test sequenc often develop ffl subcircuit also verifi separ use simul formal method exampl error found subcircuit design must check real error may exist full design sequenc input lead error never occur complet circuit ffl import condit full design often state test sequenc exampl violat mutual exclus state condit intern signal eg grant 0 grant 1 seen test sequenc length one howev test sequenc subcircuit use directli full system input subcircuit intern signal full circuit may access exterior design address problem creat test sequenc full design reproduc test sequenc small subcircuit thu achiev good coverag subcircuit run test full design problem defin follow see figur 1 let larg design set input let sub rel small critic subcircuit set input sub singl clock synchron circuit equival transform one assum design produc set test sequenc guarante good coverag interior part design sub design figur 1 schemat view test gener problem sub gener input sub access exterior thu need provid test gener algorithm given test sequenc pi sub either produc test sequenc pi induc pi sub report sequenc exist latter case mean pi sub never occur sub run within test gener algorithm perform task two phase first backward search creat sequenc set state revers order last first comput path goe set induc requir pi sub second phase travers set first last determin one path choos appropri state set state sequenc input pi correspond chosen path project path result pi correct input simul tool reproduc pi sub path algorithm return fals dynam transit relat main oper backward search algorithm p reda comput set predecessor state state defin assign valu valuat variabl model variabl output latch state hold signal circuit addit input p reda use model transit relat defin valu system variabl next state formula valu system variabl current state oper might costli transit relat larg avoid problem exploit partit transit relat simpler relat relat defin valu next state singl system variabl comput predecessor appli relat defin next valu variabl depend thu transit relat use backward search determin dynam applic p red accord set appli new dynam oper call p redd search proce number variabl depend may grow larger smaller size dynam transit relat vari accordingli search appli second phase use step transit relat determin dynam backward search p redd particularli use algorithm implement symbol use bdd 2 represent design bdd often provid concis represent ever size tend grow number variabl depend next valu variabl typic depend small number variabl dynam transit relat involv fewer variabl global transit relat result bdd represent often smaller comput p redd faster dynam transit relat model check introduct dynam transit relat p redd oper motiv testgener algorithm depend howev oper find set predecessor set also core oper algorithm manipul finitest machin promin exampl model check finitest machin model system check given specif prove work correctli find counterexampl show idea dynam transit relat use order improv symbol model check 3 tempor logic ctl similarli test gener algorithm one common expens step symbol model check algorithm comput p red usual refer tempor oper ex replac p red p redd reduc space time consumpt allow verif larger system partial transit relat comput dynam applic p redd note result comput exact ie obtain set state would use global transit relat chang affect intermedi result method propos sever advantag oppos sever algorithm frequent use test sequenc gener dynam transit relat guarante test sequenc found exist also gain obtain use littl model possibl automat need manual decid signal consid potenti never consid larg part circuit affect behavior subcircuit consider appli much larger circuit method moreov method chang p red function affect behavior tool way consequ appli addit optim partit transit relat assumeguarante other even better result experiment result implement dynam transit relat test sequenc gener algorithm within symbol model check tool smv 13 obtain signific improv time space varieti exampl pci local bu 4 distribut heterogen realtim system 5 model check test sequenc gener sever intel circuit new algorithm ran averag 20 time faster origin static one maximum speedup 50 time use 16 memori moreov algorithm abl determin test sequenc show exist mani case static algorithm unabl static algorithm case use 800m memori could finish dynam algorithm hand finish averag 16 second use 51m memori result show dynam transit relat provid signific gain test sequenc gener symbol model check enabl analysi larger system previous possibl case abl complet analysi 50 time faster save 200 time memori fact chang p red function enabl use minim chang sever verifi relat work test sequenc gener precomput test studi context symbol model check 14 6 12 11 15 10 howev techniqu depend intern structur circuit test eg case reli regular bu structur design consequ gener one present context model check problem address 9 work concern mostli express test sequenc complex deal larg circuit fact 9 author state use method small exampl anoth work relat model check test sequenc gener 1 howev work atpg algorithm automat test pattern gener use perform model check atpg algorithm guarante eventu find test sequenc even case exist one import aspect work build model complet circuit beforehand may never actual construct model aspect relat techniqu partit transit relat 7 differ howev case partit use everi iter may necessari exampl techniqu may consid part circuit cone influenc reduct 7 howev techniqu static sens determin part circuit ignor method dynam take advantag part circuit relev iter method produc better result sinc use less circuit iter fact cone influenc seen upper bound behavior algorithm paper organ follow section 2 first present test gener algorithm use global transit relat show convert test gener algorithm use dynam transit relat explain algorithm implement bdd next section 3 show dynam transit relat use model check section 4 present experiment result show use idea final section 5 give conclus work futur direct research test sequenc gener model synchron hardwar design finit state machin let sub set input subcircuit set circuit input variabl let v set circuit variabl input sub v assum circuit variabl boolean use boolean formula repres set state transit relat state finit state machin repres circuit assign valu variabl repres set state assign satisfi f transit relat repres formula r assign satisfi r repres edg v use letter set state transit relat formula repres finit state machin model circuit tupl ffl set state set valuat v ffl init set initi state ffl transit relat defin set function n defin nextstat valu global transit relat assum everi n determinist total function note input unrestrict trace sequenc set variabl partial assign respect u assign give valu variabl u oppos state assign give valu variabl circuit partial assign oe respect u repres set state agre oe u ie everi v 2 u oev project state u partial assign u agre project pi u trace obtain take project state pi u expans oe u 0 st u ae u 0 partial assign oe 0 u 0 agre oe u test sequenc u seri partial assign u formal problem defin follow given set sub variabl v input critic subcircuit sub test sequenc pi sub must produc initi state init 2 test sequenc pi everi partial assign let trace gener pi init requir project sub ident pi sub 1 notic transit relat r defin nextstat valu variabl v choos nextstat valu input determinist defin successor state therefor init pi togeth r uniqu determin pi 21 basic static algorithm section present algorithm use global transit relat r determin test sequenc circuit algorithm two stage first backward search creat seri set state comput path goe set start initi state solut problem given pi construct seri set state revers order ie start comput set n end everi 1 everi state 2 successor i1 see figur 2 use slight abus notat view everi test sequenc set state set state assign variabl agre creat set 0 make sure thu 0 repres set trace agre pi sub order make sure trace run set creat start initi state continu comput gamma2 arriv set initi state initi state found know trace pi point reproduc test sequenc pi sub howev arriv set conclud input sequenc pi use initi state reproduc pi report second stage travers set n find one suitabl trace test sequenc pi gener trace creat take project state along pi output algorithm initi state sequenc input algorithm use oper p red comput set predecessor set state accord transit relat r defin p inform interpret exist state assign true state end transit r ri v assign predecessor express term v 13 also use function choosea receiv set produc singl state assign function succ return set successor state accord r stage 1 n n 2 3 j 4 endfor 5 7 j 8 10 endwhil stage ii 13 print sequenc gener fail 14 els project 17 n 19 j project j 20 endfor sm init rn figur 2 data structur creat test sequenc gener algorithm 22 dynam transit relat effici algorithm algorithm present previou section might practic larg circuit circuit transit relat r big even repres bdd result set state oper p red becom expens possibl howev exploit partit transit relat function n defin next state variabl v 0 recal state model give valu variabl v say set state independ variabl v everi state state differ v also case exclud function n comput p reda say formula f independ variabl v everi two assign oe oe 0 differ v oe notic formula f independ v set state repres independ v let f formula repres set state transit relat let support f set variabl f depend defin f depend vg sup 0 depend v 0 g therefor supf set currentst variabl f depend sup 0 f set nextstat variabl f depend defin dynam version p red call p redd oper set predecessor state accord partial transit relat transit relat includ n depend v oper p redd therefor defin p redd lemma 1 set p proof assum variabl v appear support start definit p red v 0 depend v av 0 depend v 0 move 9v 0 quantifi get v 0 assum everi n total function ie everi v exist v 0 v 0 show everi variabl v appear support drop term v 0 transit relat part p reda without chang result variabl support get p redd 2 nextstat valu variabl depend variabl often case circuit support set comput remain small recal given state applic r determin nextstat valu variabl v variabl input variabl chosen arbitrarili environ dynam algorithm use partial assign oe instead full state partial transit relat r instead r output sequenc gener algorithm seri partial assign perhap variabl give valu variabl v 2 mean v influenc part circuit consid valu chosen arbitrarili dynam algorithm use follow function ffl choosea u accept set state repres formula set variabl u supa u return partial assign oe u satisfi view oe set chosen oe subset notic given partial assign result oe assign u agre notic also function choos use algorithm previou subsect call function receiv partial assign oe set variabl u set variabl u 0 u expand oe creat partial assign u 0 valu variabl u 0 n u chosen arbitrarili ffl project u receiv state set variabl return project former later ie return partial assign u agre receiv partial transit relat r partial assign oe partial transit relat form r set variabl u result partial assign oe 0 u everi stage 1 n n 2 3 r j1 v 4 j 5 endfor 7 8 j 12 endwhil stage ii 14 15 print sequenc gener fail els 23 j chooseo 24 endfor 26 n chooseo n 27 endif stage algorithm creat set creat previou algorithm use p redd instead p red notic end stage everi use expand line 1822 appli line 2125 stage ii forward search path done use partial assign instead state full assign everi partial assign oe repres set state differ variabl support move oe igamma1 oe line 21 25 use partial transit relat r use creat igamma1 see figur 2 appli r expand result support r i1 line 22 appli r i1 next iter loop output algorithm initi state init input input calcul algorithm necessarili give valu input variabl give input simul need decid valu input variabl therefor expand everi choos arbitrari valu extra input variabl follow theorem state correct dynam algorithm proof omit breviti found full paper theorem 21 assum test gener algorithm return fals comput produc theorem 22 assum test gener algorithm return initi state init sequenc input comput gener run simul use init ngamma1 input 23 bdd implement algorithm easili implement use bdd represent compon init n l model repres use bdd usual manner addit set j comput algorithm repres bdd input algorithm sequenc binari vector straight forward translat vector bdd repres set need algorithm bdd librari includ function comput sup sup 0 simpli set current next state variabl appear bdd oper use algorithm standard bdd oper bdd implement algorithm mostli benefit use partial transit relat size bdd repres set gener relat size supa mani case n depend variabl v thu take fewer n result smaller support partial transit relat result bdd comput intermedi stage comput p red use partial transit relat depend less variabl therefor often smaller 3 symbol model check 31 model check use dynam transit relat model check problem find set state finitest machin given tempor formula true one effici approach solv problem symbol algorithm use bdd 2 repres transit relat represent often concis allow verif larg complex system verif perform effici search algorithm core algorithm tempor oper ex given model set state repres bdd determin set predecessor state ex oper part tempor logic ctl comput tree logic 8 frequent use model checker formula ctl express properti state system built atom proposit boolean connect tempor oper oper consist two part path quantifi follow tempor modal path quantifi indic properti true path start given state path given state e tempor modal describ event order respect time along path specifi path quantifi exampl mean p hold next state f p mean p hold futur state g p mean p hold state path common ctl oper ag p true state p global true path current state ie p invari ef p true p hold sometim futur path ie p reachabl demonstr symbol model check algorithm work show algorithm ef p algorithm tempor oper similar natur object construct bdd repres set state satisfi ef p algorithm start bdd state satisfi p step add set predecessor comput ex algorithm termin state ad expens comput step algorithm applic ex oper notic ex oper exactli p red oper defin previou section therefor replac comput ex oper p redd use partial transit relat like comput partial transit relat dynam accord set ex appli assum n defin small number unprim variabl thu refer smallest number n result set state depend small number variabl treatment also handl model check fairctl logic ctl extend fair constraint restrict set path model requir satisfi given formula 8 3 4 implement experiment result implement dynam transit relat method smv 13 test method model alreadi verifi smv pci local bu 4 addit appli method sever larg intel circuit tabl summar result obtain follow exampl ffl 1 simplifi cach coher protocol deriv pci local bu ffl 2 model pci local bu discuss 4 ffl 3 10 circuit intel first two exampl appli model check one comput test sequenc exampl one result run differ paramet differ length test sequenc differ width test vector differ input subcircuit time given second unless otherwis state measur space given megabyt dyn column relat dynam transit relat algorithm st column relat static algorithm use circuit vec column subcircuit input vector width seq column show length test sequenc subcircuit column number variabl use total number variabl repres respect maximum number variabl support set set state consid iter total number variabl circuit last column indic algorithm determin test sequenc success sequenc exist fail run 19 differ test eleven success determin test se quenc six report test sequenc subcircuit unreach two model check exampl twelv exampl finish execut dynam static algorithm twelv obtain averag speedup 20 time 2 memori usag 16 origin gain time exampl finish dynam transit relat execut averag second use 51m memori experi kill process whenev use memori avail 800m conclud exampl obtain gain memori consumpt greater 150 time 80051 anoth import result deriv tabl averag algorithm consid 25 variabl circuit descript expect new algorithm better suit larg exampl smallest one first three gain impress happen necessari reconstruct transit relat iter small exampl may take time space due intermedi comput simpli creat transit relat complet circuit 2 number tabl round averag comput correct number time space vec seq variabl sf dyn st dyn st use total 73 2301 25 595 8 5 figur 3 experiment result exampl number five howev puzzl sinc gain clearli averag medium larg exampl even save significantli number variabl 17 90 still need space even though less time complet test sequenc gener indic method effici type circuit other futur work includ character good circuit bad one result show dynam transit relat method provid signific gain verif time space case two order magnitud expect work way kind circuit experi seem indic work extrem well sever type circuit use industri today conclus present two major result paper first effici testgener algorithm enabl design translat test sequenc creat small subcircuit test sequenc full design algorithm guarante test sequenc found exist second introduct dynam transit relat enhanc oper find set predecessor oper sourc stateexplos testgener algorithm symbol model check algorithm improv effici prove use implement new method smv run sever larg circuit experi indic new method provid gain time space verif two order magnitud result show dynam transit relat make possibl verifi circuit previous unmanag due size complex work extend sever way one ineffici method recreat transit relat iter howev may case transit relat alreadi construct optim consist implement algorithm reus previous use transit relat anoth extens appli idea dynam transit relat oper besid p red symbol model check p red oper call ex dual oper ax given set oper ax comput set state successor easi show idea appli oper anoth direct plan pursu deal asynchron model com putat model verifi system either asynchron hardwar design distribut program repres set process step one process chosen execut transit relat model disjunct relat rather conjunct synchron case plan adjust testgener algorithm dynam version p red comput model forward search algorithm also defin use dynam transit relat determin transit relat use accord support set oper time howev choos n accord current state support next state support unfortun case may take account state necessarili reachabl transit n may conflict anoth transit n j therefor exist global model howev variabl v support set state consider v j dynam transit relat algorithm would allow transit n taken identifi unreach state reachabl howev model check set reachabl state use simplifi model verif eg travers reachabl state case upper approxim introduc error speed verif r model check base sequenti atpg symbol model check 10 20 state beyond verifi perform pci local bu use symbol techniqu select quantit analysi interv model check verifi differ facet system model check automat verif finitest concurr system use tempor logic specif test gener intellig network use model check ing testabl strategi silicon comput architectur level test gener hierarch design environ ment architectur level test gener hierarch design environ base nonlinear equat solv symbol model check approach state explos problem hierarch test use precomput test modul multipl path sensit hierarch circuit test tr