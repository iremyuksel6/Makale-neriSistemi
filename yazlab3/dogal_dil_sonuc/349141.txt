threadawar debugg open interfac thread becom accept standard model express concurr exploit parallel sharedmemori model debug thread still poorli support paper identifi challeng debug thread offer solut contribut paper threefold first open interfac debug extens thread implement propos second extens threadawar debug identifi implement within gnu debugg provid addit featur beyond scope exist debugg third activ debug framework propos includ languageindepend protocol commun debugg applic via relat queri ensur enhanc debugg independ actual thread implement partial complet implement interfac debug ad thread implement work unison enhanc debugg without modif debugg sampl implement interfac debug shown adequaci userlevel thread kernel thread mix thread implement provid extend debug function improv effici portabl time b introduct thread becom accept abstract concurr use sharedmemori program paradigm provid mean exploit parallel sharedmemori multiprocessor environ today mani thread implement adher posix thread pthread standard 21 dene common applic interfac api exhibit function thread pthread standard describ semant term observ behavior api exclud constraint implement choic henc pthread implement rang userlevel librari 14 17 via mixedmod thread 16 20 8 kernellevel implement 2 22 1 11 softwar develop thread program facilit adher pthread api level program design implement test debug stage howev lack support thread appli cation motiv special test debug tool given number properti distinguish multithread program singlethread one 1 control ow thread may interleav even execut parallel 2 thread may suspend resum execut voluntar ili due preemption result event signal 3 synchron thread dene partial order program execut debug process take least 50 develop eort togeth test aect thread program sever way 7 follow issu illumin common problem convent breakpoint debug suce captur singl ow control program programm accustom follow control ow one thread two consecut breakpoint within thread hit thread may execut breakpoint furthermor breakpoint subroutin call dierent thread may hit sequenc dierent thread time state thread synchron object visibl debug due lack debugg format howev state inform would vital allow infer execut stage program progress rel partial order synchron thread schedul control debug ger may howev desir forcibl suspend resum execut select thread identifi problem applic reduc interfer ensur reaction thread respect thu threadawar debugg provid follow featur address issu facilit debug thread threadspec breakpoint stop applic certain thread reach breakpoint statu inquiri thread synchron object show progress execut current state object schedul control provid mean forcibl suspend resum thread schedul breakpoint halt applic upon context switch serv mean track interleav execut thread work describ paper also aim provid exibl platform debugg varieti thread implement support threadawar debug instead custom debugg thread impl mentat common framework control thread provid commun thread ap plicat thread implement hand provid standard interfac debug serv request debugg approach sever advantag portabl ensur open interfac debug thread one side function extens debugg side former requir thread implement support interfac provid least part function assum particular api thread implemen tation eg posix complianc option latter independ actual thread implement remain unchang regardless extend support open interfac sourc languag applic extens guarante commun interfac debugg thread applica tion interfac dene queri languag actual messag allow addit new function new messag futur without chang commun interfac either side flexibl provid partial support instead full function interfac debug thread debugg remain function provid less inform less control thread part interfac debug thread exist allow partial implement debug interfac certain inform avail access eg kernel thread prohibit ac cesscontrol thread option invoc allow applic run without thread debug support execut may use debug need thread debug support dynam load addon librari upon activ debugg technic issu featur present detail descript design implement threadawar debugg interfac debug thread paper structur follow section 2 give overview design section 3 describ open interfac debug thread whose implement depend thread implement section 4 introduc thread debug interfac common implement section 5 present commun structur debugg applic section 6 summar extens debugg section 7 describ implemen tation section 8 list extend command threadawar debug section 9 discuss relat work final present conclus 2 design overview compon framework threadawar debug compris two execut compon two inter face execut compon applic one side debugg side sinc applic assum multithread also util thread implement debugg includ enhanc threadawar debug commun applic interfac consist thread debug interfac tdi thread extens debug ted tdi includ queri languag interpret provid commun interfac debugg applic ted compris open interfac debug thread thin layer actual thread implement separ tdi ted design choic aim separ gener part framework tdi nongener part depend actual thread implement ted without distinct interfac tdi threadawar debugg would need modi time support new thread implement ad figur 1a depict case tdi includ interfac compon thread implement interfac compon would requir extract intern inform thread implement transform normal represent even thread api restrict posix thread depict compon data structur eg pthread would dier one implement next requir interfac compon mediat turn forc rebuild 2 n tdi code decod pthread implement n pthread implement 1 pthread implement 2 posix thread api thread implement thread implement thread implement 1 2 ntedimpl 2 tedimpl n tedimpl tdi gener debugg ted tedaccess debugg nongener design b gener design figur 1 design option encapsul tdi time support new thread implement ad figur 1b show better encapsul chosen im plement tdi use gener interfac ted compon ted provid access intern thread implement ie ted implementationdepend part sinc ted provid thin layer reduc amount implementationdepend code consider compar figur 1a tdi implement depend ted miss ing ted also provid opportun integr nonstandard thread implement sinc abstract thread api occur earli nongener approach requir adher certain thread interfac tdi level encapsul tdi ted also provid mean activ debug activ debug applic enhanc special routin may provid collect inform state perform manipul execut applic approach facilit speed debug process passiv debug probe applic instead extens debug applic side debugg enhanc contain knowledg thread implement tabl 1 compar activ passiv debug gener debugg extract inform applic use procedur approach probe data even data may later process within debugg dierent paradigm activ debug allow preprocess applic side commun data follow arbitrari paradigm eg use declar paradigm given paper encapsul tdi ted hide implement detail thread enhanc portabl discuss addit tdi maintain databas applic state queri databas perform uniform extens queri languag furthermor request state distinct object debugg cluster optim remov redundan cie result declar queri interfac perform better procedur interfac inform request would requir separ action debugg postmortem debug ie debug core le prematur termin execut applic provid support debug thread passiv case activ debug work postmortem debug sinc program longer execut henc ted function util 3 thread extens debug object ted layer provid uniform access implementationdepend thread structur basic primit manipul set within tdi realiz uniform method access inform inform either extract directli thread implement api support direct access extract extens thread implement debug exampl thread within applic state similar process may run readi block termi nate 1 thread api howev may provid access intern state thread nonstandard function 1 implement actual distinguish caus block thread may block mutex condit variabl timer object due suspens unspeci reason issu activ debug passiv debug detail thread implement known de bugger must known debugg changeadd new thread impl chang debugg debugg must enhanc extract info applic declar approac procedur approac queri overhead lower redun danci higher redund request postmortem thread debug possibl possibl tabl 1 activ vs passiv debug access state thread ad case provid requir access state translat standard encod dene ted uniform thread implement ted provid access function attribut common signatur simplifi unifi access intern data structur function read sr write sw domain domtda domain object address da allow arbitrari valu associ object later inquiri 2 object activ passiv entiti thread impl mentat thread mutex object condit variabl object common entiti access use set oper either map onto thread api onto function serv debug extens api access intern structur exampl set thread within applic may access thread api commonli exist intern data structur access function util ted mutex object hand typic link set mutex object maintain ted level purpos callout thread implement ted layer upon object creation provid mean regist object common set within ted callout part modic thread implement ensur debug support ted also support relat object creat revok certain event occur upon occurr event callback thread implement updat relat let dt dm dcv domain thread mutex condit variabl respect follow relat may hold see figur 2 1 ownedbyfthreadiddt mutexiddm g 2 blockedon fthreadiddt mutexiddm g 3 waitfor fthreadiddt condvariddcv g 4 signaledbyfcondvariddcv mutexiddm g relat 1 3 cardin 1 n ie thread may multipl mutex multipl thread may block mutex may wait condit vari abl relat 4 cardin one mutex may associ condit variabl thread block time cardin support well eg mit thread n model allow thread block condit variabl even use dierent mutex suspend notic n cardin would requir 2 implement tdo substitut tda sinc object uniqu identi address simpli map even address selfn 1 blockedon signaledbi waitfor ownedbi address self prioriti state user function thread condtion variabl address self mutex figur 2 booch class diagram object class object class sinc scalar attribut current support ted domain extens ted would requir open interfac debug thread encompass access function set iter member access function attribut member tabl 2 depict iter attribut function oper de scription interfac function regist tdi use build databas applic state explain next section domain valu return iter function da nfnullg respect 3 thread implement support subset function simpli regist function invalid request return null persist object discuss next section 4 thread debug interfac tdi object tdi compon abstract thread implement one side debugg side tdi keep databas ap plicat state approach support paradigm activ debug databas maintain tdi updat applic chang state wrt multithread object ted may regist set oper inform tdi updat applic execut notic approach uniqu activ debug sinc passiv debug allow applicationsid execut auxiliari oper tdi export follow function registr purpos int registerobject relt rel objreft objref int deregisterobject relt rel objreft objref int isregist relt rel objreft objref signatur oper includ relat object type thread mutex condit variabl thread applic support registra 3 follow except id rstate domain z fnullg state domain fundef0 run readi block block c block block block exit g dierent block state refer caus block mutex condit variabl timer suspens forc iter descript getfirstthread getnextthread get thread set getfirstmutex getnextmutex get mutex set getfirstcond getnextcond get condit variabl set attribut descript thread id processpersist threadid addr address thread structur prio prioriti state execut state rstate implementationdepend state entri address thread function address function argument newpc next program counter sp stack pointer mbo block mutex cvwf block condit variabl pid id process execut thread mutex id processpersist id addr address mutex structur owner mutex owner thread id condit variabl id processpersist id addr address cond var structur cmutex associ mutex tabl 2 open interfac debug thread erat attribut tion process invok correspond function eg lock unlock destroy mutex ted function describ open interfac debug thread also regist tdi allow tdi gener invok ted oper resolv databas queri registr occur via follow interfac int setiterfunc relt relobjreft getfirst int setattrfunc relt rel attrt attr attrdomaint getfunc objreft obj attrdomaint setfunc objreft obj exchang ted tdi rang debug support gener let tdi inform ted upon activ number function expect regist registr request tdi includ list attribut function iter registr procedur object ted may regist subset function depend rang support initi exchang assum known layout data type regist serv portabl involv softwar compon tdi handl commun debugg way debugg receiv consist view multithread object applic discuss section 7 abstract provid mean support persist identi seen tabl 2 persist identi uniqu identi assign object life time provis circumv problem root within thread implement recycl object identi er eg pthread api dene common interfac includ signatur oper type thread object certain type mean valu transpar ie valu may refer thread object long exist termin valu may recycl refer thread b passiv debug ap proach thread b distinguish explicitli would user respons detect termin infer anoth thread identi truli refer b activ debug tdi receiv notic creation termin thread registr procedur allow tdi assign valu identifi object use valu commun debugg user expos debugg provid persist identi allow distinct thread b activ debug actual queri databas issu uniform extens queri languag queri dene accord specic relat algebra queri preced mode either refer ted queri userden extens oper framework queri select project limit set object question dene request attribut respect queri includ set select relat valu project relat assign queri resolv list valu correspond project queri error messag result set answer reduc ensur duplic contain within set furthermor request state distinct object cluster one queri optim remov redund result declar queri interfac perform better procedur interfac request would requir separ function call debugg exampl given section 7 5 commun structur breakpoint debug gener support servic oper system servic eg system call ptrace unix provid access trace process depict figur 3 debug process peek poke one word applic process time may also continu execut applic perform debugg often constrain granular data access quanti section 7 approach activ debug util larg amount data may exchang debugg applic render ptrace approach less ef cient respons tdi queri issu debugg may contain larg amount data depend number activ multithread object applica tion although queri often much shorter symmetr approach chosen queri issu debugg well respons tdi transmit use interprocess commun ipc call ipcchannel buffer debugg target process call call subsequ handler call ipcwritetedrequest request phase respons phase return result 1 call return call return call return call return result n return call return return handl request process target replic exit ipcwritetedrequest result 1 result 2 result n respons phase request phase call return call return call return return call return call return call return call return call call return target process ipc channel debugg buffer mutual exclus execut b parallel execut figur 4 commun debugg applic anoth problem pose fact applic process stop debugg activ vice versa debugg make progress queri handl tdi part applica tion problem solv let debugg issu call handler function within applic ptrace call continu activ server side tdi receiv request resolv queri initi respons respons may contain larg amount data transfer one buer sinc buer length gener constrain ipc mechan debugg could issu repeat ptrace call receiv one packet time would result larg number context switch debugg applic process side eect use ptrace see figur 4a instead applic process fork child upon long respons readwrit data call return call return call return time block stop activ applic oper system debugg trap signal continu wait return call figur 3 breakpoint debug ptrace see figur 4b child receiv respons ipc buer termin debugg receiv ipc packet parallel 4 6 debugg extens debugg extend two respect first ipc interfac tdi ad second new user command control debug process includ resolut hand tdi ipc extens bundl one modul tdi client bound debugg build process tdi client handl client side ipc communica tion debugg may invok send receiv function tdi client send queri receiv respons case string send queri applic continu ptrace call within tdiserv main function applic side tdi tdi server evalu queri hand parser queri languag may updat state databas use ted interfac respons format return use ipc debugg act upon result second extens debugg dene number new user command action addit function detail section 8 7 implement implement compris chang debugg thread implement gnu debugg gdb 418 chosen purpos sinc sourc avail wide use activ maintain 19 chosen thread implement rang kernel thread linux thread 11 mix thread solari 16 userlevel thread fsu mit pthread 14 17 one challeng activ debug pose interact activ debug oper 4 even uniprocessor child process debugg may run concurr requir context switch packet anymor within applic regular execut applic tdi server may separ thread kernel thread server may simpli invok context activ thread userlevel thread approach may result schedul action due 1 skew consum execut time tdi 2 event notic 3 call librari function use synchron roundrobin schedul activ addit execut time consum tdi server may caus context switch current thread switch occur tdi server nish result obtain debug may inconsist one part result may origin context switch anoth part switch subject modi thread state sinc applic thread activ meanwhil problem occur upon timer expir may also caus signal context switch may also caus synchron particular tdi server call librari function whose entri protect mutex mutex may alreadi lock thread applic result context switch tdi server applic thread even wors deadlock may occur applic thread thread execut tdi server first problem call librari function contain synchron address provid tdispec replac heap alloc string manipul function use tdi server contain potenti block librari call second problem signal handl tdi activ shall discuss one solut would mask signal applic limit time mask could accomplish applic caus race signal may arriv tdi tri mask signal tdi would loos control thread may schedul race avoid debugg forc mask signal applic oper system provid interfac current process anoth process instead oper system interfac thread implement enhanc provid ag set collect signal later handl depict figur 5 debugg use ptrace call set ag applic 1 incom signal collect handl postpon tdi activ tdi activ complet debugg read collect signal 2 clear ag collect signal send signal applic 3 5 implement tdi server contain commun subsystem queri parser queri evalu 5 altern reissu signal would add pend signal thread implement forc check pend signal resum ap plicat would advantag signal context preserv futur work may includ provis commun structur implement via share memori ipc process perform evalu compar ipc variant use page size 8kb ptrace implement use linux 2036 150mhz pentium fsu pthread figur 6 show respons time ptrace time higher perform ipc result underlin advantag ipc approach tdi commun queri parser gener lexic syntact specic gener flex bison respect parser report error illeg queri transform legal one tupl represent fed queri evalu evalu may optim queri invok ted function resolv queri compil respons exampl queri may follow threadidentrystatest threadidprio10st prio1020 cvwf 0x10 2 queri 1 request identi state function thread run block mutex queri 2 request inform except function thread whose prioriti plu 10 less 20 block condit variabl second conjunct pthreaddebugtdiignoredsign scheduling1tim feedback pthreaddebugtdisigignor record debugg posix thread killpid sigalrm ptracepok ptracepeek figur 5 signal handl activ debugging25751251750 250 500 750 1000 1250 1500 respons time instanti thread tdi figur respons time ipc vs ptrace queri 2 also set prioriti select thread 10 respons debugg may follow debugg interpret three tupl iden tier function address state translat address state symbol name output tdi server combin applic dynam link applic tdi server relocat librari advantag applic compil test debug link dynam linker librari use ldl tdi invok even link applic execut outsid debugg debugg invok check thread applic contain symbol indic debug support thread ag found set debugg result dynam bind invoc tdi server librari initi phase debugg send pthread tdi regist messag tdi server tdi present ted set function expect ted respond registr attribut iter function afterward tdi may resolv queri referenc thread object ted function threadspec breakpoint debug also requir chang debugg gdb routin proceed call normal stop wait inferior resum control trap handl breakpoint command resum execut activ applic debugg wait inferior process applic hit trap instruct trap hit debugg resum control clean trace applic code normal stop threadspec breakpoint modifi sequenc check upon resumpt debugg wait breakpoint reach correspond request thread thread identi match normal stop call otherwis breakpoint reset similar cleanup perform normal stop resum call cleanup depict figur 7 applic trap insert trap instruct replac origin instruct applic ensur correct semant b replac trap transfer control debugg resum execut 2 trap replac b replac trap make sure applic halt breakpoint next time around execut step 2 may howev caus schedul action signal receiv prevent disabl signal step 2 use facil discuss final thread identi activ thread determin breakpoint userlevel thread suce search singl run thread use tdi queri kernel thread multipl thread may run multiprocessor system call wait return inform process caus trap mix thread lowlevel schedul entiti identi ensur parallel execut trap dierent thread one applic result serial notic debugg oper system level exampl solari map posix thread onto lightweight process lwp whose statu inform would check upon encount trap requir lwp state posix thread deter mine exampl proc le system singl step command ptstep ptnext see next section use similar techniqu count step execut current thread attach detach thread also similar eect includ threadspec breakpoint program counter target thread breakpoint next context switch realiz set condit breakpoint program counter thread except one trap breakpoint hit condit breakpoint set delet forc chang schedul pattern result tdi queri set thread attribut invok ted function aect schedul thread implement forc suspens also requir debugg signal applic ensur schedul invok dispatch next thread elig run also achiev ad schedul signal set collect signal signal mask discuss 8 threadawar debug section describ command ad modi make gdb thread awar provid extend debug support multithread applic notic gdb alreadi provid limit debug support select thread implement new command debug thread chosen coexist exist function exampl info thread may alreadi list thread solari mach linuxthread new command info pthread list thread applic support tdite facil includ extens inform state thread object may block prioriti etc command avail time pc pc inst b inst c pc code segment inst c code segment inst a3 breakpoint hit resum trap resum execut readi code segment inst c inst b trap code segment inst inst c trap trap reset reset figur 7 reset breakpoint info pthread list set thread termin yet includ attribut thread depict tabl 2 info pmutex list set initi mutex attribut tabl 2 info pcond list set initi condit variabl attribut tabl 2 break pthread thread id set threadspec breakpoint thread idat loca tion ptattach thread id stop thread idth next time schedul rst possibl locat transfer control debugg issu subsequ breakpoint command break next step threadspec mean breakpoint appli attach thread activ thread stop breakpoint ptdetach revers ptattach make breakpoint applic thread ptstack thread id print call stack thread id continu cs continu execut breakpoint hit context switch occur ever come rst latter case identi new thread print ptnextptnextiptstepptstepi n issu n next step instruct current thread ignor instruct execut concurr run thread facil go beyond tradit debug support thread follow sens caus block thread block object identi may allow user identifi deadlock circular depend synchron object thread de pict 6 provid user call stack thread ie user follow progress concurr execu tion threadspec breakpoint debug simpli user task trace execut select thread interact thread detect notic upon context switch final schedul action forc user allow select activ suspens disabl forc thread interact test impact possibl track problem interact also assess overhead activ debug support tdi ted applic side overhead may incur ted two splash2 benchmark 24 measur process emul fsu pthread pentium ii 350 mhz linux 2214 depict figur 6 fft perform calcul 2 20 data 6 may seem automat deadlock detect could easili incorpor true sens state thread may chang absenc signal signal semant pthread provid stabl state sinc signal may interrupt synchron request skip synchron call signal handler reason automat deadlock detect implement barn tabl 3 perform overhead activ debug ging point number fft exclud initi barn use standard paramet except 5 leav number report repres comput time experi number process thread vari 2 128 eect measur overhead repres portion second measur due activ debug overhead depend characterist appli cation eg use less synchron barn explain lower overhead former debugg side overhead tdi queri notic user ie respons time tdi queri equal debugg interact howev larg databas gradual built thousand thread mutex etc respons time queri may aect sinc entri may probe experi problem practic henc relat queri seem suitabl activ debug 9 relat work mcdowel helmbold present overview problem solut debug concurr program 13 ceswel black 5 describ debugg mach thread threadspec breakpoint forc schedul ac tion approach limit kernel thread use nonstandard ptrace interfac portabl approach describ paper ponamgi et al 15 continu work debugg ad event handl detect deadlock livelock multipl entri critic section similar support could ad work level tdi subject constraint describ ie certain thread standard may allow deadlock detect due signal handl smartgdb use nongener design figur 1a thread implement debugg modi chang thread implement may turn requir chang debugg gdb 418 19 requir even modic smartgdb thread implement smartgdb gdb 418 support subset function debug thread still use slow ptrace call commun solari util proc le system ecient access intern structur applic altern commun use tdi term ecienc provid neither portabl system without proc le system allow gener encapsul seen figur 1b local implementationdepend extens solari also provid librari debug thread similar function ted interfac lack exibl tdi make approach portabl wismul et al 23 describ tool set debug parallel program consist debugg partop monitor tool partop support threadawar debug use eventact paradigm execut certain action event oc cur eg thread creat gener eventact paradigm provid path express path action context debug 3 work path express propos user level debugg support today work one hand use similar concept paradigm activ debug hand concept util intern purpos rather user level ie mean commun debugg compon portabl fashion high perform debug forum hpdf speci command interfac parallel debugg 9 includ threadawar debug work specifi user interfac rather interfac thread librari may util debugg also implement threadawar function hpdf interfac even go beyond requir eg suppli addit function display synchron data execut next breakpoint cowni gropp 6 propos debugg interfac display messag within mpi implement demonstr work totalview independ work also conclud dynam link share librari repres exibl way provid debug facil multipl runtim librari panorama 12 parallel debugg mimd architectur reli textbas debugg collect inform visual preden userden representa tion panorama portabl given relianc textbas debugg lower level work dier provid textbas debugg extens may use visual debugg like panorama kessler 10 introduc fast breakpoint regard variant activ debug condit breakpoint realiz replac trap call debug specic handler applic check condit breakpoint trap evalu true therebi improv perform use activ debug resolv relat queri kdb 4 support twolevel debug user kernel thread uniqu design kernel thread control separ local debugg use ptrace interfac proc le system main debugg interact user steer local debugg work dier requir ted interfac thread level snodgrass 18 util relat queri monitor extend databas keep histori trace provid tempor oper queri histori relat queri involv onlin debugg access comput state without histori rather monitor data overal none tool use activ debug relat queri debug thread support much function work present paper combin portabl time 10 conclus paper propos open interfac debug extens thread implement addit extens threadawar debug identi implement within gnu debugg provid addit featur beyond scope exist debugg work base paradigm activ debug includ languageindepend protocol commun debugg applic via relat queri ensur enhanc debugg independ actual thread implement partial complet implement interfac debug ad thread implement work unison enhanc debugg without modic debugg sampl implement interfac debug shown adequaci userlevel thread kernel thread mix thread implement provid extend debug function improv ecienc portabl time avail modi debugg gdbtdi sourc bi nari document avail httpwwwinformatikhuberlindemuellertdi gnu public licens 11 r gener path express high level debug mechan kdb multithread debugg multithread applic implement mach debugg multithread applic standard interfac debugg access messag queue inform mpi test larg beyond multiprocess command interfac parallel debugg fast breakpoint linuxthread librari retarget extens parallel debugg debug concurr program librari implement posix thread unix debug multithread program mpd suno multithread architectur mit pthread relat approach monitor complex system gdb manual gnu sourcelevel debugg implement lightweight thread technic committe oper system applic environ ieee mach thread unix kernel battl control splash2 program characteri methodolog consider tr relat approach monitor complex system debug concurr program fast breakpoint design implement splash2 program retarget extens parallel debugg interact debug perform analysi massiv parallel applic kdb debug multithread program mpd standard interfac debugg access messag queue inform mpi gener path express ctr jaydeep marath frank mueller tushar mohan broni r de supinski salli mckee andi yoo metric track ineffici memori hierarchi via binari rewrit proceed intern symposium code gener optim feedbackdirect runtim optim march 2326 2003 san francisco california