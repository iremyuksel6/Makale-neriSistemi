conjoin specif show specifi compon concurr system specif system conjunct compon specif properti system prove reason compon consid decomposit given system part composit given part form system b introduct larg system built smaller part present method deduc properti system reason compon show repres individu compon pi formula parallel composit usual denot cobegin pi coend repres formula 1 sn composit conjunct reduc composit conjunct sake eleg best way know prove properti composit system rigor reason requir logic henc languag logic formula requir convent program languag describ system find conveni regard program circuit descript lowlevel specif repres logic use higherlevel specif logic use tla tempor logic action lamport 1994 discuss import problem translat lowlevel tla specif implement convent languag idea repres concurr program specif formula tempor logic first propos pnueli 1981 later observ specif allow stutter step leav state unchang l assert l implement h lamport 1983 henc prove lowerlevel specif implement higherlevel one reduc prove formula author address system research center digit equip corpor 130 lytton avenu palo alto ca 94301 permiss copi without fee part materi grant provid copi made distribut direct commerci advantag acm copyright notic titl public date appear notic given copi permiss associ comput machineri copi otherwis republish requir fee andor specif permiss c acm transact program languag system vol 17 3 may 1995 page 507533 508 delta martin abadi lesli lamport logic still later notic formula 999 999x specifi system except variabl x hidden abadi lamport 1991 lamport 1989 variabl hide becam logic quantif idea composit conjunct also suggest abadi plotkin 1993 abramski jagadeesan 1994 zave jackson 1993 method reduc composit conjunct new deduc use properti compon must specifi environ compon exhibit intend behavior presenc suffici hostil environ exampl combin circuit produc output intend rang input line instead 0 1 improp voltag level 12 specif circuit environ must rule improp input reason composit system depend form composit specif aris two way decompos given system smaller part compos given part form larger system two situat call two method write compon specif differ treatment environ differ lead turn differ proof rule decompos specif environ compon assum compon usual left implicit reason compon must state assum environ prove assumpt satisfi compon decomposit theorem section 4 provid need proof rule reduc verif complex lowlevel system prove properti higherlevel specif properti one lowlevel compon time decompos proof way allow us appli decis procedur verif hitherto requir complet handguid proof kurshan lamport 1993 specifi reusabl compon without know precis use must make explicit assum environ therefor assert compon satisfi guarante long environ satisfi assumpt e assumptionguarante properti jone 1983 gamma show composit reusabl compon satisfi specif must prove formula form gamma gamma may assumptionguarante properti prove formula composit theorem section 5 theorem allow us reason assumptionguarante specif use wellestablish effect method reason specif complet system follow section examin issu aris decomposit composit discuss inform wish show issu fundament artifact particular formal treat topic formal section 4 5 section 3 cover formal preliminari comparison relat work appear conclus proof releg appendix 2 inform overview 21 decompos complet system complet system one selfcontain may observ interact observ program complet system provid model acm transact program languag system vol 17 3 may 1995 conjoin specif delta 509 input gener nondeterminist program tini exampl complet system consid program comput gcd greatest common divisor devis inform programminglanguag notat statement within angl bracket execut loopendloop keyword enclos infinit loop cobegincoend keyword enclos parallel statement separ k semicolon usual mean write process also mark variabl output input process chang input variabl access intern variabl anoth process program gcd var initi 233344 b initi cobegin loop h b gamma b endloop loop h b b b gamma endloop coend program gcd satisfi correct properti eventu b becom remain equal gcd 233344 233577899 make distinct program properti write tla formula formula gcd repres program gcd formula p gcd repres correct prop erti program implement properti iff gcd impli p gcd thu correct program gcd verifi prove gcd p gcd hierarch develop one decompos specif system specif part explain section 4 specif gcd program gcd written b assert initi equal 233344 repeatedli decrement valu b whenev b b analog formula b specif two process pi pi b write pi pi b process pi process pi b output var initi 233344 output var b initi input var b input var loop h b one decompos specif order refin compon separ refin gcd program remov simultan atom access b refin process pi process pi l output var initi 233344 intern var ai input var b loop h ai b refin pi b analog process pi l b composit process pi l pi l correctli implement program gcd express tla assert l impli b l l b formula repres pi l pi l b would like decompos proof l proof l l proof would show pi l implement pi pi l b implement pi b initi statesentackedsentackeds fig 1 twophas handshak protocol channel c unfortun pi l implement pi absenc assumpt input b chang pi l behav way process pi process pi decrement current valu b pi l decrement previou valu b b chang assign ai assign similarli pi l b implement pi b process pi l correctli implement process pi context b chang b express tla formula e l e assert b chang b similarli hold analog e b decomposit theorem section 43 allow us deduc l b b approxim follow hypothes 1 third hypothesi hold composit process pi pi b allow chang b b chang b observ e assert properti pi l b need guarante pi l implement pi complic exampl e significantli simpler l b full specif pi l b verifi hypothes therefor easier prove l l b b directli sinc proof requir reason specif l b complet lowlevel program one realli deduc l b hypothes 1 exampl 1 trivial satisfi e e b b equal fals deduc l arbitrari l l b precis hypothes decomposit theorem complic must develop number formal concept order state also develop result allow us discharg complic hypothes prove condit essenti simpl 1 22 compos open system open system one interact environ control exampl consid system commun use standard twophas handshak protocol mead conway 1980 send valu channel state channel c describ three compon valu cval sent two bit csig cack use synchron let csnd denot pair hcsig cvali figur 1 show sequenc state assum send sequenc valu 37 4 channel readi send cack valu v sent set cval v complement csig receipt valu acknowledg complement cack consid nelement queue input channel output channel acm transact program languag system vol 17 3 may 1995 conjoin specif delta 511 oe isnd iack oe osnd oack queue fig 2 queue process queue output var iack osig initi 0 intern var q initi h input var isig ival oack cobegin loop theta theta iack 6 isig jqj n theta theta q q ffi hi vali iack loop theta thetatheta theta thetatheta oval head q coend fig 3 queue process depict figur 2 describ queue use programminglanguag construct introduc section 21 particular write larg atom action within angl bracket also introduc follow notat finit sequenc jaej denot length sequenc ae equal 0 ae empti heada taila usual denot head first element tail sequenc ae ae nonempti ae ffi denot concaten sequenc ae moreov angl bracket use form sequenc h denot empti sequenc hei denot sequenc e element notat queue written figur 3 let qm tla formula repres queue process might seem natur take qm specif queue howev specif would difficult imposs implement state queue behav properli even environ obey commun protocol exampl lowerlevel implement read input oack set output osig oval would separ action environ chang oack action implement could violat requir chang oval oack osig problem artifact particular represent queue actual hardwar implement queue enter metast state consequ produc bizarr unpredict behav ior input chang suppos mead conway 1980 specif queue allow execut queue perform rule bad behavior queue caus environ perform incorrectli specif written assumptionguarante style gener tradit prepostcondit style sequenti program assumptionguarante specif assert system provid guarante environ satisfi assumpt e queue formula qm e assert environ obey acm transact program languag system vol 17 3 may 1995 fig 4 simpl exampl system system oe commun protocol obviou reason composit system describ assumptionguarante specif basic problem illustr simpl case two system one guarante c assum guarante assum c sinc system guarante satisfi other environ assumpt would like conclud composit implement specif uncondit environ assumpt attempt answer question consid two simpl exampl base figur 4 first exampl c assert c alway equal 0 assert alway equal 0 implement specif follow two process process pi c process pi output var c initi input var input var c loop h c endloop loop h c endloop process pi c guarante 0 assum 0 process pi guarante 0 assum c clearli composit leav c unchang implement 0 second exampl c assert c eventu equal 1 assert eventu equal 1 process pi c pi implement specif case process assum 1 process pi guarante 1 assum 1 c howev sinc composit leav c unchang implement conclus first exampl depend particular choic process pi c pi deduc directli assumptionguarante specif composit must implement 0 first process chang output variabl would violat guarante assumpt violat argument appli second exampl violat c 1 sin omiss occur particular instant properti made fals violat instant call safeti properti alpern schneider 1985 exampl suggest reason composit assumptionguarante specif easiest assumpt safeti properti argument composit implement 0 first exampl rest requir process maintain guarante acm transact program languag system vol 17 3 may 1995 conjoin specif delta 513 environ violat assumpt word interpret assump tionguarante specif assert guarante becom fals assumpt e becom fals write assert formula gamma section 5 discuss form specif rule reason composit assumptionguarante specif embodi composit theorem section 52 composit theorem prove conjunct assumptionguar ante specif 0 c gamma 0 0 gamma 0 impli 0 also prove substanti resultsfor exampl composit queue implement larger queue verifi hypothes theorem requir reason complet system theorem allow us handl assumptionguarante specif easili completesystem specif 3 preliminari 31 311 review syntax semant state assign valu variabl technic variabl flexibl variabl tempor logic correspond variabl program languag distinct variabl firstord logic behavior infinit sequenc state semant tla formula f true fals behavior say f valid write true everi behavior syntact tla formula built state function use boolean oper implic oper 0 2 999 999 describ state function like express program languag semant assign valu statefor exampl assign state three plu valu variabl x state predic booleanvalu state function action booleanvalu express contain prime unprim variabl semant action true fals pair state prime variabl refer second statefor exampl x true hs ti iff valu greater valu pair state satisfi action call step say enabl state iff exist state hs ti stepfor exampl enabl state x 0 state predic enabl true state iff enabl write v 0 express obtain prime variabl state function v v v v step either step step leav v unchang usual tempor logic f formula 2f formula mean f alway true 3f abbrevi 2f mean f eventu true addit action v state function 2a v abbrevi 2a v use 2 enabl predic defin fair oper wf sf weakfair formula wf v assert behavior either infinit mani step chang v infinit mani state step enabl written 23hai v 23enabl hai v strongfair formula sf v assert either infinit mani step chang v finit mani state step enabl written acm transact program languag system vol 17 3 may 1995 formula 999 999x f mean essenti way choos sequenc valu x tempor formula f hold think f x hidden call x intern variabl 999 999x f x x 0 bound 999 999x 999 999x f x tupl variabl hx standard way specifi system tla formula canon ical init predic l conjunct fair condit formula assert exist sequenc valu x 1 init true initi state 2 everi step behavior n step leav state function v unchang 3 l hold exampl specif gcd complet highlevel gcd program written canon form take 1 init delta b b 2 intuit variabl repres part univers behavior repres possibl complet histori univers system pi repres true precis behavior repres histori pi run make formal distinct system specifica tion properti repres tla formula usual call specif 312 interleav noninterleav represent let two ob ject repres variabl x respect repres histori univers behavior describ concurr chang either singl simultan chang x separ chang x order chang directli link usual conveni describ concurr chang singl chang x howev chang independ free choos whether allow simultan chang x interleav represent one simultan chang disallow chang directli link often think x output variabl singl compon interleav represent one simultan chang output variabl differ process disallow absenc simultan chang express tla formula system n compon v tupl output variabl compon interleav express formula let list formula bullet denot conjunct disjunct formula use indent elimin parenthes also let lower preced boolean oper conjoin specif delta 515 oe isnd iack oe osnd oack queue e e r r e c e e r fig 5 complet system queue plu environ found tla interleav represent usual easier write reason moreov interleav represent adequ reason system system model suffici fine grain atom howev discuss tla also work noninterleav represent tla mandat particular method repres system inde one write specif intermedi interleav noninterleav represent 313 queue exampl give tla specif queue natur number length n describ inform section 22 illustr figur 2 section 22 write csnd pair hcsig cvali channel c also write c tripl hcsig cack cvali channel initi readi send initi condit wire c predic cinitc defin cinitc delta oper send valu v acknowledg receipt valu channel c repres follow send v c ack c action repres queue complet system add environ send arbitrari natur number channel acknowledg receipt valu channel result complet system shown figur 5 tla formula cq specifi queue defin figur 6 canon form x intern variabl q repres sequenc valu receiv input channel yet sent output channel init written conjunct init e init initi predic environ compon arbitrarili consid initi condit channel part sender initi predic n disjunct two action qm describ step taken compon qe q describ step taken environ leav q unchang action qm disjunct action enq deq enq step acknowledg receipt valu append valu q enabl q fewer n element deq step remov first element q send action qe disjunct put acm transact program languag system vol 17 3 may 1995 environ action get delta init compon action specif fig 6 specif cq complet queue formula cinit send ack defin text send arbitrari number channel get acknowledg receipt number channel v tupl hi qi relev variabl 2 l weakfair condit icl defin wf hi qi qm assert compon step remain forev possibl without occur shown logic equival specif obtain condit replac wf hi qi enq wf hi qi deq formula cq give interleav represent queue simultan step queue environ allow moreov simultan chang two input isnd oack disallow simultan chang two output iack osnd section 4 describ noninterleav represent queue 32 implement specif l impli specif iff everi behavior satisfi l also satisfi henc prove l show system pi l repres l implement system properti pi repres note l inconsist equival fals l hold vacuous inconsist l repres system pi l formula l prove appli hand simpl rule lamport 1994 form 999 key step proof find refin inform write hi qi concaten tupl hqi conjoin specif delta 517 oe isnd iack oe zsnd zack queue1 e e r oe osnd oack queue2 r e c e e r fig 7 complet system contain two queue seri 26 4 fig 8 specif complet doublequeu system figur 7 mappinga tupl state function x l impli c formula obtain substitut x x therefor x 0 x 0 c reason assumpt refin map exist l 999 valid abadi lamport 1991 exampl show system compos two queue seri shown figur 7 implement singl larger queue first specifi composit queue let f e 1 denot result simultan substitut express e v formula f exampl get defin figur 6 get zi equal acko z z formula f let figur 8 specif cdq complet system consist doubl queue environ defin term formula figur 6 think complet system contain three compon environ two queue initi condit conjunct initi condit compon nextstat action consist three disjunct repres action three compon leav compon variabl unchang final take live condit conjunct fair condit two queue show composit queue implement 2n 1element queue 1 aris intern channel z act buffer element correct condit cdq formula f prove show icdq icq dbl refin acm transact program languag system vol 17 3 may 1995 map defin els formula icdq icq dbl prove standard tla reason kind describ lamport 1994 33 condit implement instead prove specif l implement specif sometim want prove weaker condit l implement assum formula g word want prove g l equival l formula g may express one follow law natur exampl realtim specif g might assert time increas monoton current time repres variabl assumpt express formula 2 r 2now 0 2 1 r set real number interfac refin g express relat lowlevel tupl l variabl highlevel represent tupl h variabl ex ampl l might lowlevel interfac repres transmiss sequenc bit wire h could highlevel interfac send seven success bit interpret transmiss singl ascii charact assumpt realiti translat formal behavior particular g may assert interleav assumptionfor exampl assumpt form disjointv condit implement explicit formula g need open system complet system properti express g easili made part system specif exampl system includ compon advanc time contrast difficult includ g specif open system 34 safeti closur 341 definit closur finit sequenc state call finit behavior formula f finit behavior ae say ae satisfi f iff ae extend infinit behavior satisfi f conveni say empti sequenc h satisfi everi formula even fals safeti properti formula satisfi infinit behavior oe iff satisfi everi prefix oe alpern schneider 1985 predic init action n state function v formula init 2n v safeti properti shown tla formula f tla formula cf call closur f behavior oe satisfi cf iff everi prefix oe satisfi f formula cf strongest safeti properti proposit 1 impli cinit 2n conjunct suitabl fair properti conjoin specif delta 519 342 machin closur write specif form init 2n expect l constrain infinit behavior finit one formal mean closur init 2n init 2n v pair properti call machin close iff cp l equal p abadi lamport 1991 often say inform p l machin close proposit 1 alreadi prove abadi lamport 1994 show use fair properti write machineclos specif proposit reli follow definit action subact safeti properti p iff everi finit behavior enabl state r n exist state r n1 hr satisfi p hr step follow definit subact impli n subact init 2n v proposit 1 p safeti properti l conjunct countabl number formula form wfw andor sfw w 0 6 w subact p p l machin close 343 closur hide sever result hypothes form obviou first step prove formula comput closur cm 1 use proposit 1 comput closur formula intern variabl intern variabl follow proposit allow us reduc proof cm 1 proof formula closur comput proposit 1 proposit 2 let x x tupl variabl variabl x occur j 6 j proof appendix result also hypothes form cm 1 expect e safeti properti verifi e safeti properti appli proposit 2 e intern variabl often use proposit 2 abadi lamport 1991 verifi e safeti properti addit tempor oper defin addit tempor oper although express term primit tla oper 0 2 999 999 defin semant 351 oper formula ev assert tempor formula state function v stop chang precis behavior oe satisfi ev iff either oe satisfi e n 1 e hold first n state oe 2 v never chang n 1st state e safeti properti canon form easi write ev explicitli proposit 3 x tupl variabl none occur v variabl occur init n w v x init delta init 2 b need reason verifi hypothes form decomposit composit theorem verifi hypothesi first appli observ cev equal cev use proposit 3 calcul ev howev approach necessari noninterleav specif proposit 4 provid way prove hypothes interleav specif without calcul ev 352 gamma oper tempor formula e formula e gamma assert hold least long e abadi plotkin 1993 precis gamma true behavior oe iff e true oe everi finit prefix ae oe e true ae true ae follow definit gamma e gamma equal ce gamma cm oper gamma act much like ordinari implic fact equival cours gener true 353 gamma oper observ introduct interpret specif guarante assumpt e formula gamma mean hold least one step longer e precis gamma true behavior oe iff true oe everi n 0 hold first n state oe hold first n1 state oe follow definit gamma gamma equal ce gamma cm gamma stronger e gamma assert hold long e shown e safeti properti gamma equal gamma e gamma prove appendix e safeti properti v tupl variabl contain free variabl gamma equal ev gamma 354 oper specif compon made fals step chang compon output variabl interleav represent allow singl step chang output variabl two differ compon henc e specif separ compon expect step make e fals precis expect orthogon true behavior oe iff true first n state oe fals first n1 state oe shown safeti properti gamma step falsifi e remain true long e must remain true least one step longer e henc equival gamma fact prove appendix acm transact program languag system vol 17 3 may 1995 conjoin specif delta 521 gamma valid relat gamma deriv proposit 4 e r safeti properti v tupl variabl contain variabl occur free impli proposit enabl us use orthogon remov proof obliga tion appli proposit must prove orthogon compon specif interleav specif follow result proposit 5 e c9 4 decompos complet specif 41 specifi compon let us consid write specif one compon larger system assum free variabl specif partit tupl output variabl e input variabl compon chang valu variabl gener situat discuss specif compon form 999 999x init 2n complet system compon specif v tupl hx ei init describ initi valu compon output variabl intern variabl x n allow two kind stepson compon perform one environ perform step perform compon chang output variabl describ action nm interleav rep resent compon input output chang simultan nm impli e noninterleav represent nm constrain valu e 0 variabl e appear prime nm either case specifi compon environ let environ anyth except chang compon output variabl intern variabl word environ allow perform step hm xi 0 equal hm xi describ gener specif environ action chang x therefor n equal l conjunct fair condit form wf hm xi sf hm xi interleav represent definit allow step chang e subscript hm xi xi yield equival fair condit 522 delta martin abadi lesli lamport lead us write form simpl logic 3 equival specif process pi gcd exampl x empti tupl intern variabl input variabl e b output variabl init n init 2n wf n specif l lowlevel process pi l tupl x pca intern variabl tell whether control begin loop assign ai specif form l 2n l appropri initi condit init l nextstat action n l specif b l b similar queue exampl write specif queue environ separ compon form 4 queue compon tupl output variabl hi ack osndi tupl e input variabl hi snd oacki specif specif environ separ compon provid specif queue environ interleav represent noninterleav represent queue obtain modifi specif follow chang enq deq action constrain valu snd 0 oack 0 defin action deqenq simultan enqueu input valu dequeu output valu chang definit qm deqenq addit disjunct result specif qm ni given figur 9 noninterleav specif allow step chang simultan nonin terleav represent queue environ obtain similar fashion describ compon nextstat action n requir environ action chang compon intern variabl one also write acm transact program languag system vol 17 3 may 1995 conjoin specif delta 523 init fig 9 noninterleav represent queue compon specif compon record environ action chang intern variabl case n equal may impli result formula pure interleav specif environ action chang compon variabl action chang compon environ output variabl explor style specif assum visibl variabl compon specif partit tupl output variabl e input variabl see handl gener case let action 0 6 let v equal mi observ nm hm xi equal nm step one attribut compon sinc chang compon output variabl tupl v variabl partit input output variabl defin action specifi step attribut compon write compon nextstat action form result separ input output variabl gener write nextstat action form howev simplic consid special case 42 conjoin compon form complet system section 31 describ specifi complet system section 41 describ specifi individu compon system complet system composit compon compos two system mean construct univers run formula 1 2 repres two system 1 2 repres composit sinc behavior repres possibl histori univers contain system iff satisfi 1 thu principl composit conjunct show composit conjunct practic well composit conjunct conjunct specif compon equival specif complet system exampl conjunct specif qm queue qe environ equival specif cq complet system acm transact program languag system vol 17 3 may 1995 524 delta martin abadi lesli lamport shown figur 5 recal deduc equival qe qm cq follow result substitut qe 1 qm 2 case x 1 empti tupl h proposit tupl variabl let 1 variabl x 3 proposit third hypothesi assert compon leav variabl compon unchang interleav represent compon henc impli disjointm impli expect interleav represent complet system gcd exampl appli proposit formula 5 analog formula b immedi get b equival formula gcd defin 2 except wf ha bi n instead wf ha bi n shown two fair condit henc b equival gcd anoth exampl decomposit consid system figur 7 consist two queue seri togeth environ system decompos three compon follow specif 1st queue 999 999 2nd queue 999 999 obtain interleav represent conjoin acm transact program languag system vol 17 3 may 1995 conjoin specif delta 525 first queue nextstat action q 1 mention similarli conjoin second queue nextstat action z z environ follow proposit 6 conjunct three specif equal specif cdq complet system defin figur 8 third hypothesi proposit 6 satisfi interleav represen tation arbitrari represent straightforward calcul show assum first hypothesi proposit righthand side expect form noninterleav specif sinc allow n n j step henc composit conjunct noninterleav represent 43 decomposit theorem 431 basic theorem consid complet system decompos compon would like prove system implement lowerlevel one consist compon pi l prove pi l specif pi l specif pi l must prove impli implic trivial true l howev saw gcd exampl l need impli even l hold need reason lowerlevel compon togeth instead prove includ properti compon assum compon usual much simpler k prove reason compon entir lowerlevel system proposit logic deduc impli l may prove howev prove still requir reason k specif entir lowerlevel system follow theorem show need prove e impli specif higherlevel systema formula usual much simpler k prove deduc reason sound gener reason would allow us deduc l equal break circular need add cs one hypothesi violat least one addit step l impli hypothesi express formal hypothesi weakest v taken tupl relev variabl proof rule theorem 1 decomposit theorem 2 526 delta martin abadi lesli lamport b l theorem corollari composit theorem section 52 gcd exampl want use theorem prove l b compon specif describ section 41 abstract environ specif e assert b chang b chang step chang b thu definit e b analog let v ha bi gener environ compon specif intern vari abl theorem also allow contain fair condit howev first hypothesi assert e impli safeti properti practic mean theorem appli e safeti proper tie exampl section 22 lead us expect restrict moreov e intern variabl expect simpl historydetermin variabl abadi lamport 1994 proposit 2 abadi lamport 1991 use prove e safeti properti 432 verifi hypothes discuss one verifi hypothes decomposit theorem illustr method gcd exampl prove first hypothesi one first elimin closur oper existenti quantifi use proposit 1 2 proposit 2 abadi lamport 1991 reduc hypothesi condit form interleav represent use proposit 6 write canon form noninterleav represent appli 9 either case proof 10 implement proof kind discuss section 32 gcd exampl first hypothesi assert cm e e b differ third hypothesi 1 section 21 cs verifi hypothesi appli proposit 1 show cm cm b obtain simpli delet fair condit b sinc n b impli easi see cm b impli e equal easi see cm impli e b complic exampl follow cm j singl j prove part second hypothesi first elimin non interleav represent must done proposit 3 describ section 351 interleav represent appli proposit 4 5 describ section 354 either case prove result formula first use proposit 2 elimin quantifi use proposit 1 comput closur perform standard implement proof refin map conjoin specif delta 527 part b hypothesi also call standard implement proof use refin map proof sinc e impli impli cm l infer part impli prove part b requir verifi live part gcd exampl verifi two part second hypothesi prove proof correspond condit b similar first observ initi condit e true sinc l interleav represent nextstat action n l impli step chang b cm l impli disjointa b henc appli proposit 4 5 reduc task prove ce appli proposit 2 remov quantifi cm l proposit 1 remov cs reduc prove ce prove 2n l use simpl logic 11 reduc prove e l prove 2n l use proposit 6 rewrit lefthand side 11 12 canon form result condit usual form tla implement proof summari appli proposit standard sequenc use decomposit theorem reduc decomposit reason ordinari tla reason reduct may seem complic trivial exampl gcd program howev insignific compar complex complet proof realist exampl one kurshan lamport 1993 discuss 433 gener theorem sometim need prove correct system defin induct induct stage n1 low highlevel specif defin conjunct k copi low highlevel specif stage n respect exampl 2 n1 bit multipli sometim implement combin four 2 n bit multipli want prove induct n stage n lowlevel specif implement stage n highlevel spec ific proof need gener decomposit theorem whose conclus stage n use prove hypothes stage n1 appropri theorem theorem 2 gener decomposit theorem 1 2 b 3 v tupl variabl includ free variabl 528 delta martin abadi lesli lamport cm l b l conclus b theorem form hypothesi 2b l replac conjunct make correspond hypothesi 2a follow conclus suffic prove gener decomposit theorem appli verif induct defin multipli circuit kurshan lamport 1993 shown version decomposit theorem provid complet rule verifi one composit impli anoth howev result signific decomposit simplifi proof proof decompos sens l implement correspond simpl environ assumpt e theorem design handl proof decompos 5 compos assumptionguarante specif 51 form assumptionguarante specif assumptionguarante specif assert system guarante assumpt environ satisfi e saw section 22 specif express gamma mean n environ satisfi e time n system must satisfi time n1 perhap obviou form assumptionguarante specif formula gamma sinc allow behavior violat e howev implement could exploit extra freedom predict advanc environ violat e system control environ predict environ specif gamma therefor allow implement take gamma form assumptionguarante specif form lead simpler rule composit discuss section 22 composit work best environ assumpt safeti properti shown gamma equival ce gamma principl convert assumptionguarante specif one whose assumpt safeti properti similar observ appear earlier work abadi lamport 1993 theorem 1 howev equival intellectu interest practic write environ assumpt safeti properti system fair guarante conjunct properti el environ fair assumpt appli proposit 1 show result specif machin close p l machin close l impli r also machin close abadi lamport 1994 proposit 3 conjoin specif delta 529 52 composit theorem suppos given n devic assumptionguarante specif gamma j verifi composit devic implement higherlevel assumptionguarante specif gamma must prove gamma gamma use follow theorem theorem 3 composit theorem 1 2 b gamma gamma theorem also allow us prove condit implement result form g gamma gamma let 1 equal g e 1 equal true sinc true gamma g equal g interleav specif gener prove condit implement g includ disjoint condit assert output differ compon chang simultan hypothes composit theorem similar decomposit theorem prove much way major differ interleav specif orthogon condit ce cm follow form compon specif requir explicit disjoint assumpt observ hypothes form form specif complet system compon specif p thu hypothesi assert complet system satisfi properti r word theorem reduc reason assumptionguarante specif kind reason use completesystem specif among corollari composit theorem one allow us prove lowerlevel specif impli higherlevel one simplest result conclus gamma gamma condit express correct refin compon fix environ assumpt corollari 1 e safeti properti b gamma gamma 53 queue exampl assumptionguarante specif queue figur 2 qe gamma qm qm qe defin 7 8 section 41 compos two queue shown figur 7 specif queue obtain qe gamma qm substitut qe 1 gamma qm 1 qe 2 gamma qm 2 want show composit implement 2n 1element queue specifi qe dbl gamma qm dbl obviou thing tri prove gamma qm 1 gamma gamma qm dbl could prove use noninterleav represent queue howev 13 valid interleav represent follow rea son specif first queue mention second queue mention conjunct two specif allow enqueu action first queue dequeu action second queue happen simultan step chang iack osnd simultan interleav represent 2n 1element queue guarante allow step 13 must invalid anoth problem 13 conjunct compon queue specif allow step chang zsnd oack simultan step satisfi 2n 1element queue environ assumpt qe dbl mention z 13 assert next step must satisfi guarante qm dbl howev step chang zsnd oack violat second compon queue environ assumpt permit compon queue make arbitrari chang osnd next step similar problem caus simultan chang isnd zack alreadi face problem disallow simultan chang differ compon output section 42 decompos interleav specif 2n 1element queue solut strengthen nextstat action compon queue environ solut use want compos preexist specif without modifi case prove composit implement larger queue assumpt output two differ compon chang simultan thu prove gamma qm 1 gamma gamma qm dbl g formula proof outlin figur 10 6 conclus develop method describ compon concurr system tla formula shown describ complet system conjunct compon specif describ open system formula gamma e specif environ compon system compon respect although idea reduc program concept logic old approach new style write specif direct believ practic conjoin specif delta 531 1 cqe dbl proof use proposit 2 1 remov quantifi closur oper lefthand side implic result formula assert complet system consist safeti part two queue intern state visibl togeth environ implement qe 1 qe 2 proof formula straightforward 2 21 211 ciqm 1 proof follow easili proposit 1 definit 212 cqm 1 proof 211 proposit 2 sinc predic safeti properti 213 qed proof 212 definit g proposit 5 sinc disjoint safeti properti 22 proof use proposit 2 1 remov quantifi closur formula result formula prove prove safeti part step 3 23 qed proof 21 22 proposit 4 3 qe dbl g qm 1 qm 2 qm dbl proof direct calcul show lefthand side implic impli cdq completesystem specif doubl queue alreadi observ section 32 cdq implement cq dbl equal qe dbl qm dbl 4 qed proof 13 composit theorem substitut fig 10 proof sketch 14 also provid rule prove properti larg system reason compon composit decomposit theorem rather simpl yet allow fair properti hide preced result long list public describ next like previou composit theorem strong sens could handl circular safeti properti approach differ earlier one gener treatment fair hide first strong composit theorem know misra chandi 1981 consid safeti properti process commun mean csp primit wrote assumptionguarante specif hoar tripl contain assert histori variabl pandya joseph 1991 extend approach handl live properti pnueli 1984 first use tempor logic write sumptionguarante specif strong composit theorem safeti properti hide handl live wrote assumptionguarante specif implic instead gamma obtain strong composit theorem stark 1985 also wrote assumptionguarante specif implic tempor formula requir circular avoid earlier work abadi lamport 1993 semant complic model agent lack practic proof rule handl fair hide collett 1993 adapt work uniti abadi plotkin 1993 use proposit logic agent consid safeti properti previou paper concern composit assumptionguar ante specif lack analog decomposit theorem except work berthet cerni 1988 use decomposit prove safeti properti finitest automata far appli composit theorem toy exampl formal reason system still rare gener occur casebycas basi specif compon use verifi specif system need gener assumptionguarante specif practic applic decomposit suffic decomposit suffic composit theorem make reason open system almost easi reason complet one use decomposit theorem difficulti toy ex ampl howev believ biggest payoff system complex verifi easili hand theorem make possibl decis procedur work verifi system even procedur appli whole system state space larg unbound approach current pursu one substanti ex ampl mechan verif multipli circuit use combin tla reason mechan verif cospan kurshan lamport 1993 elimin reason complet lowlevel system decomposit theorem key divis labor acknowledg karli ceran stephan merz yuan yu anonym refere provid help comment earlier version conjoin specif delta 533 r compos specif exist refin map logic view composit game full complet multipl linear logic defin live algebra model asynchron circuit verif ieee tran applic composit principl unitylik specif specif design parallel program verif multipli 64 bit beyond computeraid verif tempor logic action simpl approach specifi concurr system good tempor logic introduct vlsi system proof network process transit global modular tempor reason program tempor semant concurr program proof techniqu relyguarante properti conjunct composit revis juli tr algebra model asynchron circuit verif simpl approach specifi concurr system transit global modular tempor reason program exist refin map compos specif logic view composit conjunct composit tempor logic action oldfashion recip real time game full complet multipl linear logic introduct vlsi system applic composit principl unitylik specif proof techniqu relyguarante properti verif multipli ctr jonathan ostroff composit refin discret realtim system acm transact softwar engin methodolog tosem v8 n1 p148 jan 1999 carlo furia matteo rossi dino mandrioli angelo morzenti autom composit proof realtim system theoret comput scienc v376 n3 p164184 may 2007 fei xie guowu yang xiaoyu song componentbas hardwaresoftwar coverif build trustworthi embed system journal system softwar v80 n5 p643654 may 2007 krishnendu chatterje thoma henzing marcin jurdziski game secur equilibria theoret comput scienc v365 n1 p6782 10 novemb 2006 j niehren j schwinghamm g smolka concurr lambda calculu futur theoret comput scienc v364 n3 p338356 8 novemb 2006 marc shapiro practic proof concurr program acm sigplan notic v41 n9 septemb 2006 de la riva javier tuya automat gener assumpt modular verif softwar specif journal system softwar v79 n9 p13241340 septemb 2006 arnaud bailli mireil clerbout isabel simplotryl compon composit preserv behavior contract base commun trace theoret comput scienc v363 n2 p108123 28 octob 2006 feng zhong shao modular verif concurr assembl code dynam thread creation termin acm sigplan notic v40 n9 septemb 2005 ralph jefford constanc l heitmey strategi effici verifi requir acm sigsoft softwar engin note v28 n5 septemb ansuman banerje pallab dasgupta open famili tempor logic annot tempor oper input constraint acm transact design autom electron system toda v10 n3 p492522 juli 2005 flanagan stephen n freund shaz qadeer sanjit seshia modular verif multithread program theoret comput scienc v338 viktor vafeiadi mauric herlihi toni hoar marc shapiro prove correct highlyconcurr linearis object proceed eleventh acm sigplan symposium principl practic parallel program march 2931 2006 new york new york usa alur radu grosu modular refin hierarch reactiv machin acm transact program languag system topla v26 n2 p339369 march 2004 harri c li shriram krishnamurthi kathi fisler modular verif open featur use threevalu model check autom softwar engin v12 n3 p349382 juli 2005 stephan merz model check tutori overview model verif parallel process springerverlag new york inc new york ny 2001 axel van lamsweerd formal specif roadmap proceed confer futur softwar engin p147159 june 0411 2000 limerick ireland alur thoma henzing orna kupferman alternatingtim tempor logic journal acm jacm v49 n5 p672713 septemb 2002 juergen dingel computerassist assumeguarante reason verisoft proceed 25th intern confer softwar engin may 0310 2003 portland oregon natasha sharygina jame brown fei xie robert kurshan vladimir levin lesson learn model check nasa robot control formal method system design v25 n23 p241270 septembernovemb 2004 leila barakatain sofin tahar jean lamarch jeanmarc gendreau practic approach verif telecom megacel use formalcheck proceed 11th great lake symposium vlsi p16 march 2001 west lafayett indiana unit state hakan erdogmu architecturedriven verif concurr system nordic journal comput v4 n4 p380413 winter 1997 dachuan yu zhong shao verif safeti properti concurr assembl code acm sigplan notic v39 n9 septemb 2004 sagar chaki sriram k rajamani jakob rehof type model model check messagepass program acm sigplan notic v37 n1 p4557 jan 2002 thoma henzing shaz qadeer sriram k rajamani serdar tasiran assumeguarante rule check simul acm transact program languag system topla v24 n1 p5164 januari 2002 alur thoma henzing reactiv modul formal method system design v15 n1 p748 juli 1999 variabl prove simul specif acm transact comput logic tocl v6 n1 p175201 januari 2005 l e moser ramakrishna g kutti p melliarsmith l k dillon graphic environ design concurr realtim system acm transact softwar engin methodolog tosem v6 n1 p3179 jan 1997 alur radu grosu modular refin hierarch reactiv machin proceed 27th acm sigplansigact symposium principl program languag p390402 januari 1921 2000 boston usa michel charpenti compos invari scienc comput program v60 n3 p221243 may 2006 thoma henzing shaz qadeer sriram k rajamani decompos refin proof use assumeguarante reason proceed 2000 ieeeacm intern confer computeraid design novemb 0509 2000 san jose california lesli lamport tla pictur ieee transact softwar engin v21 n9 p768775 septemb 1995 thoma henzing xiaojun liu shaz qadeer sriram k rajamani formal specif verif dataflow processor array proceed 1999 ieeeacm intern confer computeraid design p494499 novemb 0711 1999 san jose california unit state alberto coenporisini carlo ghezzi richard kemmer specif realtim system use astral ieee transact softwar engin v23 n9 p572598 septemb 1997 carl gunter elsa l gunter michael jackson pamela zave refer model requir specif ieee softwar v17 n3 p3743 may 2000