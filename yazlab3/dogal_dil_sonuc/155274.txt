logic data model propos objectori data model gener relat hierarch network model databas scheme model direct graph whose leav repres data whose intern node repres connect among data instanc construct object separ name valu defin logic model describ nonprocedur queri languag base logic also describ algebra queri languag show equival logic languag b introduct research databas theori 1970 earli 1980 focus mainli relat model cod70 due eleg mathemat simplic simplic howev gradual recogn one major disadvantag relat model forc store data flat structur real data alway ss77 cod79 motiv great deal research past decad structur data model socal semant data model cf nest relat cf complex object cf reader refer excel survey two work found particular inspir jacob jac79 jac82 hull yap hy82 jacob describ databas logic mathemat model databas claim gener three princip data model hull yap hy82 describ format model gener relat hierarch model format model databas scheme view tree leaf repres data intern node repres connect among data model unsatisfactori abil restructur data ie abil queri databas hull yap ignor issu data manipul languag jacob treatment overkillhi queri languag enabl one write noncomput queri var83 furthermor approach fail model signific aspect hierarch network databas manag system abil use virtual record virtual record essenti pointer physic record use avoid redund databas ull82 note virtual record introduc cyclic schema level also instanc level model propos databas scheme arbitrari direct graph format model leav ie node outgo edg repres data intern node repres connect among data hard model cyclic schema level quit appar instanc level without run cyclic defini tion solut distinguish object name object valu equival address space data space distinct goe back codd notion surrog cod79 thu instanc model consist object separ name valu enabl us give semant instanc welldefin way data model consist sever compon tl82 first databas structur mention describ static portion databas second compon way specifi integr constraint databas restrict allow instanc schema shall describ logic integr constraint specifi logic inspir jacob databas logic jac82 unlik databas logic logic effect given databas sentenc logic one test effect whether sentenc true databas third compon way restructur data order describ user view queri etc describ two mechan logic ie nonprocedur queri languag algebra ie procedur queri languag analog codd relat calculu relat algebra prove two languag equival languag novel featur access nonflat data structur eg hierarchi answer produc flat either thu languag realli abil restructur data retriev oppos approach cite 2 introduct logic data model logic data model ldm gener hull yap format model hy82 format model fail model import part network hierarch databas system name abil use virtual record model introduc cyclic databas schema ldm schema label direct multigraph 1 node particular type leav schema ie node outgo edg basic type denot graphic instanc node contain data valu store databas interior node one follow type 1 product denot graphic h theta domain node cartesian product domain children 2 power denot graphic h node exactli one child 1 multigraph one one edg two node domain node set finit subset domain child 3 union denot graphic h domain node disjoint union domain children person parent rehoboam solomon solomon david solomon batsheba david jess figur 1 personpar relat theta figur 2 personpar relat ldm schema exampl 1 fig 1 show genealog databas relat repres structur relat ldm schema fig 2 consist two node u v type correspond person parent attribut respect one node w type h theta contain pair relat attribut moment instanc ldm schema assign node u set iu valu correspond domain instanc correspond data fig 1 consist follow assign person oe figur 3 genealog network figur 4 ldm schema correspond fig 3 exampl 2 genealog could repres network fig 3 network two record type person contain name peopl databas dummi record pp two link set connect dummi record person parent idea behind map network ldm schema fig 4 follow record type r map product node v r field r v r child type link set network r member let r j owner link v r j child v r fig 4 w v pp v v person u correspond field person record ie person name two arc w v correspond two link network content relat fig 1 correspond instanc ldm schema fig 4 would virtual person person figur 5 genealog hierarchi figur correspond hierarchi exampl 3 fig 5 show hierarch represent genealog hierarchi person record relat link list parent even though hierarch model use link list realli matter implement intuit user see connect person set parent therefor map record type r product node v r network model child type correspond r field howev r member link r r j instead connect v r v r j directli connect node type correspond ldm schema cyclic schema fig 6 cyclic schema one defin instanc way write instanc exampl complic gener data well schema cyclic write similar one problem jacob databas logic mathemat theori develop deal problem close relat nonwellfound set acz85 approach defin instanc schema separ concept object name object valu intuit object name address object valu content address instanc consist 1 assign set iu object name node u schema 2 assign object valu vall name l iu name taken fix infinit set l usual set natur number valu taken fix infinit set data valu built object name show instanc previou exampl look like use name valu exampl 4 relat instanc exampl 1 consist follow assign name node assign valu vall name assign shown fig 7 l vall 3 david l vall 6 batsheba 7 jess l vall 9 2 5 figur 7 instanc ldm schema correspond relat exampl 5 fig 8 show instanc correspond hierarchi exampl 3 l vall 3 david 5 jess l vall 9 4 l vall figur 8 instanc ldm schema correspond hierarchi 3 formal descript logic data model definit 1 schema tupl 1 v e direct multigraph 2 total order e 3 function v set type f g satisfi follow condit see fig leaf b v exactli one child c children v distinct node theta howev multipl edg v node w order edg use induc order compon tupl v call type v readabl use follow abbrevi 1 w abbrevi child w 2 n abbrevi theta v n children figur 9 node ldm schema abbrevi theta exactli n edg e 1 e n tail v edg head v 1 v n 3 n abbrevi v n children abbrevi exactli n edg e 1 e n tail v edg head v 1 v n realli overload symbol practic caus confus abbrevi use includ refer element v e node edg respect refer order children node shall ignor order clear context shall often refer schema instanc consist two part assign set object name node assign object valu object name proviso assum fix infinit set l object name fix infinit set data valu definit 2 instanc tupl hi vali satisfi assign set object name node requir iv iw disjoint whenev v w distinct node 2 val map domain v2v iv ie set name instanc map val must satisfi v l 2 iv vall member set data valu b vall tupl l 1 n l element c w l 2 iv vall finit subset iw definit 3 finit instanc instanc hi vali node v iv finit shall interest mostli finit instanc sinc correspond real databas l v2v iv say name vall call valu set v2v valiv call set valu definit 4 let instanc schema let v node type l name iv 1 th compon vall shall also use notat l compon whenev result ambigu follow definit say meaning compar two name ie v w node l 1 2 iw possibl l 1 l 2 valu definit 5 say two node v w schema similar iff type children ie one follow hold 1 2 node u 3 n node u 1 4 n node u queri ldm schema involv addit node need follow definit definit schema extens iff 1 2 b v v 0 ie new edg either new node new node node v 3 conserv extens 4 conserv extens intuit behind 1 2 schema 0 add extra node add edg e e chang schema ie add edg node v node v new node extens defin extens instanc 0 follow definit 7 let 0 extens let hi vali instanc say instanc extens 0 iff 1 v v 0 2 v node l 2 iv val 0 proof follow lemma straightforward lemma 1 let 0 extens let 0 instanc 0 uniqu instanc 0 extens 0 instanc call restrict 0 conclud section definit isomorph two instanc isomorph essenti ie differ renam shall want show result queri welldefin isomorph give stronger definit isomorph let instanc let 0 extens let 1 2 extens 0 shall say 1 2 isomorph rel isomorph 1 2 leav object fix case queri mean isomorph rel databas leav content databas fix definit 8 let 0 extens let hi vali instanc let 1 two extens 0 say 1 2 isomorph rel iff map g 1 v 11 gamma onto 2 v 1 node v g ident iv 2 node v 0 g map 1 v onto 2 v 3 v node 0 l 2 1 v v type val 2 l b v type val 2 val 1 l val 1 l c v type l v type gval 2 gl special case definit get definit ordinari isomorph definit 9 let 1 instanc say 1 2 isomorph iff isomorph rel empti schema ie schema 4 ldm logic section defin ldm logic logic similar relat tupl calculu use part logic queri languag logic also use specifi integr constraint ldm schema defin view throughout section fix schema hi vali fix instanc variabl logic fix sort sort element v sort defin domain variabl rang exampl x variabl sort v x rang iv analogu relat calculu tupl variabl rang specif relat shall usual write variabl sort subscript eg x v variabl differ subscript denot distinct variabl x u differ variabl x v even though variabl rang object name think rang object thu shall refer name x v valu x v definit 10 atom formula follow 1 x v w w node type theta v th child 2 x v ae w w node type v one children 3 x v 2 w w type 4 x 5 x w similar node data element v type atom formula x v w mean name x v th compon valu w note mention compon w refer sinc may multipl edg w v howev shall also write x v w unambigu atom formula mean valu w x v sinc one edg w v use ae rather ae atom formula x v 2 w mean x v member valu w sever kind equal atom formula x mean name x v v equal sinc iv iw disjoint whenev v 6 w need atom formula form x mean valu x v w equal meaning v w similar node final atom formula x mean data valu x v equal data element definit 11 wellform ldm formula schema 1 atom formula 2 oe 1 oe 1 oe 2 wellform formula 3 oe 1 wellform formula 4 8x v oe 1 oe 1 wellform formula free variabl oe defin way firstord logic use oe 1 oe 1 standard mean anoth use abbrevi follow definit 12 formula x vn v node type defin satisfact ldm formula let oex 1 vn x n vn let l 1 l n assign object name free variabl formula ie l member correspond iv mean oe satisfi l instanc clear context shall write j instead definit 13 let oex 1 vn formula free variabl x 1 vn let l follow hold 1 oe x 2 oe x 3 oe x 4 oe x 5 oe x 6 oe x 7 8 hold 9 oe formula free variabl x 1 l definit 14 let oe ldm sentenc say satisfi oe iff oe hold exampl exampl next one ldm schema fig 6 instanc fig 8 ldm formula oex say name x u equal first compon valu v hold l 1 exampl 7 follow constraint say name u relat exactli one set w exampl 8 9 parent 2 must one set rather two differ set constraint word name u x u one name w z 1 z 2 associ associ 1 2 note constraint say name u associ one set w rather say person databas associ one set could still duplic u eg two name data valu solomon one way prevent constraint follow lemma show slightli restrict logic power restrict logic atom formula compar data valu intern node lemma make subsequ proof definit simpler lemma 2 let oex 1 vn ldm formula whose free variabl variabl x 1 x n vn ldm formula x 1 vn contain atom subformula form x differ equival oe instanc l 1 iff proof proof induct size oe show construct formula form x similar type result follow immedi distinguish possibl type v w 1 u v type new variabl let instanc l iw l 2 vall 1 therefor oe valid 2 u v type wn wn n x u z n wn z n wn n distinct new variabl let instanc equival vall 1 vall 1 n vall 2 equival conjunct l l word vall 1 therefor equival wn wn n x u z n wn l 1 ie oe valid 3 u v type ae x u z 1 ae v wn z n wn ae x u z n wn ae v z n wn n distinct new variabl let instanc equival vall 1 hold iff case ae x u z ae v oe valid shall assum x appear subformula proof concern shall abl use gener form conveni proof follow lemma say satisfact preserv isomorph straightforward lemma 3 let 0 extens let 1 2 extens 0 let g isomorph 1 2 rel let vn ldm formula oe final show logic effect finit instanc lemma 4 let oex 1 vn ldm formula whose free variabl variabl x 1 vn let finit instanc let l determin effect proof show induct size formula atom formula test satisfact straightforward test disjunct negat also clearli effect quantif make use finit order test whether test whether l finit set iw 5 logic queri languag relat model result queri relat natur gener would result queri model anoth ldm schema call henceforth queri schema togeth instanc schema modifi slightli requir queri schema independ schema instead allow successor node queri node databas schema continu analog relat calculu natur thing would let queri ldm formula oe result instanc would consist object satisfi oe two problem approach first clear ldm formula select object satisfi certain condit clear ldm formula construct new object one solut would prevent queri refer directli object name rather queri refer object valu could find possibl valu might appear result assign arbitrari name show result uniqu isomorph figur 10 ldm schema 1 l vall 1 v l vall 4 2 figur 11 possibl result queri still solv second problem deal cyclic need abil refer directli object name order deal cycl even result queri alway l vall 2 v l vall 3 2 figur 12 anoth possibl result queri defin uniqu exampl queri schema fig 10 queri specifi iu iv contain least two differ name way choos two incompar instanc fig 11 12 solut problem restrict queri one contain cycl allow cyclic databas furthermor allow queri refer explicitli name node databas detail discuss motiv underli approach see kup85 recent work eg iql shown queri languag could defin allow cyclic queri 51 queri languag definit 15 let ldm schema queri consist tupl 1 sq extens 2 oe q topolog order node vq gamma v ie oe q linear order v child w v oe q w 3 phi q set pair hv oe v assign formula oe v node v node v formula oe v correspond node oe v one free variabl sort v b variabl oe v bound sort either node databas schema queri node preced v oe q order oe q use specifi order defin result queri formula oe v specifi content v term databas node queri node preced v continu formal detail give sever exampl queri databas schema exampl genealog schema fig 6 instanc fig 8 exampl 8 schema q 1 shown fig 13 formula oe u word want iu 0 copi iu elimin howev duplic may iu result queri shown fig 14 2 figur 13 schema q 1 exampl 9 schema q 2 shown fig 15 want v 0 contain set parent solomon formula oe oe v 0 exampl result defin isomorph rel ie choic name arbitrari 19 david jess figur 14 result q 1 intuit behind oe u name valu solomon anoth name 1 equal x u 0 rest formula say 1 parent 2 oe v 0 say iv 0 contain name iu 0 one set result queri shown fig 16 figur 15 schema q 2 formal defin result logic queri start look queri add one node schema shall call queri simpl queri queri q call simpl queri jv shall use notat q v simpl queri let q v simpl queri schema let instanc result q v extens v sqv order defin v l vall figur defin name v v contain valu name would like v v contain object satisfi oe v x v problem use definit v oe v name sinc v v yet defin meaningless talk object satisfi oe v might seem realli trivial problem suppos oe v includ conjunct 8y v 8z v contain one name rest oe v allow sever possibl valu name would way choos one result reason problem us formula allow queri languageal bound variabl languag must refer databas node node preced v refer v result restrict turn although oe v refer name oe v actual statement valu therefor find valu satisfi oe v pick name arbitrarili definit 17 let val valu ie anyth could valu say val candid valu v 3 follow hold let l new name ie name appear let v extens sqv v use arbitrari name abl express fact val one object result queri note definit make use fact queri acycl first show particular choic name unimport lemma 5 let val data valu let 1 2 two extens sqv defin respect 1 3 realli depend q well clear context val proof definit oe v one free variabl sort v ie variabl x v inspect see atom formula contain x v xw last alway true easi see truth other depend valu x v name proof straightforward induct defin result sqv take candid valu v pick new name one put name v v notic set candid valu infinit principl even finit instanc queri properti set candid valu finit correspond safe queri relat model next section look issu detail definit 18 result q v extens v sqv defin follow let r set candid valu v let fl val j val 2 rg set new name ie name appear v v defin set fl val j val 2 rg val v l val val val 2 r show definit desir properti word result well defin isomorph rel everyth result satisfi oe v add anyth els satisfi oe v result without introduc duplic proof follow lemma similar proof lemma 5 lemma 1 extens sqv let l element 1 v let 2 extens sqv defin 2 val lemma 7 1 let 1 2 two result q v 1 2 isomorph rel 2 let v result sqv l v v proof 1 let l 1 element 1 v sinc val 1 l 1 candid valu v must l 2 2 v val 2 l 2 definit result queri 1 v 2 v dupli cation immedi get 11 correspond name 1 v 2 v straightforward show correspond isomorph 2 let l arbitrari element v v let extens sqv defin lemma 6 sinc vall candid valu v extend instanc sqv defin oe v l lemma 5 oe v l therefor defin result arbitrari queri q first defin composit queri definit 19 let q 1 queri let q 2 queri sq 1 queri get compos follow way consist sq 2 ffiq 1 lemma 8 queri let node ad queri q defin sequenc simpl queri q q vn follow q v queri schema q v igamma1 q add node v schema formula v oe v easi see use defin result q definit 20 result queri q result appli queri q vn success lemma 9 result q uniqu isomorph word differ choic name step yield isomorph result proof straightforward applic first part lemma 7 theorem 10 let q result queri q instanc 1 let v node ad q let l element q v q 2 let v node ad q let l 1 l 2 two differ name iv vall duplic result 3 q maxim extens sq satisfi 12 mean extens q satisfi 12 least one v inclus proper proof 1 let q queri q result q lemma 7 oe v l easi see q extens isomorph imag q extend q q affect satisfact oe v 2 obviou 3 assum exist let first node v 1 v n queri q 1 2 follow immedi q restrict sq result q lemma 9 impli q q isomorph contradict 52 safe queri previou section observ set candid valu queri node infinit principl even finit instanc exampl exampl 10 oe u queri unsaf sinc set candid data valu fdavidg infinit set definit 21 queri q schema safe finit instanc set candid data valu node finit q safe safe everi finit instanc let v queri node assum defin result q node preced v preced node contain finit set name theta h h set candid valu v subset respect cartesian product powerset union instanc vs children therefor finit case set candid valu may infinit sinc set data valu infinit lemma 11 q safe iff everi queri node type set candid data valu v finit follow two exampl use databas queri schema fig 13 databas instanc fig 8 exampl 11 oe u safe sinc set candid data valu solomon rehoboam absalomg test safeti relat queri reduc test safeti ldm queri kup85 consequ test safeti gener undecid decid howev test whether given queri q schema safe given instanc describ decis procedur lemma 12 let w node databas schema type let fd constant occur formula q q safe iff queri node v type candid valu v either valu element iw b one j proof one direct obviousif condit hold q safe prove convers induct queri node queri node type assum lemma hold node preced v q safe let igamma1 result q v igamma1 safe set candid data valu v finit set r show call right hand equat lemma fals element val r gamma induct hypothesi sinc val candid data valu v extend igamma1 instanc 1 sqv defin 1 arbitrari element gamma extend igamma1 instanc 2 sqv defin 2 val val 0 appear either databas preced queri node queri formula induct size oe v show key point induct x v occur oe v 1 atom formula form x node type either v one node v 1 v igamma1 formula fals whenev data valu x v 2 x v x formula alway true therefor shown element infinit set gamma candid valu contradict assumpt q safe techniqu proof give us effect procedur determin whether simpl queri q v safe finit instanc take data valu 0 2 occur anywher databas queri formula test 0 candid valu difficult see done effect similar way proof lemma show q v safe iff 0 candid valu v intuit 0 result result infinit sinc 0 distinguish data valu prove follow theorem theorem 13 let q queri let finit instanc decis procedur test whether q safe q safe result comput effect 6 algebra queri languag 61 algebra oper section defin set algebra oper show safe logic queri equival sequenc algebra oper convers sequenc algebra oper equival safe logic queri sinc logic queri add node databas schema leav instanc databas schema unchang algebra oper must therefor select oper exampl delet tupl satisfi select condit rather creat copi databas node copi contain tupl satisfi condit fact copi tupl realli done relat modela queri throw away tupl databas meet select condit rather copi tupl issu address explicitli relat databas theori sinc theori deal happen temporari relat creat comput result queri shall see next section necessari delet node certain circumst would still like make delet explicit rather hide algebra oper section databas schema instanc algebra consist oper form w ff name oper argument v 1 v n node schema ff add node w schema extend new schema defin oper simpl logic queri give 1 type argument 2 type w list children 3 ldm formula oe w specifi content iw 611 oper copi combin exist node figur 17 algebra oper figur 18 algebra oper v 1 w v creat copi node v shown fig 17 figur schema shown box right node creat oper left distinct data valu iv iw contain exactli one name data valu note duplic iv elimin iw v node type b w type c oe w 2 w creat node type contain data valu data valu data domain b w type c oe w 3 w h v creat node contain finit subset iv see fig 18 v node schema b w type h theta figur 19 algebra oper theta v figur 20 algebra oper c oe w 4 w h theta v creat node contain cartesian product fig 19 n node schema b w type h c oe w 5 w h creat node contain disjoint union fig 20 n distinct node schema b w type h c oe w 612 select oper ldm algebra two select oper 1 oper w oe j v similar select oper relat algebra oper select tupl v whose th j th compon relat see fig 21 v node type h one relat b w type h c oe w altern select condit may form data valu oe w theta theta figur 21 algebra oper u r q figur 22 algebra oper w oe u v 2 w oe u v u child v w contain object iu actual appear iv see fig 22 exampl v type h element iv set element iu result oe u v select iv element least one set u v node u child v b w type u children c oe w depend type v note v type sinc child u v type h theta u th child oe w strictli speak oe u v underspecifi case multipl edg v u sinc specifi edg refer case shall use notat oe u v mean use th edg tail ii v type h iii v type h oe w 613 union differ project 1 union oper similar relat union syntax use w fig 23 n node type children b w type children v c oe w figur 23 algebra oper theta theta v figur 24 algebra oper 2 differ shall use infix notat ie shall write w rather gammav v 1 v 2 node type children b w type children v 1 v 2 c oe w 3 project oper similar project relat alg bra syntax use w pi v order multiset edg tail v v node type h order multiset edg tail v b let edg v v j w c oe w caus ambigu shall use set node rather edg fig 24 62 equival logic algebra queri languag use algebra oper defin algebra queri languag algebra queri sequenc fff g ff algebra oper result ff igamma1 would like abl show queri languag equival logic queri languag word logic queri schema exist sequenc algebra oper vice versa properti schema creat two queri ident everi databas instanc result isomorph rel unfortun next exampl show quit true exampl 12 let consist node u type let q logic queri add node v type let 1 2 two data valu let oe v candid valu v g algebra queri equival q queri would consist one algebra oper alon sinc oper add new node schema inspect see singl algebra oper equival q modifi definit get equival queri qa algebra queri consist oper w 1 1 clear instanc v restrict result queri schema consist node u v get instanc want essenti use two node w 1 w 2 temporari storag comput result queri fact thing occur relat model sinc temporari relat use subexpress delet end therefor reason expect thing happen logic data model abl use temporari node extend algebra queri languag ad delet oper oper delet node schema restrict instanc origin schema new schema make sure never delet node child node sinc case result would legal schema oper delet node v written dv definit 22 let ldm schema instanc algebra oper dv legal v node parent result dv schema 0 consist delet v togeth instanc get restrict 0 algebra queri languag must take care delet databas node ie must allow user delet node construct queri shall call languag delet oper extend algebra queri languag definit 23 let ldm schema extend algebra queri sequenc ff either 1 oper form w algebra oper delet oper v 1 either node node creat previou fi j delet 2 oper dv v node creat previou algebra oper sequenc fi 1 fi igamma1 yet delet definit 24 let qa extend algebra queri let qb extend algebra queri result qa queri qb ffi qa composit qa qb form simpli concaten list algebra oper obvious delet oper equival logic queri sinc everi logic queri add node schema necessarili mean find logic queri equival extend algebra queri extend algebra queri delet databas node sinc node delet construct previou algebra oper might still case exampl 12 equival logic queri use temporari node nevertheless kup85 shown extend algebra queri languag strictli power logic queri languag order get equival queri languag modifi logic languag includ temporari node well definit 25 let ldm schema extend logic queri tupl 1 logic queri 2 dq set temporari node use queri dq subset queri node delet still get ldm schema word edg tail outsid dq head dq ie definit 26 let q extend logic queri hs let instanc result queri consist 1 schema q consist node vq gamma dq b relev edg ie edg sq whose head tail vq gamma dq c restrict type assign vq gamma dq 2 result q defin follow let q result result q restrict q show everi extend algebra queri equival extend logic queri lemma 14 let extend algebra queri exist safe extend logic queri q l everi instanc result qa q l isomorph rel proof schema q l consist node creat oper queri qa set temporari node dql set node delet qa ie fv j oper ff dv g sinc allow delet node parent easi see edg whose head dql whose tail ff delet oper must form w defin order node formula use defin oper fi j easi verifi result qa q l instanc inde isomorph show convers let q l logic queri let fix instanc q l safe definit qa depend result qa q l isomorph instanc q l safe keep fix abl prove variou lemma result queri go along first look case q l simpl queri qw start creat node w dom contain domain w ie object might candid valu w ignor everyth except type w fact q l safe defin w dom follow 1 w type let v 1 v node type let 1 k constant occur oe w w dom algebra queri w dom 2 theta v 3 v 4 call algebra queri q dom lemma 15 1 schema creat q dom equal schema togeth node w dom type children node w origin logic queri qw 2 let dom result q dom let w result qw val valu object w w val also valu object dom w dom proof w type h theta h h lemma obviou w type first part follow fact node except w dom creat q dom also delet q dom second part immedi consequ lemma 12 definit q dom may assum necessari renam bound variabl bound variabl formula oe w distinct let variabl x 1 x k algebra queri q prod result q dom consist oper w prod h theta w purpos defin qa shall label edg tail w prod follow th edg tail w prod label x label use defin algebra queri part queri purpos tell us bound variabl edg correspond certain case creat new node use algebra oper ation outgo edg new node inherit label correspond edg whose head one argument oper use inherit case unambigu ie case argument label oper label inherit oe j differ union use project oper new edg also inherit label correspond edg whose head argument project arrang wellform subformula oe w list 1 subformula j subformula defin extend algebra queri q result q q queri result q prod node w type h intuit tupl l edg tail w label variabl might free ie havent yet bound definit q follow 1 x 2 x w oe k1 w prod 3 xw xw q w 4 x w 5 w let 1 order multiset edg tail w label edg tail w let 2 correspond set edg tail w q follow extend algebra queri w w differ temporari node use similarli name node use note way defin 1 2 guarante ambigu label edg result least long label edg 1 2 order shall show later inde case 7 j let order multiset edg tail w dom label edg tail w j q follow extend algebra queri w dom previou case shall show label edg tail w without ambigu 8 9x wa j let order multiset edg tail edg label x wa show must exactli one edg label q consist algebra oper w lemma one well form subformula oe w let x 1 x j variabl list bound note x may actual occur w type h furthermor th edg tail head w label variabl x wa consequ label edg order assumpt made label defin w hold proof proof fairli straightforward induct use definit w tricki case children w correspond bound variabl oe w bound j 1 children w bound variabl oe w bound j 2 sinc variabl bound j 1 iff bound j 1 bound see result hold case 4 lemma 17 let w type h result q let l member w dom let l member w k exist l w l candid valu iff satisfi proof straightforward induct structur extend algebra queri q final result q oe w consist wa oe w dom w oe prod dom final defin algebra queri qa lemma 18 let 1 result qw let 2 result algebra queri qa 1 2 isomorph rel proof first note schema equal node creat delet qa node wa node similar node w dom henc w show instanc wa w isomorph ie point evalu queri comput instanc node candid valu assum point evalu qa final round delet 4 note bound free variabl bound one formula either free formula appear let val candid data valu w extend instanc w sqw defin w oe w result q oe w second claus lemma 15 val candid data valu w dom l oe w w dom vall lemma 6 oe w l therefor lemma 17 l oe oe w w dom vall oe val candid data valu wa convers suppos val candid data valu wa let oe w result q oe w sinc val candid data valu wa l oe oe w w oe w l oe w w dom vall oe l oe oe w w oe w impli restrict oe w instanc dom schema q dom dom lemma 6 vall val candid data valu w sinc arbitrari logic queri view sequenc simpl queri easili extend construct arbitrari queri concaten algebra queri individu simpl queri extend logic queri add delet oper delet node delet set queri yield follow theorem theorem 19 extend algebra queri languag extend logic queri languag equival ie everi extend algebra queri exist safe extend logic queri everi extend logic queri exist extend algebra queri queri defin schema everi databas instanc logic queri safe result queri isomorph rel 7 conclud remark describ new model data logic data model design combin advantag exist data model one hand enabl databas describ semant data possibl use relat model data hand lose nice properti relat databas particular abil queri databas use equival nonprocedur procedur languag complex queri languag studi kv85 work unifi gener long sequenc previou work semant data model ab84 db82 fk77 gdb82 gra79 har78 kob80 mak77 mp82 oy85 rr83 sp82 ss77 tsi76 preliminari public result kv84 stimul later work model view special case ldm design make certain class queri easier express effici implement model incorpor two import objectori featur object ident captur distinct object name object valu strong type type built product power union oper howev incorpor featur consid import objectori databas inherit method encapsul etc cf import featur model separ schema instanc unlik model one featur ldm abil describ cyclic data featur lack queri languag bring two question possibl elimin cycl databas possibl add cycl queri first question address kv85 recent show extend queri languag allow cycl queri queri languag describ base paradigm firstord logic recogn framework relat model firstord languag weak task databas queri au79 motiv studi power queri lan guag base paradigm logic program rei78 ull85 recent similar queri languag develop model similar ldm acknowledg indebt jeff ullman basic idea underli work would also like thank rick hull pari kanellaki dave maier help discuss suggest anonym refere suggest improv r non first normal form relat repres hierarch organ data note nonwellfound set univers data retriev lan guag relat model data larg share data bank extend databas relat model captur mean correct translat updat oper relat view algebra quotient relat semant network data manipul languag objectori approach net oper logic ambigu process boolean queri tdm treestructur studi four differ philosophi format model theori databas organ applic databas logic databas design databas logic overview databas mangement technolog logic data model new approach databas logic new approach databas logic express power logic data model consider normal form notnecessarili normal relat relat data model normal form nest rela tion deduct question answer relat databas data definit languag statist databas data structur integr data base manag inform retriev system databas abstract aggreg gener data model lsl link selector languag principl databas system implement logic queri languag databas review tr format model compil queri recurs firstord databas non first normal form relat algebra allow data restructur logic data model new approach databas logic calculu complex object amateur introduct recurs queri process strategi set negat logic data base languag ldl1 extend relat algebra relat calculu setvalu attribut aggreg function databas model survey applic research issu survey theoret research type complex databas object complex queri logic data model data model flogic higherord languag reason object inherit scheme object ident queri languag primit logic program set rulebas languag function set objectori databas system express power logic data model function data model data languag daplex databas descript sdm correct translat updat oper relat view implement logicl queri languag databas abstract extend databas relat model captur mean databas abstract databas logic normal form nest relat relat model data larg share data bank algebra quotient relat principl databas system univers data retriev languag data model cqlfa queri languag codasyltyp databas new approach databas logic remark algebra non first normal form relat semant network data manipul languag data structur integr data base manag inform retriev system extend algebra calculu 1nf relat databas ctr hongcheu liu jefferi x yu algebra equival nest relat oper inform system v30 n3 p167204 may 2005 evgeni dantsin andrei voronkov express power data complex nonrecurs queri languag list tree extend abstract proceed nineteenth acm sigmodsigactsigart symposium principl databas system p157165 may 1518 2000 dalla texa unit state serg abiteboul sophi cluet tova milo correspond translat heterogen data theoret comput scienc v275 n12 p179213 march 28 2002 jan van den bussch dirk van gucht marc andri marc gyssen complet objectcr databas transform languag journal acm jacm v44 n2 p272319 march 1997 christoph koch complex nonrecurs xqueri function queri languag complex valu acm transact databas system tod v31 n4 p12151256 decemb 2006 serg abiteboul pari c kanellaki object ident queri languag primit journal acm jacm v45 n5 p798842 sept 1998 mihali yannakaki perspect databas theori acm sigact news v27 n3 p2549 sept 1996