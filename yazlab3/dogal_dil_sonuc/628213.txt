product system negat failur studi action rulebas system two form negat name classic negat negat failur find cours action show sever exampl ad negat failur system increas express sens real life problem repres natur simpl way address problem provid formal declar semant extend system adopt argumentationbas approach shown simpl unifi framework understand declar semant variou nonmonoton formal way natur defin ground wellfound stabl prefer semant product system negat failur next character class stratifi product system enjoy properti mention semant coincid negat failur find cours action comput simpl bottomup oper stratifi product system implement top convent product system two way first way correspond understand stratif form prioriti assign rule show implement though sound complet gener case henc propos second implement mean algorithm transform finit stratifi product system classic one sound complet implement though comput hard shown paper b sound complet implement though comput hard shown paper keyword rulebas system knowledgebas system rulebas process ing expert system knowledg represent note paper revis extend version 9 1 introduct motiv section rst give exampl motiv extens product system paradigm 17 introduct negat failur nd cours action discuss role specic mechan reactiv system 11 need negat failur product system exampl 11 imagin situat person household work cloth wash person two option either hand wash machin wash machin powder hous machin wash take place repres product rule machin powder hous acquir either buy shop provid shop open borrow neighbor rule acquir powder repres follow two classic product rule neighborin borrow cours hand wash undesir taken way acquir machin powder naiv represent rule use classic negat clearli correct sinc mean rule machin powder hous current state cloth hand wash intuit mean way acquir machin pow der cours action start current state lead acquir machin powder henc state machin powder hous neighbor naiv represent would allow hand wash though way acquir machin powder borrow neighbor henc fail captur intuit understand problem need use dierent kind negat call negat failur nd cours action denot oper previou naiv represent replac powder handwash clearli way repres situat use negat failur see next section argu howev represent use negat failur provid better specic problem hand 2 dicult nd real life situat govern rule negat failur exampl 12 consid rule review work faculti end academ year univers rst rule speci condit oer tenur assist professor state assist professor good public work experi least year oer tenur rule could formal assistantprofx goodpubx workatleast5x oertenurex second rule state assist professor prospect get tenur though intuit mean rule clear possibl repres classic product rule sinc premis classic product rule repres condit must satis current state world premis second rule repres project futur say possibl assist professor get tenur futur sack word rule say assist fail possibl cours action futur get tenur repres rule use negat failur nd cours action second rule repres follow assistantprofx gettingtenurex rex 2 real life often nd situat deal riski undesir action exampl doctor may take decis cut foot patient due sever frostbit riski undesir decis commonsens rule specifi condit take action doctor allow cut way save foot patient repres use negat failur follow save cut final expect real life intellig system could employ satisfi multipl goal goal dierent prioriti negat failur nd cours action use repres prioriti follow exampl exampl 13 consid robot ghter sent save live properti prioriti certainli save live rst imagin robot stand valuabl artifact take get answer ye robot certain noth save life rule repres follow artifactx indangerx humanfound savex note humanfound mean human could found current possibl state world reachabl ring sequenc action robot enabl perform 2 12 negat failur specic mechan reactiv system let us consid exampl 11 check whether condit rule powder handwash satis current state involv check whether way acquir machin powder current state process could time consum expens concret applic exampl two way get powder buy shop borrow neighbor negat failur compil classic negat produc ecient rule neighborin handwash howev environ product system rule appli chang exampl may get new neighbor may interest good relat peopl abl borrow anyth henc rule borrow must drop consequ product rule must revis clear rule r 4 negat failur still correct serv specic check correct new rule point want make mani case though negat failur employ directli could use specic mechan classic product system situat encount quit often mani real life situat imagin work physician emerg case deal patient sever injur road accid case time crucial doctor would follow certain treatment taught appli situat less simpli react depend physic condit patient treatment may even suggest fate decis oper patient cut organ clear treatment chang accord progress medic scienc one treatment correct yesterday may wrong today decid correct treatment think treatment simpli way set product rule tell doctor concret state patient correct rule determin commonsens principl like oper cut organ way save patient principl express use negat failur alreadi point negat failur seen mechan specifi prioriti dierent goal exampl robot reghter exampl 13 negat failur use give goal save human higher prioriti goal save artifact explicit prioriti rule often use product system activ databas system 2 16 11 uenc way rule execut system whenev dierent rule trigger state rule higher prioriti trigger rst clearli notion prioriti negat failur induc dierent one use classic product activ databas system former goal whether latter rule employ implement goal moreov often dicult understand declar rule higher prioriti anoth rule believ mani case negat failur use highlevel tool specifi implicit prioriti goal could implement dene explicit prioriti rule 13 aim work seen exampl use negat failur product system allow one natur correctli repres mani real life problem main aim paper extend revis version 9 provid declar semant product system two kind negat use classic negat negat failur nd cours action respect show argument base approach 8 success adopt understand logic program negat failur well mani nonmonoton formal also adopt provid natur simpl declar semant product system two kind negat basic idea negat failur liter powder exampl 11 repres assumpt underli potenti comput product system intuit mean assumpt comput goe assum cours action ie comput current state world lead state defeat assumpt refer back exampl 11 assum powder correspond assum current state cours action lead state machin powder hous comput support sequenc assumpt plausibl accept underli assumpt defeat actual nd cours action defeat inform intuit notion formal view product system argument system along line 8 provid us mani natur semant ground wellfound prefer stabl semant 8 semant arguabl popular wide accept semant nonmonoton commonsens reason literatur 15 4 19 27 moreov address problem actual comput negat failur respect introduc class strati product system negat failur comput use simpl bottomup oper case gener strati argument system strati product system enjoy properti previous mention semant ground prefer stabl coincid show classic product system explicit prioriti rule use obtain straightforward sound implement strati product system negat failur also show complet implement requir sophist method compil away negat failur even class strati product system method yield classic product system complex worst case polynomi number atom occur product system rest paper structur follow section 2 introduc basic notat terminolog use classic product rule system section 3 extend product system gener product system negat failur use condit part rule provid argument base semant argument system brie review section 31 section 4 address problem comput negat failur introduc class strati product system semant character simpl bottomup oper section 5 discuss two way implement strati product system along line mention final section 6 address open issu futur work preliminari classic product rule system introduc notat basic terminolog go use follow product system languag use similar classic one see eg 12 assum rst order languag l repres ontolog use describ domain interest state world interpret snapshot world henc repres herbrand interpret l ie set ground atom l set state denot stat assum set primit action given semant eect action describ function eect product rule rule form ground liter l action condit resp action rule r refer cond r resp actionr product system p set product rule product rule l said applic state condit l true ie denit 21 comput comput c product system p sequenc 0 state r product rule p applic 1 refer initialc n nal c 2 note comput empti comput denit 22 complet comput comput c call complet comput product rule p applic n 2 behavior product system p dene set pair state initi resp nal state complet comput p formal next denit denit 23 inputoutput semant product system p inputoutput semant p dene nal c j c complet comput pg 2 even though consid ground product rule approach easili adopt product system rule may contain variabl given collect rule consid possibl ground instanc obtain replac variabl occur ground term approach usual adopt studi semant logic program 15 27 7 worth note semant ect inher nondeterminist natur product system inde natur expect initi state may exist mani dierent comput lead possibl dierent nal state mean given might mani differ pair io semant nondetermin aris natur represent real life problem product rule refer back exampl 11 shop open neighbor two possibl way acquir machin powder plausibl ie buy shop borrow neighbor clearli correspond comput product system plausibl intuit reason prefer one need nondeterminist rule base languag point mani author see eg 1 inde nondeterminist rule base languag mainli studi respect express power comput complex oppos pure determinist languag paper argu nondetermin need natur repres real life problem work literatur see eg 13 24 also devot dene oper semant classic product system way nondetermin avoid adopt ad hoc comput mechan either implicitli explicitli assign sort prioriti product rule red state lack intuit motiv make full understand technic result dicult 3 product rule naf introduc new form negat languag l denot gener liter either classic liter l nafliter l l classic liter classic liter l intuit l possibl nd cours action achiev l denit 31 gener product rule gener product rule form l ground gener liter 2 given gener product rule set classic liter r refer clcond r set nafliter refer hypr gener product system gp p set gener product rule gener product rule possibl applic state denit 32 possibl comput given gp p possibl comput p sequenc state r gener product rule p 1 r possibl applic 1 denot cp set possibl comput gp p 2 given possibl comput sequenc hhypr 1 refer sequenc hypothes underli comput basic idea understand mean nafcondit ls gener product rule view hypothes assum possibl cours action achiev l intuit say rule applic state possibl applic hypothes could assum comput accept comput rule applic whole problem understand formal mean possibl cours action start state achiev result l let us consid exampl 11 1 notic rule satisfi condit j clcondr state necessarili applic sinc clear whether nafcondit satis exampl 33 let us rst recal product rule machinepowd handwash neighborin borrowpowd eect action speci eecthandwash eectbuypowd eectborrowpowd assum initi state powder shop close neighbor state repres interpret state three possibl nonempti comput start name r 4 fneighborin machinepowd clothescleang r 4 first notic c 2 c 3 base assumpt commonsens dictat c 2 c 3 repres accept cours action initi state lead commonsens result cloth machin wash henc must accept possibl cours ac tion hand c 1 base assumpt machinepowd mean c 1 assum possibl way acquir machin powder howev c 3 repres one possibl way henc c 3 repres attack assumpt machinepowd c 3 also view attack accept c 1 legitim compu tation hand c 2 c 3 base assumpt henc way attack 2 exampl point semant gpss form argument reason argument repres possibl comput follow rst recal gener notion argument system 8 show natur semant gp dene use theori argument 31 argument system argument recogn late import natur approach nonmonoton reason 5 14 18 21 22 23 26 28 shown 8 mani major nonmonoton logic 20 19 25 repres fact dierent form simpl system argument reason base result 8 simpl logicbas argument system develop 4 captur well known nonmonoton logic like autoepistem logic reiter default logic logic program special case 14 argument employ give proof procedur condit logic argument also appli give eleg semant reason specic 10 review basic notion denit argument system reader refer 8 detail discuss role argument system mani eld artici intellig argument system pair har attacksi ar set possibl argument attack arar repres attack relationship argument pair b 2 attack say attack b b attack moreov attack set argument h attack argument b 2 h set h argument con ictfre argument h attack h argument defend set argument h h attack attack also say h defend defend h basic notion underli semant argument system go review rest section follow intuit notion accept set argument set h argument accept con ictfre defend argument let h set argument let def h set argument defend h dicult see h accept h h con ictfre easi see monoton henc equat least solut also accept follow fact def accept h accept also h variou semant argument system basic solut equat particular ground wellfound semant argument system least solut equat anoth semant argument system call prefer semant dene maxim accept set argument dicult see set maxim con ictfre solut equat gener prefer set contain ground semant coincid next section give exampl final popular semant nonmonoton reason argument system stabl semant dene follow con ictfre set argument h said stabl attack argument belong dicult see stabl set argument accept furthermor also easi see stabl set prefer henc maxim con ictfre solut equat vice versa 8 shown logic program negat failur seen form argument system view variou semant argument system present captur unifi framework variou wellknown semant logic program negat failur instanc ground semant correspond wellfound semant logic program 27 stabl semant correspond stabl semant logic program 15 follow show gener product system two kind negat also form argument system philosoph explan result seen fact comput product system repres also form commonsens reason 32 comput argument semant gp p dene view argument framework set possibl comput p relat attack dene follow denit 34 attack let c possibl comput attack c possibl comput c 0 initialc 0 exist underli assumpt l hypr i1 l hold nalc 0 2 remark 35 empti comput attack henc empti comput contain semant 2 notic denit initi state attack c 0 defeat assumpt l underli c actual state assumpt made word whether assumpt l defeat depend state assumpt made whether state lead comput state l hold refer back exampl 33 easi see c 3 attack c 1 defeat assumpt machinepowd c 1 base assumpt made state 0 c 3 show altern cours action lead 0 state machinepowd actual hold consid initi state 0 among other fact machin powder hous shop close neighbor clear one possibl comput apart empti one lead 0 0 nal state fclothescleang state repres fact cloth hand wash comput also base assumpt machinepowd made state 0 0 henc defeat powder bought sinc shop close neither borrow sinc neighbor view gp argument system allow us provid three dierent semant ground wellfound prefer stabl se mantic recal given set h argument ie possibl comput h set argument defend h see section 31 denit 36 let p gp k set possibl comput k ground k least solut equat k prefer k maxim con ictfre solut equat k stabl k con ictfre attack everi possibl comput klet us elabor detail exampl 33 comput ground semant exampl 37 comput ground semant use use follow abbrevi mp machinepowd ni neighborin cc clothesclean shopopen hw action handwash mw action machinewash bp action buypowd bop action borrowpowd henc rule exampl 33 becom mp hw mention previou section ground semant least solut equat empti set argument comput contain comput never attack h 0 defend comput clearli empti comput nonempti comput base assumpt let state follow comput belong h 1 sinc hypr 3 hypr 2 empti similarli let ni state ni follow comput r 4 belong h 1 let us move h us consid possibl comput underli assumpt comput must use rule r 1 rule contain nafliter premis let 1 state 1 consid comput c form base assumpt mp 1 comput form attack comput sinc lead nal state mp hold belong h 1 sinc h 1 con ict defend comput c similarli 1 defend c conclud comput h 2 n h 1 comput form e 1 easi see h 2 inde solut henc least solut equat case moreov dicult see exampl ground prefer stabl semant coincid henc h 2 also stabl prefer also consequ fact product system strati sens section 4 show strati product system dierent semant coincid 2 easi see follow proposit hold proposit 38 comput c attack comput c 0 c 0 prex c 00 c also attack c 00 2 proposit 39 let h set comput either ground prefer stabl set c 2 h prex c also belong h 2 give exampl gener product system ground prefer stabl semant coincid exampl 310 let p 0 follow gp eect assertp state ad p let easi see nonempti possibl comput start 0 fbg underli assumpt hfnot agi underli assumpt hfnot ag fnot bgi fag underli assumpt hfnot bgi underli assumpt hfnot bg fnot agi empti comput start fbg attack c 0 1 empti comput start fag attack c 0 2 hand empti comput attack henc c 0 2 contain accept set comput furthermor also clear c 2 attack c 1 sinc c 1 base assumpt mean way achiev start 0 similar reason c 1 also attack c 2 henc comput start 0 contain ground semant empti comput two stabl set comput one contain c 2 contain c 1 c 1 resp c 2 defend attack exampl prefer stabl semant coincid notic rule similar r 1 r 2 may need repres real world situat imagin situat team leader need hire person import posit two applic say mari ann leader ask advisor express opinion rst advisor like ann henc say way hire ann hire mari express rule mari hire ann hire hiremari notic use negat failur captur intuit possibl cours action hire ann imagin second advisor exactli opposit view ie opinion express mari hire hireann team leader reason repres two comput correspond comput c 1 c 2 2 next exampl show prefer set may stabl exampl 311 let p 1 follow gener product system intuit rule true current state way achiev add state clearli paradox sinc way achiev rule allow achiev nonempti possibl comput start fag clear c attack henc exampl ground prefer semant coincid contain empti comput clearli stabl set comput 2 dene set complet accept comput respect select semant denit 312 complet comput let p gp sem select semant p ie sem either ground prefer stabl set possibl comput comput c 2 sem call semcomplet comput exist comput c 0 2 sem c prex c 0 2 semant gp coincid simpli talk complet comput instead semcomplet comput refer back exampl 33 complet comput start 0 c 2 inputoutput semant classic product system extend gener product system respect select ground prefer stabl semant denit 313 inputoutput semant gp let p gp ground inputoutput semant p dene nal c j c ground complet computationg let sem set argument prefer stabl io sem p nal c j c semcomplet comput p g4 strati product system section consid special kind gp action two type assertp retractp p atom eect assertp resp retractp state ad resp remov p resp moreov rule follow structur l classic liter rule rst kind call assert rule rule second kind call retract rule import distinguish assert retract rule simpli write rule dene strati gpss way negat failur comput bottomup follow given classic liter l refer atom l l posit atom p l p denit 41 strati product system gp p strati exist partit rule follow condit satis let rule p j l rule contain atom l head must belong pm ii l h rule contain atom l head must belong pm worth note intuit underli denit strati gpss similar one underli denit stratic logic program 3 strati gpss ground prefer stabl semant coincid see theorem 43 moreov semant comput bottomup way simpl oper go dene next let c possibl comput h k 0 h k n sequenc call subcomput c denot rulesc sequenc denit 42 let strati gp let oper dene follow subcomput c 0 c c subcomput c form l 2 hypr j comput lgroughli speak oper formal intuit accept possibl comput use rule p depend comput p thu semant strati gp p comput bottomup iter oper strata p theorem 43 let p strati gp uniqu prefer set comput uniqu stabl set computationsproof see appendix implement strati ps section address issu implement strati ps translat strati ps classic ps restrict product system collect ground instanc rule nite let us rst introduc notion implement product system let two product system say p 0 sound implement p follow two condit hold comput c 0 p 0 exist comput c p nal c ii complet comput c 0 p 0 exist complet comput c p initialc 0 p 0 sound implement p say also complet revers condit ii hold name comput c p exist comput c 0 p 0 complet comput c p exist complet comput c 0 p 0 next section introduc class priorit product system pp rule dierent prioriti dene accordingli suitabl notion comput show view stratic prioriti assign rule lower stratum higher prioriti yield sound implement strati gp pp howev see mean simpl exampl implement complet gener case mean prioriti induc stratic power enough complet captur implicit prioriti induc negat failur mechan order obtain sound complet implement need sophist method compil away negat failur strati gp yield classic product system prioriti show classic ps obtain transform inde sound complet implement origin strati ps howev transform worst case polynomi number atom product system 51 implement negat failur prioriti let us introduc class pp name classic product system rule assign dierent prioriti type system extens studi literatur 11 denit 51 priorit product system pp pair hp p classic ps partial order relat rule 2 2 2 partial order irr exiv transit asymmetr relat sequel r r 0 say r higher prioriti r 0 notic classic ps pp empti relat prioriti relat rule aect applic rule denit 52 let hp pp product rule l applic state rule r 0 r r 0 applic 2 notion comput pp one given denit 21 provid applic rule understood previou denit exampl 53 let us formul wash machin exampl 33 pp let us rst recal product rule neighborin borrowpowd notic negat failur rst rule replac classic negat correctli repres fact hand wash lower prioriti machin wash add follow prioriti relat rule way rule r 1 appli state machin powder either shop open neighbor thu achiev desir behavior 2 p strati gp idea view stratic implicit assign prioriti rule make assign explicit allow us get rid negat failur translat directli classic negat need rst introduc use notat let l naf liter denot l classic liter l l moreov given gener product rule r denot r rule obtain replac nafliter l l denit 54 let strati gp priorit pp obtain replac rule r p r dene follow follow theorem show given strati gp p hp sound implement theorem 55 let p strati gp hp priorit form sound implement p ie comput c hp exist comput c 0 p ii complet comput c hp exist complet comput p nal c follow exampl show implement given complet gener case exampl 56 consid follow stratic g consid follow complet comput priorit form p given follow pp hp r r r r dene r 1 4 dicult see complet comput hp start empti state end state fa c dg due fact r 3 r 4 rule highest prioriti red r 1 sinc eect r 4 ad fdg state prevent r 1 applic point naf liter b r 1 induc prioriti rule dierent naiv one obtain given stratic inde b intuit mean way achiev b given state classic condit r 1 satis ensur enforc c true ie make r 2 rule assert b applic obtain two way either enforc prioriti r 1 transform r 1 follow classic rule thu need deeper understand stratic gener intuit sketch exampl allow us compil away negat failur rule r 0 1 next section propos transform given strati gp p yield classic ps p 0 sound complet implement p howev order get complet implement pay high price term complex transform shown section 53 52 compil away negat failur let us rst introduc notion incomplet state comput respect incomplet state denit 57 incomplet state consist set ground liter l product rule l said applic incomplet state condit l true ie often necessari complet inform state world carri comput inde comput reli classic product rule follow notion comput refer partial comput sucient denit 58 partial comput let incomplet state r product rule classic product system p sequenc 0 partial comput c p 1 r applic 1 retractpnotic comput also partial comput moreov partial comput c start incomplet state view collect comput c 0 start state j denit 59 let p classic ps incomplet state l ground liter say l achiev p partial comput c start l 2 finalc 2 let us rst consid problem compil away negat failur strati ps two strata let r rule p 1 follow form l 0 n collect incomplet state satis clcond r consist l 0 achiev p 0 clcond r two case j empti mean exist classic comput p 0 start clcond r lead state l 0 hold henc rule r never appli comput sp simpli drop j empti let r l 0 r empti set one j empti otherwis r l 0 r follow r minimalg notic nonempti j view conjunct liter also minim mean exist proper subset r impli j set r 2 r l 0 r set condit satis state make l 0 achiev state set r l 0 r cover condit formal follow lemma lemma 510 let state clcond r exist comput c cp 0 finalc proof denit r l 0 r clear l 0 achiev consist clcondr clcond r clear condit satis comput c cp 0 suppos comput c cp 0 finalc assum exist incomplet state l 0 achiev consist clcond r 6j n clcond r assumpt j clcondr follow henc exist comput c cp 0 r 2 r l 0 r dene new product rule r r follow clcond r r hypr r actionr r dene exampl 511 machin wash exampl 37 translat follow strati ps g set incomplet state mp achiev henc henc pmp r 1 consist follow rule product system clearli still strati equival shown follow result lemma 512 exist r r proof let us consid follow assert comput c 2 sp 0 hold consist set liter l 0 achiev p 0 lemma 510 exist r 2 r l 0 r denit oper comput c 2 sp 0 8l comput c 2 sp 0 exist r 2 r l 0 r comput r r theorem 513 r h 0 r proof obviou take r 0 procedur compil away negat failur two strata product system follow step 1 select r 2 p 1 l 2 hypr r exist stop step 2 els step 3 goto step 1 gener procedur gener case strati product system two strata obviou rst compil away naf p 1 obtain strati product system continu process eventu obtain classic product system come back exampl 511 result appli transform classic ps consist rule origin p 0 togeth new rule obviou new product system equival origin one procedur assum p lr given dene method comput denit 514 set fi incomplet state call base l respect p 0 follow condit hold l achiev p incomplet state l achiev p 0 r 2 p 1 l 2 hypr easi see follow lemma hold lemma 515 n base l respect p 0 j suppos j empti r construct p lr consist comput base l respect p 0 comput r lr set r lr comput base appli standard method proposit logic comput disjunct normal form follow give algorithm comput base l construct tree satisfi follow properti node n tree label incomplet state labeln root tree label set flg link label rule r node node n child link label rule ancestor label labeln consist actionr 0 labelm fpg clear construct node n ancestor label n leaf node henc sinc p 0 nite tree also nite clear construct tree exactli one tree satisfi condit let us refer tree p 0 l exampl consid product system exampl 511 follow tree fmpg f mp sog f mp nig theorem 516 node p 0 l g base l respect p 0 2 proof see appendix 53 complex transform section show compil away naf gener polynomi number atom product system method given compil away naf liter l occur rule r basic consist comput base l comput set r lr set r lr comput base appli standard method proposit logic comput disjunct normal form show next comput set r lr polynomi take account restrict class strati product system first consid sequel classic product system rule follow structur b posit atom sequel rule form refer rule b given two atom b say successor b denot b occur bodi rule b product system acycl relat well found ie decreas sequenc nite give acycl product system dene rank atom denot kak follow ag let strati product system contain exactli one rule r p l assertp p 0 classic product system satisfi follow condit c2 rule p 0 follow structur c3 atom either appear head exactli two rule appear head rule posit atom either occur bodi exactli one rule occur bodi rule atom either atom exist decreas sequenc l atom occur naf liter rule r notic condit c5 impli atom b c b c also atom either successor exactli four successor due condit c2 c3 want show number rule obtain compil away naf liter rule r polynomi number atom p 0 amount prove cardin set r lr polynomi number atom p 0 recal set r lr comput base l appli standard method proposit logic comput disjunct normal form let atom partial state satisfi follow condit achiev state satisfi ii minim ie proper subset satis let also r set partial state satisfi condit ii obvious r lr l sequel show cardin r l polynomi number atom p 0 first let us gener denit r l conjunct atom given conjunct set partial state satisfi follow condit achiev state satisfi iv minim ie proper subset satis iii consid conjunct distinct atom ka 1 let partial state r a1 n syntact restrict clear 2 r moreov clear r r j 6 j disjoint set cardin r previou observ clear cardin r consid atom b kbk 0 p 0 contain exactli two rule b consid partial state 2 r b syntact restrict p 0 minim clear split two disjoint set 0 00 0 2 r 1 2 00 2 r 3 4 recal b c b p 4 set rule p 0 rule rule atom c c structur p 0 fact clear p p j 6 j equal renam atom henc also clear set r r j equal renam atom let cardin r 4 previou argument obviou cardin r 1 2 r 3 4 2 henc cardin r let seen cardin r b given induct furthermor obviou sinc atom occur head rule henc fag set r easi show induct relat fk dene uniqu solut let us go back rule p 1 r p l assertp k dicult see due syntact restrict number n atom occur p 0 exactli 1from easili calcul ie ie henc dene cardin r l function gn follow let 2 4 easi see constant c sucient big x 4 x x 2c henc constant c sucient conclud gn polynomi n number atom p 0 henc worst case complex translat away naf polynomi number atom 6 discuss conclus product system negat failur nd cours action natur extens classic product system increas express sens allow natur simpl represent specic mani real life problem extens given simpl semant base argument theoret framework negat failur nd cours action tightli relat negat failur prove logic program inde normal logic program p view gp g p transform rule product rule k asserta dicult show semant p g p coincid sens ground prefer stabl set comput g p correspond ground prefer stabl model p side 8 shown argument repres logic program negat failur therefor say mechan negat failur nd cours action product system negat failur prove logic program dierent side coin still sever issu deserv deeper studi understand first seen semant ect inher nondetermin product system fact semant dierent complet comput start initi state yield dierent nal state even strati gpss contrast mani eort literatur aim nding method select one complet comput expect semant 13 24 even though believ mani case eort contrast inher nondeterminist natur problem repres product rule situat select one possibl mani complet comput may harm case worth studi comput strategi basic provid us determinist oper semant product system still declar semant serv basi reason correct method secondli intend studi comput mechan proof procedur gener product system negat failur seen strati product system way comput negat failur bottomup fashion seen dynam runtim method comput negat failur worth address point whether class strati ps extend gener class similar bottomup method exist hand case negat failur compil classic negat seen section 12 seen compiletim static method comput negat failur find gener techniqu achiev anoth interest issu alreadi mention case negat failur still serv specic classic ie without naf product system final investig applic approach activ databas area activ databas 6 import research topic databas commun due fact nd mani applic real world problem mani commerci databas system extend allow user express activ rule still activ databas face mani open issu lack well understood declar semant see eg 11 29 semant would provid common basi understand oper semant dene implement activ rule databas system well compar dierent implement typic activ rule activ databas eventconditionact rule form event condit action current extend argument base approach activ rule address also case use negat failur condit part rule r static analysi techniqu predict behavior activ databas rule toward theori declar knowledg abstract prefer answer set extend logic program activ databas system trigger rule advanc databas process negat hypothes abduct foundat logic program accept argument fundament role logic program product system need negat failur reason speci activ databas system ops5 user manual logic action rulebas system stabl model semant logic pro gram overview product rule databas system rule base system comput argument logic program semant consider nonmonoton logic defeas reason system defeas argument logic system defeas argumen tation semant class strati logic default reason mathemat treatment defeas reason implement unfound set wellfound semant gener logic program feasibl defeat defeas reason activ databas rule transactionconsci stablemodel semant tr