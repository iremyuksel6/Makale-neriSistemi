loop almost linear time loop identif essenti step perform variou loop optim transform classic algorithm identifi loop tarjan intervalfind algorithm restrict reduc graph recent server peopl propos extens tarjan algortihm deal irreduc graph havlak present one extens construct loopnest forest arbitrari flow graph show run time algorithm quadrat worstcas almost linear claim show modifi algorithm make run almost linear time next consid quadrat algorithm present sreedhar et al construct loopnest forest differ one construct havlak algorithm show algorithm adapt run almost linear time final consid algorithm due steensgaard construct yet antoh loopnest forest show algorithm made effici borrow idea algorithm discuss earlier b introduct loop identif interest control flow analysi problem sever applic classic algorithm identifi loop tarjan interv find algorithm tarjan 1974 restrict reduc graph centli sever peopl propos extens tarjan algorithm deal irreduc graph paper studi improv three recent propos algorithm identifi loop irreduc graph first algorithm studi due havlak 1997 show run time algorithm quadrat worstcas almostlinear claim show modifi algorithm make run almost author address g ramalingam ibm tj watson research center po box 704 yorktown height ny 10598 usa email ramawatsonibmcom permiss make digitalhard copi part materi without fee grant provid copi made distribut profit commerci advantag acm copyrightserv notic titl public date appear notic given copi permiss associ comput machineri inc acm copi otherwis republish post server redistribut list requir prior specif permiss andor fee c g ramalingam linear time next consid quadrat algorithm present sreedhar et al 1996 construct loop nest forest differ one construct havlak algorithm show algorithm adapt run almost linear time final section present yet anoth loop nest forest defin steensgaard 1993 discuss aspect sreedhar et al algorithm combin steensgaard algorithm improv effici steensgaard algorithm 2 terminolog notat flowgraph connect direct graph v e startend consist set vertic v set edg e distinguish start end vertic assum without loss gener start predecessor denot number vertic given graph n number edg given graph assum reader familiar depth first search hopcroft tarjan 1973 abbrevi df depth first search tree see cormen et al 1990 exampl edg x graph said df tree edg x parent df tree df forward edg x ancestor parent df tree df backedg x descend df tree df cross edg otherwis omit prefix df confus like straightforward augment df comput inform help answer ancestor relat queri form u ancestor v df tree constant time see havlak 1997 exampl refer order vertic visit df df order also assum reader familiar concept reduc irreduc flowgraph see aho et al 1986 discuss concept denot invers ackermann function ffi j invers ackermann function slow grow function may consid constant practic purpos see cormen et al 1990 discuss function appear singl wellaccept definit loop certain irreduc flowgraph three algorithm consid paper identifi differ set loop suitabl algorithm depend intend applic howev follow fact hold true three algorithm loop correspond set vertic flowgraph l x l two loop identifi one algorithm either l x l mutual disjoint one complet contain henc nest contain relat loop repres forest refer loop nest forest identifi correspond algorithm vertex belong loop said entri vertex loop predecessor outsid loop given flowgraph algorithm describ paper conceptu modifi flowgraph execut proce thu refer flowgraph worth rememb dont mean fix input flowgraph flowgraph constantli chang cours execut chang identifi loop almost linear time delta 3 flowgraph howev explicitli repres instead unionfind data structur use implicitli repres chang flowgraph 3 tarjan algorithm reduc graph begin brief descript tarjan loop nest forest algorithm construct consid reduc graph everi vertex w target backedg identifi loop lw w header let bw set backedgeg loop lw consist w vertic graph reach vertex bw without go w two loop l x l either l x l must disjoint one must complet contain henc nest contain relat loop repres forest yield loop nest forest provid definit tarjan loop nest forest reduc graph let us see forest construct effici tarjan algorithm perform bottom travers depthfirst search tree identifi inner nest loop first identifi loop algorithm col laps singl vertex x set vertic collaps x mean replac set vertic x singl repres vertex r x graph vertex successor predecessor r x collaps graph iff successor predecessor vertex x origin graph vertex w visit travers determin loop header incom backedg explain let bw set fzjz w backedgeg children w 1 loop nest forest identifi perform backward travers collaps graph identifi vertic reach vertex bw without go w children w identifi w children merg collaps togeth singl vertex identifi newli construct loop lw travers continu next vertex implement collaps vertic achiev use classic unionfind data structur see tarjan 1983 cormen et al 1990 thu outermost loop identifi far maintain set find oper vertex x return header outermost loop contain x vertex x loop set vertic collaps perform union oper vertic set complet descript algorithm pseudocod appear figur 1 let us analyz complex algorithm procedur findloop invok exactli everi vertex henc line 8 execut everi vertex line 1016 execut everi vertex innermost loop contain identifi result total cost execut line 8 1016 perform one find oper per edg origin graph similarli line 34 execut everi vertex z cost 1 union oper whole algorithm perform n union oper find oper n denot number vertic graph denot number edg graph henc whole algorithm run strictli speak mean children node repres loop lw howev simplifi matter somewhat use header vertex w repres loop lw loop nest forest sinc vertex header one loop g ramalingam 1 procedur collapseloopbodi loophead 2 everi z 2 loopbodi 3 loopparentz loophead 4 lpunionz loophead use loophead repres merg set 5 end 6 procedur findlooppotentialhead potentialhead backedg worklist empti 10 remov arbitrari element worklist add loopbodi 12 everi predecessor z z backedg 13 lpfindz 62 loopbodi fpotentialheaderg worklist 14 add lpfindz worklist 15 end 16 end 17 end 18 loopbodi empti 19 collaps loopbodi potentialhead procedur tarjansalgorithm g 22 everi vertex x g loopparentx null lpaddx end 23 everi vertex x g reversedfsord findloopx end fig 1 tarjan algorithm construct loop nest forest reduc graph lp partit vertic graph function lpaddz initi place z equival class function lpunionu v merg us vs class one use v repres element merg class function lpfindz return repres element zs equival class time omnffmnn unionfind implement use standard path compress unionbyrank techniqu tarjan 1983 cormen et al 1990 4 havlak algorithm havlak 1997 recent present extens tarjan algorithm handl irreduc graph well show algorithm potenti quadrat even though havlak describ algorithm almostlinear precis show algorithm worstcas may take n 2 time even graph number edg havlak extens tarjan algorithm modifi loop bodi identif step follow given vertex potentialhead children potentialhead loop nest forest identifi perform backward travers collaps graph travers restrict set descend potentialhead df tree particular line 1315 tarjan algorithm figur modifi line execut z descend potentialhead df tree z descend potentialhead df tree edg z ignor replac edg z potentialhead collaps flowgraph note reduc graph z identifi loop almost linear time delta 5 1 2h e end k fig 2 counterexampl illustr havlak algorithm may perform quadrat number unionfind oper solid line indic df tree edg dash line indic remain graph edg guarante descend potentialhead df tree last step describ precis sourc problem possibl singl edg z process multipl time time edg header loop contain exampl shown figur note vertic h k h 1 target backedg henc identifi loop header order loop bodi also construct order edg k h k process replac success edg k h everi k similarli everi edg process time thu algorithm end perform oper exampl exampl present lower bound complex havlak al gorithm also upper bound havlak algorithm particular modifi loop line 1215 perform n find oper sinc line 1016 may perform everi vertex whole algorithm perform union oper 2 find oper impli upper bound run time algorithm sinc ffn 2 n o1 see tarjan 1983 upper bound simplifi 2 6 delta g ramalingam 0 z 1 j k fig 3 modifi havlak algorithm run almost linear time 0 edg flowgraph 1 delta delta delta k shown bold vertic ancestor 0 df tree identifi loop header havlak algorithm z least common ancestor 0 df tree j proper descend z descend j1 havlak algorithm edg 0 use construct bodi loop header 1 j use construct loop bodi j1 5 almost linear time version havlak algorithm describ modif havlak algorithm run almost linear time given vertex 0 control flow graph consid 0 ancestor havlak loop nest forest see figur 3 particular everi 0 let i1 denot header innermost loop contain havlak loop nest forest thu 1 2 delta delta delta sequenc loop contain 0 innermost outermost identifi header note i1 must ancestor tree consid edg 0 consid largest j descend j df tree word descend j1 j df tree consid havlak algorithm process edg 0 everi bodi loop header construct edg consid sinc sourc edg descend edg replac edg final bodi loop header j1 construct edg j appear proper edg vertex ad loop bodi would desir replac edg 0 edg j one step instead j step turn let z denot least common ancestor 0 df tree note z must lie j j1 df tree consid moment havlak algorithm visit z bottom travers df tree point loop header 1 j identifi loop header j1 yet identifi loop almost linear time delta 7 1 procedur markirreducibleloopsz 3 6 null 5 mark u irreducibleloophead 8 end procedur processcrossfwdedgesx 10 everi edg z crossfwdedgesx 11 add edg findi findz graph 13 end 14 procedur modifedhavlakalgorithm g 15 everi vertex x g 16 loopparentx null crossfwdedgesx fg 18 end 19 everi forward edg cross edg x g 20 remov x g add crossfwdedgesleastcommonancestoryx 21 end 22 everi vertex x g reversedfsord 23 processcrossfwdedgesx 24 findloopx procedur findloop figur 1 25 end fig 4 modifi version havlak algorithm rlh second unionfind data structur use map loop header header innermost reduc loop contain construct find oper 0 return j stage suggest follow algorithm initi pass remov everi cross edg forward edg x graph attach list associ least common ancestor x almostlinear time see tarjan 1979 cormen et al 1990 problem 223 run havlak algorithm modifi follow whenev main bottomup travers visit vertex w process list crossforward edg associ first pass add edg f indi f indx graph immateri whether add edg f indx edg f indi f indx graph modifi algorithm appear figur 4 note modif impli use procedur findloop tarjan algorithm unchang modifi algorithm run almost linear time construct loop loop nest forest havlak algorithm howev quit complet yet addit construct loop nest forest havlak algorithm also mark loop reduc irreduc straightforward distinguish reduc loop irreduc loop modifi algorithm describ show extra piec inform comput desir consid exampl figur 3 presenc edg 0 mean g ramalingam loop header 1 j irreduc henc algorithm replac edg 0 edg f indi j explain need mark loop header 1 j irreduc procedur markirr ducibleloop figur 4 walk loopnest tree contain 0 naiv explain algorithm end quadrat avoid quadrat behavior use standard path compress techniqu particular consid line 56 mark vertex u irreduc loop header travers parent let us say step scan looptre edg util second unionfind datastructur scan everi looptre edg particular union oper line 7 ensur tree edg never scan sinc find oper line 4 skip past previous scan edg safe sinc reason mark vertex irreduc alreadi mark result algorithm run almost linear time 6 sreedhargaole algorithm sreedhar et al 1996 present differ algorithm construct loop nest forest algorithm util dj graph essenti combin control flow graph domin tree one structur howev simplifi discuss algorithm use control flow graph domin tree instead dj graph let levelu denot depth node u root domin tree root level 0 let v denot set vertic level ie set vertic u maximum level domin tree sreedhar et al algorithm process vertic domin tree bottom particular level l p 1 process follow first step identifi reduc loop level l vertic level l scan vertex n one incom backedg whose sourc domin n identifi header reduc loop bodi reduc loop identifi tarjan algorithm travers graph backward sourc backedg identifi vertic reach backedg without go n reduc loop collaps singl vertex tarjan algorithm vertex n level l one incom backedg whose sourc domin n n one entri irreduc loop vertic level l process identifi reduc loop construct irreduc loop level l vertex n level l one incom backedg whose sourc domin n requir process subgraph collaps flowgraph consist vertic level greater equal current level l set vertic identifi strongli connect compon scc nontrivi strongli connect compon graph irreduc loop level l collaps singl vertex nontrivi scc mean scc consist one vertex establish properti loop identifi algorithm use subsequ identifi loop almost linear time delta 9 lemma 1 vertex entri vertex one irreduc loop proof note two irreduc loop identifi level l mutual disjoint henc two loop common entri vertex let l irreduc loop identifi level l show entri vertex l must also vertex level l immedi impli irreduc loop belong differ level share common entri vertex either lemma follow let f denot subgraph domin tree consist vertic level greater equal l thu f forest consist subtre domin tree first note loop l must consist vertic least two differ tree f loop consist vertic one tree must reduc loop level l loop level greater l let u v vertic belong differ tree f let w root tree contain v path flowgraph u v must pass w otherwis w would domin v henc loop l contain vertex v must also contain root tree f contain v let v vertex loop l let w root tree contain v assum v 6 w predecessor x v flowgraph must also tree root w straightforward properti domin tree follow x must also loop l sinc path x vertex loop name v path vertex loop name w x establish vertex loop l predecessor outsid l must root tree f root tree f precis vertic level l result follow sreedhar et al show algorithm describ run time omffm n km k number level strongli connect compon algorithm invok worst case k result quadrat algorithm exampl figur 5 illustr sourc quadrat behavior algorithm repeat applic scc algorithm consid process done level exampl level contain irreduc loop consist vertic b c e construct irreduc loop requir identifi scc graph consist vertic 1 k b c e vertic notic vertic 1 k f 1 f k visit belong nontrivi scc similarli appli scc algorithm level lower level may end visit vertic 1 k f 1 f k worst case may end visit vertic time result quadrat complex show care implement scc identif phase ensur algorithm run almost linear time observ vertic b c e collaps singl vertex say l repres irreduc loop vertic never visit true edg k b may visit later howev edg actual repres edg collaps graph cost visit edg attribut cost visit vertex l g ramalingam k k f ff 1 c e level i1 x level fig 5 exampl illustr sourc quadrat behavior sreedhar et al algo rithm solid edg belong control flow graph domin tree dash edg control flow graph edg domin tree goal perform irreduc loop construct level vertex x level j visit x belong irreduc loop level follow consid strongli connect compon consid vertex u compon visit first depth first search clearli vertic compon descend vertex df tree thu start set incom backedg u travers graph backward restrict travers vertic descend u df tree identifi vertic belong us strongli connect compon without visit vertic us scc process similar one use havlak algorithm tarjansalgorithm identifi loop bodi correspond potenti header vertex howev note appli process start vertex first one scc visit df identifi complet scc thu havlak tarjan algorithm visit potenti header vertic revers df order want visit vertic order instead perform irreduc loop construct level l visit set vertic level l df order visit vertex u belong irreduc loop level l alreadi construct skip vertex continu next vertex otherwis incom backedg belong irreduc loop bodi loop identifi travers backward sourc backedg restrict travers descend u df tree modifi algorithm appear figur 6 word explan tarjan algorithm havlak algorithm identifi one loop per header vertex allow us repres loop header vertex loop nest forest howev sreedhargaole algorithm may identifi two loop per header vertex reduc loop irreduc loop consequ use header vertex repres loop loop nest forest instead identifi loop almost linear time delta 11 1 procedur findloophead worklist worklist empti 3 creat new vertex looprep predecessor header 5 worklist empti 6 remov arbitrari element worklist add loopbodi 8 processedi true 9 everi predecessor z 10 lpfindz descend header df tree looprep graph 12 elsif lpfindz 62 loopbodi worklist 13 add lpfindz worklist 15 end 16 end 17 collaps loopbodylooprep 18 end 19 procedur modifiedsreedhargaoleealgorithm g 20 everi vertex x g 22 end 23 1 24 everi x 2 leve x backedg x domin 26 27 end 28 everi x 2 leve dfsorder 29 processedx x backedg x domin 33 end 34 end fig 6 modifi version sreedhargaole algorithm use new repres vertex algorithm explicitli identifi loop consist singl vertex modifi desir note construct level list vertic level df order easili enough initi list empti visit vertic df order append visit vertex end list correspond level let us analyz complex algorithm observ line 615 get execut everi vertex line perform indegreey find oper howev line execut vertic exist origin graph also vertic creat line 3 vertic creat line 3 repres loop collaps graph henc complex algorithm depend number g ramalingam end fig 7 exampl illustr sreedhar et al algorithm identifi loop identifi steensgaard algorithm repres creat indegre creat vertic fall two categori reduc loop repres irreduc loop repres everi vertex h origin graph header one reduc loop result creation one reduc loop repres r h whose indegre bound indegre h everi irreduc loop two entri vertic vertic origin graph indegre repres irreduc loop bound sum indegre entri vertic vertex origin entri vertex one irreduc loop henc sum indegre irreduc loop repres bound number edg origin graph result whole algorithm perform union oper om find oper result complex omffm n 7 steensgaard loop nest forest section consid yet anoth loop nest forest defin steensgaard 1993 outlin steensgaard algorithm construct forest also serv construct definit structur steensgaard identifi loop graph top fashion identifi outer loop first nontrivi strongli connect compon given graph constitut outermost loop vertex loop said gener entri node loop predecessor outsid strongli connect compon edg vertex insid loop one gener entri node said gener backedg inner loopscontain given loop determin identifi strongli connect compon subgraph induc given loop gener backedg elimin iter process yield loop nest forest let us briefli consid differ forest creat steensgaard algorithm forest creat sreedhargaole algorithm one differ enc explain sreedhar et al 1996 sreedhargaole algorithm identifi loop almost linear time delta 13 may identifi reduc loop steensgaard algorithm extra step sreedhargaole algorithm construct reduc loop elimin differ disappear howev also possibl sreedhargaole algorithm identifi fewer loop steensgaard algorithm problem possibl sreedhargaole forest one irreduc loop nest insid anoth irreduc loop entri vertic level domin tree exampl shown figur 7 illustr exampl steensgaard algorithm identifi outer loop consist vertic u v w x inner loop consist vertic w x contrast sreedhargaole algorithm identifi one loop consist u v w x show steensgaard loop nest forest construct effici borrow idea describ section 6 sreedhar et al 1996 simpli modifi irreduc loop construct phase algorithm describ section 6 follow instead stop identifi strongli connect compon use steensgaardlik algorithm iter find loop nest insid irreduc loop word instead appli strongli connect compon algorithm subgraph vertic level greater equal current level appli steensgaard algorithm subgraph symmetr also possibl modifi steensgaard algorithm replac use strongli connect compon algorithm algorithm present section 6 result algorithm asymptot worstcas complex steen gaard origin algorithm quadrat size graph howev practic potenti effici steensgaard origin algorithm sinc number iter steensgaard algorithm perform within singl irreduc loop identifi sreedhar et al algorithm like much smaller number iter would perform whole graph 8 conclus paper examin three algorithm identifi loop irreduc flowgraph shown algorithm made effici three algorithm construct potenti differ loop nest forest question aris rel advantag differ algorithm havlak approach disadvantag set loop found loop nest forest construct depend depthfirst span tree depend order outgo edg everi vertex particular repres singl irreduc loop k entri vertic sreedhar gaole forest may repres k irreduc loop nest within arbitrari order havlak forest henc believ sreedhar gaole loop nest forest natur havlak loop nest forest howev modifi version havlak algorithm simpler implement modifi version sreedhargaole algorithm sinc requir construct domin tree would worthwhil exercis adapt havlak algorithm directli construct sreedhargaole loop nest forest think done formal establish yet hand sreedhargaole loop nest forest steensgaard 14 delta g ramalingam loop nest forest somewhat incompar explain section 7 idea behind approach combin construct loop nest forest refin either one result algorithm expens almost linear time variat present construct sreedhar gaole forest whether refin forest worth increas algorithm complex depend intend applic acknowledg thank john field v sreedhar anonym refere help comment r introduct algorithm nest reduc irreduc loop effici algorithm graph manipul loop use dj graph sequenti program depend graph irreduc program test flow graph reduc applic path compress balanc tree data structur network algorithm revis septemb tr data structur network algorithm compil principl techniqu tool introduct algorithm loop use dj graph nest reduc irreduc loop applic path compress balanc tree algorithm 447 effici algorithm graph manipul ctr fang liu jacob j flomenberg devaka v yasaratn sule ozev hierarch varianc analysi analog circuit base graph model correl loop trace proceed confer design autom test europ p126131 march 0711 2005 g ramalingam loop domin domin frontier acm sigplan notic v35 n5 p233241 may 2000 domin analysi irreduc cfg reduct acm sigplan notic v40 n4 april 2005 loop domin domin frontier acm transact program languag system topla v24 n5 p455490 septemb 2002 sebastian unger frank mueller handl irreduc loop optim node split versu djgraph acm transact program languag system topla v24 n4 p299333 juli 2002 gregor snelt torsten robschink jen krink effici path condit depend graph softwar safeti analysi acm transact softwar engin methodolog tosem v15 n4 p410457 octob 2006