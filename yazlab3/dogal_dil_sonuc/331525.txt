automat check implement formal specif abstractw propos check execut abstract data type imper implement algebra specif explicit map implement state abstract valu ad imper code form specif allow mechan check desir properti consist complet particularli oper ad increment data type unit test specif serv test oracl varianc comput specifi valu automat detect modul made part applic check remov may remain place valid implement specif execut rewrit thought implement maximum design divers valid form multiversionprogram comparison b introduct encapsul data abstract also call abstract data type adt promis programminglanguag idea support softwar engin adt basi informa tionhid design philosophi 50 make softwar easier analyz understand hope support mainten reus sever formal specif techniqu adt 30 grow number languag implement idea 27 accept theori adt correct 20 26 28 adt good set work unit test testabl 34 howev adt promis fundament problem remain concern adt specif implement paper address problem check agreement adt formal specif implement use particular kind equat specif rewrit rule 4 c implement languag 54 latter choic crucial workalmost adt program languag eg ada java would work well use special properti one kind rewrit specif would make difficult substitut differ kind specif part show write c class formal specif implement automat check specif execut thu specif serv effect oracl applic selfcheck adt deviat specifi behavior without failur detect specif oracl may ineffici comparison c implement use may confin prototyp test phase softwar develop howev applic specif implement may view independ version softwar continu check sinc produc human be subject error utterli differ form content suggest minimum chanc commonmod failur 43 central idea allow self check implement part c code map concret implement state abstract specif object failur mechan captur import part design weak exist adt system selfcheck adt describ adt check implement specif run time give simpl illustr exampl 21 automat test implement side system avail shelf use c languag support adt ada eiffel java smalltalk etc would well make use inherit part objectori languag one compon scheme thu class implement whether implement thought aris intuit set requir formal specif second compon scheme immateri descript howev discuss issu section 52 second compon requir formal specif axiomat varieti much leeway specif form determin abil mechan check specif properti like consist newli ad oper play essenti role effici check abstract equal specif serv implement oracl choos use rewrit system restrict desir properti confluenc termin larg obtain syntact form 4 would possibl employ gener specif cost use power less effici theorem prover limit goal scheme argu gener loss effici made engin decis use specif fit role automat oracl user system must suppli one addit compon central import scheme represent map 1 concret data structur c instanc vari abl abstract specif major weak present adt theori represent map nowher explicit exist theori frame implement correct exist appropri represent 22 practic implementor must represent mind way formal record maintain earli crucial design decis flaw exist adt design methodolog written axiomat specif c class explicit represent map user may test composit adt use unittest techniqu exampl convent driver code coverag tool could use ensur c code adequ test accord say dataflow criterion 52 test could gener exercis trace class oper 34 whatev techniqu use system serv automat test oracl exist test system lack determin correct oper invok accord specif altern user might decid test adt place write applic code use conduct system test perhap use randomli gener input accord expect oper profil 47 applic program embed adt test adt fail without detect 22 exampl small integ set illustr idea use class small set integ first use hoar 33 discuss theori data abstract signatur adt shown figur 1 stroustrup 54 signatur diagram captur complet syntax adt usag exampl figur 1 empti take two argument elem nat oper type also shown diagram 221 specif semant adt specifi set equat also call axiom express name oper exampl intuit axiom insert oper set equat determin combin oper equival along assumpt combin handl equat determin exactli object name use hoar foundat paper 33 perhap abstract map common name also better express direct set nat elem bool maxsiz cardin member empti insert true fals succ figur 1 signatur gener bound adt set express ground term use oper consitut set form adt common assumpt initi one 26 object prove equal use equat distinct good deal work done algebra specif see 12 equat view rewrit rule proof equival simplifi view care must taken rewrit system correct implement algebra specif purpos suffic consid groundconverg ie confluent termin system equat rewrit rule first rule appli infinit often suitabl rewrit system obtain equat specif complet 41 although procedur guarante termin altern form equat suitabl restrict 4 approach chosen furthermor implement set impos bound set size valu set element type intset given stroustrup 54 x532 simpl equat describ practic set adt specifi type intset understand code 54 use notat similar sever algebra specif act one 20 asf 11 larch 29 explain part need understand exampl userdefin sort specifi enumer constructor ariti paramet type follow axiom axiom rewrit rule form l r respect left right side rule c option condit 39a guard applic rule symbol right side rule denot except result semant formal within framework order sort algebra 25 modest purpos denot comput must abort follow prolog convent 15 identifi variabl begin upper case letter underscor symbol denot anonym variabl adt intset 54 specifi follow intset constructor maxsiz element upper bound element set axiom membereinsertf cardinalityinsertf maxsizeinsertf membereinsertf oper member cardin maxsiz axiomat shortli reli reader intuit concept explain axiom style use axiom handl except case axiom guard constraint defin except condit thu empti axiom except occur paramet inconsist similarli first axiom insert handl error case attempt made insert element violat upperbound restrict third axiom insert handl attempt insert new element set alreadi maximum size second fourth insert axiom establish normal form nest insert element order without duplic last three axiom insert creat overlay ie critic pair overlap root requir condit overlay axiom mutual exclus overlay creat vacuous joinabl consequ 18 system confluent make specif grow increment adopt stepwis specif extens approach 20 increment add new oper specif new specif complet consist extens old one adopt two design strategi 4 guarante complet consist follow binari choic strategi gener set complet mutual exclus argument oper left side rule defin set right side set condit associ right side mutual exclus recurs reduct strategi use mechan similar primit recurs express defin right side rule way ensur termin symbol right side rule stand term obtain left side replac roughli speak recurs constructor recurs argument exampl axiom cardin stand cardin promis axiom cardin maxsiz member follow oper cardinalityintset integ axiom oper maxsizeintset integ axiom oper memberintegerintset boolean axiom memberempti fals complet exampl specif intset 222 implement specif consid three implement specif refer byhand implement direct implement selfcheck implement byhand implement c code written programm provid function express specif code natur structur c class oper implement class member function byhand implement intset appear first exampl stroustrup text 54 x532 direct implement 30 c code automat gener specif repres instanc abstract data type term manipul term accord rewrit rule selfcheck implement union byhand implement direct implement addit c code check mutual agreement describ selfcheck implement first even though use direct implementa tion present order motiv need direct implement consider detail given selfcheck implement describ follow section direct implement provid mechan c comput normalform term correspond sequenc specif oper byhand implement provid similar mechan comput result use sequenc memberfunct call two comput correspond respect upper abstract lower concret map diagram display figur 2 abstract world 2 binari relat set membership concret world member oper transform valu state variabl start lower left diagram pass upper right two possibl path alway yield result say diagram commut concret implement commut diagram definit correct accord abstract specif figur 2 suppos boolean result return member mx x integ valu intset valu function comput member diagram commut iff 2 set elem 2 bool state state member figur 2 commut diagram member oper adt set check byhand result direct result requir code avail represent function complet diagram figur 2 selfcheck implement compris c code byhand direct implement plu represent function appropri call connect locu control place byhand implement member function invok correspond normalform term request direct implement comparison result howev take place abstract world actual compar normal form comput selfcheck implement intset illustr structur selfcheck class two addit privat entiti declar first exampl type absset type mark set direct implement addit variabl abstract contain valu set direct implement addit function conc2abstr represent map take input paramet instanc variabl intset return correspond absset instanc declar selfcheck intset class class intset absset abstract abstract version class absset concr2abstr represent function line class ident stroustrup p 146ff int cursiz maxsiz int x public intsetint int n int 1n code omit member function selfcheck implement differ correspond one byhand implement addit two statement function return 2 precis think state oe map instancevari name valu diagram abstract oper f concret oper f variabl state x1 x2 xn diagram commut iff exampl selfcheck member function implement specif oper empti follow intsetintsetint int n int 1n new intmaxs addit statement selfcheck abstract valu verifi check mutual agreement directimplement function empti call resulta normal form encod data structur direct implementationsav ad variabl abstract code empti appear follow section macro verifi perform equal test valu store abstract comput conc2abstr also normalform valu equal test particularli simpl direct implement equal mean ident normal form verifi macro includ error report two valu differ code follow defin verifi cerr formdirect differ byhand line sn last signific piec code selfcheck implement represent function map straightforward start empti abstract set ad element concret version one time calcul correspond abstract set absset intsetconcr2abstr absset upper bound implement int return h write function programm notic byhand implement 54 pay attent upper bound element size maxint must use paramet implic omiss discuss 223 direct implement c direct implement userdefin sort data structur pointer discrimin union discrimin valu token whose valu stand constructor sort arm union c struct whose compon repres argument constructor associ discrimin dynam polymorph would eleg altern less portabl languag exampl int elem kind gener enum tag empti insert token discrimin struct setnod tag constructor discrimin union struct int int associ empti struct elem setnod 1 arm associ insert setnodeint int r setnodeelem e setnod simpl macro definit improv readabl defin tagofw wt defin maxsizeofw w0m defin rangeofw w0r defin elemofw w1e defin setofw w1 declar function signatur symbol extern absset emptyint int r extern absset insertelem e absset extern int cardinalityabsset extern int maxsizeabsset extern bool memberelem e absset equalitytest function extern bool equalabsset s1 absset s2 normalform syntact equal constructor oper implement function without side effect execut function implement constructor dynam alloc associ union return pointer function implement nonconstructor consist nest case whose label correspond pattern rewrit rule rule condit implement condit statement sinc pattern condit mutual exclus order execut may affect effici result comput complet pattern impli execut function implement oper bound find match rule eventu execut call repres rule right side except case execut call gener finit tree call whose leav alway call constructor function consequ abstract represent sort instanc alway return translat condit rule right side mean macro except similar macro assert provid gnu c compil use project defin cerr except ex form line sn linefil exampl direct implement constructor function oper function follow absset emptyint int r absset absset insertelem e absset absset h switch case empti new setnode break case insert int cardinalityabsset switch case empti return 0 case insert memberelemofssetof return cardinalitysetof return 223 execut small integ set execut selfcheck implement intset rais interest issu byhand implement 54 although document code seem requir upper bound valu element constraint enforc byhand implementa tion selfcheck implement detect problem test issu follow warn except e rangeof line 41 abssetc messag e rangeof textual code appear except macro direct implement insert comment indic except implement violat condit axiom problem undetect test code 54 direct implement includ oper cardin correspond member function byhand implement 54 naiv programm might add observ function return valu cursiz counter element store array repres set howev selfcheck implement would report failur cardin test byhand implement creat set insert duplic element naiv programm miss byhand implement fact store duplic array specif wrote cardin unexpect behavior would thu catch mistak naiv cardin implement smallintegerset exampl illustr benefit gain formal specif direct implement specif provid care check byhand implement allow selfcheck test valu cours requir addit effort write specif argu howev without formal specif correct code imposs write seen two exampl well understood class textbook exampl 224 exampl selfcheck exampl make clear way explicit represent function allow result comput byhand implement check specifi direct im plement consid previous creat intset contain element 1 5 perhap set creat c code intset ex6maxint alreadi check state defin instanc variabl includ concret array first two element 1 5 properli correspond term insert1insert5empty6maxint normal form assign state represent function suppos element 2 ad set perhap c call exinsert2 figur 3 show particular case commut diagram check comput lower level instanc variabl compris concret state initi valu concr2abstr concr2abstr figur 3 commut diagram insert 2 ex intset left member function insert byhand implement transform variabl shown call argument ex 2 upper level correspond abstract valu transform rewrit direct implement explicit represent map concr2abstr connect two level concret instanc variabl construct abstract valu comparison show comput correct occur abstract valu obtain two path around diagram start lower left end upper right cours actual compar selfcheck abstract valu bit pattern comput state state creat compil c program direct impl mentat howev state transpar like structur abstract term word word algebra obviou properli correspond imposs better mechan way mechan comparison must done comput state true abstract exist mathemat univers best make state simpl faith mirror univers 3 propos automat test system exampl section 22 begin two humancr object specif byhand implement construct selfcheck implement ad line byhand implement line call direct implement specif consid autom construct addit element selfcheck implement mechan creation selfcheck implement help justifi extra effort need creat independ specif byhand implement 31 autom direct implement direct implement specif noth els implement term rewrit system implement kind numer often add extra featur rewrit exampl equat interpret 49 add total lazi obj3 27 add sophist modul system sbreve 2 add knuthbendix complet procedur standalon system contrast direct implement must appear block c code integr byhand implement data represent implement rewrit rule discuss detail section 222 difficult compil appropri c code specif use compilercompil techniqu unix system 38 42 envi ronment eg standard ml new jersey 6 7 difficult part compil semant process guarante specif rewrit rule possess termin confluenc properti make direct implement work wherev possibl tri convert semant properti syntax properti static check exampl express rewrit rule condit els form mutual exclus suffici make overlay joinabl would guarante syntax objectori reader notic section 222 use functionallik style instead objectori one initi made abstract object c class chang 1 function code natur applic sinc abstract object intern state 2 encapsul protect offer c class wast case sinc directimplement code creat compil human use hand modular c use good advantag 32 autom call direct implement addit statement must ad byhand implement present difficulti one way write preprocessor c c effect addit use c grammar omit languag detail compil compil simpli copi code directli one way write preprocessor quickli 9 second idea take advantag exist parser exist c compil easi modifi code gener insert object code necessari call 32 idea converg c compil preprocessor c say true compil easiest case preprocessor might written use compil compil number technic problem modifi byhand implement exampl abstract concret world share builtin type like boolean oper return type represent function ident thu machineri abstract verifi need insert call take simpler form slightli difficult problem aris byhand implement function insert usual implement use updat place 54 abstact oper differ ariti concret thu slightli differ code requir void intsetinsertint code stroustrup section 32 cursiz maxsiz errortoo mani element int i0 xi1xi int selfcheck ad 33 represent function remain represent function map concret abstract main function name concr2abstr section 222 seem way essenti part function autom correspond concret abstract object primari design decis made earli byhand implement design constrain choic furthermor crucial proper work system propos represent correctli captur link concret abstract take extrem exampl programm code represent map input sort overload constant equal check verifi macro trivial succeed error caught argu extra program requir code represent function bless disguis unless programm detail accur idea function imposs write correct function implement specif oper better way forc understand insist put code better way protect chang inconsist represent make use code issu aros exampl section 223 even answer possibl incorrect represent function trivial self check programm like err direct misguid elabor toward trivial simplic baroqu represent less like conceal fault put much lead system report ersatz failur fals success suggest 44 often represent function structur similar routin prettyprint class valu intern represent humanread form insight underscor easi code represent function essenti captur 34 system overview figur 4 show selfcheck implement would result exampl section 22 direct implement invok byhand implement addit code comput term abstract data structur direct implement appli represent function concr2abstr map implement state term compar verifi macro selfcheck implement struct setnod direct implement class intset f int cursiz intsetintsetint byhand implement selfcheck absset intsetconcr2abstr absset represent function sort intset constructor empti intset specif hand gen auto gen figur 4 construct selfcheck implement 4 relat previou work previou attempt link formal specif adt implement taken varieti form proof system correct data type represent prove use diagram present figur 2 subroutin member test membership element set program might repres set fixeds array element pointer last element hoar 33 show exist represent map r make diagram commut proof implement correct map somewhat retrospect sinc concret implement origin abstract world formal intuit concept execut specif specif nonprocedur descript comput algebra specif descript take form set equat equat given orient ie transform rewrit rule result structur call rewrit system 39 allow us comput elementari step comput consist rewrit subterm express mean rule comput sequenc elementari step often two fundament properti requir termin ie comput sequenc end element rewritten 17 confluenc ie choic term rewrit express affect result comput 37 rewrit system properti model comput underli program languag odonnel equat interpret 49 automat program adt specif view veryhighlevel program languag execut natur axiomat specif support view need write implement specif execut implement thu question correct aris difficulti lie improv effici execut antoy et al 3 5 investig specif translat number differ languag volpano 55 propos compil specif imper languag like c use idea function languag like ml abl effect compil although case effici approach would obtain implement hand test system appear three distinct thread attempt use adt test first proof techniqu use instrument implement code runtim assert check test instanc proof assert could establish theorem prover gypsi system 1 use techniqu second adt specif use formal gener specificationbas test adt implement gerhart 24 describ logicprogram approach gener test point accord scheme tester impos slightli differ approach esprit project automat gener test base trace oper sequenc without direct tester 23 13 14 third daist system 21 attempt check consist implement algebra adt specif execut concret code correspond two side specif axiom compar result implementationsuppli equal function anna 45 specif ada intend cut across categori work progress less far special project cite approach might describ term combin proof test system contrast execut specif approach consid formal specif independ devis implement perhap deriv common intuit descript contrast automat program approach implement code guarante correct transform origin inde implement may full trick death formal proof essenti practic effici view specif implement attract one thing cut work specif implement half howev drawback mere move correct problem level howev care specif devis may fail captur intuit idea problem solut led intuit necessarili exist plane inaccess formal method henc may wise duplic work problem solut differ specif implement draw intuit problem model one may hope model unclear faulti independ attempt captur formal differ precis correct method detect difficulti lead correct model unlik use proof system attempt verifi implement check particular case return drastic restrict larg improv success rate process lower skill level need use test system use proof techniqu whose nearest precursor daist 21 unlik daist howev test equal adt valu conduct abstract domain henc proof techniqu rather concret domain thu avoid practic theoret defici could falsifi daist success yet pay effici penalti use rewrit abstract proof explicit map concret abstract domain map express part implement main contribut extra program requir represent function correspond need daist programm explicitli code concret equal function easier natur satisfi system also view check runtim behavior use code assert unlik ad hoc system 46 proofbas system gypsi 1 howev assert written user even conjunct theorem prover rather automat gener guarante detect deviat specif gener test data judg adequaci test data scheme gener test 35 36 measur test qualiti 16 48 use system suppli test oracl facil test system present lack frankl doong 19 describ system use rewrit obtain one abstract test case anoth result implement compar case sankar 53 use much power rewrit theorem prover attempt prove abstract equal term implement gener antoy gannon 4 use rewrit system similar prove correct loop subtyp help theorem prover system less straightforward lack explicit represent function andor specif restrict need guarante rewrit termin compar automat proof scheme adt automat program effici program formal specif goal test system modest imagin automat gener perfect set runtim assert make imposs byhand implement silent disagre specif attain limit goal ambiti one present formid problem worthwhil section tri answer question affirm 51 need test oracl test literatur almost univers assum test output examin correct almost univers fail say done furthermor research exampl 51 empir studi 10 alik show common tester failur hand yet ignor thu effect oracl problemth difficulti mechan judg program output meet specificationsi import one assum extra import random test recent work suggest true random test base valid oper profil essenti confid test requir vast number test point 31 adequaci criteria widespread use requir hundr point adequ random test requir million test flatli impract without effect oracl given oracl random test doubli attract howev theoret valid abl provid true estim reliabl approxim ideal complet automat test random input select mechan mean mechan examin output test suit run without need human intervent 52 multivers specificationprogram specif view program high level languag yet gener algorithm exist compil languag effici code still place byhand implementa tion view develop process direct first come requir phase develop commun end user attempt creat formal specif captur necessari intuit problem solut process prototyp aspect see section 53 specif formal great import next specif effici implement automat possibl hand otherwis formal method use show implement correct practic believ alway need byhand implement gener method proof alway need supplement test system propos autom test process effici one argu develop proce requir formal specif byhand implement declar form specif best rather form specif much closer ultim imper implement languag call 56 advantag twofold first procedur specif easier write second mani detail problem imperativeprogram solut must address prototyp byhand implement easier less prone introduc subtl disagr specif howev rather differ view specificationimplement program develop ment view specif implement imperfect reflect intuit requir problem solut view particularli appropri safetycrit applica tion attempt provid softwar fault toler techniqu multivers program mvp suggest 8 howev observ 40 socal commonmod failur frequent might expectedwork inform specifica tion independ program team make mistak lead coincid wrong result propos solut design divers program differ radic truli independ recent studi 43 cast doubt whole idea mvp contrast suggest intern selfcheck valuabl particularli check involv detail intern program state system propos fit need safetycrit applic well ultim selfcheck code check appli intern datastructur state explicit represent function map state direct implement time direct implement execut selfcheck implement view twovers program packag ultim design divers declar natur axiomat specif direct execut rewrit make commonmod failur convent byhand implement unlik 53 rapid prototyp previou system implement specif directli obj3 27 design specif execut prototyp allow potenti user interact softwar complet develop effort freez wrong design direct implement add new dimens idea byhand implement direct one implement specif complet independ softwar develop approach use former product test latter prototyp two implement coexist environ final product earlier system prototyp confin unusu softwar andor hardwar platform eg obj3 live insid common lisp prototyp product modul interact similar way rest system extern point view differ two version oper direct implement sideeffect free byhand implement effici reason might gap fill trivial interfac limit renam oper rearrang paramet mode function declar 6 summari futur work propos modest test system modul use algebra specif execut rewrit rule programm must write specif c code implement represent function relat implement data structur abstract term three element selfcheck implement construct automat specif serv test oracl selfcheck implement view vehicl test special kind twovers program system except design divers pursu two quit differ goal futur first investig express languag formal specif compon approach byhand implement languag java simpler c second want use idea practic set ting learn difficulti write specif valu test oracl ideal testb industri user objectori design central group respons develop highli reliabl support softwar develop use group worthwhil put extra effort specif return better test reliabl r languag specif implement verifi program term rewrit laboratori acunfail complet use term rewrit systsem verifi softwar lexic analyz gener standard ml mlyacc version 20 fault toler design divers concept experi prototyp test tool compar effect softwar test strategi algebra specif algebra system specif develop applic prolog test set gener algebra specif test data gener use prolog constraint program prolog formal notion programbas test data adequaci termin rta85 confluenc condit term rewrit system case studi test objectori program fundament algebra specif 1 data abstract implement theori modul gener test data algebra specif test gener method use prolog oper semant ordersort algebra initi algebra approach specifi cation introduc obj3 algebra specif abstract data type larch famili specif languag design data type specif partit test inspir confid test program aid compil proof correct data represent hardwar test softwar ic modul test case gener methodolog gener program test data confluent reduct abstract properti applic termrewrit sy tem yacc yet anoth compil compil rewrit system experiment evalu assumpt independ multivers program simpl word problem univers algebra use self check vote softwar detect empir studi person commun program specif introduct anna softwar reliabl measur comparison structur test strategi equat logic program languag criteria use decompos system modul autom gener program test data select softwar test data use data flow inform softwar templat oper versu convent approach softwar develop tr ctr daniel hoffman durga prabhakar paul strooper test iptabl proceed confer centr advanc studi collabor research p8091 octob 0609 2003 toronto ontario canada dick hamlet random test proceed 1st intern workshop random test juli 2020 2006 portland main qing xie atif memon design compar autom test oracl guibas softwar applic acm transact softwar engin methodolog tosem v16 n1 p4e februari 2007 johann henkel amer diwan tool write debug algebra specif proceed 26th intern confer softwar engin p449458 may 2328 2004 david owen dejan desovski bojan cukic random test formal softwar model induc coverag proceed 1st intern workshop random test juli 2020 2006 portland main jame h andrew susmita haldar yong lei felix chun hang li tool support random unit test proceed 1st intern workshop random test juli 2020 2006 portland main dougla gregor sibyl schupp stllint lift static check languag librari softwarepractic experi v36 n3 p225254 march 2006