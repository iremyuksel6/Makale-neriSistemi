compil stencil high perform fortran mani fortran90 hpf program perform dens matrix comput main comput portion program belong class kernel known stencil stencil comput commonli use solv partial differenti equat imag process geometr model effici handl stencil critic achiev high perform distributedmemori machin compil stencil effici code view import compani built specialpurpos compil handl other ad stencilrecogn exist compilersin paper present gener compil strategi stencil written use fortran90 array construct strategi capabl optim singl multistat stencil applic stencil specifi shift intrins arraysyntax equal well strategi elimin need patternrecognit algorithm orchestr set optim address overhead intraprocessor interprocessor data movement result translat fortran90 array construct experiment result show code produc strategi beat match best code produc specialpurpos compil patternrecognit scheme known us addit strategi produc highli optim code situat other fail produc sever order magnitud perform improv thu provid stencil compil strategi robust predecessor b introduct highperform fortran hpf14 extens fortran90 attract consider attent promis languag write portabl parallel program hpf offer simpl program model shield programm intricaci concurr program manag distribut data programm express data parallel use fortran90 array oper use data layout direct direct partit data comput among processor parallel machin mani program perform dens matrix comput main comput portion program belong class kernel known stencil hpf gain accept vehicl parallel scientif program must achiev high perform import class problem compil stencil effici code view import compani built specialpurpos compil handl 4 5 6 other ad stencilrecogn exist hpf compil 1 2 previou approach stencil compil signific limit restrict type stencil could handl paper focu problem optim stencil comput matter instanti programm execut distributedmemori archi tectur strategi orchestr set optim address overhead intraprocessor interprocessor data movement result translat array construct addit optim address issu scalar array assign statement loop fusion data local next section briefli discuss stencil comput execut cost distributedmemori machin section 3 give overview compil strategi discuss individu optim section 4 present extend exampl show strategi handl difficult case experiment result given section 5 section 6 compar strategi known effort comput section introduc stencil comput give overview execut cost distributedmemori machin also introduc normal intermedi form compil use stencil 21 stencil stencil styliz matrix comput group neighbor data element combin calcul new valu typic combin form sum product type comput common solv partial differenti equat imag process geometr model fortran90 array assign statement figur 1 commonli refer 5point stencil statement src dst array c1c5 either scalar array interior element result array dst comput correspond element sourc array src neighbor figur 1 5point stencil comput figur 2 9point stencil comput figur 3 problem 9 purdu set element src north west south east 9point stencil comput grid element exploit cshift intrins might specifi shown figur 2 previou two exampl stencil specifi singl array assign statement need alway case consid 9point stencil programm attempt optim program hand stencil preprocess optim phase compil might present code shown figur 3 1 goal work gener highlyoptim code stencil computa tion regardless written hpf reason design optim target gener normal input form stencil stencillik comput translat normal form factor express introduc temporari array fact intermedi form use sever distributedmemori compil 18 23 3 normal form sever distinguish characterist ffl cshift intrins temporari array insert perform data movement need oper array section differ processor map exampl taken problem 9 purdu set 21 adapt fortran benchmark thoma haupt npac figur 4 intermedi form 5point stencil comput ffl cshift intrins occur singleton oper righthand side array assign statement appli whole array ffl express actual comput stencil oper operand perfectli align thu commun oper requir exampl given 5point stencil comput present figur 1 cm fortran compil would translat sequenc statement shown figur 4 rest paper assum stencil comput normal form array distribut block fashion although concentr stencil express use cshift intrins techniqu present gener handl eoshift intrins well 22 stencil execut execut stencil comput distributedmemori machin two major compon data movement associ set cshift oper calcul sum product first phase stencil comput data movement associ cshift oper perform illustr data movement singl cshift use exampl figur 5 show effect cshift 1 along second dimens twodimension blockdistribut array cshift oper perform distribut array two major action take place 1 data element must shift across process element pe boundari sent appropri neighbor pe interprocessor compon shift figur 5 dash line repres type data movement case transfer column data neighbor processor 2 data element shift within pe copi appropri locat destin array intraprocessor compon shift solid line figur 5 repres data movement follow data movement second phase stencil comput execut loop nest calcul sum product loop nest stencil comput figur 5 construct compil two step first compil appli scalar 24 replac fortran 90 array oper serial loop nest oper individu data element next compil transform loop nest spmd code 8 spmd code synthes reduc loop bound pe comput valu data own copi transform loop nest known subgrid loop nest execut pe parallel machin due natur stencil make mani distinct array refer subgrid loop easili becom memori bound loop cpu must often sit idl wait array element fetch memori 3 compil strategi section start overview compil strategi present individu compon optim given stencil comput normal form describ section 21 optim appli sequenc four optim first address intraprocessor data movement associ cshift oper elimin possibl second rearrang statement separ block comput oper commun oper optim stencil promot loop fusion comput oper prepar commun oper optim follow phase next interprocessor data movement cshift oper optim elimin redund partiallyredund commun final looplevel transform appli optim comput 31 optim intraprocessor data movement intraprocessor data movement associ shift intrins complet elimin possibl accomplish optim call offset array 15 optim determin sourc array src destin array dst cshift share memori locat case interprocessor data movement need occur exploit overlap area 11 receiv data copi processor accomplish appropri refer destin array rewritten refer sourc array indic offset shift amount princip challeng determin sourc destin array share storag establish set criteria determin safe profit creat offset array criteria algorithm use verifi describ detail elsewher 15 22 gener approach allow sourc destin array shift oper share storag destruct updat either array shift offset small constant determin destin array assign statement cshiftsrcshiftdim may offset array perform follow transform code transform take advantag data may share sourc array src destin array dst move requir data pe first replac shift oper call routin move offprocessor data src overlap area call overlap shiftsrcshiftdim replac use array dst reach definit use array src newli creat refer src carri along special annot repres valu shift dim final creat subgrid loop scalar phase alter subscript indic use offset array array subscript use offset refer src ident subscript would gener dst except dimth dimens increment shift amount algorithm devis verifi criteria perform transform base upon static singl assign ssa intermedi represent 9 algorithm valid use offset array shift oper transform program propag inform optimist manner propag continu refer transform one criteria violat criterion violat may necessari insert array copi statement program maintain origin semant insert copi statement perform intraprocessor data movement avoid overlap shift due offset array algorithm optimist natur abl elimin intraprocessor data movement associ shift oper mani difficult situat particular determin offset array exploit even definit use separ program control flow allow stencil compil strategi elimin intraprocessor data movement situat strategi fail 32 statement reorder follow offset array optim context partit optim 17 optim partit set fortran90 statement group congruent array statement 2 scalar express commun oper assist compil stencil follow two way 1 first group congruent array statement togeth ensur subgrid loop gener via scalar loop fusion much comput possibl place within loop without caus loop overfus 22 loop overfus code produc result parallel loop exhibit wors perform code separ parallel loop also structur subgrid loop produc regular characterist increas chanc loop transform perform later success exploit data reus data local 2 second group togeth commun oper simplifi task reduc amount interprocessor data movement discuss next subsect accomplish context partit use algorithm propos kennedi c kinley 16 algorithm develop partit parallel serial loop fusibl group use partit fortran90 statement congruenc class algorithm work data depend graph ddgwhich must acycl sinc appli set statement within basic block depend graph contain loopindepend depend thu acycl complet descript context partit algorithm avail elsewher 17 22 along discuss advantag simd mimd machin context partit key abil optim multistat stencil fulli singlestat stencil stencil compil strategi capabl 33 minim interprocessor data movement intraprocessor data movement elimin partit statement group congruent oper focu attent interprocessor data movement occur call cshift due natur offset array present mani opportun elimin redund partial redund data movement call optim commun union 22 sinc combin set commun oper produc smaller set oper two key observ allow us find elimin redund interprocessor data movement first shift oper includ overlap shift commut array statement congruent oper array ident distribut cover iter space thu array shift order shift oper manner like without affect result second sinc overlap shift move data overlap area subgrid shift larg amount given direct dimens may subsum shift smaller amount direct dimens formal overlap shift amount dimens k redund exist overlap shift amount j dimens k jjj jij sinc alreadi appli context partit optim program restrict focu individu group call overlap shift elimin redund data movement use commun union first use commut properti rewrit shift multioffset array overlap shift lower dimens occur first use input overlap shift higher dimens reorder call overlap shift sort shift dimens lowest highest scan overlap shift lowest dimens keep largest shift amount direct other elimin redund commun union proce process overlap shift higher dimens ascend order perform follow three action 1 scan overlap shift given dimens determin largest shift amount direct 2 look sourc array alreadi offset array indic multioffset array use annot associ sourc array creat rsd use option fourth argument call overlap shift argument indic data element adjac overlap area also move shift oper map annot rsd simpli matter ad annot correspond rsd dimens annot ad lower bound rsd shift amount neg otherwis ad upper bound shift amount larger rsd subsum smaller rsd 3 gener singl overlap shift direct use largest shift amount includ rsd need overlap shift dimens elimin procedur elimin redund offsetshift commun includ partial redund data movement associ access corner element stencil algorithm uniqu base upon understand analysi shift intrins rather base upon patternmatch done mani stencil compil optim elimin commun shift array except singl messag direct dimens number messag stencil thu minim exampl consid 9point stencil comput present figur 2 origin stencil specif requir twelv cshift intrins appli commun union four call overlap shift shown figur 6 requir figur 710 display data movement result call figur contain 5 theta 5 subgrid solid line surround overlap area dash line portion figur commun union 9point stencil figur 7 first half 9point stencil com munic figur 8 result commun oper adjac subgrid also shown figur 7 depict data movement specifi first two call result data movement shown figur 8 overlap area properli fill data movement last two call shown figur 9 notic last two call pick data overlap area fill first two call thu popul overlap area element need subsequ comput shown figur 10 figur 9 second half 9point stencil commun figur 10 result commun oper 34 optim comput final scalar produc subgrid loop nest optim appli set looplevel transform design improv perform memorybound program transform includ unrollandjam address memori refer enc loop permut address cach refer optim program exploit reus data valu optim describ detail elsewher 7 19 address paper 4 extend exampl section trace compil strategi extend exampl detail examin show strategi abl produc code match beat handoptim code also demonstr abl handl stencil comput caus method fail exercis chosen use problem 9 purdu set 21 adapt fortran benchmark thoma haupt npac 20 13 program kernel shown figur 3 array u rip rin twodimension distribut blockblock fashion kernel comput standard 9point stencil ident comput singlestat stencil shown figur 2 reason written fashion reduc memori requir given singlestat 9point stencil fortran90 compil gener 12 temporari array one cshift greatli restrict size problem solv given machin contrast problem 9 specif comput 3 temporari array sinc liverang last 6 cshift overlap reduc temporari storag requir factor four addit assign cshift rip rin perform common subexpress elimin remov four duplic cshift origin specif stencil figur 11 show comparison execut time singlestat cshift stencil figur 2 multistat problem 9 stencil figur 3 program compil ibm xlhpf compil execut 4processor sp2 vari problem size seen singlestat stencil specif exhaust avail memori larger problem size even though pe 256mbyte real ram 41 program normal step compil stencil code figur 3 use strategi present paper figur 12 show stencil code normal six cshift subexpress assign statement array hoist statement assign compilergener temporari array sinc live rang temporari array overlap singl temporari share among statement altern cshift could receiv temporari array would affect result stencil compil strategi execut time ms subgrid size squar exceed memori cshift specif purdu problem 9 figur 11 comparison two 9point stencil specif figur problem 9 normal 42 offset array optim shift oper identifi hoist assign state ment appli offset array optim exampl algorithm determin shift array made offset array seen figur 13 cshift oper chang overlap shift oper refer assign array replac offset refer sourc array u intraprocessor data movement thu elimin addit notic temporari array compilergener tmp array figur 13 problem 9 offset array optim figur 14 problem 9 context partit optim userdefin rip rin longer need comput stencil use array routin need alloc reduct storag requir allow larger problem solv given machin 43 context partit optim offset array optim appli context partit algorithm algorithm begin determin congruenc class present section code exampl two congruenc class array statement congruent commun statement depend graph comput next two type depend exist code true depend overlap shift oper express use offset array true antidepend exist multipl occurr array sinc figur 15 problem 9 commun union optim depend two class statement commun class statement congruent array class context partit algorithm abl partit statement perfectli two group result shown figur 14 sinc array statement adjac scalar abl fuse singl loop nest similarli commun statement adjac commun union success task 44 commun union optim turn attent interprocessor data movement specifi overlap shift oper describ section 33 first exploit commut overlap shift oper rewrit multidimension overlap shift lower dimens shift first rewrit necessari exampl sinc dimens 1 shift occur first seen figur 14 next look shift across first dimens sinc singl shift distanc one direct redund commun elimin second dimens find shift distanc one howev discov four multioffset array examin annot offset array creat rsd summar overlap area necessari gener two call overlap shift includ rsd elimin overlap shift call second dimens result code shown figur 15 commun union reduc amount commun minimum singl commun oper dimens direct 45 scalar memori optim figur show code scalar code contain 4 interprocessor commun oper intraproceesor data movement perform final transform refin loop bound gener node program access subgrid local pe strategi gener singl loop nest due natur stencil comput ripe opportun memori hierarchi optim hand final code optim node compil perform looplevel transform scalar replac unrollandjam enddo enddo figur problem 9 scalar import note strategi also produc exact code given singlestat 9point stencil figur 2 exampl show stencil compil algorithm capabl fulli optim stencil matter instanti programm 5 experiment result measur perform boost suppli step stencil compil strategi ran set test 4processor ibm sp2 start gener naiv translat problem 9 test case fortran77mpi consid origin version success appli transform outlin preced section measur execut time result shown figur 17 analyz result figur 17 worthwhil compar result shown figur 11 problem 9 code perform origin mpi version code exampl alreadi order magnitud faster code produc ibm xlhpf compil 0475 second versu 477 second largest problem size appli offset array optim fortran77mpi test case shown figur 13 execut time improv 45 equival speedup 180 next appli context partit shown figur 14 scalar abl merg comput singl loop nest improv execut time addit 31 point reduc execut time origin program 62 speedup 264 shown figur 15 commun union optim elimin four commun oper reduc execut time 41 compar contextoptim version appli memori optim scalar replac unrollandjam reduc execut time anoth 14 execut time origin program trim 81 equival speedup 519 compar code code produc ibm xlhpf compil show speedup factor 52 lest someon think chosen ibm xlhpf compil straw man collect addit perform number gener third version 9point execut time ms subgrid size squar origin program offset array context partit commun union memori optim figur 17 stepwis result stencil compil strategi problem 9 execut sp2 stencil comput one use array syntax similar 5point stencil shown figur 1 9point stencil comput comput interior element matrix element 2n1 dimens graph compar execut time two 9point stencil specif given figur 18 ibm xlhpf compil use case interest note array syntax stencil xlhpf compil produc perform number track best perform number problem size except largest 10 advantag import note stencil compil strategi present handl three specif 9point stencil equal well algorithm base upon analysi optim base construct upon stencil built algorithm design handl lowest common denomin form compil transform stencil comput 6 relat work one first major effort specif address compil stencil comput distributedmemori machin stencil compil cm2 also known convolut compil 4 5 6 compil elimin intraprocessor data movement optim interprocessor data movement exploit cm2 polyshift commun 10 final comput perform handoptim librari microcod took advantag sever loop transform special regist alloc scheme gener compil methodolog produc style code special compil elimin intraprocessor data movement minim interprocessor execut time ms subgrid size squar exceed memori cshift specif purdu problem 9 array syntax figur 18 comparison three 9point stencil specif data movement final use looplevel optim perform unrollandjam optim accomplish data reus stencil compil multistencil swath cm2 stencil compil mani limit howev could handl singl statement stencil stencil specifi use cshift intrins arraysyntax stencil would accept sinc compil reli upon pattern match stencil specif form sum term coeffici multipli shift express variat possibl final programm recogn stencil comput extract program place subroutin compil stencil compil compil scheme handl strict superset pattern handl cm2 stencil compil word avoid gener problem restrict domain applic 6 place restrict upon work strategi optim singlestat stencil multistat stencil cshift intrins stencil arraysyntax stencil equal well sinc optim design incorpor hpf compil benefit comput slightli resembl stencil also commerci avail compil handl certain styl ize singlestat stencil maspar fortran compil avoid intraprocessor data movement singlestat stencil written use array notat accomplish scalar fortran90 express avoid gener cshift use depend analysi find loopcarri depend indic interprocessor data movement interprocessor data move local copi requir ever compil still perform data movement singlestat stencil written use shift intrins strategi share mani fortran90hpf compil focu handl scalar code cm2 stencil compil methodolog strict superset strategi gupta et al 12 describ ibm xlhpf compil state abl reduc number messag multidimension shift exploit method similar howev describ algorithm accomplish unknown whether would abl elimin redund commun aris shift dimens direct differ distanc portland group pghpf compil describ bozku et al 1 2 perform stencil recognit optim comput use overlap shift commun also perform subset commun union optim howev limit singlestat express case gener sever differ method handl specif form stencil comput strategi handl gener form stencil comput earlier method 7 conclus paper present gener compil scheme compil hpf stencil comput distributedmemori architectur strategi optim comput orchestr uniqu set optim optim elimin unnecessari intraprocessor data movement result cshift intrins rearrang array statement promot profit loopfus elimin redund interprocessor data movement optim memori access via looplevel transform optim gener enough includ generalpurpos hpffortran90 compil benefit mani comput fit stencil pattern strength optim oper normal form stencil comput readili translat enabl us optim stencil comput regardless whether written use array syntax explicit shift trinsic whether stencil comput singl statement multipl statement approach significantli gener stencil compil approach previou compil even though focus compil stencil distributedmemori machin paper techniqu present equal applic optim stencil comput sharedmemori scalar machin except reduc interprocessor movement acknowledg work support part ibm corpor center research parallel comput nsf scienc technolog center darpa contract dabt6392c0038 work also support part defens advanc research project agenc rome laboratori air forc materiel command usaf agreement number f306029610159 us govern author reproduc distribut reprint government purpos notwithstand copyright annot thereon view conclus contain herein author interpret repres offici polici endors either express impli defens advanc research project agenc rome laboratori us govern r techniqu compil execut hpf program sharedmemori distributedmemori parallel system compil data parallel program messag pass program massiv parallel mimd system stencil compil connect machin model cm2200 stencil compil connect machin model cm5 compil fortran 77d 90d mimd distributedmemori machin effici comput static singl assign form control depend graph commun softwar connect machin system cm2 cm200 updat distribut variabl local comput hpf compil ibm sp2 low level hpf compil benchmark suit high perform fortran forum optim fortran 90 shift oper distributedmemori multicomput context optim simd execut optim techniqu simd fortran compil improv data local loop transfor mation applic benchmark set fortrand high perform tran problem test parallel vector languag optim fortran90dhpf distributedmemori comput compil massiv parallel distribut memori mimd comput optim supercompil supercomput tr updat distribut variabl local comput fortran ten gigaflop effici comput static singl assign form control depend graph compil optim improv data local polyshift commun softwar connect machin system cm200 hpf compil ibm sp2 improv data local loop transform pghpfmyampersandmdashan optim high perform fortran compil distribut memori machin optim fortran90dhpf distributedmemori comput optim supercompil supercomput optim fortran 90 shift oper distributedmemori multicomput ctr david wonnacott achiev scalabl local time skew intern journal parallel program v30 n3 p181221 june 2002 kandemir 2d data local definit abstract applic proceed 2005 ieeeacm intern confer computeraid design p275278 novemb 0610 2005 san jose ca hitoshi sakagami hitoshi murai yoshiki seo mitsuo yokokawa 149 tflop threedimension fluid simul fusion scienc hpf earth simul proceed 2002 acmiee confer supercomput p114 novemb 16 2002 baltimor maryland g chen kandemir optim interprocessor data local embed chip multiprocessor proceed 5th acm intern confer embed softwar septemb 1822 2005 jersey citi nj usa armando solarlezama gilad arnold liviu tancau rastislav bodik vijay saraswat sanjit seshia sketch stencil acm sigplan notic v42 n6 june 2007 steven j deitz bradford l chamberlain lawrenc snyder elimin redund sumofproduct array comput proceed 15th intern confer supercomput p6577 june 2001 sorrento itali gerald roth ken kennedi loop fusion high perform fortran proceed 12th intern confer supercomput p125132 juli 1998 melbourn australia ya kalinov l lastovetski n ledovskikh posypkin compil vector statement c languag architectur multilevel memori hierarchi program comput softwar v27 n3 p111122 mayjun 2001 mari jane irwin compilerdirect proactiv power manag network proceed 2005 intern confer compil architectur synthesi embed system septemb 2427 2005 san francisco california usa zhang zhengqian kuang baim feng jichang kang autocfdnow precompil effect parallel cfd applic network workstat journal supercomput v38 n2 p189217 novemb 2006 daniel j rosenkrantz lenor r mullin harri b hunt iii minim materi arrayvalu temporari acm transact program languag system topla v28 n6 p11451177 novemb 2006