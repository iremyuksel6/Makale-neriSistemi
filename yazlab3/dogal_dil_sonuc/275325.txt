compil blockabl dens matrix factor goal lapack project provid effici portabl softwar dens numer linear algebra comput recast mani fundament dens matrix comput term call effici implement bla basic linear algebra subprogram lapack project larg part achiev goal unfortun effici implement bla result often machinespecif code portabl across multipl architectur without signific loss perform signific effort reoptim articl examin wheter hand optim perform matrix factor code unnecessari perform compil believ better programm express algorithm machineindepend form allow compil handl machinedepend detail give algorithm portabl across architectur remov errorpron expens tediou process hand optim although current exist product compil perform loop transform discuss articl descript current research compil technolog provid prove benefici numer linear algebra commun show choleski optim automaticlali compil effici handoptim version found lapack also show qr factor may optim compil perform compar handoptim lapack version modest matrix size approach allow us conclud advent compil optim dicuss articl matrix factor may effici implement blasless form b introduct process power microprocessor supercomput increas dramat continu time demand memori system comput increas dramat size due cost restrict typic workstat use memori chip latenc bandwidth requir today processor instead main memori construct cheaper slower technolog result delay may hundr cycl singl memori access allevi memori speed problem machin architect construct hierarchi memori highest level regist smallest fastest lower level larger research support nsf grant ccr9120008 nsf grant ccr9409341 second author also support us depart energi contract defg0f91er25103 w31109eng38 depart comput scienc michigan technolog univers houghton mi 49931 carrcsmtuedu z mathemat comput scienc divis argonn nation laboratori argonn il 60439 lehoucqmcsanlgov httpwwwmcsanlgovhomelehoucqindexhtml slower bottom hierarchi purpos main memori typic one two level cach memori fall regist main memori cach memori faster main memori often fraction size cach memori serv buffer recent access data program work set cach becom ineffect work set program larger size three factor consid paper lu choleski qr among frequent use numer linear algebra applic first two use solv linear system equat last typic use linear least squar problem squar matric order n three factor involv order n 3 float point oper data need n 2 memori locat advent vector parallel supercomput effici factor seen depend dramat upon algorithm form chosen implement 16 18 32 studi conclud manag memori hierarchi singl import factor govern effici softwar implement comput factor motiv lapack 2 project recast algorithm eispack 35 linpack 14 softwar librari block one block form algorithm restructur algorithm term matrix oper attempt minim amount data move within memori hierarchi keep arithmet unit machin occupi lapack block mani dens matrix algorithm restructur use level 2 3 bla 11 12 motiv basic linear algebra subprogram bla 29 provid set commonli use vector oper programm could invok subprogram instead write code directli level 2 3 bla follow matrixvector matrixmatrix oper respect often necessari high effici across broad rang high perform comput higher level bla better util underli memori hierarchi level 1 bla respons optim higher level bla left machin vendor anoth interest parti studi investig whether compil abil block matrix factor although compil transform techniqu may appli directli bla interest draw comparison appli directli factor benefit possibl blasless linear algebra packag nearli effici lapack exampl 30 demonstr comput best lu factor inlin approach even highli optim set bla avail deem algorithm blockabl compil automat deriv effici block algorithm studi one found lapack correspond machineindepend point algorithm particular show lu choleski factor blockabl algo rithm unfortun qr factor household transform blockabl ever show altern block algorithm qr deriv use compil method use lu choleski factor studi yield two major result first detail anoth paper 9 reveal hand loop unrol perform optim level 2 3 bla 11 12 often unnecessari bla use hand optim requir obtain good perform particular architectur may left compil experi show case compil automat unrol loop effect hand optim second result discuss paper reveal possibl block matrix factor automat result show block algorithm deriv compil competit lapack 2 modest size matric order 200 less compilerderiv variant often superior begin present review background materi relat compil optimiza tion describ studi applic compil analysi deriv three block algorithm lapack consid correspond point algorithm present experi compar perform handoptim lapack algorithm compil deriv algorithm attain use techniqu also briefli discuss relat approach final summar result provid draw gener conclus background transform use creat block version matrix factor correspond point version well known mathemat softwar commun 15 section introduc fundament tool compil need perform transform automat compil optim point version matrix factor analysi array access pattern rather linear algebra 21 depend vector parallel compil depend critic compil tool perform transform improv memori perform loop depend necessari determin legal compil transform creat block version matrix factor give partial order statement within loop nest depend exist two statement exist control flow path first statement second statement refer memori locat 26 ffl first statement write locat second read true depend also call flow depend ffl first statement read locat second write antid pendenc ffl statement write locat output depend ffl statement read locat input depend depend carri loop refer sourc sink begin end depend differ iter loop depend carri outer loop 1 loop true depend aij ai1j carri iloop true depend aij aij1 carri jloop input depend aij1 ai1j carri iloop enhanc depend inform section analysi use describ portion array access particular refer set refer 5 21 section describ common substructur array element row column diagon exampl section analysi consid follow loop declar 100 theta 100 section access loop would shown shade portion figur 1 matrix factor code requir us enhanc basic depend inform portion matrix involv block updat compil use section analysi reveal portion matrix block updat section 311 discuss detail10100 figur 1 section 3 automat block dens matrix factor section show deriv block algorithm lu choleski factor use current compil technolog section analysi enhanc depend inform also show qr factor household transform blockabl ever present performancecompetit version qr factor deriv compil 31 lu factor lu decomposit factor nonsingular matrix product two matric l u lu 20 l unit lower triangular matrix u upper triangular matrix factor obtain multipli matrix seri elementari lower pivot matric use make lu factor numer stabl process first examin blockabl lu factor sinc pivot creat difficulti first show block lu factor without pivot show handl pivot 311 pivot consid follow algorithm lu factor point algorithm refer unblock rightlook 13 algorithm exhibit poor cach perform larg matric transform point algorithm block algorithm compil must perform stripmineandinterchang kloop 38 36 transform use creat block updat appli transform first strip kloop fix size section size depend upon target architectur cach characterist beyond scope paper 28 10 shown ks machinedepend strip size relat cach size complet transform kkloop must distribut around loop surround statement 20 around loop nest surround statement 10 interchang innermost posit loop surround statement 10 37 distribut yield unfortun loop longer correct loop scale number valu updat depend analysi allow compil detect avoid chang semant recogn depend cycl aikk statement 20 aij statement 10 carri kkloop use basic depend analysi appear compil would prevent block lu factor due cycl howev enhanc depend analysi section inform reveal cycl exist portion data access statement figur 2 show section array access entir execut kkloop section access aikk statement 20 subset section access aij statement 10 sinc recurr exist portion iter space loop surround statement 10 split jloop two loop one loop iter portion depend cycl exist one loop iter portion cycl exist use transform call indexset split 38 j split point creat two loop shown figur 2 section lu factor depend cycl exist statement 20 30 statement 10 longer cycl stripmineandinterchang continu distribut kkloop around two new loop shown finish stripmineandinterchang need move kkloop innermost posit nest surround statement 10 howev lower bound iloop contain refer kk creat triangular iter space shown figur 3 interchang kk loop intersect line ikk1 iter space point kk1 must handl therefor interchang loop requir kkloop iter trapezoid region upper bound i1 i1 kks1 see wolf carr kennedi detail transform nonrectangular loop nest 38 8 give follow loop nest kk figur iter space lu factor point rightlook 13 block algorithm obtain therefor lu factor blockabl loop nest surround statement 10 matrixmatrix multipli optim depend upon architectur superscalar architectur whose perform bound cach outer loop unrol nonrectangular loop appli j iloop improv perform 8 9 vector architectur differ loop optim strategi may benefici 1 mani transform use obtain block version lu factor well known compil commun exist mani commerci compil eg hp dec sgi one contribut studi compil research show addit section analysi allow compil block matrix factor note none aforement compil use section analysi purpos 312 ad partial pivot although compil discov potenti block lu decomposit without pivot use indexset split section analysi said partial pivot ad see figur 4 lu decomposit partial pivot partial pivot algorithm new recurr exist fit form handl indexset split consid follow section code appli indexset split algorithm figur 4 refer aimaxj statement 25 refer aij statement 10 access section distribut kkloop around jloop would convert true depend aij aimaxj antidepend revers direct rule preserv data depend prohibit revers depend direct would seem preclud exist block analogu similar nonpivot case howev block algorithm ignor prevent recurr distribut kkloop still mathemat deriv 15 consid follow gammam 1 result show postpon applic elimin 1 applic permut matrix p 2 also permut row elimin extend equat 1 entir formul implement block algorithm p comput step point algorithm p depend upon first column allow comput k p block factor block applic c pick pivot imax figur 4 lu decomposit partial pivot instal result compil examin implic data depend viewpoint point version row interchang follow wholecolumn updat row element updat independ block version multipl row interchang may occur particular column updat comput column updat perform point block version comput may occur differ locat row array key concept compil understand row interchang wholecolumn updat commut oper data depend alon suffici understand data depend relat map valu memori locat reveal sequenc valu pass particular locat block version lu decomposit sequenc valu pass locat differ point version although final valu ident unless compil understand row interchang column updat commut lu decomposit partial pivot blockabl fortun compil equip understand oper whole column commut row permut upgrad compil one would instal pattern match recogn row permut wholecolumn updat prove recurr involv statement 10 25 indexset split code could ignor form pattern match alreadi done commerci avail compil vector compil pattern match special comput search vector particular condit 31 preprocessor pattern match recogn matrix multipl turn output predetermin solut optim particular machin reason believ pivot recogn implement commerci compil import emphas 32 choleski factor matrix symmetr posit definit lu factor may written diagon matrix consist main diagon u decomposit product triangular matrix transpos call choleski factor thu need work lower triangular half essenti depend analysi appli lu factor without pivot may use note respect float point comput choleski factor differ lu two regard first n squar root choleski second lower half matrix need updat strip mine version choleski factor shown case lu factor recurr aij statement 10 aikk statement 20 carri kkloop data access pattern choleski factor ident lu factor see figur 2 indexset split appli jloop kks1 allow kkloop distribut achiev lapack block algorithm 33 qr factor section examin blockabl qr factor first show algorithm lapack blockabl give altern algorithm blockabl 331 lapack version lapack point algorithm comput qr factor consist form sequenc 1 initi matrix row n column studi assum n elementari reflector updat k order first k column k1 form upper triangular matrix updat accomplish perform matrix vector multipl w follow rank one updat effici implement level 2 bla subroutin determin rate factor comput detail discuss qr factor see book golub van loan 20 lapack block qr factor attempt recast algorithm term call level 3 bla 15 level 3 bla handtun particular architectur block qr algorithm may perform significantli better point version larg matrix size caus work set much larger cach size unfortun block qr algorithm lapack automat deriv compil block applic number elementari reflector involv comput storag exist origin point algorithm 15 block number elimin togeth follow comput compil deriv gamma v tv origin point algorithm use depend infor mation illustr consid block two elementari reflector comput matrix part origin algorithm henc lapack version block qr factor differ algorithm point version rather reshap point algorithm better perform compil reshap algorithm deriv new algorithm data depend inform case compil would need understand linear algebra deriv block algorithm next section compilerderiv block algorithm qr factor present algorithm give compar perform lapack version small matric retain machin independ 332 compilerderiv qr factor consid applic j matric v k k compil deriv algorithm henceforth call cdqr form column k k kj updat remaind matrix j elementari reflector final updat trail column rich float point oper compil organ best suit underli hardwar code optim techniqu stripmin andinterchang unrollandjam left compil deriv algorithm depend upon compil effici contrast lapack algorithm depend hand optim bla cdqr obtain point algorithm qr decomposit use array section analysi refer segment code point algorithm strip mine outer loop shown figur 5 complet transform code figur 5 obtain cdqr iloop must distribut around loop surround comput v around updat interchang jloop howev recurr definit use akj within updat section definit use aji comput recurr carri iloop appear prevent distribut gener elementari reflector vi enddo updat aimi1n vi enddo enddo enddo enddo enddo figur 5 stripmin point qr decomposit ii ii figur 6 region access qr decomposit figur 6 show section array access entir execut iloop section access aji akj examin legal partial distribut iloop reveal note similar lu choleski factor section access aji black region subset section access akj black gray region indexset j split point creat new loop execut iter space memori locat access akj disjoint access aji new loop iter disjoint region optim compil depend upon target architectur 333 comparison two qr factor algorithm cdqr exhibit much cach reus lapack version larg matric reason lapack algorithm abl take advantag level 3 bla routin dgemm highli optim cdqr use oper closer level 2 bla wors cach reus characterist therefor would expect lapack algorithm perform better larger matric could possibl take advantag highli tune matrixmatrix multipli kernel 34 summari transform summari tabl 1 list analys transform must use compil block matrix factor item 1 2 discuss section 2 item 3 7 discuss section 31 item 8 discuss compil literatur 28 10 item 9 discuss section 312 mani commerci compil eg ibm34 hp dec sgi contain item 1 3 4 5 6 7 8 howev note item 2 9 like found today commerci compil tabl 1 summari compil transform necessari block matrix factor depend analysi section 21 26 19 array section analysi section 21 5 21 3 stripmineandinterchang section 31 38 36 4 unrollandjam section 31 9 measur perform block factor algorithm four differ architectur ibm power2 model 590 hp model 71280 dec alpha 21164 sgi model indigo2 mip r4400 tabl 2 summar characterist machin architectur chosen repres typic highperform workstat tabl machin characterist machin clock speed peak mflop cach size associ line size dec alpha 250mhz 500 8kb 1 machin use vendor optim bla exampl ibm power2 sgi indigo2 link librari lessl engin scientif subroutin librari 22 lbla respect compileroptim version obtain hand use algorithm literatur reason process could fulli autom current defici depend analyz tool 4 6 tabl 3 list fortran compil flag use compil factor tabl 3 fortran compil switch machin compil flag hp 712 f77 v916 dec alpha f77 v38 o5 sgi indigo2 f77 v53 o3 mips2 tabl 46 perform report doubl precis megaflop number float point oper lu qr choleski factor 23n 3 respect n number row column respect use lapack subroutin dgetrfdgeqrf dpotrf lu qr choleski factor respect factor routin run block size 1 2 4 8 16 24 32 48 64 1 tabl column interpret follow lablk best block factor lapack algorithm lamf best megaflop rate lapack algorithm correspond lablk cblk best block factor compilerderiv algorithm cmf best megaflop rate compilerderiv algorithm correspond cblk order explicitli set block size lapack factor modifi lapack integ function ilaenv includ common block benchmark run comput system free comput intens job benchmark typic run two time differ time within 5 41 lu factor tabl 4 show perform compilerderiv version lu factor pivot versu lapack version tabl 4 lu perform ibm hp dec sgi size lablk lamf cblk cmf speedup labk lamf cblk cmf speedup 100x100 200x200 300x300 dec alpha sgi indigo2 size lablk lamf cblk cmf speedup labk lamf cblk cmf speedup 100x100 200x200 300x300 500x500 1 although compil effect choos block factor automat implement avail algorithm 28 10 ibm power2 result show size matrix increas 100 compil deriv algorithm edg lapack diminish remain matrix size compil deriv algorithm stay within 7 lapack one clearli fortran compil ibm power2 abl nearli achiev perform hand optim bla avail essl librari block matrix factor hp 712 tabl 4 indic unexpect trend compilerderiv version perform better matrix size except 50x50 dramat improv matrix size increas indic handoptim dgemm effici use cach optim cach perform compil deriv algorithm evid size matric exce size cach signific perform degrad 50x50 case interest matrix small cach perform factor believ perform differ come way code gener superscalar architectur like hp code gener scheme call softwar pipelin use gener highli parallel code 27 33 howev softwar pipelin requir lot regist success code perform unrollandjam improv cach perform howev unrollandjam significantli increas regist pressur caus softwar pipelin fail 7 version lu decomposit hp compil diagnost reveal softwar pipelin fail main comput loop due high regist pressur given handoptim version highli softwar pipelin result would highli parallel handoptim loop notasparallel compilerderiv loop matrix size 25x25 enough loop iter expos differ matrix size 50x50 differ signific matrix size 75x75 greater cach perform becom factor time known compil algorithm deal tradeoff unrollandjam softwar pipelin import area futur research dec alpha tabl 4 show algorithm perform well better lapack version matric order 100 less size 100x100 secondlevel cach alpha 96k begin overflow compilerderiv version block multipl level cach lapack version block 2 level cach 25 thu compil deriv algorithm suffer mani cach miss level2 cach lapack version possibl compil perform extra block multipl level cach know compil current addit bla algorithm util follow architectur featur 25 ffl use temporari array elimin conflict level1 directmap cach translat lookasid buffer 28 10 ffl use memoryprefetch featur alpha hide latenc cach memori although optim could done dec product compil optim would give addit perform algorithm use temporari buffer may provid small improv prefetch provid signific perform improv latenc main memori order 50 cycl prefetch issu sourc code unabl tri optim result sgi roughli similar dec alpha difficult us determin exactli perform lower smaller matric diagnost tool could softwar pipelin architectur featur awar note code gener sgi compil wors expect addit 2level cach come play larger matric compar result ibm power2 multilevel cach hierarchi system dec sgi show compilerderiv version effect singlelevel cach evid work need done optim updat portion factor obtain rel perform singlelevel cach system multilevel cach system 42 choleski factor tabl 5 show perform compilerderiv version choleski factor versu version ibm power2 result show size matrix increas 200 compil deriv algorithm edg lapack diminish remain matrix size compil deriv algorithm stay within 8 lapack one case lu factor compil version perform well larg matrix size highli tune bla use lapack factor caus lapack faster tabl 5 show slightli irregular pattern block size use compil deriv algorithm remark matrix size 50 200 mflop rate two block size 8 16 nearli equival hp observ pattern lu factor cach perform critic outperform lapack version cach perform critic lapack version give better result except matrix small algorithm perform much better 25x25 matrix like due high overhead associ softwar pipelin short loop sinc choleski factor fewer oper lu factor updat portion code would expect high overhead associ small matric also effect cach seen larger matrix size compar lu factor due smaller updat portion factor tabl 5 choleski perform ibm hp dec sgi size lablk lamf cblk cmf speedup lablk lamf cblk cmf speedup 50x50 100x100 200x200 300x300 dec outperform lapack version 500x500 matrix pattern seen lu factor except take longer appear due smaller size updat portion factor result sgi show compil deriv version perform better lapack matrix size 100 matrix size increas 500 150 compil deriv algorithm perform decreas 15 compar lapack factor believ 2level cach hierarchi final remark although tabl 5 show similar pattern tabl 4 differ recal explain x 32 choleski factor approxim half float point oper lu sinc neglect strict diagon upper triangular portion matrix updat phase moreov comput squar root diagon element n iter 43 qr factor tabl 6 show perform compilerderiv version qr factor versu lapack version sinc compilerderiv algorithm block qr factor wors cach perform lapack algorithm 2 less comput expect wors perform cach perform becom critic plain word lapack algorithm use level 3 bla matrix multipli kernel dgemm compil deriv algorithm util oper similar level 2 bla hp see pattern howev sinc cach perform algorithm good lapack version see much smaller improv algorithm superior perform also see matrix size stay within limit cach lapack outperform algorithm tabl 6 qr perform ibm hp size lablk lamf cblk cmf speedup lablk lamf cblk cmf speedup 28 075 300x300 three machin see pattern previou factor except degrad much larger larg matric due inferior cach perform cdqr interest trend reveal tabl 6 ibm power2 slightli irregular block size pattern matrix size increas remark matrix size less equal 75 interest behavior first two matrix size optim block size larger dimens matrix impli block perform level 3 bla use lapack algorithm matrix size 75 rate achiev lapack algorithm block size 8 within 46 unblock factor 5 relat work briefli review summar investig parallel evid activ amount work remov substanti hand code associ effici dens linear algebra comput 51 block gemm base approach sinc lapack depend upon set highli tune bla effici remain practic question optim discuss introduct effici set bla requir nontrivi effort softwar engin see 23 discuss softwar effort provid optim implement level 3 bla approach effici practic gemmbas one propos kagstrom ling van loan 23 recent studi approach advoc optim gener matrix multipli add kernel gemm rewrit remaind level 3 bla term call kernel benefit approach kernel need optim whether hand compil thorough analysi highlight mani issu must consid attempt construct set highli tune bla moreov provid high qualiti implement bla gener use well perform evalu benchmark 24 emphas studi examin whether necessari optim may left compil also whether appli directli matrix factor beyond abil compil recast level 3 bla term call gemm 52 phipac anoth recent approach methodolog express develop portabl highperform matrixvector libari ansi c phipac 3 project motiv mani reason outlin introduct major differ approach make parallel studi gemm base approach seek support bla aim effici vendor suppli bla howev unlik studi gemm one phipac assum ansi c program languag variou c semant phipac instead seek provid parameter gener produc optim code see report 3 discuss inhibitor c prevent optim compil gener effici code 53 autoblock matrix multipl fren wise present altern algorithm matrixmatrix multipli base upon quadtre represent matric 17 solut recurs suffer lack interprocedur optim commerci compil result show page becom problem sgi multiprocessor system quadtre algorithm superior perform bla 3 smaller problem quadtre algorithm inferior perform relat work could expect compil replac bla 3 quadtre approach appropri chang algorithm rather reshap addit special storag layout use fren wise call question effect entir program 6 summari set determin whether compil automat restructur matrix factor well enough avoid need hand optim end examin collect implement lapack program determin whether plausibl compil technolog could succeed obtain block version point algorithm result studi encourag demonstr exist implement compil method automat block matrix factor code achiev algorithm competit lapack result show modests matric advanc microprocessor compilerderiv variant often superior matrix size typic workstat given futur machin design certain increasingli complex memori hierarchi compil need adopt increasingli sophist memorymanag strategi programm remain free concentr program logic given potenti perform attain automat techniqu believ possibl user express machineindepend point matrix factor algorithm without bla still get good perform compil adopt enhanc alreadi exist method acknowledg ken kennedi richard hanson provid origin motiv work ken kennedi keith cooper danni sorensen provid financi support research begun rice univers also wish thank toma lofgren john pieper dec help obtain dxml librari diagnos compil perform respect also thank per ling univers umea ken stanley univers california berkeley help benchmark discuss r automat translat fortran program vector form portabl parallel program environ analysi interprocedur side effect parallel program environ improv softwar pipelin unrollandjam compil blockabl numer algorithm improv ratio memori oper floatingpoint oper loop tile size select use cach organ set level 3 basic linear algebra subprogram extend set fortran basic linear algebra subprogram solv linear system vector share memori comput solv linear system vector sharedmemori comput implement linear algebra algorithm dens matric vector pipelin machin parallel algorithm dens linear algebra comput practic depend test matrix comput implement interprocedur bound regular section analysi structur comput comput volum softwar pipelin effect schedul techniqu vliw machin cach perform optim block algorithm basic linear algebra subprogram fortran usag implement effici portabl dens matrix factor compar studi automat vector compil introduct parallel vector solut linear system regist alloc softwar pipelin loop automat select high order transform ibm xl fortran compil data local optim algorithm advanc loop interchang iter space tile memori hierarchi tr automat translat fortran program vector form extend set fortran basic linear algebra subprogram softwar pipelin effect schedul techniqu vliw machin introduct parallel myampersandamp vector solut linear system analysi interprocedur side effect parallel program environ parallel algorithm dens linear algebra comput set level 3 basic linear algebra subprogram cach perform optim block algorithm practic depend test data local optim algorithm regist alloc softwar pipelin loop compil blockabl numer algorithm memoryhierarchi manag improv ratio memori oper floatingpoint oper loop tile size select use cach organ data layout matrix comput 3rd ed autoblock matrixmultipl track blas3 perform sourc code automat select highord transform ibm xl fortran compil basic linear algebra subprogram fortran usag solv linear system vector share memori comput structur comput comput implement interprocedur bound regular section analysi iter space tile memori hierarchi implement effici portabl dens matrix factor improv softwar pipelin unrollandjam ctr mahmut kandemir j ramanujam alok choudhari improv cach local combin loop data transform ieee transact comput v48 n2 p159167 februari 1999 nikolay mateev vijay menon keshav pingali fractal symbol analysi proceed 15th intern confer supercomput p3849 june 2001 sorrento itali kgstrm per ling charl van loan gemmbas level 3 bla highperform model implement perform evalu benchmark acm transact mathemat softwar tom v24 n3 p268302 sept 1998 steve carr soner nder case workingsetbas memori hierarchi proceed 2nd confer comput frontier may 0406 2005 ischia itali jeremi fren david wise autoblock matrixmultipl track blas3 perform sourc code acm sigplan notic v32 n7 p206216 juli 1997 qing yi vikram adv ken kennedi transform loop recurs multilevel memori hierarchi acm sigplan notic v35 n5 p169181 may 2000 qing yi ken kennedi haihang keith seymour jack dongarra automat block qr lu factor local proceed 2004 workshop memori system perform june 0808 2004 washington dc vijay menon keshav pingali nikolay mateev fractal symbol analysi acm transact program languag system topla v25 n6 p776813 novemb qing yi ken kennedi vikram adv transform complex loop nest local journal supercomput v27 n3 p219264 march 2004