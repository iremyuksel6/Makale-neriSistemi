faulttoler dynam schedul algorithm multiprocessor realtim system analysi abstractmani timecrit applic requir dynam schedul predict perform task correspond applic deadlin met despit presenc fault paper propos algorithm dynam schedul arriv realtim task resourc faulttoler requir multiprocessor system task assum nonpreempt task two copi version mutual exclud space well time schedul handl perman processor failur obtain better perform respect algorithm toler one fault time employ perform improv techniqu 1 distanc concept decid rel posit two copi task task queue 2 flexibl backup overload introduc tradeoff degre fault toler perform resourc reclaim reclaim resourc dealloc backup earli complet task quantifi simul studi effect techniqu improv guarante ratio defin percentag total task arriv system whose deadlin met also compar simul studi perform algorithm best known algorithm problem show analyt import distanc paramet faulttoler dynam schedul multiprocessor realtim system b introduct realtim system defin system correct system depend logic result comput also time result produc 22 real work support indian nation scienc academi depart scienc technolog time system broadli classifi three categori name hard realtim system consequ execut task deadlin may catastroph ii firm realtim system result produc correspond task ceas use soon deadlin expir consequ meet deadlin sever iii soft realtim system util result produc task soft deadlin decreas time deadlin expir 25 exampl hard realtim system avion control nuclear plant control onlin transact process applic airlin reserv bank exampl firm realtim system telephon switch system imag process applic exampl soft realtim system problem schedul realtim task multiprocessor system determin processor given task execut 22 25 done either static dynam static algorithm assign task processor time task start execut determin priori static algorithm often use schedul period task hard deadlin howev approach applic aperiod task whose characterist known priori schedul task requir dynam schedul algorithm dynam schedul new set task correspond plan arriv system schedul dynam determin feasibl schedul new task without jeopard guarante provid previous schedul task plan typic set action either done fulli action could correspond task task may resourc requir possibl may preced constraint thu predict execut schedul analysi must done task execut begun schedul analysi task worst case comput time must taken account feasibl schedul gener time constraint resourc faulttoler requir task new set satisfi ie schedul analysi success feasibl schedul found new set task plan reject previou schedul remain intact case plan get reject applic might invok except task must run depend natur plan plan allow admiss control result reservationbas system task dispatch accord feasibl schedul type schedul approach call dynam plan base schedul 22 spring kernel 27 exampl paper use dynam plan base schedul approach schedul task hard deadlin demand complex realtim applic requir high comput need time constraint faulttoler requir led choic multiprocessor system natur candid support realtim applic due potenti high perform reliabl due critic natur task hard realtim system essenti everi task admit system complet execut even presenc failur therefor faulttoler import issu system realtim multiprocessor system faulttoler provid schedul multipl version task differ processor four differ model techniqu evolv faulttoler schedul realtim task name tripl modular redund tmr model 12 25 ii primari backup pb model 3 iii imprecis comput ic model 11 iv kfirm deadlin model 23 tmr approach three version task execut concurr result version vote pb approach two version execut serial two differ processor accept test use check result backup version execut undo effect primari version output primari version fail accept test either due processor failur due softwar failur ic model task divid mandatori option part mandatori part must complet task deadlin accept qualiti result option part refin result characterist realtim task better characteris kfirm deadlin k consecut task must meet deadlin ic model kfirm task model provid schedul flexibl trade result qualiti meet task deadlin applic automat flight control industri process control requir dynam schedul faulttoler requir flight control system control often activ task depend appear monitor similarli industri control system robot monitor control variou process may perform path plan dynam result activ aperiod task anoth exampl taken 3 system monitor condit sever patient intens care unit icu hospit arriv patient icu dynam new patient plan arriv system perform admiss test determin whether new patient plan admit altern action like employ nurs carri life critic applic demand desir action perform even presenc fault paper address schedul dynam arriv realtim task pb faulttoler requir set processor resourc way version task feasibl schedul object dynam realtim schedul algorithm improv guarante ratio 24 defin percentag task arriv system whose deadlin met rest paper structur follow section 2 discuss system model section 3 relat work motiv work present section 4 propos algorithm faulttoler schedul realtim task also propos enhanc section 5 perform propos algorithm togeth enhanc studi simul also compar algorithm propos recent 3 final section 6 make conclud remark system model section first present task model follow schedul model definit necessari explain schedul algorithm 21 task model 1 task aperiod ie task arriv known priori everi task attribut arriv time readi time r worst case comput time 2 actual comput time task denot c may less worst case comput time due presenc data depend loop condit statement task code due architectur featur system cach hit dynam branch predict worst case execut time task obtain base static code analysi averag execut time possibl worst case might case actual comput time task may worst case comput time techniqu handl situat one techniqu task pair scheme 28 worst case comput time task ad worst case comput time except task actual comput time exce origin worst case comput time except task invok 3 resourc constraint task might need resourc data structur variabl commun buffer execut resourc may multipl instanc everi task two type access resourc exclus access case task use resourc b share access case share resourc anoth task task also will share resourc resourc conflict exist two task j requir resourc one access exclus 4 task two version name primari copi backup copi worst case comput time primari copi may backup attribut resourc requir copi ident 5 task encount one failur either due processor failur due softwar failur ie primari fail backup alway succe 6 task nonpreempt ie task start execut processor finish complet 7 task paralleliz mean task execut one processor necessit sum worst case comput time primari backup copi less equal copi task schedul within interv 8 system multipl ident processor connect share medium 9 fault transient perman independ ie correl failur consid 10 exist faultdetect mechan accept test detect processor failur softwar failur complex realtim applic period aperiod task dynam plan base schedul approach use paper also applic realtim applic describ system resourc includ processor partit two set one period task aperiod task period task schedul static tabledriven schedul approach 22 onto resourc partit correspond period task aperiod task schedul dynam plan base schedul approach 21 22 13 onto resourc partit correspond aperiod task task may preced constraint readi time deadlin task modifi compli preced constraint among deal preced constraint equival work modifi readi time deadlin 11 therefor propos algorithm also appli task preced constraint among 22 schedul model dynam multiprocessor schedul task arriv central processor call schedul distribut processor system execut commun schedul processor dispatch queue processor dispatch queue organ shown fig1 ensur processor alway find task enough task system dispatch queue finish execut current task schedul run parallel processor schedul newli arriv task period updat dispatch queue schedul ensur dispatch queue alway fill minimum capac task left parallel oper minimum capac depend worst case time requir schedul reschedul task upon arriv new task 24 schedul arriv feasibl schedul base worst case comput time task satisfi time resourc faulttoler constraint use one schedul whole system make schedul singl point failur schedul made faulttoler employ modular redund techniqu backup schedul run parallel primari schedul schedul perform accept test dispatch queue updat one schedul pass accept test simpl accept test check whether task schedul finish deadlin satisfi requir task task queue current schedul dispatch queue dispatch queue feasibl schedul processor schedul min length p2fig1 parallel execut schedul processor 221 resourc reclaim resourc reclaim 24 refer problem util resourc processor resourc left unus task version execut less worst case comput time ii delet current schedul delet task version take place extra version initi schedul account fault toler ie pb faulttoler approach primari version task complet execut success need tempor redund backup version execut henc delet processor invok resourc reclaim algorithm complet current execut task resourc reclaim use processor execut task strictli base schedul start time per feasibl schedul result make resourc remain unus thu reduc guarante ratio schedul inform time reclaim reclaim algorithm schedul schedul newli arriv task correctli effect protocol achiev suggest 24 therefor dynam schedul scheme schedul associ resourc reclaim 3 background section first discuss exist work faulttoler schedul highlight limit work form motiv work 31 relat work mani practic instanc schedul problem found npcomplet 2 ie believ optim polynomialtim algorithm shown 1 exist algorithm optim schedul dynam arriv task without mutual exclus constraint multiprocessor system neg result motiv need heurist approach solv schedul problem recent mani heurist schedul algorithm 21 13 propos dynam schedul set task whose comput time deadlin resourc requir known arriv multiprocessor system resourc constrain task heurist search algorithm call myopic schedul algorithm propos 21 author 21 shown integr heurist use function deadlin earliest start time task perform better simpl heurist earliest deadlin first least laxiti first minimum process time first 10 pb scheme propos preemptiv schedul period task uniprocessor system approach guarante primari copi meet deadlin failur ii backup copi run deadlin failur achiev precomput tree schedul tree encod within tabledriven schedul consid possibl failur scenario task scheme applic simpl period task period task multipl smallest period object approach increas number primari task execut anoth pb scheme propos 19 schedul period task multiprocessor system strategi backup schedul creat set task primari schedul task rotat primari backup schedul differ processor overlap approach toler one failur worst case use doubl number processor use correspond nonfaulttoler schedul 7 processor failur handl maintain conting backup schedul schedul use event failur backup schedul gener assum optim schedul exist schedul enhanc addit ghost task function primarili standbi task addit task may possibl schedul pb base algorithm backup overload backup dealloc propos recent 3 faulttoler dynam schedul realtim task multiprocessor system call backup overload algorithm backup overload algorithm alloc singl backup time interv time interv task interv schedul start time schedul finish time task dealloc resourc unus backup copi case faultfre oper two backup overlap schedul overload processor primari backup schedul differ processor concept backup overload valid assumpt one fault instant time entir system 3 shown backup dealloc effect backup overload paper also provid mechan determin number processor requir provid faulttoler dynam realtim system discuss relat work faulttoler realtim schedul found 3 32 motiv work algorithm discuss 7 19 static algorithm appli dynam schedul consid paper due high complex algorithm discuss 10 schedul period task uniprocessor system extend dynam schedul expect task period though algorithm propos 3 dynam schedul consid resourc constraint among task practic requir complex realtim system assum one failur instant time pessimist algorithm 3 abl dealloc backup primari success use reclaim processor time schedul task greedi manner resourc reclaim system simpl said workconserv mean never leav processor idl dispatch task resourc reclaim multiprocessor system resourc constrain task complic due potenti parallel provid multiprocessor potenti resourc conflict among task actual comput time task differ worst case comput time nonpreempt multiprocessor schedul resourc constraint runtim anomali may occur 4 workconserv reclaim scheme use anomali may caus alreadi guarante task miss deadlin particular one use workconserv scheme resourc reclaim resourc constrain task moreov algorithm propos 3 reclaim resourc actual comput time task less worst case comput time true mani task resourc reclaim case effect improv guarante ratio 24 spring schedul approach 27 schedul dynam arriv task resourc requir reclaim resourc earli complet task address faulttoler requir explicitli algorithm work within spring schedul approach build faulttoler solut around support pb base faulttoler best knowledg first work address faulttoler schedul problem practic model mean algorithm handl resourc constraint among task reclaim resourc earli complet task dealloc backup perform algorithm compar backup overload algorithm section 55 4 faulttoler schedul algorithm section first defin term present faulttoler schedul algorithm use term 41 terminolog 1 schedul fix feasibl schedul feasibl schedul use worst case comput time task schedul ensur time resourc faulttoler constraint task met partial schedul one contain task definit 2 stt schedul start time task satisfi r schedul finish time task satisfi r definit 3 eat k earliest time resourc r k becom avail share exclus usag 21 definit 4 let p set processor r set resourc request task earliest start time task denot estt earliest time execut start defin est denot time processor p j avail execut task third term denot maximum among avail time resourc request task share mode exclus mode definit 5 proct processor task schedul processor task get schedul denot exclud proct definit schedul start time f tpr schedul finish time primari copi task similarli stbk f tbk denot backup copi definit 7 primari backup copi task said mutual exclus time denot time exclusiont definit 8 primari backup copi task said mutual exclus space denot space exclusiont task said feasibl faulttoler schedul satisfi follow condit ffl primari backup copi task satisfi r stpr copi task must satisfi time constraint assum backup execut failur primari detect time exclus failur detect done accept test mean complet everi primari copi time exclus primari backup copi task relax backup allow execut parallel 5 30 overlap primari prefer dynam schedul discuss ffl primari backup copi task mutual exclud space schedul necessari toler perman processor failur mutual exclus time use resourc reclaim point view primari success backup need execut time interv alloc backup reclaim fulli primari backup satisfi time exclus therebi improv schedul 15 word primari backup task overlap execut backup unnecessarili execut part full even primari success would result poor resourc util therebi reduc schedul moreov overlap primari backup task introduc resourc conflict access exclus among sinc resourc requir forc exclud time one instanc request resourc avail time 42 distanc myopic algorithm spring schedul 27 approach use heurist search algorithm call myopic algorithm 21 nonfaulttoler schedul resourc constrain realtim task multiprocessor system use basic earli start algorithm resourc reclaim one object work propos faulttoler enhanc spring schedul approach make follow enhanc spring schedul support pb base faulttoler ffl notion distanc introduc decid rel differ posit primari backup copi task task queue ffl flexibl level backup overload introduc tradeoff number fault system system perform ffl use restrict vector rv 15 base algorithm reclaim resourc dealloc backup earli complet task 421 notion distanc sinc task model everi task two copi place task queue rel differ distancepr posit primari copi task alway preced backup copi task queue let n number current activ task whose characterist known algorithm know characterist new task may arriv schedul current activ task distanc input paramet schedul algorithm determin rel posit copi task task queue follow way distanc first n gamma n mod distanc task mod distanc last n mod distanc task follow exampl task queue assum deadlin task nondecreas order posit backup copi task queue rel primari easili achiev minim cost two queue one primari copi n entri backup copi n entri ii merg queue invok schedul base distanc valu get task queue 2n entri cost involv due merg 2n 422 myopic schedul algorithm myopic algorithm 21 heurist search algorithm schedul dynam arriv realtim task resourc constraint work follow schedul set task vertex search tree repres partial schedul schedul vertex extend vertex strongli feasibl vertex strongli feasibl feasibl schedul gener extend current partial schedul task feasibl check window feasibl check window subset first k unschedul task larger size feasibl check window higher schedul cost look ahead natur current vertex strongli feasibl algorithm comput heurist function task within feasibl check window base deadlin earliest start time task extend schedul task best smallest heurist valu otherwis backtrack previou vertex schedul extend use task next best heurist valu 423 distanc base faulttoler myopic algorithm make faulttoler extens origin myopic algorithm use distanc concept schedul set task assum task plan algorithm attempt gener feasibl schedul task set minimum number reject distanc myopic 1 order task primari copi nondecreas order deadlin task queue insert backup copi appropri distanc primari copi 2 comput earliest start time est first k task k size feasibl check window 3 check strong feasibl check whether est true k task 4 strongli feasibl backtrack possibl comput heurist function first k task w input paramet ffl bk task consid h function evalu pr yet schedul set est bk b choos task best smallest h valu extend schedul c best task meet deadlin extend schedul best task best task accept schedul ffl best task primari copi pr task achiev time exclus task achiev space exclus task els reject best task move feasibl check window one task right e reject task backup copi delet primari copi schedul 5 els backtrack previou search level tri extend schedul task next best h valu 6 repeat step 25 termin condit met termin condit either task schedul ii task consid schedul backtrack possibl complex algorithm origin myopic algorithm okn note distanc myopic algorithm toler one fault point time number fault limit assumpt one copi task fail processor fault detect recoveri inher schedul mean backup primari schedul fail processor alway succeed addit whether fail processor consid schedul depend type fault transient processor fault processor failur occur consid schedul hand perman processor fault processor failur occur consid schedul till get repair failur due task error softwar fault treat like transient processor fault 424 flexibl backup overload distanc myopic discuss incorpor flexibl level backup overload distanc myopic algorithm introduc tradeoff number fault system guarante ratio defin flexibl backup overload state 3 condit backup overload pr pr j schedul two differ processor backup bk bk j overlap execut processor backup overload depict fig2 fig2 bk 1 bk 3 schedul processor execut whose primari pr 1 pr 3 schedul differ processor p 1 p 3 respect backup overload valid assumpt one failur system instant time pessimist assumpt especi number processor system larg processor 1 processor 2 processor 3 primari 1 primari 2 primari 4 primari 3 time backup 1 3 fig2 backup overload introduc flexibl overload henc number fault form processor differ group let groupp denot group processor p member number processor system rule flexibl backup overload everi processor member exactli one group ffl group least three processor backup overload take place group ffl size group gsize except one group mgsize integ ffl backup overload take place among processor group ffl primari backup copi task schedul processor group flexibl overload scheme permit dmgsize number fault instant time restrict one fault group flexibl overload scheme number fault permit increas flexibl backup overload limit henc guarante ratio might drop mechan give flexibl system design choos desir degre faulttoler section 525 studi tradeoff number fault perform system 425 restrict vector base resourc reclaim dynam faulttoler schedul approach use restrict vector rv algorithm resourc reclaim rv algorithm use data structur call restrict vector captur resourc preced faulttoler constraint among task unifi way task associ mcompon vector rv 1m call restrict vector number processor system rv j task contain last task j j set task schedul finish begin updat dispatch queue schedul comput restrict vector task feasibl schedul comput rv task schedul check k task order latest finish time first schedul finish processor start execut latest task processor j resourc conflict preced relat task becom rv j task exist kth task rv j rv algorithm 15 say start execut task processor schedul idl task restrict vector success finish execut perform studi section first present simul studi variou algorithm present analyt studi base markov chain highlight import distanc paramet faulttoler dynam schedul simul experi conduct two part first part highlight import distanc paramet second part highlight import guarante ratio improv techniqu name distanc concept backup dealloc backup overload point perform curv figs415 total number task arriv system 20000 paramet use simul studi given fig3 task simul gener follow 1 worst case comput time primari copi chosen uniformli min c max c 2 deadlin task primari copi uniformli chosen r 2 3 inter arriv time task primari copi exponenti distribut mean 1 min c max c2 4 actual comput time primari copi chosen uniformli min c worst case comput time awratio random rand otherwis awratio time worst case comput time 5 backup copi assum ident characterist primari copi paramet explan valu taken vari fix min c minimum comput time task 40 max c maximum comput time task 80 task arriv rate 020307 05 04 r laxiti paramet 237 4 usep probabl task use 010205 04 resourc sharep probabl task access 04 resourc share mode k size feasibl check window 13 11 3 w weight estt h function 1 awratio ratio actual worst case 050610 rand comput time faultp probabl primari fail 010205 02 distanc rel differ posit primari 15913 5 backup copi task queue number processor 5610 8 numr number resourc 2 numinst number instanc per resourc 2 fig3 simul paramet 51 experi highlight distanc paramet section present simul result obtain differ valu distanc paramet vari k usep faultp paramet studi valu taken 05 fix algorithm studi reclaim resourc earli complet task dealloc backup actual comput time task chosen uniformli min c worst case comput time 511 effect feasibl check window fig4 show effect vari distanc differ valu k note larger valu k number h function evalu est comput also mean higher schedul cost interplay distanc size feasibl check window describ ffl distanc small posit backup copi task queue close respect primari copi henc possibl schedul backup copi may get postpon call backup postpon due time space exclus make unschedul backup copi get accumul number exce k schedul forc choos best task say b among backup copi result creation hole 1 schedul sinc estt b greater avail time avail time idl processor hole creation avoid move feasibl check window till primari task fall howev consid approach sinc increas schedul cost ffl distanc larg posit backup copi task queue far apart respect primari copi ie task backup copi lower deadlin may place task primari copi higher deadlin may lead backtrack henc reject backtrack possibl feasibl check window reach backup copi call forc backtrack guarante ratio increas increas k given distanc time grow phase start decreas higher valu k shrink phase fig4 shrink phase start k valu 755 7 distanc valu 159 13 respect reason backup postpon high begin grow phase decreas along reach lowest valu end equival begin shrink phase number forc reject low begin shrink phase increas along reveal two fact increas valu k increas look ahead natur necessarili increas guarante ratio b optim k distanc differ right combin k distanc offer best guarante ratio fig4 best guarante ratio obtain 9 suppos two distanc valu give best guarante ratio one lower k prefer lower schedul cost 512 effect resourc usag task load fault probabl fig5 probabl task use resourc usep vari fix valu sharep 04 higher usep mean resourc conflict among task fig5 seen guarante ratio decreas usep increas applic valu distanc fig5 valu usep better guarante ratio obtain distanc 9 task arriv rate vari fig6 higher mean lower inter arriv time henc higher task load fig6 seen increas decreas guarante ratio valu unus processor time schedul distanc fig6 valu better guarante ratio obtain distanc 5 9 compar valu fig7 probabl primari copi encount failur vari faultp increas guarante ratio decreas applic valu distanc fig7 distanc 5 9 better guarante ratio obtain compar valu distance50602 4 guarante ratio size feasibl check window fig4 effect feasibl check window5060708090 guarante ratio resourc usag probabl fig5 effect resourc usag probability507090 guarante ratio task arriv rate fig6 effect task load52566064 guarante ratio primari fault probabl fig7 effect primari fault probabl 513 choic distanc base observ simul studi simpl heurist select good k distanc valu base number processor number resourc usag resourc high usep low sharep exist resourc conflict among task case est task mostli decid resourc avail time rather processor avail time task readi time therefor larg valu k might help situat valu distanc may approxim equal valu rang m2 sinc consecut primari backup schedul worst case valu k may less distanc sinc larger k mean higher schedul cost might nullifi reduc gain obtain 52 experi highlight gr improv techniqu section show simul import guarante ratio gr improv techniqu name distanc concept backup dealloc backup overload experi taken valu 04 fix actual comput time task chosen uniformli min c worst case comput time plot figs813 correspond follow algorithm myopic faulttoler version myopic algorithm distanc 1 algorithm reclaim resourc earli complet task distanc concept algorithm a0 except distanc 5 valu distanc chosen base previou experi discuss dealloc algorithm a1 togeth resourc reclaim dealloc backup well overload algorithm a2 togeth backup overload full overload consid ie gsize algorithm permit one failur wherea algorithm toler one failur differ guarante ratio algorithm a0 a1 due distanc concept ii a1 a2 due backup dealloc iii a2 a3 due backup overload figs813 see guarante ratio improv techniqu improv guarante ratio system minim increas schedul cost algorithm a0 a1 a2 a3 offer nondecreas order guarante ratio distanc concept backup dealloc effect compar backup overload 521 effect task laxiti resourc usag task load effect task laxiti r studi fig8 laxiti increas guarante ratio also increas lower laxiti differ guarante ratio algorithm less increas increas laxiti lower valu laxiti deadlin task tight due guarante improv techniqu less flexibl effect fig9 probabl task use resourc usep vari increas usep fix sharep increas resourc conflict among task henc guarante ratio decreas true algorithm effect task load studi fig10 load increas guarante ratio decreas algorithm lower valu task load 03 guarante ratio four algorithm less low load system enough processor resourc feasibl schedul task load increas differ guarante algorithm also increas mean propos techniqu effect higher load 522 effect number processor effect vari number processor studi fig11 task load fix load 8 processor increas number processor increas guarante ratio four algorithm differ guarante ratio two success valu ie 1 high small decreas increas limit avail resourc ie bottleneck resourc processor mean increas beyond 10 much improv guarante ratio6670747882 guarante ratio task laxiti a3 fig8 effect task laxity65758595 guarante ratio resourc usag probabl a3 fig9 effect resourc usag probabl guarante ratio task arriv rate a3 fig10 effect task load50607080 guarante ratio number processor a3 fig11 effect number processors7072747678 guarante ratio actual worst case comput ratio a3 fig12 effect actual worst case comput guarante ratio primari fault probabl fig13 effect primari fault probabl 523 effect actual worst case comput time ratio ratio actual worst case comput time awratio task vari fig12 experi actual comput time task taken awratio time worst case comput task fig12 increas awratio decreas guarante ratio algorithm awratio10 reclaim due backup dealloc wherev applic exampl algorithm a0 a1 awratio10 resourc reclaim possibl awratio10 differ guarante ratio a0 a1 pure due distanc concept a1 a2 pure due backup dealloc a2 a3 pure due backup overload 524 effect fault probabl probabl primari encount fault faultp vari fig13 three algorithm a0 a1 a2 plot number fault given faultp gener studi a3 differ less one fault time compar algorithm fault system mean everi backup dealloc guarante ratio algorithm a0 a1 flat valu faultp sinc dealloc backup a2 increas faultp decreas guarante ratio 525 perform flexibl overload perform flexibl backup overload studi variou paramet present sampl result experi taken 8 differ algorithm studi overload algorithm a2 ii half overload gsize say a4 iii full overload algorithm a3 tradeoff perform faulttoler studi experi point time algorithm a2 toler one fault algorithm a4 toler two fault restrict one fault within group algorithm a3 toler one fault task load laxiti vari fig14 15 respect figur guarante ratio offer full overload better two half overload better load gain guarante ratio obtain trade reduc number fault full overload around 2 3 experi lower task load gain less 1 higher task load reveal backup overload less effect improv guarante ratio compar techniqu distanc concept backup dealloc reclaim earli complet task thu flexibl overload provid tradeoff perform degre faulttoler guarante ratio task arriv rate a3 fig14 effect task load70747882 guarante ratio task laxiti a3 fig15 effect task laxiti 53 analyt studi section show analyt use markov chain distanc import paramet faulttoler dynam schedul realtim task use markov chain possibl state system probabl transit among determin use evalu differ depend metric system analysi present similar one given 3 17 except backup prealloc strategi make analysi tractabl make follow assumpt 1 task unit worst case comput time ie c 2 backup slot prealloc schedul base distanc paramet 3 fifo schedul strategi use 4 size feasibl check window k 1 5 task deadlin uniformli distribut interv w min w max rel readi time call deadlin window 6 task arriv uniformli distribut mean av 7 backup overload resourc reclaim consid 531 backup prealloc strategi sinc task unit length reserv slot schedul backup copi base distanc paramet let number processor distanc let backup prealloc strategi time avail number primari slot 1 odd 2 even similarli avail number backup slot 2 odd 1 even word backup reserv time slot primari time slot fig16 show backup prealloc 2 note backup prealloc processor distanc gamma processor distanc backup prealloc strategi equal gamma 1 primari schedul slot even backup slot alreadi reserv processor time slot violat space exclus also mean prealloc processor time backup slot fig16 distanc base backup prealloc 54 analysi p ar k probabl k task arriv given time p ar pwin k probabl arriv task rel deadlin w arriv task primari copi append task queue q schedul fifo order given 1 2 task schedul given time slot depend whether odd even respect posit task q indic schedul start time begin time slot task kth task q schedul execut time k time task execut whose posit q k defin equat 3 arriv time schedul depend length q rel deadlin w task append posit q q w g q primari copi pr guarante execut time task schedul sinc miss deadlin moreov w guarante execut w note backup prealloc strategi backup task schedul immedi next slot primari dynam system model use markov chain state repres number task q transit repres chang length q one unit time probabl differ transit may calcul rate task arriv simplic averag number task execut time m2 u repres state q contain u task u m2 probabl transit u ugammam2k p ar k sinc time k task arriv m2 task get execut u task execut state transit u k probabl ar k k arriv task finit deadlin task may reject let p qk probabl one k task reject queue size q valu p qk probabl rel deadlin task smaller extra one time unit need schedul backup pwin w 4 henc queue size q probabl p rej r k q r k task reject r number possibl way select r k element object find guarante ratio reject ratio differ valu distanc need comput number task reject state done split state u onedimension markov chain 2a av av maximum number task arriv possibl reject unit time twodimension markov chain state ur repres queue size u r task reject transit made ur twodimension markov chain contain m2w column number arriv unit time 1 transit probabl becom comput steadi state probabl reject state possibl comput expect valu number reject task rej per unit time p ss u v steadi state probabl state uv vp ss u v 6 rate task reject given reja av note p ss u 0 includ equat 6 sinc state correspond reject 541 result figs17 show reject ratio vari distanc differ valu av w max spectiv valu fix paramet also given figur sinc prealloc backup distanc gamma ident correspond reject ratio also plot observ reject ratio vari vari distanc lower valu distanc reject ratio true higher valu distanc lowest reject ratio best guarante ratio correspond medium valu distanc figs17 19 optim valu distanc m2 therefor distanc paramet play crucial role effect dynam faulttoler schedul algorithm reject ratio distanc fig17 effect task load reject ratio distanc fig18 effect laxiti reject ratio distanc fig19 effect distanc 55 comparison exist algorithm section compar distanc myopic algorithm recent propos algorithm ghosh melhem moss call gmm algorithm 3 faulttoler schedul dynam realtim task gmm algorithm use full backup overload gsize backup dealloc permit one failur point time gmm algorithm address resourc constraint among task reclaim resourc due backup dealloc limit algorithm discuss section 32 gmm algorithm primari backup copi task schedul success word distanc alway 1 algorithm inform state gmm algorithm begin 1 order task nondecreas order deadlin task queue 2 choos first primari second backup task schedul ffl schedul primari copi earli possibl end fit middl fit middl adjust ffl schedul backup copi late possibl backup overload end fit middl fit middl adjust 3 primari backup copi meet deadlin accept schedul 4 els reject end fit schedul current task last task schedul processor b middl fit schedul current task middl schedul processor c b middl adjust schedul current task middl schedul processor chang start finish time adjac task backup overload schedul current task backup time interv primari copi correspond backup copi schedul two differ processor step bd search fit adjust overlap begin end schedul proce toward start schedul everi processor depth search limit input paramet k sinc step bd take time km worst case time taken schedul primari copi 2km wherea 3km backup copi perform distanc myopic algorithm compar gmm algorithm sake comparison gmm algorithm resourc constraint among task consid make comparison fair resourc reclaim due backup dealloc consid sinc gmm reclaim resourc earli complet task plot figs20 21 correspond four algorithm distanc myopic dm ii distanc myopic full backup overload dm algorithm without backup overload gmm overload iv gmm algorithm schedul cost algorithm made equal appropri set k 4 k 1 paramet distanc myopic gmm algorithm respect experi valu r usep faultp awratio distanc valu taken 5 0 02 1 5 respect present sampl result task load vari fig20 figur differ algorithm order decreas order guarante ratio offer dm overload fig21 number processor vari fix task load equal load 8 processor lower number processor even dm algorithm better gmm simul experi shown propos algorithm dm overload better gmm algorithm even restrict task model proposed50709005 06 07 guarante ratio task arriv rate gmm dm fig20 effect task load305070903 4 5 6 7 8 guarante ratio number processor gmm dm fig21 effect number processor 6 conclus paper propos algorithm schedul dynam arriv realtim task resourc primarybackup base faulttoler requir multiprocessor system algorithm toler one fault time employ techniqu distanc concept flexibl backup overload resourc reclaim improv guarante ratio system simul studi also analyt shown distanc crucial paramet decid perform faulttoler dynam schedul realtim multiprocessor system simul studi distanc paramet show increas size feasibl check window henc look ahead natur necessarili increas guarante ratio right combin k distanc offer best guarante ratio also discuss choos combin quantifi effect propos guarante ratio improv techniqu simul studi wide rang task system paramet simul studi show distanc concept resourc reclaim due backup dealloc earli complet task effect improv guarante ratio compar backup overload flexibl backup overload introduc tradeoff number fault guarante ratio studi flexibl backup overload gain guarante ratio obtain favour perform ie reduc number fault signific indic backup overload less effect compar techniqu also compar algorithm recent propos 3 faulttoler dynam schedul algorithm although algorithm take account resourc constraint among task toler one fault time sake comparison restrict studi independ task one failur simul result show algorithm use backup overload offer better guarante ratio algorithm task system paramet current investig integr differ faulttoler approach name tripl modular redund primarybackup approach imprecis comput singl schedul framework r multiprocessor onlin schedul hard realtim task comput intract guid theori np complet faulttoler schedul aperiod task hard realtim multiprocessor system bound multiprocess time anomali approach implement repar distribut recoveri block scheme distribut faulttoler realtim system schedul task quick recoveri failur realtim system architectur principl safetycrit realtim applic fault toler schedul problem imprecis comput modular redund messag pass system effici dynam schedul algorithm multiprocessor realtim system new studi faulttoler realtim dynam schedul algorithm new algorithm resourc reclaim preced constrain task multiprocessor realtim system realtim system scenario analysi faulttoler multiprocessor schedul al gorithm adapt softwar fault toler polici dynam realtim guarante multiprocessor support realtim faulttoler schedul environ develop faulttoler softwar effici schedul algorithm realtim multiprocessor system schedul algorithm oper system support realtim system grace degrad realtim control applic use mkfirm guarante resourc reclaim multiprocessor realtim system realtim comput new disciplin comput scienc engin understand faulttoler reliabl spring kernel new paradigm realtim oper system taskpairschedul approach dynam realtim system low overhead multiprocessor alloc strategi exploit system spare capac fault detect locat faulttoler schedul algorithm distribut realtim system determin redund level fault toler realtim system multiprocessor schedul process releas time deadlin preced exclus constraint schedul task resourc requir hard realtim system tr ctr wei sun chen yu xavier defago yuanyuan zhang yasushi inoguchi realtim task schedul use extend overload techniqu multiprocessor system proceed 11th ieee intern symposium distribut simul realtim applic p95102 octob 2226 2007 r alomari k somani g manimaran adapt scheme faulttoler schedul soft realtim task multiprocessor system journal parallel distribut comput v65 n5 p595608 may 2005 r alomari arun k somani g manimaran effici overload techniqu primarybackup schedul realtim system journal parallel distribut comput v64 n5 p629648 may 2004 xiao qin hong jiang novel faulttoler schedul algorithm preced constrain task realtim heterogen system parallel comput v32 n5 p331356 june 2006 wenj rao alex orailoglu ramesh karri toward nanoelectron processor architectur journal electron test theori applic v23 n23 p235254 june 2007