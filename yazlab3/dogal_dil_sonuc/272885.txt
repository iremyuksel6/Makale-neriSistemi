abstract portabl scalabl parallel program abstractin parallel program need manag commun load imbal irregular comput put substanti demand programm key properti architectur number processor cost commun must exploit achiev good perform code properti directli program compromis portabl flexibl code signific chang need port enhanc program describ parallel program model support concis independ descript key aspect parallel programinclud data distribut commun boundari conditionswithout refer machin idiosyncrasi independ compon improv portabl allow compon program tune independ encourag reus support composit exist compon isol architecturesensit aspect comput simplifi task port program new platform moreov model effect exploit data parallel function parallel paper provid program exampl compar work relat languag present perform result b introduct divers parallel architectur put goal perform portabl conflict programm tempt exploit machin detailssuch interconnect structur granular parallelismto maxim perform yet softwar portabl need reduc high cost softwar develop programm advis avoid make machinespecif assumpt challeng provid parallel languag minim tradeoff perform portabl 1 languag must allow programm write code assum particular architectur allow compil optim result code machinespecif manner allow programm perform architecturespecif perform tune without make extens modif sourc code recent year parallel program style evolv might term aggreg dataparallel comput style character ffl data parallel program parallel come execut function mani element collect data parallel attract allow parallel growor scalewith number data element processor simd architectur exploit parallel fine grain ffl aggreg execut number data element typic exce number processor multipl element place processor manipul sequenti attract place group interact element processor vastli reduc commun cost moreov approach use good sequenti algorithm local often effici simpli multiplex parallel algorithm anoth benefit data pass processor batch amort commun overhead final comput one data element delay wait commun element may process ffl loos synchroni although strict data parallel appli function everi element local variat natur posit element requir differ implement conceptu function instanc data element boundari comput domain neighbor commun data parallel normal assum interior exterior element treat execut differ function boundari except case easili handl featur make aggreg dataparallel style program attract yield effici program execut typic mimd architectur howev without linguist support style program promot inflex program embed performancecrit featur constant number processor number data element boundari condit processor interconnect systemspecif commun syntax machin size problem size chang signific program chang fix quantiti gener requir consequ 1 consid program portabl respect given machin perform competit machinespecif program solv problem 2 sever languag introduc support key aspect style howev unless aspect style support perform scalabl portabl develop cost suffer instanc good local refer import aspect program style lowlevel approach 25 allow programm handcod data placement result code typic assum one particular data decomposit program port platform favor de composit extens chang must made perform suffer languag 4 5 15 give programm control data decomposit leav issu compil hardwar good data decomposit depend characterist applic difficult determin static compil make poor data placement decis mani recent languag 6 22 provid support data decomposit hide commun oper programm thu encourag local algorithm level consequ relianc autom mean hide latencymultithread hardwar multipl lightweight thread cach compil optim overlap commun computationwhich alway hide latenc trend toward rel faster processor rel slower memori access time exacerb situat languag provid inadequ control granular parallel requir either one data point per process 21 43 assum larger fix granular 14 29 includ notion granular forc compil runtim system choos best granular 15 given divers parallel comput particular granular best machin comput cm5 prefer coars granular j machin prefer finer granular mit alewif tera comput benefit multipl thread per process also languag provid suffici control algorithm appli aggreg data prefer instead multiplex parallel algorithm multipl data point processor 43 44 mani languag model adequ support loos synchroni boundari parallel comput often introduc irregular requir signific code effort process execut code program becom riddl condit increas code size make difficult understand hard modifi potenti ineffici program typic mimdstyl languag much cleaner instanc write slightli differ function type boundari process problemat chang algorithm like requir version chang paper describ languag abstractionsa programmingmodelthat fulli support aggreg dataparallel program style model serv foundat portabl scalabl mimd languag preserv perform avail underli machin belief mani task programmersand compil runtim systemscan best handl performancesensit aspect parallel program belief lead three design principl first provid abstract effici implement mimd architectur along specif mechan handl common type parallel data distribut boundari condit model base practic mimd comput model call candid type architectur cta 45 second insignific divers aspect comput architectur hidden expos programm assumpt base characterist sprinkl throughout program make portabl difficult exampl characterist hidden includ detail machin commun style processor memori interconnect topolog instanc one machin might provid share memori anoth messag pass either implement softwar third architectur featur essenti perform expos parameter architectureindepend fashion key characterist speed latenc permessag overhead commun rel comput cost commun increas rel comput commun cost must reduc aggreg process onto smaller number processor find way increas overlap commun comput result phase abstract parallel program model provid control granular parallel control data partit hybrid data function parallel construct support concis descript boundari condit core solut ensembl construct allow global data structur defin distribut process allow granularityand locat data elementsto control loadtim paramet ensembl also code form describ oper execut element handl boundari condit likewis interprocessor connect describ port ensembl provid similar flexibl use ensembl three compon global operationdata code communicationthey scale togeth paramet three part ensembl boundari condit specifi independ reusabl enhanc remaind paper organ follow first present solut problem describ architectur model basic languag modelth cta phase abstract section 3 give detail illustr abstract use jacobi iter exampl demonstr express programm abstract section 4 show simpl array languag primit built top model section 5 discuss advantag program model respect perform portabl section 6 present experiment evid phase abstract support portabl parallel program final compar phase abstract relat languag model close summari phase abstract sequenti comput languag c pascal fortran success combin effici portabl languag common make success base model sequenc oper manipul infinit randomaccess memori program model succe preserv characterist von neumann machin model reason faith represent sequenti comput model never liter implementedunitcost access infinit memori illus provid virtual memori cach back storeth model accur vast major program rare case program perform extrem amount disk io deviat model costli programm critic von neumann model captur machin featur relev perform essenti machin featur ignor better algorithm could develop use accur machin model togeth von neumann machin model accompani program model allow languag c fortran portabl effici parallel world propos candid type architectur cta play role von neumann model 2 phase abstract role program model final sequenti languag replac languag base phase abstract orca c 32 34 cta cta 45 asynchron mimd model consist p von neumann processor execut independ processor local memori processor commun spars otherwis unspecifi commun network spars mean network constant degre connect network topolog intent left unbound provid maximum gener final model includ global control commun processor low bandwidth network logic control provid synchron low bandwidth commun broadcast singl valu although prematur claim cta effect model von neumann model appear requisit characterist simpl make minim architectur assumpt captur enough signific featur use develop effici algorithm exampl cta unbound topolog bia model toward particular machin topolog exist parallel comput typic signific perform hand distinct global local memori refer key distinct clear cta model final assumpt spars topolog realist exist medium larg scale parallel comput phase abstract extend cta way sequenti imper program 2 recent bsp 48 logp 8 model present similar view parallel machin part suggest similar way program parallel comput model extend von neumann model main compon phase abstract xyz level program ensembl 1 19 46 21 xyz program level programm problemsolv abil improv divid problem small manag piecesassum piec suffici independ consid separ addit piec often reus program save time futur problem one way build parallel program smaller reusabl piec compos sequenc independ implement phase execut parallel algorithm contribut overal solut next conceptu level phase compris set cooper sequenti process implement desir parallel algorithm sequenti process may develop separ level problem solvingprogram phase process also call z x levelshav direct analog cta x level correspond individu von neumann processor cta x level program specifi sequenti code execut one process model mimd process execut differ code level analog set von neumann processor cooper comput parallel algorithm form phase ylevel may specifi xlevel program connect interprocess commun exampl phase includ parallel implement fft matrix multipl matrix transposit sort global maximum phase characterist commun structur induc data depend among process exampl fft induc butterfli batcher sort induc hypercub 1 final z level correspond action cta global control sequenc parallel phase invok synchron z level program specifi high level logic comput sequenti invoc phase although execut may overlap need solv complex problem exampl carparrinello molecular dynam code simul behavior collect atom iter invok seri phase perform fft matrix product comput 49 zyx order three level provid topdown view parallel program exampl xyz level jacobi iter figur 1 illustr xyz level program jacobi iter z level consist loop invok two phase one call jacobi perform overrelax call max comput maximum differ iter use test termin level phase collect process execut concurr two phase graphic depict squar repres process arc repres commun process program jacobi data load errortoler error max z level x level level ij local section newijoldij1oldij1 localmaxmaxlocalmax leftchild localmaxmaxlocalmax rightchild send localmax parent figur 1 xyz illustr jacobi iter jacobi phase use mesh interconnect topolog max phase use binari tree detail level distribut data shown figur explain next subsect final sketch x level program two phase shown right figur 1 x level code jacobi phase assign data point averag four neighbor max phase find data point largest differ current iter previou iter 2 z level program basic sequenti program provid control flow overal comput x level program primit form also view sequenti program addit oper allow commun process although parallel explicitli specifi x z level two level may still contain parallel exampl phase invoc may pipelin x level process execut superscalar architectur achiev instructionlevel parallel level specifi scalabl parallel clearli depart sequenti program ensembl support definit manipul parallel 22 ensembl phase abstract use ensembl structur describ data structur partit process placement process interconnect particular ensembl partit set element data code port connectionsinto disjoint section section repres thread execut section unit concurr degre parallel modul increas decreas number section three aspect parallel computationdata code communicationar unifi ensembl structur three compon reconfigur scale coher concis fashion provid flexibl portabl data ensembl data structur partit z level data ensembl provid logic global view data structur x level portion ensembl map section view local defin structur local index exampl 6 theta 6 data ensembl figur 2 global view indic 0 5 theta 0 5 local view 3 theta 3 subarray indic 2 map global view local view perform level describ section 3 use local index scheme allow x level process refer gener array bound rather global locat data space thu x level sourc code use multipl process global view figur 2 6theta6 array left correspond data ensembl 2theta2 array section code ensembl collect procedur partit code ensembl give global view process perform parallel comput procedur ensembl differ model mimd procedur ident model spmd figur 3 show code ensembl jacobi phase process execut xjacobi function figur 3 illustr code ensembl final port ensembl defin logic commun structur specifi collect port name pair pair name repres logic commun channel two section port name bound local port name use x level figur 4 depict port ensembl jacobi phase exampl north port n one process bound south port neighbor process figur 4 illustr port ensembl level phase compos three compon code ensembl port ensembl connect code ensembl process data ensembl provid argument process code ensembl section ensembl order numer th section code ensembl bound th section data port ensembl correspond allow section alloc processor normal sequenti execut process execut processor data store memori local processor port defin connect interprocessor commun consequ th section ensembl assign processor maintain local across phase two phase share data ensembl requir differ partit best perform separ phase may use move data z level logic store ensembl z level variabl compos phase store result phase invoc interfac z x level encourag modular level code invok differ ensembl paramet way procedur reus sequenti languag ensembl abstract help hide divers parallel architectur howev map well individu architectur abstract must parameter exampl number processor size problem parameter illustr next section 3 ensembl exampl jacobi provid better understand ensembl phase abstract complet descript jacobi program adopt notat propos orca c languag 30 32 languag base phase abstract possibl see section 4 31 defin row 1 constant defin shape defin col 2 logic processor array defin twod 3 program jacobian shape processor switch shapef configur comput case row row processor break case col row break case twod partition2drow col processor break row col processor configur paramet list data ensembl definit level port ensembl definit code ensembl definit process definit x level begin z level toler delta f newp prepar next iter figur 5 overal phase abstract program structur shown figur 5 phase abstract program consist x z descript plu list configur paramet use program adapt differ execut environ case two runtim paramet accept processor shape first paramet number processor second specifi shape processor array discuss later program use 2d data decomposit set shape row col choos horizont strip vertic strip decomposit function partition2d comput valu row col row processor differ row col minim configur comput program use differ load time paramet adapt differ number processor assum three differ data decomposit configur comput execut load time 32 z level jacobi program configur z level program execut initi program variabl read input data iter invok jacobi max phase converg reach point output phase invok data process commun compon jacobi max phase specifi defin compos code data port ensembl describ 33 level data ensembl program use two array store float point valu point 2d grid parallel achiev partit array contigu 2d block partit blockrc float prowscol float newprowscol declar state p newp dimens row col partit onto r c section array process array keyword partit identifi p newp ensembl array block name partit reus defin ensembl partit correspond one figur 2 rows6 cols6 2 ensembl declar belong data ensembl metacod figur 5 section 5 show altern decomposit declar valu r c assum specifi program configur paramet list section implicitli defin size r c r divid row evenli section r e other r consequ x level process contain assumpt data decomposit except dimens subarray process scale number logic processor problem size 34 jacobi phase ensembl jacobi phase comput point averag four nearest neighbor impli section commun four nearest neighbor section see figur 4 follow level ensembl declar defin appropri port ensembl jacobiportnam n e w north east west south first line declar phase port name follow bind specifi second third line defin mesh connect level port name port ensembl declar specifi connect port lie boundari case unbound port bound deriv function comput boundari condit use data local section follow bind deriv function port edg jacobi jacobi0i portn receiv rowzero 0 receiv colzero 0 jacobii0 portw receiv colzero 0 jacobir1i port receiv rowzero 0 rowzero colzero defin doubl rowzero static doubl row1t default initi 0s return row doubl colzero static doubl col01 default initi 0s return col0 valu determin process x level functionin case xjacobi absenc deriv function x level program could check exist neighbor test complic sourc code increas chanc introduc error section 5 show even modestli complic boundari condit lead prolifer special case code code ensembl defin code ensembl jacobi r c section assign instanc xjacobi code jacobiijcod xjacobi 0 jacobi contain heterogen boundari program handl deriv function function gener howev restrict function argument type return type must match phase invoc level x level code jacobi shown figur 6 first send edg valu four neighbor receiv boundari valu neighbor final use four point stencil comput averag interior point sever featur x level code noteworthi ffl parametersth argument x level code establish correspond local variabl section ensembl case local valu array bound block ensembl valu ffl communicationcommun specifi use transmit oper port name left specifi send righthand side port right indic receiv variabl lefthand side semant receiv oper block send ffl uniformitybecaus deriv function use xjacobi function contain test boundari condit send receiv neighbor valu ffl border valuesth valu use defin bound valu array paramet deriv section size data ensembl hold data neighbor section valu declar one element wider side incom array argument extra storag explicitli specifi differ local declar x0s10t1 formal declar x1s1t upper bound array declar inclus ffl array slicesslic provid concis way refer entir row gener ddimension block data slice use conjunct transmit oper entir block sent singl messag thu reduc commun overhead complet phase summar data ensembl port ensembl code ensembl collect defin jacobi phase upon execut section declar configur paramet logic connect nearestneighbor mesh section data manipul one xjacobi process end result parallel algorithm comput one jacobi iter 35 max phase max phase find maximum chang grid point use data ensembl jacobi phase port ensembl shown graphic figur 8 defin maxportnam p l r parent left right xjacobivalue1s1t newvalue1s1t doubl value0s10t1 extra storag four side doubl newvalue0s10t1 port north east west south doubl newvalue0s10t1 int j send neighbor valu north valu 11t 1t array slice east value1st west value1s1 south values1t receiv neighbor valu i1 j1 i1 j1 figur level code jacobi phase deriv function phase bound receiv leaf section left right port return valu comput smallest valu function send root unbound parent port noop maxiportl receiv smallestvalu rc2 processor maxiportr receiv smallestvalu rc2 processor maxiportp send noop smallest valu deriv function simpli return smallest valu repres architectur code ensembl phase similar jacobi phase except xmax replac xjacobi see figur 7 xmaxvalue1s1t newvalue1s1t doubl value1s1t doubl newvalue1s1t port parent left right int j doubl localmax doubl temp comput local maximum i1 j1 jt j comput global maximum temp left receiv temp right receiv parent localmax send figur 7 x level code max phase applic complic jacobi benefit use ensembl increas cost amort larger program cost use ensembl also decreas librari figur 8 illustr tree port ensembl ensembl phase deriv function x level code built exampl max phase jacobi common mani comput would normal defin programm 4 high level program phase abstract phase abstract program languag rather foundat develop parallel program languag support creation effici scalabl portabl program orca c use previou section liter textual instanti phase abstract clearli show power phase abstract may find lowlevel tediou fact departur liter orca c languag requir achiev eleg program style adopt certain convent possibl build reusabl abstract directli top orca c stay within orca c framework solut advantag differ sublanguag use togeth singl larg problem requir divers abstract good perform exampl consid design apllik array sublanguag orca c 3 recal x level procedur receiv two kind parametersglob data pass argument port connectionsthat support two basic activ comput data commun howev possibl constrain x level function perform one two tasksa local comput commun oper could separ comput phase commun phase exampl x level comput function ad integ comput minimum valu sort element x level commun function shift data cyclic ring broadcast data commun tree structur reduct natur combin commun comput notabl except separ 3 sinc submiss paper array sublanguag known zpl develop support data parallel comput 35 47 31 37 syntax differ significantli orca c zpl remain true phase abstract model provid power z level languag hide x level detail user commun comput desir oper suffic defin communicationori phase take addit function paramet combin result commun illustr reconsid jacobi exampl rather specifi entir jacobi iter one x level process commun oper constitut separ phase result combin z level add divid phase converg test comput z level subtract old array new one perform maximum reduct differ program skeleton figur 9 illustr method provid exampl x level function refer oper syntact style c shift reduc z level code show data ensembl declar phase structur add leftshift reduc initi divid subtract phase analog add shift function analog leftshift three consequ approach first interfac phase substanti simplifi second problem harder describ possibl combin comput commun within singl x level function final x level function phase compris smaller like perform one task increas compos reusabl although array sublanguag defin similar apl salient differ significantli orca c function oper subarray rather individu element mean fast sequenti algorithm appli subarray solut achiev concis reusabl apl sacrific control data decomposit lose abil use separ global local algorithm solut also advantag embed array languag orca c allow program style use need power phase abstract come decomposit parallel program x z level encod key architectur properti simpl paramet concept ensembl allow data port code decomposit specifi reus individu compon three type ensembl work togeth allow problem machin size scale addit deriv function allow singl x level program use multipl process even presenc boundari condit section discuss phase abstract respect perform express portabl scalabl program move one platform anoth must adapt characterist host machin obtain good perform adapt automat requir minor effort portabl achiev phase abstract support portabl scalabl encod key architectur characterist ensembl paramet separ phase definit sever independ compon xproc type1s1t operatortyp x1s1t type y1s1t type result1s1t int j i1 j1 jt return result xproc void shifttyp val1s1t port writeneighbor int i2 xproc int reducetyp val1k typeop port parent int i2 ik i1 parent accum begin z doubl x1j1k oldx1j1k phase oper phase left phase reduc figur 9 jacobi written array style use orca c chang either problem size number processor encapsul data ensembl declar section 3 relat size section overal problem size row col number section r c follow problem size scale chang valu row col machin size scale chang valu r c granular parallel control alter either number processor number section ensembl declar flexibl import aspect portabl differ architectur favor differ granular desir write program without make assumpt underli machin knowledg machin detail often use optim program perform therefor tune may sometim necessari exampl may benefici logic commun graph match machin commun structur consid embed binari tree max phase onto mesh architectur logic edg must span multipl physic link edg dilat elimin connect allow comparison along row processor along singl column see figur 10 figur 10 row column comput global maximum address edg dilat problem fix binari tree present section 3 replac new port ensembl use tree variabl degre solut shown figur 11 child port repres array port new program use either binari tree row column approach port ensembl declar latter approach shown row column commun structur code suitabl parameter program execut effici varieti architectur select proper port ensembl xmaxvalue1s1t new1s1t numchildren doubl value1s1t doubl newvalue1s1t port parent childnumchildren int j doubl localmax doubl temp comput local maximum i1 j1 comput global maximum i0 inumchildren temp childi receiv parent localmax send figur parameter x level code max phase local best data partit depend factor problem machin size hard ware commun comput characterist applic commun pattern phase abstract model chang data partit encapsul data ensembl exampl defin 2d block partit p processor configur code defin number section p 1d strip partit desir number section simpli defin p strip decomposit requir process eastwest neighbor instead four neighbor use block decomposit use port ensembl bind deriv function unus portsin case north south portsth program easili accommod chang number neighbor sourc level chang requir explicit dichotomi local nonloc access encourag use differ algorithm local global batcher sort exampl benefit approach see section 1 contrast approach programm compil identifi much finegrain parallel possibl compil aggreg finegrain parallel granular appropri target machin boundari condit typic process edg problem space must treat separ 4 jacobi iter exampl receiv east port must condit execut process east edg eastern neighbor isol occurr condit pose littl problem realist applic lead convolut code exampl simpl nine differ casesdepend portion boundari contain within processand condit lead code domin treatment except case 18 41 exampl suppos program block decomposit assum condit express process either northeast east southeast section shown northeast special case 1 els east special case 2 els southeast special case 3 problem aris programm decid vertic strip decomposit would effici 4 although discuss problem context messag pass languag share memori program must also deal special case code assum exactli one three boundari condit hold vertic strip decomposit one section eastern edg three condit appli one therefor chang data decomposit forc programm rewrit boundari condit code model attempt insul port code ensembl chang data decomposit process send receiv data port case involv interprocess commun case invok deriv function handl boundari condit thu decoupl x level sourc code instead clutter process code special case due boundari condit handl problem level natur belong reusabl characterist provid flexibl phase abstract also encourag reusabl exampl carparrinello molecular dynam program 49 consist sever phase one comput use modifi gramschmidt mg method solv qr factor empir result shown mg method perform best 2d data decomposit 36 howev phase carparrinello comput requir 1d decomposit case 1d decomposit mg yield best perform sinc avoid data movement phase illustr reusabl compon effect flexibl enough accommod varieti execut environ irregular problem paper describ static defin arraybas ensembl howev impli phase abstract ill suit dynam unstructur problem fact extent lpar 28 set languag extens irregular scientif comput see section 7 describ term phase abstract key point ensembl set partit support dynam irregular comput envis dynam irregular partit manag runtim consid first static defin irregular problem finit element analysi programm begin defin logic data ensembl replac physic ensembl runtim logic definit includ proper record format array port name actual data decomposit actual port ensembl runtim phase run determin partit creat data port ensembl size content data ensembl defin interconnect structur determin section map physic processor assum code ensembl spmd sinc obviat need assign differ code differ process dynam partit phase complet ensembl behav static defin phase dynam comput could gener idea exampl load balanc phase could move data section also creat revis data port ensembl repres new partit technic difficulti remain dynam ensembl support concept chang limit nonshar memori model nonshar memori model encourag good local refer expos data movement programm perform advantag model small applic inher poor local exampl direct method perform spars factor poor local refer spars irregular natur input data certain solut problem share memori model perform better singl address space lead better load balanc use work queue model 38 share memori model also provid notat conveni especi pointerbas structur involv 6 portabl result experiment evid suggest phase abstract provid portabl across divers set mimd comput 32 33 section summar result one program simpl similar result achiev qr factor matrix multipl 30 briefli describ simpl machin program run manner portabl program implement signific result simpl larg comput fluid dynam benchmark whose import high perform comput come substanti bodi literatur alreadi devot studi introduc 1977 sequenti benchmark evalu new comput fortran compil 7 sinc creation studi wide sequenti parallel form 3 9 13 16 17 23 24 40 42 hardwar portabl parallel simpl program investig ipsc2 ipsc2 f ncube7 sequent symmetri bbn butterfli gp1000 transput simul machin summar tabl 1 two intel machin differ ipsc2 slower intel 80387 float point coprocessor faster ipsc sx float point acceler simul detail transputerbas nonshar memori machin use detail inform arithmet logic commun oper t800 24 simul execut program written phase abstract languag estim program execut time implement simpl program written orca c sinc compil exist languag base phase abstract program handcompil straightforward fashion c code use messag pass substrat support phase abstract result c code machin machin sequent intel intel ncube bbn transput model symmetri ipsc2 ipsc2 f ncube7 butterfli gp1000 simul node 20 processor intel 80386 intel 80386 intel 80386 custom motorola 68020 t800 memori 32mb 4 mbnode 8 mbnode 512 kbnode 4 mbnode na cach 64kb 64 kb 64kb none none network bu hypercub hypercub hypercub omega mesh tabl 1 machin characterist independ except process creation depend oper system method spawn process number 1680 point transput 1680 point intel ipsc2 1680 point butterfli 1680 point ncube7 1680 point symmetri number 28 pingalirog linsnyd hiromoto et al figur 12 simpl speedup variou machin b simpl 4096 point figur 12a show similar speedup achiev machin mani hardwar characterist affect speedup explain differ among curv discuss concentr commun cost rel comput speed featur best distinguish machin exampl ipsc2 f ncube7 ident interconnect topolog ratio comput speed commun speed greater ipsc2 11 12 effect reduc speedup decreas percentag time spent comput increas fraction time spent noncomput overhead similarli sinc messag pass latenc lowest sequent share bu sequent show best speedup claim assum littl bu content valid assumpt consid modest bandwidth requir simpl figur 12b show simpl result hiromoto et al denelcor hep use 4096 data point 23 indic portabl program roughli competit machinespecif code mani differ resultsinclud differ problem size differ architectur possibl even differ problem specificationsmak difficult draw stronger conclus anoth refer point figur 12b compar result ipsc2 pingali roger parallel compil languag 42 experi run ipsc2 4mb memori 80387 float point unit paramet appear ident largest potenti differ lie perform sequenti program speedup comput although result encourag propon function languag point result make use sophist compil type compil technolog develop pingali roger like improv perform program well even though machin differ substantiallyfor exampl memori structureth speedup fall roughli within rang moreov version simpl compar favor machinespecif implement result suggest portabl achiev applic run machin 7 relat work mani system support global view parallel comput spmd execut data decomposit similar variou aspect phase abstract none howev provid support x level algorithm differ zlevel parallel algorithm provid gener support handl boundari condit control granular section discuss system address scalabl portabl aggreg data parallel program style dataparallel c dataparallel c 21 dpc portabl sharedmemori simdstyl languag similar c unlik phase abstract dpc support pointwis parallel dpc pointwis processor poli variabl distribut across processor machin unlik predecessor c 43 dpc support data decomposit data improv perform coarsegrain architectur howev dpc support pointwis commun compil runtim system must detect sever point send processor destin processor bundl also maintain perform simd model mimd machin extra compil analysi requir detect perinstruct simd synchron necessari remov pointwis process ident edg effect must code condit determin process edg comput hard reus code boundari condit may chang problem problem constant variabl boundari condit support expand data space leav process idl dino dino 44 clike spmd languag like c construct distribut data structur replic structur processor execut singl procedur element data set dino provid share address space remot commun specifi annot access nonloc object symbol default semant true messagepass parallel invoc procedur synchron exit procedur dino allow map data process specifi programmerdefin function ensur fast read share data partit map individu variabl multipl processor write variabl broadcast copi dino handl edg effect fashion c dino support pointwis commun compil runtim system must combin messag mehrotra rosendal system describ mehrotra rosendal 39 much like dino support small set data distribut howev system provid way control precis determin point local possibl control commun cost algorithm choic base local hand system requir explicit mark extern memori refer dino instead system infer possibl refer global algorithm process dynam choos neighbor simplifi program also program portabl written dino commun structur processor visibl programm programm chang partit claus data aggreg spmd process allow special facil handl edg effect fortran dialect recent languag kali 26 vienna fortran 6 hpf 22 focu data decomposit express parallel data decomposit similar phase abstract notion data ensembl overal approach fundament differ phase abstract requir effort programm approach reli compil technolog exploit loop level parallel compilerbas approach guarante determinist sequenti semant less potenti parallel sinc may case compil transform sequenti algorithm optim parallel one kali vienna fortran hpf depart sequenti languag primarili support data though languag provid mechan specifi parallel loop vienna fortran provid form parallel loop foral statement hpf kali specifi loop loop carri depend ensur determinist semant updat common variabl differ loop iter valu determinist merg end loop construct option hpf compil may attempt extract parallel even foral use hpf vienna fortran allow array align respect abstract partit power construct exampl array dynam remap procedur defin data distribut togeth featur potenti expens although programm help specifi data distribut variou point program compil must determin move data addit data distribut direct kali allow programm control assign loop iter processor use claus help maintain local lpar lpar portabl languag extens support structur irregular scientif parallel comput 28 27 particular lpar provid mechan describ nonrectangular distribut partit data space manag loadbalanc local partit creat union intersect set differ array support irregular decomposit high cost lpar syntact distinguish irregular decomposit faster runtim support use regular decomposit 5 comput invok group array foreach oper execut bodi parallel array yield coarsegrain parallel lpar use overlap indic distribut subarray support share data element overlap domain provid eleg way describ multilevel mesh algorithm comput boundari condit oper redistribut data element lpar depend routin written base languag comput new decomposit phase abstract potenti support dynam irregular decomposit discuss section 5 multigrid decomposit sublanguag support scale partit commun scale ensembl would use phase abstract support loos synchroni natur support use refin grid conjunct base grid splitc splitc sharedmemori spmd languag memori refer oper support latencyhid 10 splitc procedur concurr appli ownercomput fashion partit aggreg data structur array pointerbas graph process read data global pointer splitc data type hide latenc splitc support asynchron readakin unsaf multilisp futur 20that initi read global pointer wait data arriv process invok sync oper block outstand read 5 scott baden person commun complet similar oper global write oper hide latenc provid global namespac reduc copi data messag queue copi may necessari bulk commun noncontigu data column array howev oper lead complex program error misplac refer synchron oper lead incorrect output immedi failur array distribut splitc straightforward somewhat limit number higher order dimens cyclic distribut remain dimens distribut block load balanc local irregular decomposit may difficult achiev applic array distribut declar tie procedur array paramet declar limit reusabl portabl declar code depend must modifi distribut chang coupl also incur perform penalti benefit optim array distribut one procedur invoc may offset cost redistribut array calcul use array splitc provid special support boundari condit usual trick creat enlarg array possibl otherwis irregular must handl condit code bodi spmd procedur 8 conclus parallel offer promis great perform thu far hamper lack portabl scalabl program conveni unaccept increas time cost develop effici program support requir quickli programminga solut easili move new machin old one becom obsolet rather defin new parallel program paradigm phase abstract model support wellknown techniqu achiev highperformancecomput sequenti local aggreg data element commun larg group data unitbi allow programm partit data across parallel machin scalabl manner furthermor separ program reusabl partsx level level zlevel ensembl declar boundari conditionsth creation subsequ program significantli simplifi approach provid machineindepend lowlevel control parallel allow programm write spmd manner without sacrif effici mimd process messag pass often prais effici condemn difficult use contribut phase abstract languag model focus effici reduc difficulti nonshar memori program programm model exemplifi straightforward solut problem simpl well abil defin special highlevel array sublanguag phase abstract model design structur similar mimd architectur perform well varieti mimd processor claim support test machin intel ipsc sequent symmetri bbn butterfli r flexibl commun abstract nonshar memori parallel comput program structur effect parallel portabl simul mimd perform predict applic s1 mkiia multiprocessor nesl nest dataparallel languag linda context vienna fortran fortran languag extens distribut memori multiprocessor simpl code logp toward realist model parallel comput parallel program splitc hypercub perform perform intel ipsc860 ncube 6400 hypercub support machin independ programmingon divers parallel architectur report sisal languag project simpl chip restructur simpl chip architectur simpl exercis program poker scalabl abstract parallel program languag concurr symbol comput high perform fortran forum experi denelcor hep processor element architectur nonshar memori parallel comput ipsc2 user guid compil global namespac parallel loop distribut execut lattic parallel parallel program model nonuniform implement lpar parallel program model scientif comput portabl parallel program across mimd comput zpl languag refer manual portabl implement simpl portabl parallel program cross machin comparison simpl data ensembl orca c zpl array sublanguag accommod polymorph data decomposit explicitli parallel program simpl perform result zpl toward machineindepend solut spars choleski factor compil high level construct distribut memori architectur analysi simpl code dataflow comput experi poker compil parallel simpl distribut memori machin dino parallel program languag type architectur xyz abstract level pokerlik languag zpl program guid bridg model parallel comput parallel implement carparrinello method tr ctr mario dikaiako daphn manoussaki calvin lin diana e woodward portabl parallel implement two novel mathemat biolog algorithm zpl proceed 9th intern confer supercomput p365374 juli 0307 1995 barcelona spain bradford l chamberlain sungeun choi e christoph lewi calvin lin lawrenc snyder w derrick weathersbi zpl machin independ program languag parallel comput ieee transact softwar engin v26 n3 p197211 march 2000