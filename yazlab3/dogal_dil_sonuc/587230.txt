asynchron parallel pattern search nonlinear optim introduc new asynchron parallel pattern search app parallel pattern search quit use engin optim problem character small number variabl say fifti less object function expens evalu defin complex simul take anywher second mani hour run target platform app loos coupl parallel system wide avail exploit algorithm characterist pattern search design variant dynam initi action sole respons messag rather routin cycl fix set step give versatil concurr strategi allow us effect balanc comput load across avail processor allow us incorpor high degre fault toler almost addit overhead demonstr effect preliminari implement app standard test problem well engin optim problem b introduct interest solv unconstrain nonlinear optim problem introduc famili asynchron parallel pattern search app method pattern search 15 class direct search method admit wide rang algorithm possibl exibl aord denit pattern search 23 16 adapt design nonlinear optim method intend eectiv varieti parallel distribut comput platform motiv sever first optim problem interest us typic dene comput expens comput simul complex physic process simul may take anywher second mani hour comput singl processor discuss x2 domin comput cost pattern search method lie object function evalu ation even object function inexpens comput rel cost addit work requir within singl iter pattern search neglig given consider one featur pattern search exploit comput multipl independ function evalu simultan eort acceler search process improv qualiti result ob tain thu approach take advantag parallel distribut comput platform also practic reason independ comput environ use pattern search method problem interest simpli put problem dene expens comput simul complex physic process often reli gradient f conduct search typic procedur exist evalu gradient creation procedur deem unten approxim gradient may prove unreli instanc accuraci function trust signic decim digit dicult construct reliabl nitedier approxim gradient final theori pattern search assum f continu dierenti pattern search method eectiv nondierenti even discontinu problem precis explicitli reli deriv inform drive search thu focu pattern search practic comput reason howev natur problem interest featur current distribut comput environ rais second issu address work origin investig parallel pattern search pp method 1 7 22 made two 1 origin investig focus parallel direct search pd precursor gener pp method discuss fundament assumpt parallel comput environ 1 processor homogen tightli coupl 2 amount time need complet singl evalu object eectiv constant time reexamin two assumpt clearli given current varieti comput platform includ distribut system compris looselycoupl often heterogen commerci otheshelf compon 21 rst assumpt longer valid second assumpt equal suspect standard test problem use assess eectiv nonlinear optim algorithm typic closedform algebra express function thu standard assumpt xed choic n evalu complet constant time valid howev given interest optim problem dene simul complex physic process often use iter numer techniqu assumpt evalu complet constant comput time often hold fact behavior simul given input dicult assess advanc sinc behavior simul vari substanti depend varieti factor problem comput environ interest longer assum comput proce lockstep singl synchron step end everi iter global reduct use 22 neither appropri eectiv follow factor hold function evalu complet vari amount time even equival processor processor employ comput possess dierent perform characterist processor vari load goal introduc class app method make eectiv use varieti comput environ well devis strategi accommod variat complet time function evalu approach outlin x3 third nal consider address paper incorpor fault toler strategi app method sinc one intent use softwar largescal heterogen system combin commod part share resourc rais grow concern reliabl individu processor particip comput embark lengthi comput want reason assur produc nal result even subset processor fail thu goal design method anticip failur respond protect solut process rather simpli checkpoint intermedi comput disk restart event failur instead consid method heurist adapt modifi search strategi discuss technic issu detail x4 x5 provid numer result compar app pp standard engin optim test problem nalli x6 outlin addit question pursu although rst embark design asynchron parallel optim algorithm awar littl work particularli area nonlinear program approach develop asynchron parallel newton quasinewton method propos 4 8 though assumpt underli approach dier markedli address specic assum solv linear system equat iter domin comput cost optim algorithm dimens problem interest rel larg dierent line inquiri 20 consid use quasinewton method context develop asynchron stochast global optim algorithm focu nding local minim parallel pattern search proceed discuss app method let us rst review featur direct search gener pattern search particular direct search method character neither requir explicitli approxim deriv inform engin literatur direct search method often call zeroord method oppos rstorder method method steepest descent secondord method newton method indic highest order term use local taylor seri approxim f character direct search perhap use emphas higherord method deriv use form local approxim function use deriv search direct predict length step necessari realiz decreas instead work local approxim f direct search method work directli f pattern search method compris subset direct search method rigor formal denit pattern search 16 23 primari characterist pattern search method sampl function preden pattern point lie ration lattic enforc structur form point pattern well simpl rule outcom search subsequ updat standard global converg result obtain purpos featur pattern search amen parallel candid pattern dene function valu point comput independ thu concurr make concret consid follow particularli simpl version pattern search algorithm iter k iter x k 2 r n steplength paramet k 0 pattern p point denot g purpos simpl exampl choos fe repres jth unit vector discuss end section choic possibl sever algorithm option open us one possibl look success pattern point x k either nd point x fx fx k exhaust 2n possibl extrem could determin x 2 fx k 2ng requir us comput fx k 2n vector set fig 1 illustr pattern point among search x 2 r z figur 1 simpl instanc pattern search either variant pattern search none pattern point reduc ob jectiv set x reduc set otherwis set repeat process suitabl stop criterion k tol satis sever thing note two search strategi outlin first even though pattern instanc two dierent algorithm dierent search strategi could conceiv produc dierent sequenc iter even dierent local minimum second design search strategi ect intrins assumpt natur function comput environ search execut clearli rst strategi evalu one function valu time conceiv execut singl processor cautiou strategi comput function valu need suggest frugal respect number function evalu allow second strategi could certainli execut singl processor one could make argument could algorithm advantag also clearli strategi easili make use multipl processor straightforward deriv pp second strategi illustr fig 2 proceed descript app howev need make one remark pattern alreadi seen easili deriv two dierent search strategi use basic pattern requir outcom search mild fail nd point reduc valu f x k must tri smaller valu k otherwis accept new iter point pattern produc decreas latter case may choos modifi k either case free make chang pattern use next iter though left pattern unchang exampl given howev chang either step length paramet pattern subject certain algebra condit outlin fulli 16 2 reduct paramet usual 1but number set 0 1 initi select pattern g select steplength paramet 0 select stop toler tol select start point x 0 evalu fx 0 iter 1 evalu concurr 2 determin x fx synchron point 3 fx fx k set x els set x 4 k1 tol exit els repeat figur 2 pp algorithm still remain question constitut accept pattern borrow follow technic denit 6 16 pattern must posit span set r n addit add condit span set compos ration vector denit 1 set vector fd posit span r n vector z 2 r n written nonneg linear combin vector set ie z 2 r n exist posit span set contain least n1 vector 6 trivial verifi set vector use dene pattern exampl posit span set 3 3 terminolog posit span set misnom proper name would non neg span set asynchron parallel pattern search ineci processor util pp algorithm shown fig 2 aris object function evalu complet approxim amount time happen sever reason first object function evalu may complex simul requir dierent amount work depend input paramet second load individu processor may vari last group processor particip calcul may possess dierent comput characterist object function evalu take vari amount time processor complet share comput quickli wait remain processor contribut result thu ad processor correspondingli search direct actual slow pp method given fig 2 increas synchron penalti limit case slow object function evalu one never com plete could happen processor fail cours calcul situat entir program would hang next synchron point design algorithm handl failur play role discuss section given detail coverag next design app address limit slow fail object function evalu base peertop approach rather masterslav although masterslav approach advantag critic disadvantag although recoveri failur slave process easi automat recov failur master process peertop scenario process equal knowledg process charg singl direct search pattern order fulli understand app let us rst consid singl processor algorithm synchron pp peertop mode shown fig 3 subscript drop illustr process handl data set direct process form posit span set except initi naliz commun process peer global reduct step 2 termin processor detect converg time sinc ident albeit independ valu trial 4 asynchron peertop version pp see fig 4 allow process maintain version x best x trial etc unlik synchron pp valu may alway agre valu process process decid next base current inform avail nd point along search direct improv upon best point know far broadcast messag processor let know also check messag processor replac best point 4 heterogen environ danger processor may valu trial slight dierenc arithmet way valu store see 2 iter 1 comput x trial x best direct 2 determin f associ x via global reduct minim f trial valu comput step 1 3 f best fx best f best g fx g els trial 1 4 trial tol go step 1 els exit figur 3 peertop version synchron pp iter consid incom triplet fx receiv anoth processor best fx best f best best g fx trial best 1 comput x trial x best direct 2 g 3 f best fx best f best best g fx best broadcast new minimum triplet fx best f best best g processor els trial 1 4 trial tol goto step 0 els broadcast local converg messag pair fx best f best g 5 wait either enough process converg point b better point receiv case exit case b goto figur 4 peertop version app incom one improv neither trial point incom messag better perform contract continu converg trickier issu synchron version processor reach trial tol time instead processor converg direct own wait process either converg point produc better point sinc everi good point broadcast process everi process eventu agre best point nal app algorithm slightli dierent version fig 4 spawn object function evalu separ process motiv may sometim want stop object function evalu complet event good point receiv anoth processor creat group app daemon process follow basic app procedur outlin fig 4 except object function evalu execut separ process result app daemon work peertop mode own singl slave object function evalu process app daemon see fig 5 work primarili messag process center receiv three type messag return spawn object function evalu new minimum converg messag app daemon daemon receiv return messag determin current trial point new minimum broadcast point processor trial use gener new minimum save use determin far step along search direct altern would reset trial 0 everi time switch made new point scale inform lost may lead unnecessari addit function evalu comparison trial best fvalu encount import caveat heterogen comput 2 comparison valu f etc control ow app method depend comparison give consist result across processor therefor must ensur valu compar level precis avail processor word safe comparison declar mach mach maximum mach new minimum messag mean anoth processor found point think best receiv daemon must decid agre case must decid handl tiebreak consist manner f best need abl say point best inde point compar equal ie x best x tie break scheme follow f best compar best select larger valu valu also equal check next see inde two point rather compar x best x directli measur norm dierenc use uniqu identi includ point thu two point equal return object function evalu receiv f trial 1 updat x best andor trial f trial f best fx best f best best g fx trial f trial trial g ii broadcast new minimum messag triplet best f best best g processor b els x best point use gener x trial trial best c els trial 1 2 check converg spawn next object function evalu trial tol comput x trial x best trial spawn new object function evalu b els broadcast converg messag best f best best g processor includ new minimum messag receiv triplet fx g 1 f best best local converg ag true els ag fals b set fx best f best best g fx g c ag true break current object function evalu spawn comput x trial x best trial spawn new object function evalu converg messag receiv triplet triplet fx g 1 go though step new minimum sure point x best 2 temporari master consid process far converg x best enough process converg associ direct form posit span set output solut shutdown remain app daemon process exit figur 5 app daemon messag type action fvalu valu uniqu identi match 5 certain case current object function evalu termin favor start one base new best point imagin follow scenario suppos three process b c start valu x best gener x trial spawn object function evalu object function evalu take sever hour process nish object function evalu process nd improv contract spawn new object function evalu minut later process b nish object function evalu nd improv broadcast new minimum process process receiv messag termin current object function evalu process order move better point may save sever hour wast comput time howev process c still work rst object function evalu wait complet consid move new x best daemon receiv converg messag record converg direct possibl check converg design method requir daemon local converg point evalu least one trial point gener best point along search direct point associ boolean converg tabl sent everi messag process local converg add true entri spot converg tabl send converg messag order actual check converg sucient number process use temporari master avoid redund comput dene temporari master process lowest process id usual process 0 alway case consid fault discuss next section temporari master check see converg direct form posit span set output result termin entir comput check posit span set done follow let v candid posit basi solv nonneg least squar problem accord follow theorem theorem 31 set posit span set set posit span 1 vector 1s altern check posit basi rst verifi v span set use say qr factor pivot solv linear program theorem 32 wright 24 span set posit span set maximum follow lp 1 5 system miss two point equal gener via dierent path rst case use softwar nonneg least squar problem netlib due lawson hanson 14 second case softwar implement complic sinc need qr factor linear program solver latter particularli hard come freeli avail portabl easytous format 4 fault toler app move toward varieti comput environ includ heterogen distribut comput platform bring increas concern fault toler parallel algorithm larg size divers compon complex architectur system creat numer opportun hardwar failur comput experi conrm reason expect frequent failur addit size complex current simul code call question robust function evalu fact applic develop testifi possibl gener input paramet simul code fail complet success thu must contend softwar failur well hardwar failur great deal work done comput scienc commun regard fault toler howev much work focus make fault toler transpar user possibl often entail checkpoint entir state applic disk replic process fault toler tradit use looselycoupl distribut applic depend complet busi databas applic lack interdepend atyp scientic applic checkpoint replic adequ techniqu scientic applic incur substanti amount unwant overhead howev certain scientic applic characterist exploit ecient eleg fault toler algorithmdepend varieti fault toler alreadi receiv consider amount attent scientic comput commun see eg 11 12 approach reli primarili use diskless checkpoint signic improv tradit approach natur app even reduc overhead fault toler dispens checkpoint altogeth three scenario consid address fault toler app 1 failur function evalu 2 failur app daemon failur host scenario shown figur 6 approach handl daemon host failur similar one anoth function evalu failur treat somewhat dierent manner function evalu fail respawn parent app daemon failur occur speci number time trial point daemon fail 6 app daemon fail rst thing temporari master check converg sinc defunct daemon may process check die next check whether direct own remain daemon form posit basi converg still guarante noth done otherwis dead daemon restart host fail app daemon run host restart dierent host accord rule state daemon failur faulti host remov list viabl host longer use exit function evalu 1 number tri point less maximum allow number respawn function evalu 2 els shutdown daemon app daemon fail 1 record failur 2 temporari master check converg converg output result termin comput b direct correspond remain daemon form posit span set respawn fail daemon host fail 1 remov host list avail host figur toler messag action two import point made regard fault toler app first singl point failur app algorithm scenario requir master coordin eort master xed fail perform task anoth master step take mean degre fault toler app constrain underli commun architectur current implement app use pvm singl point failur master pvm daemon 9 expect har 1 successor pvm elimin disadvantag second point interest 6 situat handl dierent way dierent applic attempt evalu certain point could abandon without termin daemon checkpoint replic process necessari algorithm recongur new app daemon requir small packet inform exist process order take fail daemon left therefor abl take advantag characterist app order elegantli incorpor high degre fault toler littl overhead despit grow concern fault toler parallel comput world awar one parallel optim algorithm incorpor fault toler fatcop 3 fatcop parallel mix integ program solver implement use condorpvm hybrid commun substrat fatcop implement masterslav fashion mean singl point failur master process address master checkpoint inform disk via condor recoveri requir user intervent restart program event failur contrast app recov failur type process includ failur temporari master checkpoint whatsoev 5 numer result compar pp 7 app sever test problem well two engin problem thermal design problem circuit simul problem test perform cplant supercomput sandia nation lab livermor california cplant cluster dec alpha miata 433 mhz processor test use 50 node dedic sole use 51 standard test problem compar app pp 8 16 24and 32 processor six four dimension test problem broyden2a broyden2b chebyquad epowel toint trig vardim 18 5 sinc function evalu extrem fast ad extra busi work order slow better simul type object function interest 8 paramet app pp set follow let problem dimens let p number processor rst 2n search direct g remain p 2n direct vector randomli gener dierent seed everi run normal unit length set search direct posit span set initi 7 use implement posit basi pp outlin fig 3 rather wellknown parallel direct search pd 22 pd base posit basi framework quit dierent method describ fig 3 make comparison dicult 8 precis busi work solut 100 101 nonneg least squar problem ad two addit twist way updat test first search direct yield best point two time row doubl broadcast second smallest allow new minimum least three contract requir local converg way guarante sever evalu along search direct point method process function function init idl total id eval break time time time summari 2725 706 004 007 2472 summari 235 na 022 610 3063 tabl 1 detail result epowel eight processor consid summari result examin detail result two sampl run given tabl 1 process report count time time report second wall clock time app asynchron number function evalu vari process case much 25 furthermor app sometim break function midway execut hand everi process pp execut number function eval uation break app pp initi time longer rst process sinc charg spawn remain task idl time vari task task overal much lower app pp app process idl local converg pp process may potenti idl time everi iter wait complet global reduct total wall clock time vari process process sinc start stop slightli dierent time summari inform averag process except case total time case maximum time report search direct gener randomli everi run pp app gener dierent path solut possibl dierent solut case multipl minima 9 nondeterminist natur app get dierent result everi run even search direct ident therefor problem report averag summari result 25 run problem proc function eval app idl time total time name app pp break app pp app pp broyden2a 8 4059 3700 814 007 095 388 488 chebyquad 8 7306 6200 1674 005 161 686 811 toint trig 8 5383 4100 1097 004 111 499 560 tabl 2 result collect four dimension test problem test result summar tabl 2 test run fairli favor environ ppsa cluster homogen dedic processor 9 except pp 8 extra search direct solut path everi runonli time dier primari diculti pp cost synchron global reduct term averag function evalu per processor app pp requir number gener app pp number function evalu per processor decreas number process increas expect idl time app less pp inde idl time two order magnitud less furthermor idl time pp increas number processor goe app faster averag pp 22 24 case total time app either stay steadi reduc number processor increas contrast total pp time increas number processor increas due synchron penalti compar app pp simpl problem necessarili indic result typic engin problem next two subsect yield meaning comparison given type problem pattern search best suit 52 twafer thermal design problem engin applic concern simul thermal deposit furnac silicon wafer furnac contain vertic stack 50 wafer sever heater zone goal achiev speci constant temperatur across wafer throughout stack simul code twafer 10 yield measur discret collect point wafer object function f dene least squar n discret wafer temperatur j prescrib ideal x unknown power paramet heater zone consid four seven zone problem problem use follow set app pp rst n1 search direct point regular simplex center origin remain gener randomli normal unit length set diculti implement point view quit common deal simul code twafer legaci code expect input le specic name produc output le specic name name le chang twafer hook directli pvm consequ must write wrapper program run input lter execut twafer via system call run output lter input le twafer must contain entir descript furnac wafer chang valu within le input lter gener input le twafer use templat input le templat le contain token replac optim variabl output le twafer contain heat measur discret point output lter read valu comput least squar dierenc ideal temperatur order determin valu object function addit caveat twafer must execut uniqu name subdirectori input output le confus twafer process may access disk lastli twafer execut via system call app way termin execut prematur app termin wrapper program twafer continu run consum system resourc therefor allow function evalu run complet allow break anoth featur twafer nonneg constraint power set use simpl barrier function return larg valu eg problem method proc fx function idl total eval time time 4 zone app 20 067 3346 017 39594 4 zone pp 20 066 3799 4477 50388 tabl 3 result four seven zone twafer problem result twafer problem given tabl 3 four zone result averag ten run seven zone result averag nine run tenth pp run fail due node fault tenth app run sever fault although get nal solut summari data incomplet also list valu object function solut observ pp yield slightli better function valu compar origin valu 1000 averag cost function evalu time averag function evalu execut time four zone problem 13 second seven zone problem 104 second howev number function evalu includ instanc bound violat case twafer code execut execut time essenti zero sinc simpli return pp substanti amount idl time rel high app idl time seven zone problem due singl run idl time particularli high node 634 second averag 53 spice circuit simul problem problem match simul data experiment data particular circuit order determin characterist case 17 variabl repres induct capacit diod satur current transistor gain leakag induct transform core paramet object function dene n number time step v sim j x simul voltag time step input x v exp j experiment voltag time step j spice3 19 packag use simul like twafer spice3 commun via le input output use wrapper program input lter spice complic twafer variabl problem dierent scale sinc app mechan scale handl within input lter comput ane transform app variabl addit variabl upper lower bound use simpl barrier function output lter spice also complic twafer spice output le consist voltag match experiment data experiment data two cycl output voltag measur approxim fig 7 simul data contain approxim 10 cycl last complet cycl use earli cycl stabl cycl must automat identi data align experiment data furthermor time step simul may dier time step experi simul data interpol piecewis constant match experiment data function valu initi point 465 app paramet set follow search direct gener way test problem set toler correspond less 1 chang circuit paramet allow break sinc function evalu call wrapper program via system call result app pp spice problem report tabl 4 case report result singl run give result 34 50 processor averag spice run time approxim 20 second howev dierenti time boundari condit violat spice code actual execut increas number processor 47 result 39 reduct execut time app 4 pp 34 50 processor app faster pp even produc slightli better object valu compar start valu 400 solut two constraint bind 55time voltag figur 7 spice result solid line repres experiment output dash line repres simul output optim dot line repres start point optim method proc fx function idl total eval time time app 34 263 575 11192 133055 app 50 269 506 6322 80729 pp 34 288 530 52148 171224 pp 50 349 470 90548 164653 tabl 4 result 17 variabl spice problem initi final fx total proc proc time 34 34 278 161846 50 tabl 5 app result 17 variabl spice failur approxim everi second tabl 5 show result run app fault case use program automat kill one pvm process everi second pvm process app daemon wrapper program spice3 simul execut via system call continu execut even wrapper termin regardless spice3 program longer commun app eectiv dead result quit good case 34 processor everi app task fail must restart order maintain posit basi nal number app process 34 total time increas 21 despit approxim 50 failur furthermor time still faster pp case 50 processor nal number processor 32 recal task restart enough remain form posit basi case 50 processor solut time increas 29 still faster pp case howev qualiti solut degrad like due fact solut lie boundari search direct fail need converg see lewi torczon 17 6 conclus newlyintroduc app method superior pp term overal comput time homogen cluster environ gener test problem engin applic expect dierenc even pronounc larger problem term execut time number variabl heterogen cluster environ unlik pp app requir synchron thu gain advantag reduc idl time app fault toler see result spice problem 34 processor suer much slowdown case fault forthcom work kolda torczon 13 show unconstrain case app method converg even case fault assumpt pattern search 23 although engin exampl use work bound constraint app method fulli design purpos evidenc poor result spice problem fault 50 processor futur work explor algorithm implement theori constrain case implement describ daemon function evalu pair howev multiprocessor mpp comput node mean sever daemonfunct evalu pair per node altern implement app develop exactli one daemon per node regardless mani function evalu assign part altern implement abil dynam add new host becom avail readd previous fail host incorpor anoth improv implement addit function valu cach order avoid reevalu point challeng decid two point actual equal especi dicult without know sensit function chang variabl import posit base pattern rais sever interest research question first might consid best way gener start basi desir pattern maxim probabl maintain posit basi event failur anoth research area aect condit posit basi converg numer studi indic qualiti posit basi may issu last suppos enough failur occur longer posit basi may ask easili determin fewest number vector add posit basi current implement simpli restart fail process acknowledg thank jim kohl ken marx juan meza help comment advic implemen app test problem r har next gener distribut virtual machin practic experi numer danger heterogen comput fatcop fault toler condorpvm mix integ program solver converg numer result parallel asynchron quasinewton method test class method solv minim problem simpl bound variabl theori posit linear depend asynchron parallel newton method pvm parallel virtual machin user guid tutori network parallel comput model low pressur chemic vapor deposit hotwal tubular reactor converg asynchron parallel direct search solv least squar problem pattern search work rank order posit base pattern search algorithm build beowulf guid implement applic pc cluster pd direct search method unconstrain optim either sequenti parallel machin note posit span set tr ctr genetha gray tamara g kolda algorithm 856 appspack 40 asynchron parallel pattern search derivativefre optim acm transact mathemat softwar tom v32 n3 p485507 septemb 2006 ismael vaz lu n vicent particl swarm pattern search method bound constrain global optim journal global optim v39 n2 p197219 octob 2007 steven benson manojkumar krishnan loi mcinn jarek nieplocha jason sarich use ga tao toolkit solv largescal optim problem parallel comput acm transact mathemat softwar tom v33 n2 p11e june 2007 genetha ann gray tamara g kolda ken sale malin young optim empir score function transmembran protein structur determin inform journal comput v16 n4 p406418 fall 2004 jack dongarra ian foster geoffrey fox william gropp ken kennedi linda torczon andi white refer sourcebook parallel comput morgan kaufmann publish inc san francisco ca