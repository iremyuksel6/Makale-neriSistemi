simpl objectbas view multiprogram objectbas sequenti program major impact softwar engin howev objectbas concurr program remain elus effect program tool class applic implement futur highbandwidth network processor significantli ambiti current applic mostli involv transmiss digit data imag objectbas concurr program potenti simplifi design applic mani program concept develop databas objectori program design reactiv system unifi compact model concurr program serv foundat design futur applic propos model multiprogram disciplin program address issu reason eg understand effici implement major point departur disentangl sequenti multiprogram featur propos spars model multiprogram distinguish two form comput allow disciplin interact b introduct objectbas sequenti program major impact softwar engin ing howev objectbas concurr program remain elus eectiv program tool class applic implement futur highbandwidth network processor signicantli ambiti current applic mostli involv transmiss digit data imag objectbas concurr program potenti simplifi design applic mani program concept develop databas objectori program design reactiv system uni compact model concurr program serv foundat design futur applic 11 motiv research multiprogram tradit attempt reconcil two appar contradictori goal 1 possibl understand modul eg process data object isol without consider interfer modul 2 possibl implement concurr thread ne level granular process ever lock access common data long period time goal con ict ne granular gener impli consider interfer earliest multiprogram see instanc solut mutual exclus problem dijkstra 8 trivial small imposs dicult understand behavior individu process could understood isol possibl interact among process analyz explicitli sinc much eort gone limit even elimin interfer among process employ varieti synchron mechan lock semaphor critic region monitor messag commun constrain program model specic protocol binari semaphor messag commun bound channel instanc prove shortsight design complex applic gener mechan interact among modul includ specic protocol requir fur ther distribut applic futur essenti devis model distinct comput commun remov particular method design reason interfac dierent employ comput node network 12 seuss develop model multiprogram call seuss seuss foster disciplin program make possibl understand program execut singl thread control yet permit program implement multipl thread consequ possibl reason properti simpl objectbas view multiprogram 281 program singl execut thread wherea implement spe cic platform eg share memori messag commun system may exploit inher concurr appropri central theorem establish multipl execut thread implement singl execut thread ie interleav execut action exist noninterleav execut action establish ident nal state start initi state major point departur seuss builtin concurr commit either share memori messagepass style implement commun synchron mechan except procedur call built model particular notion inputoutput complementari natur rendezvousbas commun 9 17 outsid model distinct comput commun process specic interfac specic distinguish consequ mani tradit multiprogram concept process lock rendezv wait interfer deadlock basic concept model yet typic multiprogram employ messag pass bound unbound channel encod seuss declar process channel compon program similarli share memori multiprogram encod process memori compon seuss permit mixtur either style program varieti dierent interact mechan semaphor critic region 4phase handshak etc encod compon seuss propos complet disentangl sequenti concurr aspect program expect larg section code written understood reasonedabout sequenti program view multiprogram way orchestr execut sequenti program specifi condit program execut typic sever sequenti program execut simultan yet guarante execut would noninterf henc program may regard atom propos ecient implement scheme user direct interleav individu sequenti program ne granular without caus interfer 2 seuss program model seuss program model spars program built cat cat short categori box cat built procedur cat similar mani way processclassmonitor type cat denot type box instanc cat box local state includ procedur local state access updat procedur box may call upon procedur box cat use encod process well commun protocol process interact therefor necessari develop methodolog program understand cat compon procedur propos two distinct kind procedur model termin potenti nontermin comput repres comput waitfre program multiprogram respect former assign semant preand postcondit ie base possibl input correspond output without consider interfer environ multiprogram ever given pre postcondit semant ongo interact environ essenc distinguish two type comput use two dierent kind procedur total procedur never wait unbound amount time interact environ wherea partial procedur may wait possibl forev interact view p oper semaphor partial procedur may never termin wherea v oper total procedur total procedur model waitfre transform aspect program partial procedur model con current reactiv aspect programming15 program model includ wait fundament concept therefor partial procedur wait reject call thu preserv program state next elabor main concept total partial procedur cat program 21 total procedur total procedur assign mean base input output procedur start state satis input specic termin eventu state satis output specic procedur sort list nd minimum span tree graph send job unbound printqueu exampl total procedur total procedur need determinist eg minimum span tree could return procedur furthermor total procedur need implement singl processor eg list may sort sort network1 instanc data parallel program synchron comput scheme usual total procedur total procedur may even multiprogram model admit asynchron execut provid guarante termin eect understood input output therefor procedur never wait receiv input instanc exampl total procedur interact environ one send job printqueu without wait job may process environ procedur continu execut almost total procedur shown manuscript sequenti program total procedur may call total procedur total procedur call certain paramet given state may 1 termin normal 2 fail 3 execut forev failur caus program error occur procedur invok state invok instanc comput requir number divid 0 natur number reduc 0 failur gener program issu issu seuss multiprogram interpret failur mean result state arbitrari step taken fail state result fail state typic hardwar softwar trap termin program failur occur simpl objectbas view multiprogram 283 nontermin total procedur also result program error expect programm establish procedur invok state execut nite 22 partial procedur rst consid simpl form partial procedur g p precondit h preprocedur bodi procedur precondit predic state box g belong preprocedur name partial procedur anoth box preprocedur option bodi consist local comput aect state gs box call total procedur box partial procedur call anoth partial procedur preprocedur partial procedur accept reject call made upon partial procedur form p preprocedur absent accept call whenev hold partial procedur g form accept call pre condit p hold preprocedur h accept call made g impos addit restrict program structur denit wellfound call accept bodi procedur execut potenti chang state box return comput valu paramet call reject procedur bodi execut state chang caller made awar outcom call case call made g h reject caller g also reject call made upon call h accept g accept call execut bodi sens partial procedur dier fundament total one call accept latter case exampl partial procedur p oper semaphor get oper printqueu perform printer call upon p accept semaphor valu nonzero get printqueu nonempti observ whenev call reject caller state chang whenev call accept procedur form bodi preprocedur h execut execut procedur bodi requir execut bodi termin whenev partial procedur g accept call altern introduc gener bodi partial procedur consist one altern altern form describ previous partial procedur altern posit neg rst altern posit altern preced j posit one preced j neg precondit one altern partial procedur hold state ie precondit pairwis disjoint rule execut partial method altern follow partialmethod accept reject call accept call one 284 jayadev misra posit altern accept call reject call otherwis altern posit neg accept call given state follow altern form p accept call p hold bodi execut control return caller altern form accept call provid p hold h accept call made procedur use rule sinc h also partial procedur upon complet execut h bodi execut control return caller thu altern reject call precondit hold preprocedur provid present reject call note sinc precondit one altern partial procedur hold given state one altern accept call altern accept call call reject follow state caller box unchang whenev call reject though state call box may chang neg altern may accept call altern essenti program concurr system neg altern especi use code strong semaphor instanc 23 method action procedur either method action action execut autonom innit number time tight program execut see section 241 method execut autonom call anoth procedur declar procedur indic partial total action method exampl semaphor ubiquit concept multiprogram semaphor cat semaphor var n nat init 1 finiti semaphor valu 1g partial method p n total method v n binari semaphor may encod similarli except v fail n 6 0 prior execut next show small exampl employ semaphor let two instanc semaphor declar cat user shown execut critic section hold releas semaphor upon complet critic section code user deal access shown boolean variabl hs ht true user hold semaphor respect cat user var hs ht boolean init fals simpl objectbas view multiprogram 285 partial action acquir hs sp hs true partial action acquir ht tp ht true partial action execut solut permit acquir arbitrari order necessari acquir specic order say rst precondit action acquir chang hs ht 24 program program consist nite set box cat instanc restrict manner procedur call procedur procedur execut time belong dierent box impos condit partial order box ensur restrict denit procedur p q write p call q mean execut p call made q let call transit closur call call exiv transit closur call dene relat call p procedur oper term x call p mean procedur x call procedur execut procedur p program requir satisfi follow condit partial order box everi procedur p impos partial order p box execut p procedur box b call procedur box b 0 made procedur higher box lower box note observ p exiv p irr exiv observ 1 follow observ 1 procedur part callchain belong dierent box observ 2 call acycl ie irr exiv asymmetr transit relat procedur denit program contrast usual view process network process commun messag share common mem ori typic network regard partial order instanc suppos process p send messag channel chp process q 286 jayadev misra q send chq p process view node cycl edg channel chp chq direct p q q p respect repres direct messag ow similar remark appli process commun share memori view commun media messag channel memori box therefor would repres system describ set four box p q chp chq procedur chp chq call p q respect direct messag ow immateri hierarchi matter p q call upon chp chq though chp chq call upon p q partial order extrem use deduc properti induct level procedur restrict procedur call made along partial order impli partial procedur lowest level consist one altern form preprocedur absent bodi contain procedur call total procedur lowest level contain procedur call 241 program execut prescrib execut style program call tight execut tight execut consist innit number step step action box chosen execut action call upon pre procedur accept call preprocedur rst execut follow execut action bodi action call upon preprocedur reject call state caller chang choic action execut step arbitrari except follow fair constraint action box chosen eventu tight execut easi understand execut action complet anoth action start procedur total partial may understood text alon given mean procedur call without consider interfer procedur simpl tempor logic unitylog 19 18 suitabl deduc properti program execut model later show program may implement multipl asynchron processor ne grain interleav action preserv semant tight execut simpl objectbas view multiprogram 287 3 small exampl number small exampl treat section goal show typic multiprogram exampl literatur succinct represent seuss addit small number featur seuss adequ solv mani wellknown problem commun bound unbound channel mutual exclus synchron show number variat exampl implement variou progress guarante instanc oper argument program behavior use tight execut program dene section 241 31 channel unbound channel unbound fo channel cat two method put ie send total method append element end messag sequenc get ie receiv partial method remov return head element messag sequenc provid nonempti dene polymorph version channel messag type left arbitrari method put use assign denot concaten cat fifochannel type var r seq type init hi finiti r emptyg partial method getx type r total method putx type r r x end ffifochannel type g instanc cat may interpos set sender set receiv unord channel fo channel guarante order deliveri messag order arriv next consid unord channel return messag channel respons call get channel nonempti channel implement bag get implement nondeterminist oper write x 2 b denot x assign valu bag b provid b nonempti usual notat set oper use bag follow exampl cat uch type var b bag type init fg finiti b emptyg partial method getx type b 6 fg x 2 b b b fxg total method putx type b b fxg end fuch typeg channel guarante everi messag eventu deliv given messag remov bag unbound number time 288 jayadev misra guarante cours establish fo channel propos solut implement addit guarante solut everi messag assign index natur number variabl less equal smallest index messag assign index strictli exceed whenev put channel indic need distinct get method remov messag smallest index updat cat nch type var b bag index nat msg type init fg finiti b emptyg nat init 0 nat type partial method getx type remov pair minimum index b x total method putx type natur number strictli exceed end fnch typeg show everi messag eventu remov given unbound number call get messag index show pair p p number messag index decreas lexicograph execut get never increas henc eventu impli messag remov execut put aect p ad messag receiv index higher thu p chang get either increas thu decreas keep decreas p thu decreas p 32 broadcast show cat implement broadcaststyl messag commun process call writer attempt broadcast sequenc valu set n process call reader introduc cat broadcast writer write next valu reader read structur cat follow intern valu broadcast store variabl v n count number reader read v read write partial method precondit write counter n equal n ie reader read current valu precondit read particular reader read current valu v implement precondit read associ sequenc number valu store v sucient 1bit sequenc number boolean variabl altern bit protocol commun faulti channel 21 read oper boolean argument last sequenc number read reader match reader alreadi read valu henc call upon read reject dier reader allow read valu n updat binari sequenc number revers whenev new valu written v easi show n equal number reader whose svalu equal simpl objectbas view multiprogram 289 cat tvalu initi local variabl reader true follow denit n paramet cat cat broadcast data partial method read boolean x data partial method writex data end fbroadcast datag 33 barrier synchron problem solut section due rajeev joshi10 barrier synchron process group concurr execut process perform comput sequenc stage requir process begin comput th stage process complet k th stage k 0 propos cat includ partial method sync call process order start comput next stage call accept process complet stage process complet caller may advanc next stage problem descript see point execut user complet execut upto stage k user may execut may complet stage k 1 k k 0 initi problem broadcast user boolean barrier boolean maintain invari user mean user yet enter stage k 1 n number ticket holder box user var boolean init true partial action next phase box barrier boolean init true partial method sync boolean 34 reader writer consid classic reader writer problem 7 common resourc say le share among set reader process writer process number reader may simultan access le writer need exclus access follow solut includ two partial method startread startw rite reader writer gain access resourc respec tive upon complet access reader releas lock call total method endread writer call endw rite assum throughout read write oper nite ie accept startread eventu follow endread startw rite endw rite employ paramet n solut indic maximum number reader permit simultan access resourc n may set arbitrarili high permit simultan access reader follow solut base upon one section 610 5 use pool token initi n token reader need 1 token writer n token proceed follow mani n reader could activ simultan one writer access resourc time upon complet access reader writer return token hold 1 reader n writer pool follow program n number avail token cat readerwrit partial method startread n partial method startw rite total method endread n total method endw rite n n solut given make guarante progress either reader writer next solut guarante reader perman overtak writer wait writer writer gain access resourc eventu strategi follow boolean variabl w riteattempt set true use neg altern call upon startw rite reject w riteattempt hold call startread reject thu new reader allow start read reader eventu stop read next call startw rite succeed cat readerwriter1 partial method startread n partial method startw rite total method endread n total method endw rite n n w riteattempt fals next solut guarante progress reader writer similar previou solut introduc boolean variabl readattempt analog w riteattempt howev analysi consider complic case outlin oper argument progress guarante simpl objectbas view multiprogram 291 cat readerwriter2 partial method startread partial method startw rite total method endread n total method endw rite n n w riteattempt fals show w riteattempt ever true eventu falsi assert write oper complet eventu ie endw rite call similarli readattempt ever true eventu falsi prove rst result consid state w riteattempt set true note initi w riteattempt fals sinc n 6 n precondit assign either read write oper underway latter case write eventu complet call endw rite thu set w riteattempt fals w riteattempt set read underway call startread accept success call endread eventu establish hold method startw rite execut state none altern startread accept call upon endread endw rite made read write oper underway therefor call upon startw rite accept later follow call upon endw rite argument eventu falsic readattempt similar precondit assign readattempt true impli either n reader read write oper underway former case reader allow join upon complet read reader readattempt set fals latter case upon complet write endw rite call execut establish riteattempt method startread execut state reader succe execut startread eventu execut endread thu falsifi readattempt 35 semaphor binari semaphor often call lock typic associ resourc process exclus access resourc hold correspond semaphor process acquir semaphor complet p oper releas semaphor execut v regard p partial method v total method tradit semaphor weak strong depend guarante made eventu success ie accept individu call p weak semaphor guarante made success particular process matter mani time attempt p though assert call p accept semaphor avail thu specic process may starv never grant semaphor even though anoth process may hold arbitrarili mani time strong semaphor avoid individu process starvat semaphor avail innit often eventu acquir process attempt p oper discuss type semaphor show variat restrict binari semaphor case extens gener semaphor straightforward 351 weak semaphor follow cat describ weak binari semaphor cat semaphor var avail boolean init true finiti semaphor availableg partial method p avail avail fals total method v avail true typic call pattern semaphor shown box user partial action c sp use resourc associ sv f action boxg usual precondit c becom true remain true process acquir semaphor requir seuss howev c remain true describ 352 strong semaphor strong semaphor guarante absenc individu starvat seuss terminolog cat contain partial action form precondit c remain true long sp accept strong semaphor sp eventu accept follow cat implement strong semaphor call upon p includ process id paramet pid type process id procedur p add caller id queue q id q grant semaphor caller provid semaphor avail caller id head queue cat strongsemaphor var q seq pid init hi avail boolean init true finiti semaphor availableg partial method pi pid simpl objectbas view multiprogram 293 total method v avail true observ way neg altern employ record caller id reject call sequenc q may replac fair bag done unord channel nch note call upon p reject even queue empti semaphor avail straightforward add altern grant semaphor case process request semaphor persist caller call p oper innit often long acquir semaphor otherwis transient caller solut strong semaphor work caller persist transient caller block caller acquir semaphor unfortun exist solut case guarante everi persist caller eventu acquir semaphor given everi holder semaphor eventu releas presenc transient callers11 reason compromis add new total method strong semaphor cat transient caller may call remov process id queue caller 353 snoopi semaphor tradit semaphor associ resourc rst acquir process execut p resourc use semaphor releas execut v consid variat tradit model resourc releas unless outstand request resourc process appropri strategi low content resourc process may use resourc long requir other describ new kind semaphor call snoopysemaphor show use solv problem later section employ snoopi semaphor solv multipl resourc alloc problem starvationfre fashion adopt strategi process use resourc snoop see demand time time demand releas semaphor otherwis may continu access resourc weak snoopi semaphor shown add new method snoop semaphor cat thu snoopysemaphor three method p v method p v mean tradit semaphor process attempt acquir semaphor call partial method p releas call v partial method accept last call upon p process reject process typic call use resourc least releas semaphor accept follow solut boolean variabl b set fals whenev call p accept set true whenev call p reject thu b fals process acquir semaphor subsequ detect b true semaphor demand cat snoopysemaphore1 var b boolean init fals avail boolean init true finiti semaphor availableg partial method p total method v avail true partial method b skip propos solut implement weak snoopi semaphor guarante specic process ever acquir semaphor next solut similar strongsemaphor sinc solut alreadi maintain queue process id whose call p reject implement simpli cat strongsnoopysemaphor var q seq pid init hi avail boolean init true finiti semaphor availableg partial method pi pid total method v avail true partial method q 6 hi skip simpl objectbas view multiprogram 295 4 distribut implement thu far consid program execut action complet anoth one start section 241 dene tight execut seuss program innit sequenc step step consist execut action box choic action arbitrari except action box chosen eventu model execut chosen make program easier consid anoth execut model loos execut execut action may interleav loos execut exploit avail concurr restrict loos execut manner loos execut may simul tight execut crucial loos execut notion compat among action set action pairwis compat execut noninterf concurr execut equival serial execut action precis denit compat central theorem establish correspond loos tight execut treat section 44 note compat weaker notion commut hold put get channel see section 44 oper semaphor instanc first describ multiprocessor implement schedul may initi sever compat action concurr execut also describ gener schedul strategi problem implement schedul strategi uniprocessor well multiprocessor dene notion compat state fundament reduct theorem establish correspond loos tight execut 41 outlin implement strategi implement consist 1 schedul decid action may next schedul execut 2 processor carri actual execut action box program partit among processor processor thu manag set box respons execut action box criterion partit box processor arbitrari though heurist may employ minim messag transmiss among processor schedul repeatedli choos action execut choic constrain requir compat procedur may execut concurr fair requir schedul send messag correspond processor start execut action processor start execut action upon receiv messag sched uler may call upon method processor send messag wait respons call includ valu procedur paramet part messag guarante call elicit respons either accept reject accept respons sent call accept alway case call upon total method paramet valu return respons reject respons possibl call upon partial method paramet valu accompani respons 42 design schedul follow abstract captur essenc schedul problem given nite undirect graph graph need connect vertex graph black white vertic initi white abstract vertex denot action black vertex execut action two vertic neighbor incompat given e everi black vertex becom white eventu step taken environ control requir devis color schedul strategi neighbor simultan black ie compat action may execut simultan s2 everi vertex becom black innit often thu ensur fair note schedul blacken vertic may whiten vertex simpl schedul strategi blacken singl vertex wait environ whiten blacken anoth vertex strategi implement trivial one black vertex time s2 may ensur blacken vertic xed roundrobin order protocol howev defeat goal concurr execut impos addit requir schedul strategi maxim allow valid concurr execut action innit sequenc satis es1s2 possibl execut schedul maxim schedul gener schedul execut anoth schedul possibl execut maxim schedul suitabl renement maxim sched uler deriv central schedul distribut schedul see 12 formal denit maxim condit schedul strategi assign natur number call height vertex let xh denot height vertex x maintain invari neighbor dierent height invari neighbor xh 6 yh vertex x xlow hold height x smaller neighbor ie xlow 8y x neighbor xh yh write vblack denot v black given state schedul strategi simpl objectbas view multiprogram 297 c1 consid vertex v blacken eventu vblackvlow hold blacken v c2 simultan whiten vertex v environ increas vh preserv invari shown 12 schedul strategi satis s1s2 maxim sens describ previous 43 implement schedul strategi 431 central schedul central schedul implement given strategi may oper follow schedul scan vertic blacken vertex hold eect blacken send messag appropri processor specifi select action may execut upon termin execut action messag sent schedul schedul whiten correspond vertex increas height ensur two neighbor height schedul may scan vertic order everi vertex must consid eventu requir c1 implement may improv maintain set l vertic white low ie l contain vertic v vblack vlow hold schedul blacken vertex l remov l whenev vertex x whiten height increas schedul check x neighbor determin vertic qualifi inclus l vertex quali ad l guarante everi vertex l eventu scan remov one way keep l list addit done rear delet front observ vertex l remain white low blacken 432 distribut schedul propos schedul strategi distribut vertex blacken eventu white low vertic commun messag special form call token associ edg x token token valu posit integ valu token x jxh yhj token held either x whichev smaller height follow descript vertex hold incid token height smaller neighbor vertex white may color black vertex upon becom white increas height 0 eectiv reduc valu incid token note vertex hold incid token henc alter valu quantiti dierent token valu neighbor height ie token valu becom zero vertex height increas token x ys valu becom neg result reduc indic holder x greater height x reset token valu absolut valu send token observ vertic need queri height token eventu sent vertex lower height also sinc token valu dierenc height neighbor possibl bound token valu wherea vertex height unbound cours computa tion initi token valu comput token place appropri base height vertic need keep vertex height explicitli left open question vertex height increas whiten requir neighbor never height particularli interest scheme increas vertex height beyond neighbor height whenev whiten amount send incid token neighbor vertex whiten strategi token valu immateri white vertex blacken hold incid token upon whiten vertex send incid token neighbor assum edg x direct tokenhold x graph initi acycl blacken whiten move preserv acycl strategi employ solv distribut dine philosoph problem chandi misra 4 black vertex eat white vertex hungri constraint s1 amount wellknown requir neighbor philosoph eat simultan current problem counterpart think state ad slight complic solut 4 token call fork solut describ section 41 action vertic partit among group processor distribut schedul strategi modi slightli step prescrib vertic taken processor behalf constitu action messag transmiss among vertic processor simul simpl manipul data structur processor 44 compat loos execut program allow compat action execut si multan section give denit compat state reduct theorem say eect loos execut may simul tight execut execut dierent action interleav expect user specifi compat relat procedur within box compat relat among procedur comput e cientli denit given state box given valu variabl state program given box state procedur partial total associ binari relat program state inform u v 2 p program state denot tight execut p move state system u v follow concaten procedur name simpl objectbas view multiprogram 299 correspond relat product string x write x denot relat correspond x subset relat correspond procedur p q compat denot p q follow condit hold observ symmetr relat c1 p q box p total qp pq q total pq qp c2 p q dierent box transit closur relat partial order box condit c0 requir procedur call compat procedur compat condit wellground p call condit c1 say p q box eect execut partial procedur total procedur simul execut revers order condit c2 say compat procedur impos similar ie noncon ict partial order box note 1 procedur paramet compat check possibl valu paramet 2 partial procedur box alway compat 3 total procedur p q box compat provid exampl compat consid unbound fo channel section 31 show get put ie x getx puti puti getx note pair state u v u repres empti channel belong relat getx nal state given valu x r ident preced argument show two procedur dierent box call put get ie sender receiv may execut concurr sinc get get denit multipl receiv may also execut concurr howev case put put fo channel sequenc append pair item dierent order result dierent sequenc therefor multipl sender may execut concurr 300 jayadev misra lemma 1 let p q p total p q may belong box qp pq crucial lemma establish reduct theorem given lemma permit total procedur p move left procedur compat strategi employ bring compon singl procedur togeth therebi convert loos execut tight execut observ result tight execut establish ident nal state start initi state origin loos execut therefor properti loos execut may deriv tight execut proof follow theorem see chapter 10 20 reduct theorem let e denot nite loos execut set ac tion exist tight execut f action e f simpl objectbas view multiprogram 301 5 conclud remark tradit multiprogram consist process execut autonom typic process receiv request process may call upon process data commun synchron interact mechan share memori messag pass broadcast etc dene platform suitabl implement specic multiprogram seuss model view multiprogram set action action deal one aspect system function execut action waitfre addit specifi condit action execut typic action oper system may includ one garbag collect respons devic failur post appropri warn initi commun receiv request instanc process control system avion telephoni may contain action process receiv data updat intern data structur output display archiv record seuss view multiprogram regard 1 code actionbodi 2 specifi condit actionbodi execut dier markedli convent view consid justifi dierenc first seuss insist program execut understood singl thread control avoid interleav execut actionbodi simpler understand singl thread formal understand within logic implement howev need restrict singl thread long achiev eect singlethread execut show implement may exploit structur seuss program user suppli direct run concurr thread consequ singl thread notion wait abandon thread aord wait anoth thread whose execut termin wait rendezvousbas interact 9 17 requir least two thread control meaning abandon model execut replac wait refus procedur execut instanc call upon p oper semaphor could caus caller wait replac call reject semaphor appropri state caller attempt call repeatedli ensu execut second cat mechan group relat action process though tradit process may encod cat done multiplex databas cat use encod protocol communi cation synchron mutual exclus use encod object objectori program method commun among cat procedur call much like program methodolog base remot procedur call minim model make possibl develop simpl theori program third seuss divid multiprogram world 1 program action bodi whose execut waitfre 2 specifi condit orchestr execut action bodi dierent theori program methodolog appropri two task particular action bodi sequenti program tradit sequenti program methodolog may adopt develop orchestr action employ multiprogram theori larg independ actionbodi seuss address design aspect multiprogram ie combin action design actionbodi separ sequenti multiprogram featur also advoc brown et al 3 fourth seuss sever restrict amount control avail programm multiprogram level compon action program execut innit repetit particular sequenc two action implement explicitli loss exibl expect control larger abstract analog observ machin languag offer complet control aspect machin oper instruct may treat data data type may ignor entir control ow may alter arbitrarili exibl appropri piec code short human eye follow arbitrari jump mistreat data explain away comment flow chart particularli use unravel intent short tangl piec code higher level control structur sequenti program typic limit sequenti composit altern repetit arbitrari jump nearli vanish highlevel program flow chart limit valu level program intric manipul danger attempt higher level prudent programm limit appropri program methodolog order avoid danger expect rule combin becom even simpler multiprogram level propos compon action multiprogram execut use form repeat nondeterminist select work incorpor idea serializ atom databases2 notion object inheritance16 commun sequenti processes9 io automata14 tempor logic actions13 partial procedur similar databas nest transact may commit abort procedur commit execut precondit hold preprocedur commit abort otherwis typic abort databas transact requir rollback valid state seuss partial procedur chang program state commit therefor need rollback form partial procedur inspir commun sequenti processes9 model may view special case csp disallow nest partial procedur seuss outgrowth earlier work uniti 5 uniti program consist statement may chang program state program execut start speci initi state statement program chosen execut nondeterminist fashion subject fair rule statement chosen eventu uniti statement particularli simpl assign program variabl model allow program abstract besid asynchron composit program seuss attempt simpl objectbas view multiprogram 303 build composit model multiprogram retain advantag uniti action similar statement though expect action much larger size ad structur uniti distinguish total partial procedur impos hierarchi cat execut action indivis unit would extract heavi penalti perfor manc therefor develop theori permit interleav execut action program uniti interact oper share data space seuss cat howev share data interact procedur call sens cat may share cat uniti issu deadlock starvat progress live etc treat make assert sequenc state everi execut also uniti program termin basic concept program reach xed point precondit action fals execut program chang state implement may termin program execut reach xed point develop simpl logic uniti recent devel opment see 19 18 6 applic seuss well acknowledg profoundli grate rajeev joshi provid number idea lead formul concept compat reduct theorem mani idea paper develop discuss lorenzo alvisi adam calvin lin also indebt particip marktoberdorf summer school 1998 particularli toni hoar interact 304 jayadev misra r sort network applic concurr control recoveri databas system languag speci drink philosoph problem parallel program design foundat toward composit speci concurr control reader writer solut problem concurr program control commun sequenti process person commun imposs robust solut fair resourc alloc maxim concurr program tempor logic action introduct inputoutput automata tempor logic reactiv concurr system commun concurr logic concurr program progress logic concurr program safeti disciplin multiprogram note reliabl fullduplex transmiss halfduplex link tr drink philosoph problem commun sequenti process concurr control recoveri databas system tempor logic reactiv concurr system tempor logic action objectori softwar construct 2nd ed concurr control myampersandldquoreadersmyampersandrdquo myampersandldquowritersmyampersandrdquo note reliabl fullduplex transmiss halfduplex link solut problem concurr program control disciplin multiprogram commun concurr maxim concurr program imposs robust solut fair resourc alloc ctr emil sekerinski verif refin finegrain actionbas concurr object theoret comput scienc v331 n23 p429455 25 februari 2005