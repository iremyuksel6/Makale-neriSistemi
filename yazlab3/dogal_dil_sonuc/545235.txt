use userlevel memori thread correl prefetch paper introduc idea use userlevel memori thread ulmt correl prefetch approach user thread run generalpurpos processor main memori either memori control chip dram chip thread perform correl prefetch softwar send prefetch data l2 cach main processor approach requir minim hardwar beyond memori processor correl tabl softwar data structur resid main memori main processor need modif l2 cach accept incom prefetch addit approach wide usabl effect prefetch even irregular applic final flexibl prefetch algorithm custom user applic basi simul result show new design correl tabl prefetch algorithm scheme deliv good result specif nine mostlyirregular applic show averag speedup 132 furthermor scheme work well combin convent processorsid sequenti prefetch case averag speedup increas 146 final exploit custom prefetch algorithm increas averag speedup 153 b introduct data prefetch popular techniqu toler long memori access latenc past work data prefetch focus processorsid prefetch 6 7 8 12 13 14 15 19 20 23 25 26 28 29 approach processor engin cach hierarchi issu prefetch request interest altern memorysid prefetch engin prefetch data processor main memori system 1 4 9 11 22 28 memorysid prefetch attract sever reason first elimin overhead state bookkeep prefetch request introduc path main processor cach second support modif control l2 cach modif main pro cessor third prefetch exploit proxim memori advantag exampl store state memori fi nalli memorysid prefetch addit attract ride technolog trend increas chip integr inde popular platform like pc equip graphic engin memori system 27 chipset like nvidia nforc even integr power processor north bridg chip 22 simpler work support part nation scienc foundat grant ccr9970488 eia0081307 eia0072102 che0121357 darpa grant f3060201c0078 michigan state univers gift ibm intel hewlettpackard engin provid prefetch exist graphic processor augment prefetch capabl moreov propos integr process logic dram chip iram 16 unfortun exist propos memorysid prefetch engin narrow scope 1 9 11 22 28 inde design hardwar control perform simpl specif oper 1 9 22 design special engin customdesign prefetch link data structur 11 28 instead would like engin usabl wide varieti workload offer flexibl use programm memorysid prefetch support varieti prefetch algorithm one type particularli suit correl prefetch 1 6 12 18 26 correl prefetch use past sequenc refer miss address predict prefetch futur miss sinc program knowledg need correl prefetch easili move memori side past correl prefetch support hardwar control typic requir larg hardwar tabl keep correl 1 6 12 18 case one control place l1 l2 cach processor l1 effect approach high hardwar cost fur thermor often unabl prefetch far ahead enough deliv good prefetch coverag paper present new scheme correl prefetch perform userlevel memori thread ulmt run simpl generalpurpos processor memori processor either memori control chip dram chip prefetch line l2 cach main processor scheme requir minim hardwar support beyond memori pro cessor correl tabl softwar data structur resid main memori main processor need modif l2 cach control accept incom prefetch moreov scheme wide usabl effect prefetch even irregular applic final flexibl prefetch algorithm execut ulmt custom programm applic basi use new design correl tabl correl prefetch algorithm scheme deliv averag speedup 132 nine mostlyirregular applic furthermor scheme work well combin convent processorsid sequenti prefetch case averag speedup increas 146 fi nalli exploit custom prefetch algorithm increas averag speedup 153 paper organ follow section 2 discuss memorysid correl prefetch section 3 present ulmt correla possibl locat memori processor chip north bridg memori cpu proc main mem proc mem main memori system 2 lookup 2 repli 3 prefetch j k 1 fetch b proc main mem proc mem main memori system 1 execut 2 fetch 3 prefetch 3 repli c figur 1 memorysid prefetch locat memori processor place action push passiv b push activ c prefetch tion prefetch section 4 discuss evalu setup section 5 evalu design section 6 discuss relat work section 7 conclud 2 memorysid correl prefetch 21 memorysid prefetch memorysid prefetch occur prefetch initi engin resid either close main memori beyond memori bu insid 1 4 9 11 22 28 manufactur built engin typic simpl hardwir control probabl recogn simpl stridebas sequenc prefetch data local buffer exampl nvidia dasp engin north bridg chip 22 intel prefetch cach i860 chipset paper propos support memorysid prefetch userlevel thread run generalpurpos core core simpl need support float point illustr purpos figur 1a show memori system pc core place differ place north bridg memori control chip dram chip place north bridg simplifi design dram modi fie moreov exist system alreadi includ core north bridg graphic process 22 could potenti reus prefetch place core dram chip complic design result highlyintegr system lower memori access latenc higher memori bandwidth paper examin perform potenti design memori processorsid prefetch push pull ondemand prefetch 28 respect push prefetch occur prefetch data sent cach processor request pull prefetch opposit clearli memori prefetch act pull prefetch simpli buffer prefetch data local suppli processor demand 1 22 gener howev memorysid prefetch interest perform push prefetch cach processor hide larger fraction memori access latenc memorysid prefetch also classifi passiv ac tive passiv prefetch memori processor observ request main processor reach main memori base examin intern state memori processor prefetch data main processor expect latter need futur figur 1b activ prefetch memori processor run abridg version code run main processor execut code induc memori processor fetch data main processor need later data fetch request also sent main processor figur 1c paper concentr passiv push memorysid prefetch l2 cach main processor memori processor aim elimin l2 cach miss sinc one see typic l2 cach miss time import contributor processor stall due memori access usual hardest hide outoford execut approach prefetch inexpens support main processor core need modifi l2 cach need follow support first system 11 15 28 l2 cach accept line memori quest l2 use free miss statu handl regist mshr event secondli l2 pend request prefetch line address arriv prefetch simpli steal mshr updat cach repli final prefetch line arriv l2 drop follow case l2 cach alreadi copi line writeback queue copi line l2 cach tri write back memori mshr busi line set prefetch line want go transactionpend state 22 correl prefetch correl prefetch use past sequenc refer miss address predict prefetch futur miss 1 6 12 18 26 two popular correl scheme stridebas pairbas scheme stridebas scheme find stride pattern address sequenc prefetch address access pattern continu futur pairbas scheme identifi correl pair group address exampl miss sequenc successor miss typic implement pairbas scheme use correl tabl record address correl later miss observ address correl address prefetch pairbas scheme attract gener appli cabil work miss pattern long miss address sequenc repeat behavior common regular irregular applic includ spars matric link data structur furthermor pairbas scheme like correl scheme need neither compil support chang applic binari pairbas correl prefetch studi use hardwarebas implement 1 6 12 18 26 typic place custom prefetch engin hardwar correl tabl processor l1 cach l1 l2 cach typic correl tabl use 6 12 26 organ follow row store tag address miss address set immedi successor miss miss seen immedi follow first one differ point applic paramet tabl maximum number immedi successor per miss numsucc maximum number miss tabl store predict numrow associ tabl assoc accord 12 best perform entri row replac lru polici figur 4a illustr algorithm work call algorithm base figur show two snapshot tabl differ point miss stream ii within row successor list mru order left right time hardwar keep pointer row last miss observ miss occur tabl learn place miss address one immedi successor last miss new row alloc new miss unless alreadi exist tabl use prefetch iii react observ miss find correspond row prefetch numsucc successor start mru one design 1 18 work slightli differ discuss section 6 past work demonstr applic pairbas correl prefetch mani applic howev also reveal shortcom approach one critic problem effect approach need larg tabl propos scheme typic need 12 mbyte onchip sram tabl 12 18 applic larg footprint even need 76 mbyte offchip sram tabl 18 furthermor popular scheme prefetch sever potenti immedi successor miss 6 12 26 two limit prefetch far ahead intuit need observ one miss elimin anoth miss immedi successor result tend low coverag coverag number use prefetch origin number miss 12 3 ulmt correl prefetch propos use ulmt elimin shortcom pair base correl prefetch enhanc advantag follow discuss main concept section 31 architectur system section 32 modifi correl prefetch algorithm section 33 relat oper system issu sec tion 34 31 main concept ulmt run generalpurpos core memori perform two conceptu distinct oper learn prefetch learn involv observ miss main processor l2 cach record correl tabl one miss time prefetch oper involv react one miss look correl tabl trigger prefetch sever memori line l2 cach main processor action taken writeback memori practic agreement past work 12 find combin learn prefetch work best correl tabl continu learn new pattern uninterrupt prefetch deliv higher perform consequ ulmt execut infinit loop shown figur 2 initi thread wait miss observ observ one look tabl gener address line prefetch prefetch step updat tabl address observ miss learn step resum wait prefetch address occup time miss address observ gener respons time tabl updat learn step prefetch step wait figur 2 infinit loop execut ulmt prefetch algorithm execut ulmt character respons occup time respons time time ulmt observ miss address gener address prefetch best perform respons time small possibl alway execut prefetch step learn one moreov shift much comput possibl prefetch learn step retain critic oper prefetch step occup time time ulmt busi process singl observ miss ulmt implement prefetch viabl occup time smaller time two consecut l2 miss time correl tabl ulmt read write simpli softwar data structur memori consequ scheme elimin costli hardwar tabl requir current implement correl prefetch 12 18 moreov access softwar tabl inexpens memori processor transpar cach tabl cach final new scheme enabl redesign correl tabl prefetch algorithm sec tion 33 address lowcoverag shortdist prefetch limit current implement 32 architectur system figur 3a b show architectur system integr memori processor north bridg chip dram chip respect first design requir modif dram interfac larg compat convent memori system second design need chang dram chip interfac need special support work typic memori system multipl dram chip howev sinc goal examin perform potenti two design abstract away implement complex second design assum singlechip main memori follow outlin system work discuss consid memori access result miss ignor writeback simplic affect algorithm figur 3a key commun occur queue 1 2 3 miss request main processor deposit queue simultan ulmt use entri queue 2 build tabl base gener address prefetch latter deposit queue 3 queue 1 3 compet access memori although queue 3 lower prioriti 1 address line prefetch deposit queue 3 hardwar compar entri queue 2 match address address x detect x remov queue remov x queue 3 redund higherprior bridg chip unit north memori control memory61interfac buscach memori processor main processor filter interfac bu dramfilt memori control main processor2north bridg chip cach memori processor unit b figur 3 architectur system integr memori processor north bridg chip dram chip b request x alreadi queue 1 x remov queue 2 save comput ulmt note unclear whether lost opportun prefetch xs successor process x reason algorithm prefetch sever level successor section 33 result xs successor may alreadi queue 3 process x may help improv state correl tabl howev minim total occup ulmt crucial scheme similarli mainprocessor miss deposit queue 1 2 hardwar compar address queue 3 match request put queue 1 match entri queue 3 remov possibl request main processor arriv fast ulmt consum queue 2 overflow case memori processor simpli drop request figur 3a also show filter modul associ queue 3 modul improv perform correl prefetch may sometim tri prefetch address sever time short time filter modul drop prefetch request direct address recent issu anoth prefetch request modul fixeds fifo list record address recentlyissu request request issu queue 3 hardwar check filter list find address request drop list left unmodifi otherwis address ad tail list support unnecessari prefetch request elimin complet figur show queue repli memori main processor go queue 4 addit ulmt need access softwar correl tabl main mem ori recal tabl transpar cach memori processor logic queue 5 6 provid necessari path memori processor access main memori practic queue 5 6 merg other memori processor dram chip figur 3b system work slightli differ miss request main processor deposit first queue 1 queue 2 ulmt memori processor access correl tabl cach miss directli dram address prefetch pass filter modul place queue 3 figur 3a entri queue 2 3 check common entri drop repli prefetch mainprocessor request return memori control reach memori control address compar processor miss request queue 1 memoryprefetch line match miss request main processor former consid repli latter latter sent memori chip final machin includ form processorsid prefetch ing envis architectur oper two mode verbos nonverbos verbos mode queue 2 figur 3a b receiv mainprocessor miss mainprocessor prefetch quest nonverbos mode queue 2 receiv mainprocessor miss mode assum mainprocessor prefetch request distinguish request exampl tag mip r10000 21 nonverbos mode use reduc total occup ulmt case processorsid prefetch focu easytopredict sequenti regular miss pattern ulmt focu hardtopredict irregular one verbos mode also use ulmt implement prefetch algorithm enhanc effect processorsid prefetch present exampl case section 52 33 correl prefetch algorithm simpli take current pairbas correl tabl algorithm implement softwar good enough inde indic section 22 base algorithm two limit prefetch far ahead intuit need observ one miss elimin anoth miss immedi successor result tend low coverag increas coverag three thing need occur first need elimin two limit store tabl prefetch ing sever level successor miss per miss immedi succ sor successor immedi successor sever lev el second prefetch highli accur final prefetch take decis earli enough prefetch line reach main processor need condit easier support ensur correl algorithm implement ulmt two reason first one storag cheap therefor correl tabl inexpens expand hold multipl level successor miss per miss even mean replic format second reason customiz provid softwar implement prefetch algorithm rest section describ ulmt implement correl prefetch deliv high coverag describ three approach use convent tabl organ use tabl reorgan ulmt exploit customiz c c miss prefetch b c c abcadc ii current miss c abcadc current miss miss sequenc correl tabl c c miss prefetch b prefetch c follow link c c abcadc ii current miss c abcadc current miss correl tabl miss sequenc b abcadc c c c last secondlast current miss c c last c c c secondlast abcadc current miss miss sequenc correl tabl miss prefetch dbc c figur 4 pairbas correl algorithm base chain b replic c 331 use convent tabl organ first step attempt improv coverag without specif exploit lowcost storag customiz advantag ulmt simpli take convent tabl organ section 22 forc ulmt prefetch multipl level successor everi miss result algorithm call chain chain take paramet base plu numlevel number level successor prefetch algorithm illustr figur 4b chain updat tabl like base ii prefetch differ iii specif prefetch row immedi suc cessor take mru one among access correl tabl address entri found prefetch numsucc successor take mru successor row repeat process done numlevels1 time exampl suppos miss occur iii ulmt first prefetch b take mru entri looksup tabl prefetch ds successor c chain address two limit base name prefetch far ahead need one miss elimin second one howev chain may deliv high coverag two reason prefetch may highli accur ulmt may high respons time issu prefetch prefetch may inaccur chain prefetch true mru successor level successor instead prefetch successor found along mru path ex ampl consid sequenc miss altern abc bebf abcbebfabc miss encount chain prefetch immedi successor b access entri b prefetch e f note c prefetch high respons time chain miss come make numlevel access differ row tabl access involv associ search tabl associ potenti one cach miss 332 use tabl reorgan ulmt attempt improv coverag exploit low cost storag ulmt solut specif expand tabl allow replic inform row tabl store tag miss address numlevel level successor level contain numsucc address use lru replac use tabl propos algorithm call replic figur 4c replic take paramet chain shown figur 4c replic keep numlevel pointer tabl pointer point entri address last miss second last use effici tabl access miss occur pointer use access entri last miss insert new address mru successor correct level ii figur numsucc entri level mru order final prefetch replic simpl miss seen entri correspond row prefetch iii note replic elimin two problem chain first prefetch accur contain true mru successor level result group togeth successor given level irrespect path taken sequenc shown abcbebfabc miss replic prefetch b c second respons time replic much smaller chain inde replic prefetch sever level successor singl row access mayb even singl cach miss replic effect shift comput prefetch step learn one prefetch need singl tabl access learn miss need multipl tabl updat good tradeoff prefetch step critic one furthermor multipl learn updat inexpens use pointer elimin need associ search tabl row updat like still cach memori processor sinc updat recent 333 exploit customiz ulmt also improv coverag exploit second advantag ulmt solut customiz programm system choos run differ algorithm ulmt ap plicat chosen algorithm highli custom applic need one approach custom use tabl organ prefetch algorithm describ tune paramet applic basi exampl applic miss sequenc highli predict set number level successor prefetch numlevel high valu result characterist base chain replic level successor prefetch 1 numlevel numlevel true mru order level ye number row access prefetch step requir search 1 numlevel 1 number row access learn step requir respons time low high low space requir constant number prefetch x x numlevel x tabl 1 compar differ pairbas correl prefetch algorithm run ulmt prefetch level successor high accuraci applic unpredict sequenc opposit also tune number row tabl numrow applic larg footprint set numrow high valu hold inform tabl small applic opposit save space second approach custom use differ prefetch algorithm exampl add support sequenti prefetch algorithm describ result algorithm low respons time sequenti miss pattern anoth approach adapt decid algorithm onthefli applic execut fact approach also use execut differ algorithm differ part one applic intraappl customiz may use complex applic final ulmt also use profil purpos monitor miss applic infer higherlevel inform cach perform applic access pattern page conflict 334 compar algorithm tabl 1 compar base chain replic algorithm execut ulmt replic highest potenti high coverag support farahead prefetch prefetch sever level successor prefetch high accuraci prefetch true mru successor level low respons time part need access singl tabl row prefetch step access singl row minim associ search cach miss shortcom replic larger space requir correl tabl howev minor issu sinc tabl softwar structur alloc main memori note algorithm also implement hardwar howev replic suitabl ulmt implement provid larger space requir hardwar expens 34 oper system issu oper system issu relat ulmt oper outlin protect ulmt separ address space instruct correl tabl data structur ulmt share neither instruct data applic ulmt observ physic address applic miss also issu prefetch address behalf main processor howev neither read write address therefor protect guarante multiprogram environ poor approach applic share singl tabl tabl like suffer lot interfer better approach associ differ ulmt tabl applic elimin interfer tabl addit enabl custom ulmt applic conserv assum 4mbyte tabl averag per applic 8 applic requir 32 mbyte modest fraction today typic main memori requir excess save space dynam size tabl case applic use space tabl shrink schedul schedul know ulmt associ applic consequ schedul schedul preempt applic ulmt group furthermor oper system provid interfac applic control ulmt page remap sometim page get remap sinc ulmt oper physic address event caus tabl entri becom stale choos take action let tabl updat automat learn altern oper system inform correspond ulmt remap occur pass old new physic page number ulmt index tabl line old page entri found ulmt reloc updat tag applic successor row given current page size estim tabl updat take microsecond overhead may overlap execut oper system page map handler main processor note entri tabl may still keep stale successor inform inform may caus useless prefetch tabl quickli updat automat 4 evalu environ applic evalu ulmt approach use nine mostli irregular memoryintens applic irregular applic hardli amen compilerbas prefetch consequ obviou target ulmt correl prefetch except cg regular applic tabl 2 describ applic last four column tabl explain later simul environ evalu done use executiondriven simul environ support dynam superscalar processor model 17 model pc architectur simpl memori processor integr either north bridg chip dram chip follow microarchitectur figur 3 tabl 3 show paramet use compon architectur cycl 16 ghz cycl architectur model cycl cycl model uniprogram environ singl applic singl ulmt execut concurr model content system includ content applic thread ulmt share resourc memori control dram channel dram bank processorsid prefetch main processor option includ hardwar prefetch prefetch multipl stream stride 1 1 l1 cach prefetch monitor l1 cach miss identifi prefetch numseq sequen correl tabl appl suit problem input numrow size mbyte base chain repl cg na conjug gradient class 64 13 08 18 equak specfp2000 seismic wave propag simul test 128 25 15 35 ft na 3d fourier transform class 256 50 30 70 gap specint2000 group theori solver rako subset test 128 25 15 35 mcf specint2000 combinatori optim test mst olden find minimum span tree 1024 node 256 50 30 70 parser specint2000 word process subset train 128 25 15 35 spars sparsebench10 gmre compress row storag tree univ hawaii3 barneshut nbodi problem 2048 bodi 8 averag 140 27 16 38 tabl 2 applic use main processor 6issu dynam 16 ghz int fp ldst fu 4 4 2 pend ld st 8 16 branch penalti 12 cycl memori processor 2issu dynam 800 mhz int fp ldst fu 2 0 1 pend ld st 4 4 branch penalti 6 cycl main processor memori hierarchi line 3cycl hit rt l2 data writeback 512 kb 4 way 64b line 19cycl hit rt rt memori latenc 243 cycl row miss 208 cycl row hit memori bu splittransact 8 b 400 mhz 32 gbsec peak memori processor memori hierarchi line 4cycl hit rt north bridg rt mem latenc 100 cycl row miss cycl row hit latenc prefetch request reach dram 25 cycl dram rt mem latenc 56 cycl row miss cycl row hit intern dram data bu 32b wide 800 mhz 256 gbsec peak paramet applic proc dual channel channel 2 b 800 mhz total 32 gbsec peak random access time trac ns time memori control tsystem ns depth queue 1 filter modul tabl 3 paramet simul architectur latenc correspond contentionfre condit rt stand roundtrip processor cycl 16 ghz cycl tial stream concurr work follow third miss sequenc observ prefetch recogn stream prefetch next numpref line stream l1 cach furthermor store stride next address expect stream special regist processor later miss address regist prefetch prefetch next numpref line stream updat regist prefetch contain numseq regist see scheme work somewhat like stream buffer 13 prefetch line go l1 choos approach minim hardwar complex shortcom l1 cach may get pollut complet resimul system prefetch go separ buffer rather l1 found perform chang littl part check buffer l1 miss introduc delay algorithm paramet tabl 4 list prefetch algorithm evalu default paramet use sequenti prefetch support hardwar main processor call conven4 convent also implement softwar ulmt evalu two softwar implement seq1 seq4 case prefetch memori observ l2 miss rather l1 unless otherwis indic processorsid prefetch ulmt algorithm oper nonverbos mode sec tion 32 base algorithm choos paramet valu use joseph grunwald 12 compar work last four column tabl 2 give conserv valu size correl tabl applic tabl twoway setassoci size number row tabl numrow lowest power two trivial hash function simpli take lower bit line address less 5 insert replac exist entri gener alloc sophist hash function reduc numrow significantli without increas conflict much case know row base chain repl take 20 12 28 byte respect 32bit machin comput total tabl size overal applic need space other averag valu toler 27 16 38 mbyte base chain repl respect ulmt implement wrote ulmt c handoptim minim respons occup time one major perform bottleneck implement frequent branch remov branch unrol loop hardwir algorithm paramet also perform optim increas spatial local reduc instruct count none algorithm use floatingpoint oper 5 evalu 51 character applic behavior predict miss sequenc start character well ulmt algorithm predict miss sequenc applic run ulmt algorithm simpli observ l2 cach miss address without perform prefetch ing record fraction l2 cach miss correctli predict sequenti prefetch mean upcom miss address match next address predict one stream identifi pairbas prefetch upcom address match one successor predict level figur 5 show result predict three level suc cessor given miss level 1 chart show predict immedi successor level 2 show predict next successor level 3 successor one experi pairbas scheme use larg tabl ensur practic predict miss due conflict tabl num row 256 k assoc 4 numsucc 4 condi prefetch algorithm implement name paramet valu base base chain chain replic softwar memori ulmt repl sequenti 1stream seq1 sequenti 4stream seq4 sequenti 4stream hardwar l1 main processor conven4 tabl 4 paramet valu use differ algorithm level correct predict seq1 base level 210 20 50 6080 90cg equak ft gap mcf mst parser spars tree averag correct predict chain repl level cg equak ft gap mcf mst parser spars tree averag correct predict chain repl figur 5 fraction l2 cach miss correctli predict differ algorithm differ level successor tion level 1 chain repl equival base level 2 3 base applic figur also show effect combin algorithm figur 5 show ulmt algorithm effect predict miss stream applic exampl level 1 seq4 base correctli predict averag 49 82 miss spectiv moreov best algorithm keep predict correctli across sever level successor exampl repl correctli predict averag 77 73 miss level 2 3 spectiv therefor algorithm good potenti figur also show differ applic differ miss behavior instanc applic mcf tree sequenti pattern therefor pairbas algorithm predict miss applic cg instead sequenti pattern domin result sequenti prefetch predict practic l2 miss applic mix pattern among pairbas algorithm repl almost alway outperform chain wide margin chain maintain true mru successor level howev repl effect pattern better combin multistream sequenti prefetch seq4repl time l2 miss anoth import issu time miss figur 6 classifi l2 miss accord number cycl two consecut miss arriv mem ori miss group bin correspond 080 cycl cycl etc unit 16 ghz processor cycl signific bin 200280 contribut 60 miss distanc averag miss critic beyond number latenc hard hide outoford execut inde sinc roundtrip latenc memori 208243 cycl depend miss like fall bin contribut processor stall figur suggest depend miss overlap consequ want ulmt prefetch make sure ulmt fast enough learn miss occup less 200 cycl miss bin fewer less critic far apart put pressur ulmt time 080 may give enough time ulmt respond fortun miss like overlap comput 0 10 20 30 40 50 70 80 90 100 cg equak ft gap mcf mst parser spars tree averag figur 6 character time l2 miss 52 compar differ algorithm figur 7 compar execut time applic differ case prefetch nopref processorsid prefetch list tabl 4 conven4 differ ulmt scheme list tabl 4 base chain repl combin conven4 repl conven4repl custom algorithm custom result case memori processor integr dram applic averag bar normal nopref bar show memoryinduc processor stall time caus request processor l2 cach uptol2 request beyond l2 cach be10nopref conven4 base chain repl conven4repl custom nopref conven4 base chain repl conven4repl nopref conven4 base chain repl conven4repl nopref conven4 base chain repl conven4repl nopref conven4 base chain repl conven4repl custom cg equak ft gap mcf normaiz execut time beyondl2 base chain repl conven4repl custom nopref conven4 base chain repl conven4repl nopref conven4 base chain repl conven4repl nopref conven4 base chain repl conven4repl nopref conven4 base chain repl conven4repl mst parser spars tree averag normal execut time beyondl2 busy100602 figur 7 execut time applic differ prefetch algorithm yondl2 remain time busi includ processor comput plu pipelin stall system perfect l2 cach would busi uptol2 time averag beyondl2 signific compon execut time nopref account 44 time thu although ulmt scheme target l2 cach miss target main contributor execut time conven4 perform well cg sequenti pattern dom inat howev ineffect applic mcf tree pure irregular pattern averag conven4 reduc execut time 17 pairbas scheme show mix perform base show limit speedup mostli prefetch far enough averag reduc nopref execut time 6 chain perform littl better limit inaccuraci figur 5 high respons time section 331 averag reduc nopref execut time 12 repl abl reduc execut time significantli perform well almost applic outperform base chain case impact come nice properti replic algorithm discuss section 334 averag applic speedup repl nopref 132 final conven4repl perform best averag remov half beyondl2 stall time deliv averag applic speedup 146 nopref compar impact processorsid prefetch conven4 memorysid prefetch repl see construct effect conven4repl reason two scheme help specif processorsid prefetch prefetch elimin sequenti miss memorysid prefetch work non verbos mode section 32 therefor see prefetch request therefor fulli focu irregular miss pattern result reduc load ulmt effect algorithm custom first paper ulmt prefetch ing attempt simpl custom ap plicat tabl 5 show chang cg run seq1repl verbos mode mst mcf run repl higher num level case conven4 result shown figur 7 custom bar three applic applic custom ulmt algorithm cg seq1repl verbos mode mst mcf repl tabl 5 custom perform conven4 also custom cg tri exploit posit interact processor memorysid prefetch cg sequenti miss pattern figur 5 multipl stream overwhelm convent prefetch inde although processorsid prefetch accur 998 prefetch line referenc time enough 64 time miss l2 cach custom turn verbos mode processorsid prefetch request seen ulmt furthermor ulmt extend singlestream sequenti prefetch algorithm seq1 execut repl environ posit interact two prefetch increas specif applic refer differ stream interleav manner processorsid prefetch unscrambl miss sequenc chunk stream prefetch request seq1 prefetch ulmt easili identifi stream effici prefetch ahead result 81 processorsid prefetch arriv time manner custom speedup cg improv 219 conven4repl 259 case demonstr even regular applic amen sequenti processorsid prefetch benefit ulmt prefetch custom mst mcf tri exploit predict beyond third level successor miss set numlevel 4 repl shown figur 7 approach success mst produc margin gain mcf initi attempt custom show promis sult appli custom three applic averag execut speedup nine applic rel nopref becom 153 cg equak ft gap mcf mst parser spars tree averag normal execut time beyondl2 busy100602 figur 8 execut time differ locat memori processor locat memori processor figur 8 examin impact place memori processor figur 3 first two bar applic taken figur 7 nopref con ven4repl last bar applic correspond conven4repl algorithm memori processor place memori control north bridg chip conven4replmc processor north bridg chip twice memori access latenc 100 cycl vs 56 cycl eight time lower memori bandwidth 32 gbsec vs 256 gbsec addit 25cycl delay seen prefetch request reach dram 1 howev figur 8 show impact execut time small result small decreas averag speedup 146 141 impact small thank abil repl accur prefetch far ahead timeli immedi successor prefetch affect prefetch level successor still time overal given result hardwar cost two design conclud put memori processor north bridg chip costeffect design two prefetch effect gain insight prefetch scheme figur 9 examin effect line prefetch l2 cach ulmt line call prefetch figur show data spars tree averag seven applic figur combin l2 miss prefetch break 5 categori prefetch elimin l2 miss hit prefetch elimin part latenc l2 miss arriv bit late delayedhit l2 miss pay full latenc nonprefmiss useless prefetch useless prefetch broken prefetch brought l2 referenc time replac replac prefetch drop arriv l2 line alreadi cach redund sinc coverag fraction origin l2 miss fulli partial elimin repres sum hit delayedhit shown figur 9 nonprefmiss figur 9 number l2 miss left prefetch rel origin number l2 miss note nonprefmiss higher 10 algorithm 10 nonprefmiss number l2 miss elimin rel origin number l2 miss nonprefmiss broken two group miss 10 line figur 9 10 hit delay hit come origin miss 10 line hit new l2 conflict miss caus prefetch look averag seven applic see base chain effect coverag small base hurt 1 cycl count mainprocessor cycles05152535 base chain repl conven4repl conven4replmc nopref base chain repl conven4repl conven4replmc nopref base chain repl conven4repl conven4replmc spars tree averag 7 applic spars tree hit delayedhit nonprefmiss replac redund figur 9 breakdown l2 miss line prefetch ulmt prefetch origin miss normal 1 inabl prefetch far ahead chain hamper high respons time limit accuraci figur also show repl high coverag 074 howev come cost useless prefetch replac plu redund equival 50 origin miss addit miss due conflict prefetch 20 origin miss see therefor advanc pairbas scheme need addit bandwidth conven4repl seem low coverag despit high perform figur 7 reason prefetch request issu processorsid prefetch effect elimin l2 miss lump nonprefmiss categori figur reach memori sinc ulmt prefetch nonverbos mode see request cons quentli ulmt prefetch focus irregular miss pattern ulmt prefetch elimin irregular miss appear hitsdelayedhit final figur 9 also show spars tree show limit speedup figur 7 mani conflict cach result mani remain nonprefmiss furthermor prefetch accur result larg replac redund categori work load ulmt figur 10 show averag respons time occup time section 31 ulmt algo rithm averag applic time measur 16 ghz cycl bar broken comput time busi memori stall time mem number top bar show averag ipc ulmt ipc calcul number base chain repl replmc base chain repl replmc respons time occup time number processor cycl mem respons time occup time figur 10 averag respons occup time differ ulmt algorithm mainprocessor cycl instruct divid number memori processor cycl figur show algorithm occup time less 200 cycl consequ ulmt fast enough process l2 miss figur 6 memori stall time roughli half ulmt execut time processor dram processor north bridg chip replmc chain repl lowest occup time note repl occup much higher chain despit higher number tabl updat perform repl reason fewer associ search better cach line reus repl respons time import prefetch effect figur show repl lowest respons time around cycl respons time replmc twice much fortun replic algorithm abl prefetch far ahead accur therefor effect prefetch sensit modest increas respons time main memori bu util final figur 11 show util main memori bu variou algorithm averag applic increas bu util induc advanc algorithm divid two part increas caus natur reduc execut time addit increas caus prefetch traffic overal figur show increas bu util toler util increas origin 20 36 worst case conven4repl moreov increas come faster execut 6 util directli attribut prefetch gener fact memorysid prefetch add oneway traffic main memori bu limit bandwidth need 0 10 20 30 40 50 70 80 90 100 base chain repl util prefetch due reduc execut time due prefetching1006020 conven4 repl conven4 figur 11 main memori bu util 6 relat work memorysid prefetch memorysid prefetch simpl hardwar control exampl nvidia chipset includ dasp control north bridg chip 22 seem mostli target stride recognit buffer data lo calli i860 chipset intel report prefetch cach may indic presenc similar engin cooksey et al 9 propos contentbas prefetch hardwar control monitor data come memori item appear address engin prefetch alexand kedem 1 propos hardwar control monitor request main memori observ repeat pattern prefetch row data dram sram buffer insid memori chip scheme differ use generalpurpos processor run prefetch algorithm userlevel thread studi propos special programm engin exam ple hugh 11 yang lebeck 28 propos ad special engin prefetch link data structur hugh focus multiprocessor processinginmemori system yang lebeck focu uniprocessor put engin everi level cach hierarchi main processor download inform engin link structur prefetch perform scheme differ gener applic anoth relat system impuls intellig memori control capabl remap physic address improv perform irregular applic 4 impuls could prefetch data implement nextlin prefetch furthermor buffer data memori control rather send processor correl prefetch earli work correl prefetch found 2 24 recent sever author made contribut charney reev studi correl prefetch suggest combin stride prefetch gener correl prefetch 6 joseph grunwald propos basic correl tabl organ algorithm evalu 12 alexand kedem use correl prefetch slightli differ 1 indic sherwood et al use help stream buffer prefetch irregular pattern 26 final lai et al design slightli differ correl prefetch 18 specif prefetch trigger miss instead trigger deadlin predictor indic line cach use therefor new line prefetch scheme improv prefetch timeli expens tighter integr prefetch processor sinc prefetch need observ miss address also refer address program counter differ recent work import way first propos hardwareonli engin often requir expens hardwar tabl use flexibl userlevel thread generalpurpos core store tabl softwar structur memori second except alexand kedem 1 place engin l1 l2 cach processor l1 place prefetch memori focu l2 miss time interv l2 miss larg enough ulmt viabl effect final propos new tabl organ prefetch algorithm exploit inexpens memori space increas farahead prefetch prefetch coverag prefetch regular structur sever scheme propos prefetch sequenti stride pattern includ refer predict tabl chen baer 7 stream buffer jouppi 13 palacharla kessler 23 sherwood et al 26 base processorsid prefetch scheme processorsid prefetch mani propos processorsid prefetch often irregular applic tini nonexhaust list includ choi et al 8 karlsson et al 14 lipasti et al 19 luk mowri 20 roth et al 25 zhang torrella 29 scheme specif target link data structur tend reli program inform avail processor like address size data struc ture often need compil support scheme need neither program inform compil support relat work chappel et al 5 use subordin thread multithread processor improv branch predict suggest use thread prefetch cach manag fi nalli work also relat data forward multiprocessor processor push data cach hierarchi anoth processor 15 7 conclus paper introduc memorysid correl prefetch use userlevel memori thread ulmt run simpl generalpurpos processor main memori scheme solv mani problem convent correl prefetch provid sever import addit featur specif scheme need minim hardwar modif beyond memori processor use main memori store correl tabl inexpens exploit new tabl organ increas farahead prefetch coverag effect prefetch applic larg miss pattern long repeat support custom prefetch algorithm programm individu applic result show scheme deliv averag speedup 132 nine mostlyirregular applic furthermor scheme work well combin convent processorsid sequenti prefetch case averag speedup increas 146 final exploit custom prefetch algorithm increas averag speedup 153 work extend design effect techniqu ulmt custom particular custom link data structur prefetch cach conflict detect elimin gener applic profil custom cach conflict elimin improv spars tree applic smallest speedup acknowledg author thank anonym review hidetaka magoshi jose martinez milo prvulov marc snir jame tuck r distribut predict cach design high perform memori system dynam improv local virtual memori sy tem institut astronomi impuls build smarter memori control simultan subordin microthread ssmt gener correl base hardwar prefetch reduc memori latenc via nonblock prefetch cach iter benchmark prefetch link data structur system merg dramlog prefetch use markov predictor improv directmap cach perform addit small fullyassoci cach prefetch buffer prefetch techniqu irregular access link data structur compar data forward prefetch communicationinduc miss sharedmemori mp scalabl processor billiontransistor era iram directexecut framework fast accur simul superscalar processor softwar prefetch pointer call intens environ nvidia nforc integr graphic processor igp dynam adapt specul preprocessor dasp evalu stream buffer secondari cach replac prefetch system cach second directori sequenti access block depend base prefetch link data structur soni comput entertain inc push vs pull data movement link data structur speed irregular applic sharedmemori multiprocessor memori bind group prefetch tr reduc memori latenc via nonblock prefetch cach evalu stream buffer secondari cach replac speed irregular applic sharedmemori multiprocessor compilerbas prefetch recurs data structur prefetch use markov predictor compar data forward prefetch communicationinduc miss sharedmemori mp depend base prefetch link data structur simultan subordin microthread ssmt improv directmap cach perform addit small fullyassoci cach prefetch buffer push vs pull predictordirect stream buffer deadblock predict myampersandamp deadblock correl prefetch scalabl processor billiontransistor era contentbas prefetch distribut prefetchbuffercach design high perform memori system impuls directexecut framework fast accur simul superscalar processor memorysid prefetch link data structur ctr kyle j nesbit jame e smith data cach prefetch use global histori buffer ieee micro v25 n1 p9097 januari 2005 philip g emma allan hartstein thoma r puzak vijayalakshmi srinivasan explor limit prefetch ibm journal research develop v49 n1 p127144 januari 2005 amir roth gurindar sohi quantit framework autom preexecut thread select proceed 35th annual acmiee intern symposium microarchitectur novemb 1822 2002 istanbul turkey ad logic close memori reduc latenc indirect load high miss ratio acm sigarch comput architectur news v33 n3 june 2005 brian roger yan solihin milo prvulov memori predecrypt hide latenc overhead memori encrypt acm sigarch comput architectur news v33 n1 march 2005 justin teller charl b silio jr bruce jacob perform characterist maui intellig memori system architectur proceed 2005 workshop memori system perform june 1212 2005 chicago illinoi dongkeun kim steve shihwei liao perri h wang juan del cuvillo xinmin tian xiang zou hong wang donald yeung milind girkar john p shen physic experiment prefetch helper thread intel hyperthread processor proceed intern symposium code gener optim feedbackdirect runtim optim p27 march 2024 2004 palo alto california ilya ganusov martin burtscher effici emul hardwar prefetch via eventdriven helper thread proceed 15th intern confer parallel architectur compil techniqu septemb 1620 2006 seattl washington usa hur calvin lin memori prefetch use adapt stream detect proceed 39th annual ieeeacm intern symposium microarchitectur p397408 decemb 0913 2006 lixin zhang mike parker john carter effici address remap distribut sharedmemori system acm transact architectur code optim taco v3 n2 p209229 june 2006 wessam hassanein jo fort rudolf eigenmann data forward inmemori precomput thread proceed 18th annual intern confer supercomput june 26juli 01 2004 malo franc ravi iyer cqo framework enabl qo share cach cmp platform proceed 18th annual intern confer supercomput june 26juli 01 2004 malo franc stephen somogyi thoma f wenisch anastassia ailamaki babak falsafi andrea moshovo spatial memori stream acm sigarch comput architectur news v34 n2 p252263 may 2006 zhen yang xudong shi feiqi su jihkwon peir overlap depend load addressless preload proceed 15th intern confer parallel architectur compil techniqu septemb 1620 2006 seattl washington usa r shetti kharbutli solihin prvulov heapmon helperthread approach programm automat lowoverhead memori bug detect ibm journal research develop v50 n23 p261275 march 2006 zhen fang lixin zhang john b carter ali ibrahim michael parker activ memori oper proceed 21st annual intern confer supercomput june 1721 2007 seattl washington yan solihin jaejin lee josep torrella correl prefetch userlevel memori thread ieee transact parallel distribut system v14 n6 p563580 june jiwei lu abhinav da weichung hsu khoa nguyen santosh g abraham dynam helper thread prefetch sun ultrasparc cmp processor proceed 38th annual ieeeacm intern symposium microarchitectur p93104 novemb 1216 2005 barcelona spain adrin cristal oliverio j santana mateo valero jo f martnez toward kiloinstruct processor acm transact architectur code optim taco v1 n4 p389417 decemb 2004 marco galluzzi valentn puent adrin cristal ramn beivid josngel gregorio mateo valero first glanc kiloinstruct base multiprocessor proceed 1st confer comput frontier april 1416 2004 ischia itali chialin yang alvin r lebeck hungwei tseng chienhao lee toler memori latenc push prefetch pointerintens applic acm transact architectur code optim taco v1 n4 p445475 decemb 2004 zhenlin wang doug burger kathryn mckinley steven k reinhardt charl c weem guid region prefetch cooper hardwaresoftwar approach acm sigarch comput architectur news v31 n2 may xianh sun surendra byna yong chen serverbas data push architectur multiprocessor environ journal comput scienc technolog v22 n5 p641652 septemb 2007 suleyman sair timothi sherwood brad calder decoupl predictordirect stream prefetch architectur ieee transact comput v52 n3 p260276 march