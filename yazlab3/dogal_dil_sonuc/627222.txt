use applic benefit proactiv resourc alloc asynchron realtim distribut system paper present two proactiv resourc alloc algorithm call rba oba asynchron realtim distribut system algorithm consid applic model timeli requir express use jensen benefit function propos adapt function describ anticip applic workload futur time interv furthermor algorithm consid adapt model applic process dynam replic share workload increas switch realtim ethernet network underli system model given model object algorithm maxim aggreg applic benefit minim aggreg miss deadlin ratio sinc determin optim alloc comput intract algorithm heurist comput nearoptim resourc alloc polynomialtim rba analyz process respons time determin resourc alloc decis comput expens oba analyz processor overload comput decis much faster way rba incur quadrat amort complex term process arriv comput intens compon dasa use underli schedul algorithm wherea oba incur logarithm amort complex correspond compon benchmarkdriven experiment studi reveal rba produc higher aggreg benefit lower miss deadlin ratio oba b set pr p1p2p3 p assum clock processor synchron use algorithm 21 furthermor use nonpreempt version processschedul algorithm use processor schedul packet switch done system homogen consequ simplic obtain system model process schedul packet schedul consid besteffort realtim schedul algorithm includ ieee transact comput vol 51 8 august 2002 dasa 15 lbesa 22 red 23 rhd 24 consid besteffort algorithm shown outperform edf 25 overload situat perform edf underload situat edf optim 15 22 24 given applic adapt system model describ section 2 3 4 respect object maxim aggreg task benefit minim aggreg task miss deadlin ratio futur time window task adapt function defin aggreg task benefit sum benefit accru execut task futur time window defin aggreg task miss deadlin ratio ratio number task execut futur time window miss deadlin total number task execut window note futur time window task may execut multipl time thu problem solv paper inform state follow given adapt function task applic may arbitrari shape thu defin arbitrari task workload number replica need subtask task possibl execut furthermor processor assign execut replica result resourc alloc maxim aggreg task benefit minim aggreg task miss deadlin ratio futur time window task adapt function show problem nphard 13 thu rba oba heurist algorithm solv problem polynomialtim necessarili determin number subtask replica processor assign yield maximum aggreg task benefit minimum aggreg task miss deadlin ratio sinc object resourc alloc maxim aggreg benefit minim aggreg miss deadlin ratio desir properti rba algorithm includ 1 alloc resourc decreas order task benefit increas possibl maxim aggreg benefit task select next resourc alloc alway one largest benefit among unalloc task 2 alloc resourc task deadlin satisfi maxim possibl minim aggreg task miss deadlin ratio furthermor reason alloc resourc task deadlin satisfi sinc task benefit function stepfunct yield zero benefit deadlin 3 dealloc resourc task deadlin satisfi save system resourc potenti use satisfi deadlin hegazi ravindran use applic benefit proactiv fig 3 rba algorithm lower benefit task increas possibl satisfi deadlin greater number lower benefit task result potenti contribut nonzero benefit toward aggreg task benefit 4 dealloc resourc task point time resourc alloc process timeli higher benefit task advers affect observ resourc alloc task may reach apointbeforethesatisfactionofthetaskdeadlineaft increas resourc task may neg affect timeli higher benefit task decreasingtheaggregatetaskbenefitthatisaccruedso far point obviou choic whether continu alloc task stop deallocatecan yield higher aggreg benefit exampl may possibl continu resourc alloc task may eventu satisfi deadlin expens one higher benefit task furthermor may also satisfi deadlin greater number lower benefit task result greater aggreg task benefit benefit would achiev dealloc task proceed next lower benefit task point diminish return rba make choic dealloc resourc alloc task far rational behindthischoiceisthatsinceitisnotclearhowmani higher benefit task pay satisfi task deadlin may best disturb aggreg benefit accru far moreov sinc resourc alway alloc decreas order task benefit chanc obtain higher aggreg benefit higher satisfi mani high benefit task possibl 5 decompos tasklevel resourc alloc problem subtasklevel resourc alloc problem rational behind heurist solv tasklevel resourc alloc problem determin replica need subtask task endhost analysi system comput expens therefor decompos problem subproblem solv subproblem seek reduc overhead comput nearoptim solut sinc focus step benefit function task decomposit resourc alloc asynchron realtim 949 donebyassigningdeadlinestosubtasksandmessag task task deadlin way subtask messag task meet respect deadlin task abl meet deadlin use heurist determin replica need task satisfi task deadlin determin replica need subtask task satisfi subtask deadlin thu rba perform resourc alloc accord heurist choic discuss summar algorithm follow rba perform resourc alloc usermodifica tion adapt function applic task detect sinc anticip workload may differ differ task period time window specifi adapt function algorithm alloc resourc period time window adapt function start earliest period proceed latest trigger algorithm first sort task accord benefit task adapt period decreas order task benefit period occurr respect rba determin number replica need subtask task processor assign satisfi subtask deadlin current period comput number replica subtask task timeli higher benefit task affect task found infeas algorithm dealloc alloc replica proce next adapt period pseudocod rba highest level abstract shown fig 3 effici determin next task highest benefit resourc alloc algorithm initi construct heap task set task benefit key valu heap node enabl algorithm effici determin next task alloc perform extractmax oper heap discuss rba determin number replica subtask processor assign subsect follow section 61 discuss rba assign deadlin subtask messag task deadlin determin number replica need subtask satisfi subtask deadlin rba analyz subtask respons time discuss step involv determin subtask respons time 950 ieee transact comput vol 51 8 august 2002 section 62 present respons time analysi algorithm xm section 63 final present algorithm determin number subtask replica xm processor section 64 eex stkd 61 deadlin assign subtask 2 3 messag ecd mkd problem subtask messag deadlin assign 4p pi 5 task deadlin studi differ context ji j ji1 j 26 equal flexibl eqf strategi present 26 besid assign deadlin subtask messag assign deadlin subtask messag task task deadlin also need map tasklevel deadlin way proport subtask execut benefit benefit valu subtask messagepacket time messag commun delay respect task besteffort schedul algorithm rel deadlin subtask messag dasa lbesa red consid simpli sum execut time subtask work use benefit valu subtask messag commun delay messag slack valu packet make schedul decis thu eqf defin slack valu subtask defin benefit subtask messagepacket messag percentag total avail slack simpli benefit parent task subtask messag total avail slack subtask messag 62 estim subtask respons time simpli differ task deadlin respons time subtask stji task tj fix sum execut time commun delay prioriti schedul given classic equat subtask messag succeed subtask rj cj ij rj subtask respons time cj messag task structur recal assum subtask execut time ij interfer serial structur task execut time subtask experi subtask 27 howev commun delay subtask messag equat insuffici besteffort realtim schedul preced subtask messag task structur dasa lbesa consid consid total avail slack sinc workastheymakedecisionsateachschedulingeventthatar latenc would alreadi incur time subtask function remain subtask execut time start execut messag start transmiss event remain execut time subtask given slack valu subtask messag time instant differ total execut time defin percentag total avail slack subtask time subtask alreadi spent subtask messag percentag ratio execut processor time instant subtask execut time messag commun determin respons time subtask delay sum execut time commun processor need know schedul event delay subtask messag succeed subtask time instant schedul select messag task structur thu higher subtask readi queue schedul event includ subtask execut time messag commun delay arriv time complet time subtask higher ratio higher percentag determin subtask arriv time assum higher slack valu higher follow subtask messag deadlin rba use eqf follow way algorithm a1 period task arriv begin estim subtask execut time messag commu period nicat delay use applicationprofil function a2 aperiod task arriv trigger useranticip workload estim execut time messag trigger period task arriv messag delay use assign subtask a3 respons time subtask longest messag deadlin accord eqf respect respons time among replica thu deadlin subtask stk workload a4 messag assum arriv destin given processor deadlin assign use eqf a5 first subtask task arriv begin period parent task everi dl stki eex sti dltk eex stkj subtask task arriv elaps interv time sinc task period xm k equal sum messag delay subtask respons time predecessor messag predecessor subtask subtask respect 4p eex stpki 5 a1 a2 straightforward assumpt directli deriv applic model recal applic model see section 2 assum aperiod deadlin messag mk workload task trigger upon complet execut given trigger period task hegazi ravindran use applic benefit proactiv resourc alloc asynchron realtim 951 assumpt a3 reason data object pass algorithm estim subtask respons time subtask process longest respons time determin schedul event occur replica subtask time window appli schedul algorithm a4 pessimist assumpt impli schedul event determin schedul decis messag incur worstcas commun delay note imposs determin subtask respons arriv deadlin howev time without determin schedul event import observ exact delay incur decis made event algorithm dasa messag depend upon among factor lbesa decis event depend content messag experi outgo remain subtask execut time event queue sender processor switch 63 subtask respons time analysi determin would need determin messag algorithm present sender processor switch time instant messag gener pseudocod subtask respons time analysi sender processor arriv switch respect algorithm shown fig 4 would requir holist analysi system procedur rbaanalyzerespons accept subtask comput expens thu reduc task period p processor q respons time comput overhead make simplifi assump need determin workload subtask tion messag arriv deadlin argument comput respons time assumpt a5 straightforward directli subtask period p processor qasa deriv preced relationship subtask byproduct procedur determin respons time messag task see section 2 subtask assign processor q thu arriv time subtask determin compar subtask respons time subtask sum respons time subtask deadlin deadlin subtask satisfi deadlin messag preced subtask considera procedur return respons time subtask sif tion arriv time parent task subtask subtask found miss deadlin algorithm thu given arriv time task ti arriv time return failur valu indic replic subtask sti task given subtask processor q either satisfi deadlin affect timeli higher benefit task arrivaltim sti note whenev procedur rbaanalyzerespons invok subtask processor q exist xj1 subtask q belong higher benefit task arrivaltimeti responsetim stk dl mk task sinc rba alloc replica task decreas order benefit arrivaltimexdenot arriv time subtask task x responsetimexdenot respons time 64 determin number subtask replica subtask x dlxdenot deadlin messag x processor arriv time subtask processor thu determin number replica need determin arriv list construct note subtask processor rba first analyz algorithm consid subtask within task respons time subtask current processor accord precedenceord therefor subtask respons time found less algorithm determin arriv time subtask subtask deadlin timeli subtask higher respons time predecessor subtask would alreadi benefit task found affect algorithm determin conclud singl replica subtask eventu goal determin subtask respons current processor enough satisfi subtask deadlin time examin arriv list increas order hand subtask respons time found arriv time appli schedul algorithm larger subtask deadlin execut arriv time purpos arriv list must sort subtask current processor found caus one accord arriv time accomplish subtask higher benefit task miss dead insert arriv time subtask integ line rba reduc workload subtask order list integ posit correspond replic algorithm consid second replica subtask arriv time thu subtask arriv time subtask reduc workload exist determin insert list list auto replica half matic get order accord arriv time determin processor execut second arriv time subtask determin rba replica rba analyz subtask respons time estim anticip workload task process half subtask workload adapt period use task adapt function processor exclud processor first replica aperiod task algorithm use period use subtask respons time analysi algorithm trigger period task task period anticip describ section 63 processor give workload plug applicationprofil shortest respons time select second replica function estim subtask execut time algorithm recomput respons time task period first replica processor process half fig 4 rbaanalyzerespons procedur workload sinc second replica process half workload respons time replica found less subtask deadlin execut replica respect processor found affect timeli higher benefit task two replica consid suffici ieee transact comput vol 51 8 august 2002 algorithm otherwis algorithm consid third replica repeat process rba repeat process replica abl satisfi subtask deadlin note number replica increas workload share replica reduc furthermor everi time algorithm consid hegazi ravindran use applic benefit proactiv fig 5 rbadeterminereplicasprocessor procedur ad new replica check whether exist one abl satisfi deadlin reduc workload without affect timeli higher benefit task algorithm determin execut maximum possibl number replica subtask equal number processor system exploit maximum concurr satisfi subtask deadlin assum subtask henc task miss deadlin rba dealloc replica alloc task discuss section 6 fig 5 show pseudocod algorithm determin number subtask replica processor assign procedur rbadeterminerepli casprocessor accept subtask period anticip workload l period determin number replica processor recal procedur rbaalgorithm fig invok procedur rbadeterminereplicasprocessor subtask execut futur adapt window 7worstcas complex rba analyz worstcas comput complex rba consid n task p processor maximum subtask task thu worstcas n task subtask smallest task period k thu worstcas n task period k adapt window length w worstcas complex rbaalgorithm procedur depend upon complex procedur resourc alloc asynchron realtim 953 rbadeterminereplicasprocessor complex rbadeterminereplicasprocessor depend procedur rbaanalyzerespons determin respons time subtask discuss complex procedur subsect follow 71 complex rbaanalyzerespons complex rbaanalyzerespons consist two compon first given subtask processor subtask respons time need determin procedur rbaanalyzerespons construct arriv list subtask processor second subtask construct arriv list procedur invok schedul arriv departur within length adapt function thu cost rbaanalyzerespons simpli sum cost construct arriv list cost invok schedul schedul event ie arriv termin event subtask 711 arriv list construct sinc subtask replic maximum p time sinc rba assign two replica subtask processor maximum number subtask replica assign rba processor mn ie subtask task n task mn subtask arriv period parent task throughout adapt function window w largest possibl number arriv subtask 954 ieee transact comput vol 51 8 august 2002 therefor dwke thu largest arriv list p time determin respons time replica size mndwke consid step p processor thu construct arriv list rbaanalyzerespons deter procedur rbadeterminereplicasprocessor invok mine arriv time replica processor procedur rbaanalyzerespons p2 number time determin arriv time replica rbaanalyzerespons complex p2 om3n3dwke3 examin predecessor subtask messag op2m3n3dwke3 replica thu cost determin arriv time 73 complex rbaalgorithm singl replica involv examin predecessor subtask predecessor messag incur total cost od complex rbaalgorithm two compo number predecessor subtask nent first rbaalgorithm construct heap subtask consider use task benefit key valu second invok arriv time subtask determin rbadeterminereplicasprocessor subtask procedur rbaanalyzerespons insert subtask arriv task period time heap use key valu correspond cost build heap n task subtask arriv time recal largest list size given n task maximum subtask per task determin mndwke insert cost heap minimum period k task rbadeterminereplica ologmndwk thu cost construct order processor invok mndwke time rbaalgo arrivallistforallthemndwkesubtaskarrivalsonaprocessor rithm invok rbadeterminereplicasprocessor given mndwkeod logmndwk cost next highest benefit task need extract becom omdndwkemndwk logmndwk heap cost extractmax heap oper olog n therefor cost second compon 712 respons time analysi respons time analysi perform invok mndwke log n p2m3n3dwke3 schedul subtask arriv departur cost invok schedul obvious depend schedul algorithm employ consid worstcas complex rbaalgorithm dasand algorithm ie dasa subtask sum cost two compon depend cost comput schedul onop2m4n4dwke4 becom op2m4n4dwke4 decis given r process readi queue processor or215 13 8amort complex sinc mndwke arriv processor worstcas cost invok dasand rbaanalyzerespons singl schedul event om2n2dwke2 invok analyz amort complex rba ing dasand next subtask arriv must extract analyzerespons procedur sinc computa heap cost ologmndwk thu tional intens compon rba algorithm sequenc extract next subtask arriv consid amort complex get realist heap invok dasand algorithm repeat sens cost rbaanalyzerespons procedur 2mndwke time total cost schedul invoca compar cost counterpart tion becom procedur oba algorithm recal rbaanalyzerespons procedur invok mndwke logmndwkem2n2dwke2 procedur localschedul repres underli schedul algorithm determin schedul decis see fig 4 analyz amort complex rbaanalyzerespons consid dasa complex rbaanalyzerespons sum nd underli schedul algorithm cost arriv list construct cost given r process readyqueu total cost schedul invoc given dasand algorithm or215 13 omdndwk mndwkelogmndwkea discuss section 7 cost rbaanalyz respons consist two compon 1 construct arriv time key valu analyz subtask respons time 72 complex given n subtask arriv total number step rbadeterminereplicasprocessor requir construct subtask arriv time heap procedur rbadeterminereplicasprocessor deter nk1 log k step cost olog k insert kth mine number replica processor need element heap given subtask iter manner start foranalyzingsubtaskresponsetimesdasandiscal singl replica increment maximum 2n time worstcas occur none n possibl number replica equal number process termin arriv processor p reach iter step situationthequeuesizeincreaseswheneveraprocessarr procedur invok rbaanalyzerespons maximum becom n first termin occur hegazi ravindran use applic benefit proactiv resourc alloc asynchron realtim 955 time dasand invok n process readi whole procedur repeat way similar queue number process queue decreas rba call new algorithm overload queue becom empti analysisbas besteffort resourc alloc oba cost extract kth element invok given n subtask arriv processor deadlin dasand process leav readi queue order perform overload test ontim 23 n process arriv given n logn k k2 15 thu cost perform overload test k2 cost invok dasand k processor given mndwke subtask arriv processor process logn ki cost extract worstcas given omndwk assum kth element heap cost invok dasa given deadlineord subtask arriv list recal nd termin p1 k2 step thu section 7 complex rbaanalyzerespons includ 1 complex arriv list construct total number step perform rbaanalyz complex respons time analysi thu respons n logn kk21 k2 k1 kn complex oba counterpart procedur rbaanalyz amort complex rbaanalyzerespons respons becom equal sum cost construct given 1n time total number step perform deadlineord subtask list cost perform becom overload test xn xn x1 wecaneasilymodifytheprocedurerbaanalyzerespons construct subtask arriv list order deadlin instead arriv time cost domin term numer 1 k2 on3 thu amort complex krbnaanalyz cost oba version rbaanalyzerespons procedur respons given 1non3 on2 becom omndwkelogmndwk cost significantli speed oba respect rba cost om3n3dwke3 procedur rbaanalyzerespons 9the oba algorithmheurist dasand use underli schedul rational algorithm endhost processors2 thu highest level abstract oba follow care observ rba algorithm reveal exact step rba pseudocod oba algorithm comput complex fact procedur highest level abstract shown fig 6 oba thatcost rbathemost subtaskrespons time analysi differ rba way determin procedur ie rbaanalyzeresponserecalthatrba number replica need subtask task analyzerespons analyz respons time subtask processor assign given processor given workload construct discuss oba perform overload test arriv list subtask processor invok determin number subtask replica schedul algorithm subtask arriv processor assign subsect follow complet length adapt window complex procedur domin 91 overload analysi complex invok schedul algorithm determin whether presenc subtask schedul event ie om3n3dwke3 processor result overload processor oba thu would like design much faster first construct list subtask arriv time similar algorithm achiev object rba one construct rba rbaanalyzerespons procedur care observ reveal avoid section 62 except list deadlineord schedulerexecut perform rba instead discuss section 62 algorithm construct dead conduct overload test processor rba object lineord list insert subtask arriv event invok schedul determin subtask feasi integerord list subtask deadlin posit biliti done determin subtask respons determin arriv time subtask time compar respons time subtask deadlineord arriv list construct deadlin also determin subtask feasibl oba examin subtask deadlin arriv list overload test processor increas order deadlin subtask deadlin di processor underload clearli subtask algorithm comput sum remain execut must abl complet execut deadlin time subtask deadlin less di besteffort realtim schedul algorithm mimic edf compar sum di sum greater underload situat edf guarante deadlin di deadlin exist overload deadlin processor underload processor indic exist least one conclud processor good candid subtask processor unabl complet subtask workload subtask process deadlin ie subtask demand exce avail hand processor overload processortim sum less subtask deadlin impli one subtask miss deadlin deadlin processor underload reduc workload share subtask subtask complet deadlin ie total consid replica subtask subtask feasibl determin overload test 2 analyz oba entir complex later section 10 fig 6 oba algorithm processortim demand subtask less avail processor time fig 7 show pseudocod oba overloadtest procedur call obaoverloadcheck determin whether execut subtask replica processor q subtask period p caus overload situat q procedur start construct subtask arriv list similar way rbaanalyzerespons construct arriv list list construct overload test run singl pass list procedur return success valu overload detect otherwis return failur valu 92 determin number subtask replica processor determin number replica need subtask processor oba first check whether overload processor subtask current assign overload detect algorithm conclud singl replica subtask process entir subtask workload current processor complet execut subtask deadlin sinc overload detect processor subtask must abl compet deadlin thu affect timeli higher benefit tasks3 thu detect underload processor oba make conclus made rba regard subtask feasibl interfer timeli higher benefit task hand overload detect processor subtask oba reduc workload subtask replic algorithm consid second replica subtask processor exist subtask replica assign note consid second replica subtask reduc workload share two replica therebi reduc execut time replica may resolv overload situat processor replica algorithm test overload processor overload detect processor replica algorithm conclud two replica suffici satisfi subtask deadlin otherwis oba consid yet anoth replica subtask 3 note whenev consid execut subtask replica processor q test overload q exist subtask q must belong higher benefit task task sinc oba alloc replica task decreas order benefit ieee transact comput vol 51 8 august 2002 algorithm thu repeat process replic overload test either 1 overload detect processor subtask replica 2 maximum possibl number replica subtask equal number processor system exploit maximum concurr reach execut maximum number replica subtask resolv overload situat thu satisfi subtask deadlin oba dealloc task discuss section 6 fig 8 show pseudocod procedur oba determinereplicasprocessor determin number replica necessari subtask processor procedur call procedur obaoverloadcheck fig 7 test processor overload resourc alloc process recal main procedur oba algorithm obaalgorithm fig invok procedur obadeterminereplicasprocessor subtask execut futur time window analysi worstcas comput complex oba similar rba oba complex depend upon complex procedur obadetermin replicasprocessor complex obadeterminereplica processor depend upon complex procedur obaoverloadcheck discuss section 9 complex oba overloadcheck equal sum cost construct heap use subtask deadlin key valu cost perform overload test cost construct subtaskdeadlin heap omndwk logmndwk sinc use approach use procedur rbaanalyzerespons note term mdndwke appear algorithm need comput arriv time subtask need absolut deadlin perform overload test given deadlin heap oba test overload make singl pass subtask deadlin examin increas order cumul sum remain execut time subtask lesser deadlin compar current deadlin cost logmndwk extract delet earliest deadlin subtask heap sinc process repeat mndwke node heap cost overload hegazi ravindran use applic benefit proactiv resourc alloc asynchron realtim 957 fig 7 obaoverloadcheck procedur test omndwk logmndwk thu total cost cost main procedur obaalgorithm two obaoverloadcheck given compon first obaalgorithm construct heap use task benefit key valu second invok oba omndwkelogmndwkemndwkelogmndwk determinereplicasprocessor subtask task period procedur obadeterminereplicasprocessor deter cost build heap n task mine number replica processor given n task maximum subtask per task need given subtask iter manner minimum task period k procedur obadetermin start singl replica increment replicasprocessor invok mndwke time oba maximum possibl number replica equal number algorithm invok obadeterminereplicasprocessor processor p reach iter step next highest benefit task need extract procedur invok obaoverloadcheck maximum p heapthecostofanextractmaxheapoperationisolog n time test overload p processor replica therefor cost second compon becom consid step thu procedur obadetermin replicasprocessor invok procedur obaoverload mndwke log n p2mndwkelogmndwk check p2 number time complex 2 worstcas complex obaalgorithm sum cost two compon fig 8 obadeterminereplicasprocessor procedur onop2m2n2dwke2 logmndwk becom op2m2n2dwke2 logmndwk analyz amort complex oba obaoverloadcheck procedur recal oba overloadcheck procedur oba counterpart procedur rba rbaanalyzerespons procedur found comput expens compon rba cost obaoverloadcheck consist two compo nent 1 construct heap subtask deadlin valu 2 overload test given n subtask arriv total number step requir construct subtaskdeadlin heap log k overload test process take total n iter iter next earliest deadlin subtask need extract heap cost ologn k thu overload test compon cost amort complex obaoverloadcheck therefor 1n time total number step perform becom 1n n log k 1 logn k note term numer yield onlog n thu amort complex obaoverloadcheck log nn olog n ieee transact comput vol 51 8 august 2002 thu note oba faster rba though oba faster rba hypothes oba may perform wors rba especi overload situat condit clearli interest due asynchron natur applic consid hypothesi base fact respons time subtask accur match subtask behavior situat thu rba exploit knowledg determin resourc alloc accur match applicationne situat oba hand determin alloc identifi overload processor avoid processor thu underload processor algorithm stop alloc resourc proce next task adapt period caus algorithm effect alloc resourc smaller rang workload situat rba experiment evalu rba oba goal determin 1 rba perform differ besteffort realtim schedul algorithm process schedul packet schedul dasa red lbesa rhd 2 rel perform rba oba 3 rba oba perform anticip workload specifi use adapt function differ actual workload hegazi ravindran use applic benefit proactiv resourc alloc asynchron realtim 959 fig 9 perform rba dasa red schedul increas rampramp workload aggreg accru benefit b miss deadlin ratio conduct applicationdriven simul studi evalu perform rba oba detail applic paramet use experi deriv dynbench realtim benchmark describ 28 discuss experi result subsect follow 121 perform rba differ schedul algorithm evalu perform rba differ schedul algorithm consid two adapt function specifi two workload pattern 1 increas ramp period workload increas ramp aperiod workload denot rampramp work load 2 constant period workload increas ramp aperiod workload denot con stantramp workload recal workload period task task period number data object gener period workload aperiod task period trigger period task number trigger event gener trigger period task period evalu perform rba ramp ramp workload first defin baselin rampramp adapt function baselin rampramp function defin particular slope window length thu defin maximum workload period aperiod task function conduct experi baselin rampramp function measur total benefit accru execut task miss deadlin ratio rba experi dasa red underli schedul constitut singl data point baselin experi repeat increas slope baselin rampramp function thu gener increas rampramp workload experi measur aggreg accru benefit miss deadlin ratio result experi shown fig 9 note data point plot obtain singl experi thu maximum workload individu experi shown xaxi plot aggreg accru benefit shown fig 9a miss deadlin ratio shown fig 9b fig 10 show perform rba dasa red increas constramp workload data point plot obtain singl experi maximum workload individu experi shown xaxi figur aggreg accru benefit shown fig 10a miss deadlin ratio shown fig 10b also measur aggreg benefit miss deadlin ratio rba increas rampramp constramp workload lbesa rhd underli schedul algorithm observ perform rba lbesa rhd close red therefor clariti omit perform rba lbesa rhd figur fig 9 fig 10 observ rba dasa produc higher aggreg benefit lower miss deadlin ratio red lbesa rhd thu experiment result illustr superior rba dasa algorithm believ due two reason 1 rba determin resourc alloc decis significantli reli behavior underli schedul algorithm exampl rba comput alloc determin subtask respons time clearli depend upon schedul make schedul decis thu conjectur perform rba depend upon larg extent perform underli schedul algorithm verifi hypothesi conduct sever experi studi rel perform dasa red rhd 134 experi reveal dasa outperform red rhd therebi valid intuit thu rba perform better dasa schedul algorithm 2 rba mimic dasa higher level abstract resourc alloc exampl rba alloc resourc task test feasibl task decreas order task benefit dasa also examin processphas subtask test schedulefeas decreas order benefit densiti process phase symmetri behavior contribut better perform rba dasa algorithm 4 dasa shown outperform edf lbesa 15 960 ieee transact comput vol 51 8 august 2002 fig 10 perform rba dasa red schedul increas constramp workload aggreg accru benefit b miss deadlin ratio fig 11 perform rba oba dasa increas rampramp workload aggreg accru benefit b miss deadlin ratio 122 rel perform rba oba sinc dasa perform best among schedul algorithm consid compar perform rba oba dasa experi rba describ section 121 repeat oba use dasa underli schedul algorithm processor switch fig 11 fig 12 show perform obadasa rbadasa increas rampramp workload constramp workload respect observ rbadasa produc higher aggreg benefit lower miss deadlin ratio obadasa result shown fig 11 fig 12 thu valid hypothesi describ section 11 although oba faster rba oba may perform wors rba 123 perform rba oba error anticip workload studi rba oba perform actual workload differ anticip workload specifi adapt function defin rel load error term rel load error term defin er actual load anticip loadanticip load fig 13a show perform rba rang rel load error 09 09 fix anticip workload load error 09 mean actual load 190 percent anticip load yaxi show rel chang aggreg benefit defin chang aggreg benefit certain valu er differ aggreg benefit valu er aggreg benefit zero rel load error rel chang aggreg benefit defin ratio chang aggreg benefit aggreg benefit zero rel load error figur show rba gener perform better error dasa use underli schedul algorithm red use attribut better perform rbadasa error reason describ section 121 fig 13b show obadasa perform respect rbadasa actual workload differ anticip workload figur observ rba perform better error anticip workload oba regard better perform rba error valid hypothesi discuss section 11 hegazi ravindran use applic benefit proactiv resourc alloc asynchron realtim 961 fig 12 perform rba oba dasa increas constramp workload aggreg accru benefit b miss deadlin ratio fig 13 effect error anticip load perform rba oba rba error b oba error 13 conclus futur work paper present two resourc alloc algo rithm call rba oba proactiv resourc alloc asynchron realtim distribut system algorithm proactiv sens allow usertrigg resourc alloc userspecifi arbitrari applic workload pattern algorithm consid applic model applic timeli requir express use jensen benefit function propos adapt function describ anticip applic workload futur time interv furthermor consid adapt model subtask applic task replic runtim share workload increas switch realtim ethernet network given applica tion adapt system model object maxim aggreg applic benefit minim aggreg miss deadlin ratio 13 show problem nphard thu rba oba heurist comput nearoptim resourc alloc decis polynomialtim heurist employ algorithm includ alloc resourc higher benefit task lower benefit task allow lower benefit task affect timeli higher benefit task decompos tasklevel alloc problem subtask level alloc problem algorithm differ way solv subtasklevel alloc problem whilerbasolvesthesubtasklevelallocationproblembi analyz subtask respons time oba solv problem test processor overload rba incur worstcas comput complex op2m4n4dwke4 dasa schedul algorithm amort complex on2 comput expens compon obaontheotherhandincursabetterworstcasecomplex op2m2n2dwke2 logmndwk amort complex olog n procedur correspond rba comput expens compon studi perform algorithm conduct benchmarkdriven experi experiment result reveal rba produc higher aggreg benefit lower miss deadlin ratio dasa use processschedul packetschedul schedul algorithm use furthermor observ rba produc higher aggreg benefit lower miss deadlin ratio oba thu major contribut paper rba oba algorithm seek maxim aggreg benefit minim aggreg miss deadlin ratio asynchron realtim distribut system proactiv resourc alloc best knowledg awar effort solv problem solv rba oba sever aspect work investiga tion rba oba central resourc alloc algorithm may potenti affect scalabl furthermor adapt function propos determinist sens user anticip futur workload without uncertainti though experiment studi algorithm perform presenc uncertainti may possibl defin adapt function probabilist set therebi enabl probabilist decisionmak adapt furthermor fault toler key requir asynchron realtim distribut system besid timeli issu current studi acknowledg work support us offic naval research grant n000149910158 n000140010549 r ieee tran us naval surfac warfar center hard realtim comput system predict schedul algorithm applic tr improv algorithm synchron comput network clock schedul algorithm multiprogram hardrealtim environ resourc manag middlewar dynam depend realtim system engin dynam realtim distribut system hard realtim comput system guest editor introduct special section asynchron realtim distribut system deadlin assign distribut soft realtim system adapt distribut airborn track system process right track right time endhost architectur qosadapt commun dynam realtim benchmark assess qo resourc manag technolog qualiti servic optim discret qo option autom profil subsystem qosawar servic adapt resourc alloc complex realtim applic dynam qualiti servic middlewar agent mediat applic resourc usag specif model dynam distribut realtim system decisionmak realtim schedul schedul depend realtim activ qualiti servic manag resourc alloc ctr robust resourc alloc dynam realtim system journal system softwar v77 n1 p5565 juli 2005 peng li binoy ravindran proactiv qo negoti asynchron realtim distribut system journal system softwar v73 n1 p7588 septemb 2004 peng li binoy ravindran effici toler failur asynchron realtim distribut system journal system architectur euromicro journal v50 n10 p607621 octob 2004 peng li binoy ravindran fast besteffort realtim schedul algorithm ieee transact comput v53 n9 p11591175 septemb 2004 lin wujuan bharadwaj veerav object replic algorithm realtim distribut databas distribut parallel databas v19 n23 p125146 may 2006