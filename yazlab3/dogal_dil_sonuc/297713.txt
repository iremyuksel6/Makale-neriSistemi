analysi temporalbas program behavior improv instruct cach perform abstractin paper examin temporalbas program interact order improv layout reduc probabl program unit conflict instruct cach context present two profileguid procedur reorder algorithm techniqu use cach line color arriv final program layout target elimin first gener cach conflict ie conflict callercalle pair first algorithm build call graph record local tempor interact procedur describ call graph use guid placement step present method acceler cach line color explor aggress graph prune techniqu second approach captur global tempor program interact construct conflict miss graph cmg cmg estim worstcas number miss two compet procedur inflict upon one anoth reduc higher gener cach conflict use prune cmg graph guid cach line color use sever c c benchmark show benefit let type graph guid procedur reorder improv instruct cach hit rate contrast differ two form tempor interact also develop new character stream base interrefer gap irg model b introduct c ach memori found microprocessor design today cach instruct stream benefici sinc instruct refer exhibit high degre spatial tempor local still cach miss occur one three reason 1 1 first time refer 2 finit cach capac 3 memori address conflict work focus reduc memori address conflict rearrang program avail memori space analysi program interact perform rang granular coarsest individu procedur 2 begin consid procedur call graph order cgo associ program cgo captur local tempor interact weight edg number time one procedur follow anoth program execut also consid interact basic block contain within procedur identifi number cach line touch basic block conflict miss graph cmg attempt move basic block split procedur 3 though weight cmg edg measur global tempor interact procedur occur finit window contain mani entri cach line program interact outsid window interest finit cach effect use graph input color algorithm produc improv code layout instruct cach character tempor behavior captur graph extend interrefer gap irg model 4 defin three new irgbas stream describ differ level procedurebas tempor interact show use compar tempor content cgo cmg tempor relationship graph trg describ gloy et al 5 consider amount work done code reposit improv instruct cach perform 3 5 6 7 8 9 10 follow section discuss work relat work relat work petti hansen 3 employ procedur basic block reorder well procedur split base frequenc count minim instruct cach conflict layout program direct travers call graph edg decreas edg weight order use closestisbest placement strategi chain form merg node lay next entir graph process number relat techniqu propos focus map loop 6 oper system code 10 trace 9 activ set 7 two approach discuss 8 11 reorgan code base compiletim inform profileguid algorithm describ use call frequenc weight graph guid placement 3 6 9 10 first approach also use call frequenc improv perform intellig place procedur cach color cach line second algorithm describ paper captur global tempor inform attempt minim conflict present procedur immedi follow execut similar spirit approach describ 5 differ highlight section v also graph color algorithm work finer level granular cach line size instead cach size 6 11 avoid conflict encount either form chain closestisbest heurist 3 deal subgraph size larger cach paper organ follow section ii iii describ graph construct algorithm section ii describ improv graph prune techniqu section iv report simul result section v review irg tempor analysi model present new method character program interact ii call graph order program layout may involv two step 1 construct graphbas represent program 2 use graph perform layout program avail memori space call graph procedur graph edg procedur call edg weight callreturn frequenc captur program profil procedur map singl vertex call path two procedur condens singl edg two vertic graph edg weight deriv profil inform estim program control flow 8 12 paper concentr profilebas edg weight construct call graph lay program use cach line color start divid cach set color one color cach line procedur count number cach line need hold procedur record cach color use map procedur keep track unavailableset color ie cach line procedur map defin popular procedur set procedur frequent visit popular edg set contain frequent travers edg rest procedur edg call unpopular unpopular procedur prune graph prune reduc amount work placement allow us focu procedur like encount miss discuss base prune algorithm use found 2 note differ popular procedur procedur consum notic portion pro gram overal execut time time consum procedur may label unpopular rare switch control flow anoth procedur procedur rare switch control flow caus small number conflict miss rest procedur algorithm sort popular edg descend edg weight order travers sort popular edg list inspect state ie map unmap two procedur form edg map procedur use heurist figur 1 provid pseudo code descript color map complet descript found 2 process repeat edg popular set process unpopular procedur fill hole left color use simpl input graph gpe descend order base weight elimin threshold foreach remain edg procedur pi pj selectst pi state pj case pi unmap pj unmap arbitrarili map pi pj form compound node pij case ii pi pj map resid two differ compound node ci cj concaten two compound node ci cj minim distanc pi pj color conflict shift ci color space conflict conflict avoid return ci origin posit case iii either pi pj map case ii case iv pi pj map belong compound node ck conflict return posit els move procedur closest end compound node ck pi end ck outsid compound node still conflict shift pi color space conflict occur pj conflict avoid leav pi origin posit updat unavail set color fill hole creat case ii iii iv fig 1 pseudo code cach line color algorithm depthfirst travers unpopular edg join algorithm fig1 assum directmap cach organ associ cach algorithm break address space chunk equal size number cach set cach line size therefor number set repres number avail color map modifi color map algorithm keep track number time color set appear procedur unavailableset color map procedur color set caus conflict long number time color set appear unavail set color less degre associ cach next look effici elimin major work spent color use aggress graph prune algorithm prune rule procedur call graph prune call graph done use fix threshold valu select edg weight 2 section present prune rule reduc size graph use cach color specif design reduc number line cach number procedur p node graph g sum incid edg procedur pi graph g sort procedur base increas nodeweight dowhil least one procedur prune foreach unprun procedur pi number neighbor pi number cach line compris pi sum size numi neighbor pi prune procedur pi edg incid pi fig 2 pseudo code c prune rule number firstgener cach conflict assum use directmap cach contain c cach line program repres undirect graph pe node edg repres procedur call program number cach line span procedur size edg j weighti j number time procedur j follow one anoth control flow either order procedur map assign procedur sizei adjac cach line within cach wraparound cost procedur map sum weighti j procedur j overlap cach optim map one less costli map note cost map depend number immedi adjac procedur whose map cach conflict conflict procedur call one anoth consid cost assign two adjac procedur j conflict cach line constant equal number conflict even though actual number replac cach line may smaller b c prune rule consid cach map problem p possibl determin case particular node abl map cach without caus con flict regardless cach adjac node eventu map case edg connect delet graph creat new cach map problem p 0 one less node figur 2 provid pseudo code prune algorithm prune rule gener rule describ 13 perform graph color graph color problem assign one k color node graph adjac node assign color node neighbor delet regardless neighbor eventu col ore definit least one color left assign delet node color revers order delet remain nonprun graph pass color algorithm color perform prune node must map node laid opposit order delet iii conflict miss graph next consid cach miss occur procedur mani procedur away call graph well differ call chain 14 captur tempor inform weight edg procedur graph estim worst case number conflict miss occur two procedur use graph appli cach line color place procedur cach address space call graph conflict miss graph cmg complet algorithm describ 14 summar contrast cgo section v use interrefer gap analysi conflict miss graph construct cmg built use profil data assum worstcas scenario procedur complet overlap cach address space everi time interact given cach configur determin size procedur p cach line also comput number uniqu cach line span everi basic block execut procedur l identifi first time basic block execut label refer global uniqu access gl cmg undirect procedur graph edg weight accord worst case miss model 14 edg weight updat base content nentri tabl n number cach line tabl fullyassoci use lru replac pol ici everi entri ie cach line tabl call live procedur least one live cach line also call live p activ updat edg weight p procedur least one live cach line activ sinc last activ last activ captur lru tabl lru tabl allow us estim finit cach effect increment cmg edg weight p live procedur p j minimum accumul number uniqu live cach line p last oc currenc ii number uniqu cach line p current activ exclud coldstart miss detail exampl updat cmg edg weight found 14 cmg edg weight accur cgo edg weight cgo edg weight record number cach line may conflict per call ii interact procedur directli call captur iv experiment result use tracedriven simul quantifi instruct cach perform result layout trace gener use atom 15 dec 3000 axp workstat run digit unix v40 applic compil dec c v52 dec c v55 com piler input use train algorithm gather perform result simul 8kb directmap instruct cach 32byte line size similar design dec alpha 21064 21164 instruct cach benchmark suit includ perl specint95 flex gener lexic analyz gs ghostscript postscript viewer bison c parser gen erat also includ pc2dep c frontend written cc f2dep fortran frontend written cc dep2c cc program translat sage intern represent c code ixx idl parser written c tabl present static dynam characterist benchmark column 2 show input use test train algorithm column 35 list total number instruct execut static size applic kilobyt number static procedur program column 6 present percentag program contain popular procedur cmg column 7 contain percentag procedur found popular cmg last column present percentag unactiv procedur use fill gap left color map prune cmg graph form popular set procedur connect edg contribut 80 total sum edg weight cmg 14 notic prune algorithm reduc size cmg 8097 reduc size execut 777945 execut allow us concentr import procedur program simul result compar simul result order produc dec compil static df order proce dure cgo use fix threshold valu prune aggress prune employ tabl ii show instruct cach miss rate case input use train test first column denot applic column 24 79 show instruct cach miss rate number cach miss df cgo cmg respec tive column 5 6 show rel improv cmg df cgo respect see tabl ii averag instruct cach miss rate cmg reduc 30 averag df order 21 averag cgo order cmg improv perform static df cgo benchmark except bison flex gs bison flex alreadi low miss rate improv achiev gs larg number popular procedur map cach signific reduct miss rate next appli prune c prune rule cgo four benchmark bison flex gs perl also tri appli approach cmg found unabl significantli reduc size graph shown tabl iii iv prune rule delet 125 node bison complet elimin firstgener conflict miss similarli node prune benchmark accompani signific drop number firstgener conflict miss howev drop time follow increas total number miss delet node edg contribut firstgener conflict miss color algorithm depriv inform use prevent higher order miss case bison benchmark node insert map complet disregard higher order conflict result suggest node prune rule c use part cach conflict reduct strategi pair techniqu prevent higher order cach conflict cancel benefit reduc firstord conflict b input train sensit sinc procedur reorder algorithm profil driven tri differ train test input file shown tabl v column 2 3 train test input column 4 show size trace million instruct test train input last one parenthes last three column present miss ratio algorithm simul see tabl v although perform cgo cmg approach drop compar simul use input rel advantag cmg cgo static df still remain fact perform gain order benchmark ie cgo cmg achiev similar perform bison gs cmg improv significantli miss ratio ixx v tempor local procedurebas irg next character tempor interact expos cgo cmg tempor relationship graph use extend version interrefer gap irg model 4 procedurebas irg 4 phalk gopinath defin irg address number memori refer success refer address irg stream address trace sequenc success irg valu address use character tempor local similarli measur tempor local larger program granul basic block cach line procedur accuraci newli gener irg stream depend interv granular work set program unit studi procedur vari interv definit program input instr exe size static pop proc unpop proc million kb proc exe size proc exe size perl prime 12 512 671 49 251k 52 35 181k flex fixit 19 112 170 148 166k 176 65 73k bison objpars 56 112 158 224 251k 221 61 69k pc2dep sampl 19 480 665 95 457k 163 103 495k dep2c sampl 31 560 1338 48 271k 17 17 95k gs tiger 34 496 1410 129 640k 112 93 463k ixx layout 48 472 1581 57 272k 51 24 117k attribut trace applic attribut includ number execut instruct applic execut size number static procedur percentag program size occupi popular procedur percentag procedur found popular percentag unactiv procedur use fill memori gap left appli color icach miss rate reduct icach miss program df cgo cmg df cgo df cgo cmg perl 472 460 377 95 83 588123 572650 469329 flex 053 045 045 08 00 100488 85538 85478 bison 004 004 005 01 01 21798 21379 26792 pc2dep 472 546 368 104 178 895261 1035639 698003 dep2c 392 346 311 81 35 1205076 1063682 957102 gs 345 209 208 137 01 1176335 712230 709643 ixx 583 442 257 326 185 2843330 2154747 1251022 avg 352 315 248 ii instruct cach perform static df cgo cmgbase reorder column 1 list applic column 24 show instruct miss rate next two show percent improv algorithm last three column show number instruct cach miss program input visit prune prune prune proc 1st pass 2nd pass 3rd pass bison objpars 125 125 0 0 flex fixit 97 61 5 2 gs tiger 532 524 5 0 perl prime 209 113 4 0 iii result appli c prune rule call graph four applic pass refer prune iter graph algorithm finish node prune graph program cgo first higher c first higher miss rate order order miss rate order order bison 04 1316 19812 14 0 79888 flex 45 55004 30280 51 42467 55233 gs 209 530908 658066 239 25663 791567 perl 460 99327 473070 445 92914 462056 iv result appli c prune rule call graph four applic cach paramet use program train test trace static df cgo cmg input input instr miss rate miss rate miss rate bison objpars cpars 356m 561 005 004 006 flex fixit scan 232m 191 049 043 038 gs tiger golfer 155m 341 339 249 251 ixx layout widget 527m 487 589 445 254 perl prime jumbl 719m 124 436 461 416 miss ratio use differ test train input input describ column 23 size correspond trace present column 4 column 57 includ instruct cach miss ratio origin irg model exploit tempor local singl procedur tempor interact procedur therefor redefin irg valu procedur pair b number uniqu activ procedur invoc b refer valu interrefer procedur gap irpg cgo edg weight record part irpg stream sinc captur irpg valu length 1 trg everi node repres procedur everi edg weight number time procedur vice versa found insid move time window window includ previous invok procedur size proport size cach window content manag lru queue tempor interact record trg character interrefer intermedi line gap irilg whose element equal number uniqu cach line activ success b invoc decis updat trg edg depend size window equival valu present irilg stream edg weight simpli count irilg element valu less predefin window size trg captur tempor interact detail level cgo irilg stream richer content irpg stream cmg edg weight procedur b updat b follow one anoth insid move time window proport size cach size cmg edg weight updat whenev irilg valu less window size trg cmg procedur interact long found insid time window cmg howev replac procedur time window base age individu line procedur 14 trg manag replac entir procedur basi 5 addit cmg edg weight b increment minimum uniqu live cach line success invoc b trg simpli count number time b follow defin interrefer activ line set iral procedur pair sequenc number uniqu live cach line referenc success occurr b iral element valu comput accord worst case miss analysi present section iii cmg edg weight equal sum iral valu whose correspond irilg valu less window size tabl vi show irpg irilg iral element frequenc distribut two edg ixx benchmark select edg 4th 12th highest call frequenc cgo popular edg list label e 4 e 12 respect classifi stream valu rang shown column 14 7 present per stream frequenc distribut column 23 56 8 9 number parenthes indic close cgo approxim tempor inform captur stream consider exampl 661 irilg element e 12 lie rang 2 10 uniqu cach line 624 record cgo 3 differ approach edg weight signific impact global edg order final procedur placement ixx cmg cgo popular edg set intersect edg index cgo order edg index order fig 3 rel edg order intersect cmg cgo popular edg order ixx fig 3 compar order common popular edg cgo cmg ixx point locat 34 mean popular edg consider found 3rd cgo 4th cmg order point straight line correspond edg rel posit edg list point lie straight line indic edg higher prioriti cgo cmg edg list notic edg fall straight line due artifici inflat edg index cmg edg list much larger irpg 4th 12th irilg 4th 12th iral 4th 12th valu vi frequenc distribut irpg irilg iral sequenc two procedur pair 4th 12th call frequenc ixx benchmark program cgo pop cmg pop cgo cmg cgo pop cmg pop cgo cmg proc proc proc edg edg edg bison 43 flex 28 28 26 94 23 gs 94 158 94 105 1478 105 perl 20 vii intersect cmg cgo popular procedur edg set cgo one differ prune algorithm use although lot highli weight edg maintain rel posit signific perform improv cmg came edg promot higher edg list order tabl vii show intersect cmg cgo popular procedur edg set column 24 5 list cgo cmg popular procedur edg set along intersect number shown tabl vii sensit prune algorithm compar better illustr differ cmg cgo approach although one procedur set alway superset cmg edg list alway larger cgo edg list vi acknowledg would like acknowledg contribut h hashemi b calder work research support nation scienc foundat career award program ibm research microsoft research vii conclus perform cachebas memori system critic today processor research shown compil optim significantli reduc memori la tenci everi opportun taken compil paper present two profileguid algorithm procedur reorder take consider procedur size cach organ well cgo attempt minim firstgener conflict cmg target higher gener miss approach use prune graph model guid procedur placement via cach line color cmg algorithm improv instruct cach miss rate averag 30 static depth first search procedur 21 cgo also introduc three new sequenc irpg irilg iral base irg model better character content graph model r evalu associ cpu cach effici procedur map use cach line color profileguid code posit interrefer gap model tempor local program behavior procedur placement use tempor order inform program optim instruct cach code reorgan instruct cach procedur map use static call graph estim achiev high instruct cach perform optim compil optim instruct cach perform oper system intens workload compiletim instruct cach optim predict program behavior use real estim profil regist alloc spill via graph color temporalbas procedur reorder improv instruct cach perform tr ctr altman david kaeli yaron sheffer guest editor introduct welcom opportun binari translat comput v33 n3 p4045 march 2000 bartolini c prete optim instruct cach perform embed system acm transact embed comput system tec v4 n4 p934965 novemb 2005 bartolini c prete propos inputsensit analysi profiledriven optim embed applic acm sigarch comput architectur news v32 n3 p7077 june 2004 mohsen sharifi behrouz zolfaghari yaarc yet anoth approach reduc rate conflict miss journal supercomput v44 n1 p2440 april 2008