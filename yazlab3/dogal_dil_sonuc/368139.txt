flexibl messag pass mechan object vhdl defin objectori extens vhdl necessari messag pass one complex issu larg impact whole languag paper identifi requir messag pass suit model hardwar classifi differ approach allow abstract commun reus protocol system level new flexibl messag pass mechan propos object vhdl introduc b introduct hardwar system describ objectori fashion set interact commun concurr object consequ encapsul object tend rel autonom loos coupl environ 13 object contain element need perform function properti provid high potenti reus object environ origin one hand special structur decomposit 1 work fund part omiesprit project request contract 20616 object requir commun among object commun enabl object use servic ob ject inform object someth concurr domain synchron commun mechan call messag pass objectori domain basic idea object abl send receiv messag provid get inform cours desir messag pass mechan preserv much possibl loos coupl object environ order obtain univers reusabl object gener commun concurr havioursprocess two mechan use 6 first commun use share memori second messag pass via channel commun pathway commun concurr object latter choic seem appropri pass messag one basic concept objectori paradigm figur 1 show abstract pictur messag pass object x role client need servic object role server invok correspond method x send messag via commun pathway messag exchang control protocol receiv messag correct method invok function provid dispatch indic figur consid dispatch part messag pass mechan execut method return valuesif anyar repli figur 1 messag pass send messag invok method return valu protocol commun pathway object attribut method object x attribut methodscopyright 1998 edaa publish proceed date 98 februari 2325 1997 pari franc person use materi permit howev permiss reprintrepublish materi advertis promot purpos creat new collect work resal redistribut server list reus copyright compon work work must obtain edaa sequenti domain often term messag pass method call use synonym concurr domain term differ semant method call invok method need comput thread caller execut method invoc method via messag pass need comput thread caller target object use 3 aspect messag pass chapter sever aspect messag pass consid separ consider show one hand design space messag pass hand larg impact whole languag 31 consist languag messag pass integr part objectori languag relationship messag pass part languag bilater indispens messag pass consist objectori concept concept use specif messag pass exampl languag embodi differ encapsul concept class object messag pass take accountat least implement class concept base abstract data type need anoth realiz messag pass compar class concept repres structur hardwarecompon messag pass mechan propos object vhdl paper give exampl objectori concept like classif inherit polymorph use implement anoth desir featur messag pass con sitenc techniqu objectori model mean consist term refin extensi biliti model extend compon need refin differ way commun messag pass mechan must adapt objectori mean consist mean abstract level messag pass fit abstract level whole languag intend program interfac abstract easi use exampl appropri encapsul transmiss messag sendr ceiv method abstract encapsul howev shouldnt consid isol larg impact aspect messag pass eg flexibl simula tionsynthesi 32 commun pathway pass messag one object anoth perform commun protocol requir commun pathway interconnect object commun restrict 11 relat 2 target object identifi directli commun path way abstract definit commun pathway differ significantli literatur case method call semant procedur function call procedurefunct call mechan name target objectmethod abstractli consid commun pathway commun object repres hardwar com ponent vhdl termsent anoth represent commun pathway necessari 14 kind identifi entiti object call handl exchang among entiti propos object handl anoth object handl use address object pass messag handl consid commun pathway solut abstract commun pathway direct physic represent flexibl allow establish commun pathway runt ime gener allow send messag object dynam gener runtim dynam gener object howev might power featur system design realli far away hardwar anoth solut propos 12911 use vhdl mechan exchang data compon ie interconnect compon signal send er point view target object address port connect object cours approach isnt flexibl handl solut address compo nentobject close hardwar although signal use commun still gap abstract provid vhdl signal commun objectori sens 33 protocol softwar send messag object semant procedur function call 3 result given back assign 12 hardwar messag pass among concurr componentsobject need special protocol cours necess protocol result much tighter relat object desir objectori paradigm cf chapter 2 send messag need knowledg abil perform target object commun protocol 2 11 relat necessarili mean point point commun object consist concurr process 3 without consider distribut program figur 2 encapsul object protocol commun point view protocol seen encapsul object figur 2 follow subchapt sever aspect protocol messag pass illumin 331 abstract sinc objectori paradigm address model higher abstract level detail commun protocol encapsul special protocol correspond ab straction protocol appli abstract interfac 332 flexibl univers messag pass mechan hardwar design need possibl integr differ protocol messag exchang abstract model mmu system level may need anoth protocol simpl regist rt level perspect top design methodolog possibl refin protocol toward detail accord descript level need occur cosimul abstract model togeth alreadi synthes model desir flexibl howev choos refin new protocol expens encapsul protocol even interfac use protocol encapsul possibl hide protocol languag complet 333 synchron concurr objectori domain object need synchron describ behaviour depend state object would like differ three synchron mode synchron asynchron datadriven synchron commun sender object need wait receiv object readi receiv messag synchron commun mechan 7 sender objectprocess block moment send messag request servic intend invok messag finish result given back asynchron commun sender wait readi server object receiv messag order avoid loss messag mode requir queu messag within commun pathway receiv addit advantag queue potenti flexibl dequeu messag anoth order fifo hand messag queue larg impact simul synthesi aspect gener asynchron commun nonblock 3 sender object continu comput directli send return result requir send explicitli messag server client datadriven synchron 5 allow sender object run comput result previous sent messag request need case sender wait result provid server object literatur initi send messag request describ asynchron 3 howev synchron nonblock send messag request also conceiv summari datadriven synchron allow flexibl standard synchronousasynchron commun 334 concurr consist object vhdl messag pass mechan must preserv support concurr provid object vhdl relat commun concurr ambival one hand concurr objectsprocess es reason necess messag pass hand messag pass mechan restrict concurr object contain one process dispatch process receiv request dispatch request sequenti concurr objectori languag expect object activ run paral lel besid concurr parallel run object concurr insid object contain concurr process intraobject concurr may allow object execut request servic parallel exampl dualport ram allow concurr read write oper model concurr dispatch process howev allow parallel method execut rais potenti problem nondeterminist behaviour object due concurr access attribut vhdl alreadi provid mechan solv concurr access signal variabl dispatch dispatch dispatch method protocol protocol protocol protocol object commun pathway concurr write access signal handl resolut function variabl propos protect type use 15 least atom access variabl ensur problem nondetermin still unsolv valu share variabl depend activ order access process possibl avoid nondeterminsim ensur concurr method access exclus tribut implement group method access attribut group get dispatch process mayb queue method without access conflict execut parallel 34 simulationsynthesi effici simul effici synthesiz gener aspect qualiti objectori extens hdl influenc implement decis messag passingprotocol commun frequenc object complex protocol enrich lot detail time inform unlimit messag buffer avoid loss messag may decreas simul speed significantli moreov without limit maxim buffer size protocol translat hardwar 4 classif scheme chapter aspect messag pass mechan objectori hdl deal propos discuss use defin classif scheme differ messag pass mechan first criterion classif flexibl messag pass mechan follow case distinguish flexibl differ protocol possibl refin fix protocol modifi semiflex one protocol potenti refin differ notrefin protocol second criterion abil object accept perform sever request concurr distinguish ye possibl possibl third criterion synchron messag pass block sender alway block return valu receiv nonblock sender continu execut send request mayb certain point execut wait result depend kind messag kind method invoc method call vs messag pass ing cf introduct block non block commun possibl last criterion whether queue buffer messag receiv busi distinguish queue provid one one queue per object mani one queue per object 5 oovhdl approach last year sever propos objectori extens vhdl made 1241214 propos need defin messag pass objectori propos consid two typic complet differ propos select describ messag pass mechan done isol necessari introduc core concept propos certain degre outsid scope paper draw complet pictur special propos vista approach 14 introduc new design unit call entiti object eo base vhdl entiti architectur addit entiti eo may contain method specif call oper speci ficat oper similar procedur visibl outsid eo contrast procedur oper prioriti specifi minim execut time invoc oper eo interconnect explicit commun pathway signal address eo eo accompani handl new predefin type store signal variabl part composit type handl exchang make correspond eo address object special handl address object self predefin parent class address new keyword super messag send request perform send statement includ handl target eo name oper paramet valu eo one queue buffer incom messag messag queue dequeu prioriti messag prioriti dequeu fifo one queue per eo mean concurr request se flexibl parallel method per object synchron queue per object flexibl fix semiflex ye block nonblock one mani tabl 1 classif scheme quential eo need invok oper send self request queu treat like procedur call immedi execut mechan avoid deadlock recurs method call messag block default nonblock mode immedi immedi messag restrict inparamet block mode chang inherit eo synchron rendezv concept pro vide accept select statement similar ada use establish rendezv final remark propos messag pass mechan neither sythesiz intend abstract concept dynam commun pathway repres handl concept unlimit messag buffer counterpart hardwar anoth approach develop oldenburg univers 12 base vhdl type concept record use repres object allow record expand inherit mark tag record correspond method simpl procedur must defin design unit packag method formal encapsul object belong paramet list method contain paramet object type assign method object tag record correspond classwid type exist union type deriv tag record attribut class classwid type referenc polymorph base classwid type method call actual classwid type mode inout actual type determin runtim correct method invok interprocess commun model consist vhdl signal abstract expand support use polymorph signal classwid type send messag anoth object semant procedurefunct call terminolog method call request method execut sender block end request sever method object perform concurr request differ process case concurr assign signal instanti tag record resolut function necessari even 12 special protocol mechan propos protocol integr protocol built languag classif refer propos masterslav protocol 6 object vhdl object vhdl objectori extens vhdl develop ecproject request 4 810 object vhdl combin structur object approach 14 type object approach 12 languag extens shown suitabl hardwar design structur object usual vhdl entiti attribut method entiti class declar within declar part entiti correspond vhdl object declar signal sharedvari constant procedur function declar respec tive implement method follow correspond architectur singl inherit entiti architectur provid polymorph entiti object type class consist declar definit likewis class type declar like usual type declar attribut method assembl new class end class construct implement declar method privat method declar interfac follow correspond class bodi well entiti class singl inherit provid type class class type associ classwid type mark new attribut class classwid type union type deriv subclass similar 12 approach classwid type use realiz polymorph type class variabl signal classwid type tclass hold instanti class deriv call method directli visibl instanti class type semant simpl procedurefunct call block call method entiti object type object instanti anoth entiti difficult method entiti call directli entiti encapsul proceduresmethod complet interfac outer world port gener entiti break encapsul would 4 object vhdl defin 9 object vhdl languag refer manual intend extens vhdl lrm although current statu object vhdl within request project stabl minor chang languag possibl futur flexibl parallel method per object synchron queue per object fix one tabl 2 classif 14 flexibl parallel method per object synchron queue per object flexibl ye block tabl 3 classif 12 chang vhdl solut problem chosen 14 introduc new design unitth entiti object method oper eo visibl outsid eo due addit implement cost new design unit solut discard object vhdl 61 messag pass mechan provid flexibl use appropri commun messag exchang messag pass fix languag definit nevertheless way implement flexibl messag pass shown usag objectori featur main idea describ detail basic messag pass mechan consist three part commun structur defin connect object commun pathway fig ure 3 protocol messag exchang figur 4 dispatch figur 3 611 commun structur enabl commun object repres entiti type object insid differ proc ess commun pathway object implement vhdl signal besid signal carri messag addit signal protocol may necessari avoid resolut function signal unidirect consequ requir two opposit commun pathway messag request produc return valu physic connect depict figur 3 figur 3 commun structur target object commun address port connect sender ceiver commun pathway restrict connect two object howev vhdl signal provid abstract expect objectori messag pass enabl connect signal provid requir abstract implement polymorph type class signal get abil hold differ messag encapsul commun protocol messag commun protocol model structur shown figur 4 follow main emphasi given model messag 612 messag protocol messag protocol implement encapsul abstract type class messag class abstract intend instanti serv base class class repres real messag furthermor class provid interfac allow appli messag pass among ob ject interfac inherit deriv class declar method like send messag receiv me sage dispatch etc figur 4 model messag enabl commun pathway hold messag target object type class messag refin inherit target class differ method instanti receiv kind target receiv method m1 method m2 dispatch signal messagetoreceiverclass signal messagetoreceiverclass unidirect commun pathway messag protocol sender entiti object entiti object class receiv method m1 x inout method m2 z inout messag execmethod send dispatch returnresult receiv messagetoreceiv execmethod gener function address special class address method paramet z execmethod object abstract subclass deriv figur 4 2ndstage class implement addit function purpos distinguish differ kind object differ object instanti class repres one time final messag must correspond one method invok messag must contain paramet method invoc allow class second stage figur 4 refin subclass repres method target object figur 4 3rd stage subclass name method method paramet repres attribut signal instanti class hold messag correspond special method provid commun protocol one defin superclass commun pathway howev abl hold messag sent object instanti commun pathway signal classwid type belong represent kind object figur 4 2nd stage abil given signal final class repres method fig ure 4 third stage implement method execmethod invok correspond method target ob ject mention method entiti object invok directli entiti encapsul method complet nevertheless allow method invoc new construct entiti end intro duce semant construct make declar entiti class visibl insid type class order allow invoc implement method must avail wherev execmethod invok instanc messag class result produc method execut sent back mechan 613 dispatch entiti object contain one dispatch process process sensit port carri incom messag must specifi user dispatch incom messag function provid class messag use implement method dispatch basic within dispatch process method execmethod receiv messag invok call desir method entiti object type receiv messag decid runtim execmethod call number dispatch process chosen user determin number concurr execut method concurr method allow user take care conflict concurr access attribut ensur atom access attribut share variabl protect mechan cf chapter 33415 use 614 synchron synchron flexibl synchron asynchron data driven sychron cf chapter 333 model propos mechan requir object block send messag concurr ob ject wait least ensur protocol target object accept request cours addit synchron necessari result request need asynchon commun messag queue integr messag pass mechan 62 summari messag pass provid messag pass mechan provid easi mean send messag sender identifi target object port connect need call send method class messag port name messag pa ramet send method perform protocol assign messag interconnect signal receiv readi accept send sender sure messag receiv continu execut potenti result request need case sender block result avail receiv object possess dispatch process sensit connect port signal new messag arriv dispatch process perform ceiver part commun protocol invok desir method cours function encapsul receiv dispatch method class messag potenti result send back implicit immedi comput explicit new commun final import note model messag cf chapter 612 realli straight forward effort use commun mechan reduc significantli tool produc messag automat 63 classif accord propos classif scheme messag pass classifi shown tabl 4 differ protocol defin store librari requir refin concurr method execut depend number dispatch process user defin propos commun mechan method call block pass messag block well block queue buffer messag allow asynchron commun model principl integr commun import note special implement messag pass mechan may result slightli classif 7 futur work precompil translat object vhdl vhdl implement avail tool desir benefit object vhdl especi messag pass mechan evalu propos mechan messag pass potenti improv better protocol reus stronger separ protocol messag use model effort caus restrict unidirect commun pathway reduc resolut function connect signal defin 8 conclus analyz discuss sever aspect abstract commun design space messag pass shown classif scheme messag pass mechan develop scheme appli messag pass mechan two current discuss propos objectori extens vhdl final new idea messag pass mechan develop object vhdl introduc classi fie new approach target especi flexibl pro tocol reus protocol consist vhdl concurr 9 r suav painless extens objectori vh dl object orient extens vhdl lami propos objectori model extens concurr system compositionfilt approach concurr reusabl sequenti parallel specif design embed system commun sequenti process languag architectur document object vhdl inherit concept signal object orient extens vhdl share variabl languag tr commun sequenti process concurr reusabl sequenti parallel realtim objectori model specif design embed system inherit concept signal objectori extens vhdl object orient extens vhdl lami propos ctr cristina barna wolfgang rosenstiel objectori reus methodolog vhdl proceed confer design autom test europ p133e januari 1999 munich germani annett bunker ganesh gopalakrishnan salli mckee formal hardwar specif languag protocol complianc verif acm transact design autom electron system toda v9 n1 p132 januari 2004