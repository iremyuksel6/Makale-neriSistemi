impuls memori control abstractimpuls memori system architectur add option level address indirect memori control applic use level indirect remap data structur memori result control data access cach improv cach bu util impuls design requir modif processor cach bu design sinc function resid memori control result impuls adopt convent system without major system chang describ design impuls architectur impuls memori system use varieti way improv perform memorybound applic impuls use dynam creat superpag cheapli dynam recolor physic page perform stride fetch perform gather scatter indirect vector perform result demonstr effect optim varieti scenario use impuls speed rang applic 20 percent factor 5 altern impuls use os dynam superpag creation best polici creat superpag use impuls outperform previous known superpag creation polici b introduct sinc 1987 microprocessor perform improv rate 55 per year contrast latenc improv 7 per year dram bandwidth 1520 per year 17 result rel perform impact memori access continu grow addit instruct issu rate increas demand memori bandwidth grow least proportion possibl even superlinearli 8 19 mani import applic eg spars databas signal process multimedia cad applic exhibit suffici contact inform prof john carter school comput 50 central campu drive room 3190 univers utah slc ut 841129205 retraccsutahedu voic 8015855474 fax 8015815843 local refer make effect use onchip cach hierarchi applic grow processormemori perform gap make difficult effect exploit tremend process power modern microprocessor impuls project attack problem design build memori control power convent one impuls introduc option level address translat memori control key insight featur exploit unus physic address translat real physic address memori control unus physic address legitim address back dram exampl convent system 4gb physic address space 1gb instal dram 3gb physic address space remain unus call unus address shadow address constitut shadow address space impuls control map physic memori give applic control mediat os use shadow address impuls support applicationspecif optim restructur data use impuls requir softwar modif applic compil oper system requir hardwar modif processor cach buse simpl exampl impuls memori remap use consid program access diagon element larg dens matrix physic layout part data structur shown righthand side figur 1 convent memori system time processor access new diagon element aii request full cach line contigu physic memori typic 32128 byte data modern system program access singl word cach line access shown top half figur 1 use impuls applic configur memori control export dens shadow space alia contain diagon element os map new set virtual address shadow memori applic access diagon element via new virtual alia access shown bottom half figur 1 remap array diagon dens alia yield sever perform benefit first program enjoy higher cach hit rate sever diagon element load cach second program consum less bu bandwidth nondiagon element sent bu third program make effect use cach space diagon element contigu shadow address gener impuls flexibl allow applic custom address fit need section 2 describ impuls architectur describ organ memori control well system call interfac applic use control oper system must mediat use memori control prevent applic access other physic memori section 3 describ type optim impuls support mani optim describ new impuls first system provid hardwar support generalpurpos comput system optim includ transpos matric memori without copi creat superpag without copi scattergath indirect vector section 4 present result simul studi impuls show optim benefit wide rang applic variou applic see speedup rang 20 factor 5 os polici dynam superpag creation use impuls around 20 better speedup prior work section 5 describ relat work great deal work done compil oper system commun relat optim contribut impuls provid hardwar support mani optim previous perform pure softwar result tradeoff perform optim differ section 6 summar conclus describ futur work impuls architectur impuls expand tradit virtual memori hierarchi ad address translat hardwar memori control option extra level remap enabl fact physic address tradit virtual memori system typic map valid memori locat unus physic address constitut shadow address space technolog trend put bit physic address exampl 64bit system come one result trend shadow space get larger larger impuls allow softwar configur memori control interpret shadow address virtual unus physic address way improv effici onchip cach tlb sinc hot data dynam segreg cold data data item whose physic dram address contigu map contigu shadow address respons cach line fetch shadow address memori control fetch compact spars data dens cach line return data proce sor determin data associ compact shadow cach line resid physic memori impuls first recov offset within origin data structur call pseudovirtu address translat pseudovirtu address physic dram address pseudovirtu address space page layout mirror virtual address space allow impuls remap data structur lie across noncontigu physic page shadowpseudovirtualphys map take place within memori control oper system manag resourc expand memori hierarchi provid interfac applic specifi optim particular data structur 21 softwar interfac os support exploit impuls appropri system call must insert applic code configur memori control architectur languag implement group univers massachusett develop compil technolog impuls respons impuls system call os alloc rang contigu virtual address larg enough map element new synthet data structur os map new data structur shadow memori correspond physic data element alloc contigu rang shadow address download two piec inform mmc function mmc use perform map shadow pseudovirtu space ii set page tabl entri use translat pseudovirtu physic dram address exampl consid remap diagon n n matrix figur 2 depict memori translat matrix remap imag diagon upon see access shadow address synthet diagon data structur memori control gather correspond diagon element origin array pack dens cach line return cach line processor os interfac allow align offset characterist remap data structur specifi give applic control l1 cach behavior current impuls design coher maintain softwar os applic programm must keep alias data consist explicitli flush cach 22 hardwar organ organ impuls control architectur depict figur 3 critic compon impuls mmc shadow engin process shadow access shadow engin contain small sram assembl buffer use scattergath cach line shadow address space shadow descriptor store remap configur inform wast bu bandwidth convent memori system impuls memori system impuls control cach physic page figur 1 use impuls remap diagon dens matrix dens cach line black box repres data diagon wherea gray box repres nondiagon data diagon virtual memori shadow memori pseudovirtu memori physic memori page tabl convent memori system impuls memori system remap function figur 2 access spars diagon element array via dens diagon variabl impuls cpu mmu system memori bu shadow address dram interfac normal address shadow engin addrcalc assembl buffer descriptor impuls mmc figur 3 impuls memori control organ alu unit addrcalc translat shadow address pseudovirtu address memori control translat lookasid buffer mtlb cach recent use translat pseudo virtual address physic address shadow engin contain eight shadow descriptor capabl save configur set one remap shadow descriptor share alu unit mtlb sinc extra level address translat option address appear memori bu may physic back dram shadow memori space valid physic address pass untransl dram interfac shadow address must convert physic address present dram shadow engin first determin shadow descriptor use pass content addrcalc unit output addrcalc seri offset individu spars element need fetch offset pass mtlb comput physic address need fetch hide latenc fetch remap data shadow descriptor configur prefetch remap cach line follow current access one depend impuls use access particular data structur shadow address translat take three form direct stride scattergath direct map translat shadow address directli physic dram address map use recolor physic page without copi construct superpag dynam stride map creat dens cach line array element contigu map function map address soffset shadow space pseudovirtu address pvaddr stride soffset pvaddr start address data structur pseudovirtu imag pvaddr assign os upon configur scattergath map use indirect vector vec translat address soffset shadow space pseudovirtu address pvaddr 3 impuls optim impuls remap use enabl wide varieti optim first describ impuls abil pack data cach line either use stride scattergath remap use examin two scientif applic kernelsspars matrixvector multipli smvp dens matrixmatrix product dmmpand three imag process algorithmsimag filter ing imag rotat ray trace show impuls abil remap page use automat improv tlb behavior dynam superpag creation result publish prior confer paper 9 13 44 49 31 spars matrixvector product spars matrixvector product smvp irregular comput kernel critic mani larg scientif algorithm exampl time conjug gradient 3 simul 33 spent perform smvp avoid wast memori spars matric gener compact nonzero element correspond index array store exampl class input matrix na conjug gradient kernel cga 14000 14000 contain 185 million nonzero although spars encod save tremend amount memori spars matrix code tend suffer poor memori perform data must access indirect vector cga sgi origin 2000 processor 2way 32k l1 cach 2way exhibit l1 l2 cach hit rate 63 92 respect inner loop spars matrixvector product cg roughli n sum 0 j rowsi rowsi11 sum code data structur smvp illustr figur 4 iter multipli row spars matrix dens vector x access x indirect via column index vector spars make code perform poorli convent memori system whenev x access convent memori system fetch cach line data one element use larg size x column data spars natur access x inhibit data reus l1 cach element column data use almost everi access x result l1 cach miss larg l2 cach enabl reus x physic data layout manag prevent l2 cach conflict x unfortun convent system typic provid mechan manag physic layout impuls memori control support scattergath physic address indirect vector vector machin cdc star100 18 provid scattergath capabl hardwar within processor impuls allow convent cpu take advantag scat tergath function implement oper memori reduc memori traffic bu exploit impuls cg smvp code modifi follow impuls remapx x n column indirect n sum 0 j rowsi rowsi11 sum dataj xj impuls remap oper ask oper system 1 alloc new region shadow space 2 map x shadow region 3 instruct memori control map element shadow region xk physic memori xcolumnk remap array set code access remap version gather structur rather origin structur x optim improv perform smvp two way first spatial local improv l1 cach sinc memori control pack gather element cach line cach line contain 100 use data rather one use element second sum 0 j rowsi rowsi11 sum dataj xcolumnj n f2 c u column row figur 4 conjug gradient spars matrixvector product matrix encod use three dens array data row column content data rowsi indic th row begin data columni indic column element store datai come processor issu fewer memori instruct sinc read indirect vector column occur memori control note use scattergath memori control reduc tempor local l2 cach remap element x reus sinc element differ address altern scattergath dynam physic page recolor direct remap physic page physic page recolor chang physic address page reusabl data map differ part physicallyaddress cach nonreus data perform page recolor conflict miss elimin convent machin physic page recolor expens way chang physic address data copi data physic page impuls allow physic page recolor without copi virtual page recolor explor author 6 smvp x vector reus within iter element data row column vector use iter altern scattergath x memori control impuls use physic recolor page x conflict data structur l2 cach exampl cga benchmark x 100k byte would fit l1 cach would fit mani l2 cach impuls remap x page occupi physicallyindex l2 cach remap data row column small number page conflict x experi color vector x data column conflict l2 cach multiplicand vector x heavili reus color occupi first half l2 cach keep larg data column structur conflict divid second half l2 cach two quarter color data column occupi one quarter cach effect use piec l2 cach set virtual stream buffer 29 data row column 32 tile matrix algorithm dens matrix algorithm form import class scientif kernel exampl lu decomposit dens choleski factor dens matrix comput kernel algorithm tile block increas effici iter tile algorithm reorder improv memori perform difficulti use tile algorithm lie choos appropri tile size 27 tile noncontigu virtual address space difficult keep conflict cach avoid conflict either tile size must kept small make ineffici use cach tile must copi nonconflict region memori expens impuls provid altern method remov cach conflict tile use simplest tile algorithm dens matrixmatrix product dmmp exampl impuls improv behavior tile matrix algorithm assum comput want keep current tile c matrix l1 cach comput addit sinc row matrix use multipl time comput row c matrix would like keep activ row l2 cach impuls allow basestrid remap tile noncontigu portion memori contigu tile shadow space result impuls make easi os virtual remap tile sinc physic footprint tile match size use os remap virtual address matrix tile new shadow alia elimin interfer virtuallyindex l1 cach first divid l1 cach three segment segment keep tile current output tile c input tile b finish one tile use impuls remap virtual tile next physic tile maintain cach consist must purg b tile flush c tile cach whenev remap section 412 show cost minor 33 imag filter imag filter appli numer filter function imag modifi appear imag filter may use attenu highfrequ compon caus nois sampl imag adjust imag differ geometri detect enhanc edg within imag creat variou special effect box bartlett gaussian binomi filter common practic modifi input imag differ way share similar comput characterist concentr repres class filter binomi filter 15 pixel output imag comput appli twodimension mask input imag binomi filter comput similar singl step success overrelax algorithm solv differenti equat filter pixel valu calcul linear function neighbor pixel valu origin imag correspond mask valu exampl order5 binomi filter valu pixel j output imag be256 avoid edg effect origin imag boundari must extend appli mask function figur 5 illustr black andwhit sampl imag applic small binomi filter practic mani filter function includ binomi separ mean symmetr decompos pair orthogon linear filter exampl twodimension mask decompos two onedimension linear mask twodimension mask simpli outer product onedimension mask transpos process appli mask input imag perform sweep first along row column calcul partial sum step pixel origin imag use short time make filter pure stream applic impuls transpos input output imag array without copi give column sweep much better cach behavior 34 imag rotat imag warp refer algorithm perform imagetoimag transform separ imag warp decompos multipl onedimension transform 10 separ warp impuls use improv cach tlb perform onedimension travers orthogon imag layout memori threeshear imag rotat algorithm exampl separ imag warp algorithm rotat 2dimension imag around center three stage perform shear oper imag figur 5 exampl binomi imag filter origin imag left filter imag right illustr figur 6 algorithm simpler write faster run fewer visual artifact direct rotat underli math straightforward rotat angl express matrix multipl 0a co sin sin co x rotat matrix broken three shear follow co sin sin co 1 0 tan 1a 1 sin tan 1a none shear requir scale sinc determin matrix 1 involv shift row column algorithm simpl understand implement robust defin rotat valu 0 90 twoshear rotat fail angl near 90 assum simpl imag represent array pixel valu second shear oper along axi walk along column imag matrix give rise poor memori perform larg imag impuls improv cach tlb perform transpos matrix without copi walk along column imag replac walk along row transpos matrix isosurfac render use ray trace isosurfac render benchmark base techniqu demonstr parker et al 37 benchmark gener imag isosurfac volum specif point view figur threeshear rotat imag counterclockwis one radian origin imag upper left first shear horizont upper right imag shear upward lower right final rotat imag lower left gener via one final horizont shift contrast volum visual method method gener explicit represent isosurfac render zbuffer instead use bruteforc ray trace perform interact isosurfac ray first isosurfac intersect determin valu correspond pixel approach high intrins comput cost simplic scalabl make ideal larg data set current highend system tradit ray trace use volum visual suffer poor memori behavior ray travel along direct data store ray must trace potenti larg fraction volum give rise two problem first mani memori page may need touch result high tlb pressur second ray high angl incid may visit one volum element voxel per cach line case bu bandwidth wast load unnecessari data pollut cach care handoptim ray tracer memori access pattern parker et al achiev accept perform interact render 10 frame per second improv data local organ data set multilevel spatial hierarchi tile compos smaller cell smaller cell provid good cachelin util macro cell creat cach minimum maximum data valu cell tile macro cell enabl simpl minmax comparison detect whether ray intersect isosurfac within tile empti macro cell need travers care handtil volum data set yield much better memori perform choos optim number level spatial hierarchi size tile level difficult result code hard understand maintain impuls deliv better perform handtil lower program cost need preprocess volum data set good memori perform impuls memori control remap dynam screen volum figur 7 isosurfac render use ray trace pictur left show ray perpendicular view screen trace volum one right illustr ray visit sequenc voxel volum impuls optim voxel fetch memori via indirect vector repres voxel sequenc ray addit sourc code retain readabl modifi like mani realworld visual system benchmark use orthograph tracer whose ray intersect screen surfac right angl produc imag lack perspect appear far away rel simpl comput use impuls extract voxel ray potenti intersect travers vol ume righthand side figur 7 illustr ray visit certain sequenc voxel volum instead fetch cach line full unnecessari voxel impuls remap ray voxel requir use voxel fetch 36 onlin superpag promot impuls use improv tlb perform automat oper system automat creat superpag dynam superpag support translat lookasid buffer tlb almost modern processor group contigu virtual memori page map singl tlb entri 12 30 43 use superpag make effici use tlb physic page back superpag must contigu properli align dynam coalesc smaller page superpag thu requir page coincident adjac align unlik copi becom overhead promot superpag copi includ direct indirect cost direct cost come copi page chang map indi 0physic address 0x06155000 0x40138000 0x20285000 0x80243000 0x00005000 0x00004000 virtual address shadow address 0x00007000 00004 004physic size processor tlb virtual memori control figur 8 exampl creat superpag use shadow space rect cost includ increas number instruct execut tlb miss due new decisionmak code miss handler increas content cach hierarchi due code data use promot process decid whether creat superpag cost must balanc improv tlb perform romer et al 40 studi sever differ polici dynam creat superpag tracedriven simul analysi show polici balanc potenti perform benefit promot overhead improv perform tlbbound applic 50 work extend romer et al show impuls chang design dynam superpag promot polici impuls memori control maintain page tabl shadow memori map build superpag base page physic contigu entail simpli remap virtual page properli align shadow page memori control map shadow page origin physic page processor tlb affect extra level translat take place control figur 8 illustr superpag map work impuls exampl os map contigu 16kb virtual address rang singl shadow superpag physic page frame 0x80240 address shadow physic rang place system memori bu memori control detect physic address need retransl use local shadowtophys translat tabl exampl figur 8 processor translat access virtual address 0x00004080 shadow physic address 0x80240080 control turn translat real physic address 0x40138080 perform perform seri detail simul evalu perform impact optim describ section 3 studi use ursim 48 executiondriven simul deriv rsim 35 ursim model microarchitectur close mip r10000 microprocessor 30 64entri instruct window configur issu four instruct per cycl model 64kilobyt l1 data cach nonblock writeback virtual dex physic tag directmap 32byte line 512kilobyt l2 data cach nonblock writeback physic index physic tag twoway associ 128byte line l1 cach hit take one cycl l2 cach hit take eight cycl ursim model splittransact mip r10000 cluster bu snoopi coher pro tocol bu multiplex address data eight byte wide threecycl arbitr delay onecycl turnaround time model two memori control convent highperform mmc base one sgi o200 server impuls mmc system bu memori control dram clock rate one third cpu clock memori system support critic word first ie stall memori instruct resum execut first quadword return load latenc first quadword cycl unifi tlb singlecycl fulli associ softwaremanag combin instruct data employ leastrecentlyus replac polici base page size 4096 byte superpag built poweroftwo multipl base page size biggest superpag tlb map contain 2048 base page model 128entri tlb remaind section examin simul perform impuls exampl given section 3 calcul l2 cach hit ratio mem memori hit ratio use total number load execut total number l2 cach access divisor ratio formul make easier compar effect l1 l2 cach memori access sum l1 cach l2 cach memori hit ratio equal 100 41 finegrain remap first set experi exploit impuls finegrain remap capabl creat synthet data structur better local origin program 411 spars matrixvector product tabl 411 show impuls use improv perform na class conjug gradient cga benchmark first column give result run cga nonimpuls system second third column give result run cga impuls system second column number come use impuls memori control perform scattergath third column number come use perform physic page color convent memori system cga suffer mani cach miss nearli 17 access go memori inner loop cga small gener cach miss quickli lead larg number cach miss outstand given time larg number outstand memori oper caus heavi content system bu memori control dram baselin version cga bu util reach 885 result averag latenc memori oper reach 163 cycl baselin version cga behavior combin high cach miss rate caus averag load cga take 476 cycl compar 1 cycl l1 cach hit scattergath remap cga improv perform factor 3 larg due increas l1 cach hit ratio decreas number loadsstor go memori main memori access remap vector x load cach sever use element origin vector x increas l1 cach hit rate word retriev element remap array x improv spatial local cga scattergath remap reduc total number load execut program 493 million 353 million origin program two load issu comput xcolumnj scattergath version program one load issu processor load indirect vector occur memori control reduct compens scattergath increas averag cost load account almost onethird cycl save provid anoth exampl use impuls use recolor page major data structur cga page recolor consist reduc cost memori access elimin conflict miss l2 cach increas l2 cach hit ratio 197 220 result fewer load go memori perform improv 17 although page recolor improv perform cga nearli effect scat tergath differ primarili page recolor achiev two major improv scattergath provid improv local cga reduc number load execut comparison mean page recolor use optimiza tion although speedup page recolor cga substanti less scattergath page recolor broadli applic 412 dens matrixmatrix product section examin perform benefit tile remap dmmp compar result softwar tile copi impuls align restrict requir remap tile align l2 cach line boundari add follow constraint matric tile size must multipl cach line experi size 128 byte constraint overli limit especi sinc make effici use cach space array must pad tile align 128 byte compil easili support constraint similar pad techniqu explor context vector processor 7 tabl 412 illustr result tile experi baselin convent nocopi tile softwar tile copi outperform baselin code almost 10 impuls tile remap outperform 20 improv perform primarili due differ cach behavior copi remap doubl l1 cach hit rate reduc averag number cycl load less two impuls higher l1 cach hit ratio softwar copi sinc copi tile incur cach miss number load go memori reduc twothird addit cost copi tile greater overhead use impuls remap tile result use impuls provid twice much speedup comparison convent impuls copi scheme conserv sever reason copi work particularli well dmmp number oper perform tile size 2 3 mean overhead copi rel low algorithm reus data lower rel overhead copi greater likewis cach therefor tile grow larger cost copi grow wherea low cost impuls tile remap remain fix final author found perform copi vari greatli matrix size tile size cach size 45 impuls insensit crossinterfer tile convent scattergath page color time 548b 177b 467b l2 hit ratio 197 159 220 mem hit ratio 169 63 143 avg load time 476 232 387 load 493m 353m 493m speedup 310 117 tabl 1 simul result na class conjug gradient benchmark use two differ opti mizat time processor cycl convent softwar copi impuls time 664m 610m 547m l1 hit ratio 496 986 995 l2 hit ratio 487 11 04 mem hit ratio 17 03 01 avg load time 668 171 146 tabl 2 simul result tile matrixmatrix product time million cycl matric 512 512 32 tile tile impuls time 459m 237m l1 hit ratio 9895 997 mem hit ratio 024 005 avg load time 157 116 issu instruct total 725m 290m graduat instruct total 435m 280m issu instruct tlb 256m 78m graduat instruct tlb 134m 33m tabl 3 simul result imag filter variou memori system configur time processor cycl tlb miss number user data miss 413 imag filter tabl 3 present result order129 binomi filter 321024 color imag impuls version code pad pixel four byte perform differ hand tile impuls version algorithm aris vertic pass data tile version suffer 35 time mani l1 cach miss 40 time mani tlb fault execut 134 million instruct tlb miss handler indirect impact high tlb miss rate even dramat baselin filter program almost 300 million instruct issu graduat contrast impuls version algorithm execut 33 million instruct handl tlb miss 10 million instruct issu graduat compar dramat perform improv less 1 million cycl spent set impuls remap neglig overhead although version algorithm touch data element number time impuls improv memori behavior imag filter code two way origin algorithm perform vertic filter pass touch page per iter processor tlb hold yield high kernel overhead observ run imag cach line conflict within l1 cach degrad perform sinc impuls version code appear processor contigu address suffer tlb fault nearperfect tempor spatial local l1 cach 414 threeshear imag rotat tabl 4 illustr perform result rotat color imag clockwis one radian imag contain 24 bit color inform ppm file measur three version benchmark origin version adapt wolberg 47 handtil version code vertic shear travers block version adapt impuls matric transpos memori control impuls version requir pixel pad four byte sinc impuls oper poweroftwo object size quantifi perform effect pad measur result nonimpuls version code use threebyt fourbyt pixel perform differ among differ version entir due cycl save vertic shear horizont shear exhibit good memori behavior rowmajor layout perform bottleneck impuls increas cach hit rate roughli 95 985 reduc number tlb miss two order magnitud reduct origin origin tile tile impuls pad pad time 572m 576m 284m 278m 215m l1 hit ratio 950 948 981 976 985 l2 hit ratio 15 16 11 15 11 mem hit ratio 35 36 08 09 04 avg load time 385 385 181 219 150 issu instruct total 476m 477m 300m 294m 232m graduat instruct total 346m 346m 262m 262m 229m issu instruct tlb 212m 215m 52m 51m 081m graduat instruct tlb 103m 104m 24m 24m 042m tabl 4 simul result perform 3shear rotat 1kby1k 24bit color imag time processor cycl tlb miss user data miss tlb miss rate elimin 99 million tlb miss handl instruct reduc number issu graduat instruct 100 million two effect constitut impuls benefit tile version walk column 32 pixel time yield hit rate higher origin program lower impuls tile sourc matrix shear destin matrix even though cach perform sourc nearli perfect suffer destin reason decreas tlb miss tile code great impuls code impuls code requir 33 memori store 24bit color imag also measur perform impact use pad 32bit pixel nonimpuls code origin program pad caus cach line fetch load useless pad byte degrad perform program alreadi memorybound contrast tile program increas memori traffic balanc reduct load shift mask oper manipul wordalign pixel faster manipul bytealign pixel pad tile version rotat code still slower impuls tile version shear use cycl recomput save restor column displac travers tile input imag displac comput 1024 32 time sinc column length 1024 tile height 32 contrast impuls code tile comput column displac sinc column complet travers visit isosurfac render use ray trace simplic benchmark assum screen plane parallel volum z axi result comput entir plane worth indirect vector need remap address everi ray assumpt larg restrict assum use volum render algorithm like lacrout 26 transform arbitrari view angl angl better memori perform isosurfac volum one edg surfac parallel xz plane measur present two particular view angl tabl 5a show result screen parallel yz plane ray exactli follow layout voxel memori assum xyz layout order tabl 5b show result screen parallel xz plane ray exhibit worst possibl cach tlb behavior travers xy plane two set data point repres extrem memori perform ray tracer data measur label origin ray tracer use macrocel reduc number voxel travers tile volum macrocel 444 voxel size result label indirect use macrocel address voxel indirect vector indirect vector store precomput voxel offset xy plane final result label impuls use impuls perform indirect lookup memori control tabl 5a ray parallel array layout impuls deliv substanti perform gain precomput voxel offset reduc execut time approxim 9 million cycl experi report indirect column exchang comput voxel offset access indirect vector although increas number memori load still achiev posit speedup access cach hit impuls access indirect vector perform within memori control hide access latenc consequ impuls obtain higher speedup compar origin version impuls save comput voxel offset tabl 5b ray perpendicular voxel array layout impuls yield much larger perform gain speedup 549 reduc number tlb miss save approxim million graduat instruct reduc number issu graduat instruct approxim 120 million increas cach hit ratio load useless voxel cach save remain quarterbillion cycl indirect version execut 3 slower origin one ray perpendicular voxel array access voxel origin indirect impuls time 742m 650m 614m l1 hit ratio 951 908 918 l2 hit ratio 37 73 63 mem hit ratio 12 19 19 avg load time 18 28 25 load 216m 172m 13m issu instruct total 131m 714m 577m graduat instruct total 128m 693m 555m issu instruct tlb 068m 114m 018m graduat instruct tlb 035m 050m 015m speedup 114 121 origin indirect impuls time 383m 397m 697m l2 hit ratio 06 22 51 mem hit ratio 123 152 16 avg load time 82 103 24 load 32m 27m 16m issu instruct total 348m 318m 76m graduat instruct total 218m 148m 68m issu instruct tlb 126m 156m 018m graduat instruct tlb 59m 60m 015m tabl 5 result isosurfac render time processor cycl tlb miss user data miss ray follow memori layout imag b perpendicular memori layout gener lot cach miss frequent load new data cach load evict indirect vector cach bring cach hit ratio indirect vector access result overhead access indirect vector outweigh benefit save comput voxel offset slow execut 42 onlin superpag promot evalu perform impuls support inexpens superpag promot reevalu romer et al work dynam superpag promot algorithm 40 context im puls system model differ sever signific way employ form tracedriven simul atom 42 binari rewrit tool rewrit applic use atom monitor memori refer modifi applic use onthefli simul tlb behavior simul system two 32entri fullyassoci tlb one instruct one data use lru replac tlb entri base page size 4096 byte better understand tlb size may affect perfor manc model two tlb size 64 128 entri romer et al combin result tracedriven simul measur baselin perform result calcul effect speedup benchmark execut benchmark dec alpha 3000700 run dec osf1 21 processor system dualissu inord 225 mhz alpha 21064 system two megabyt offchip cach 160 megabyt main memori simul assum follow fix cost take cach effect account 1kbyte copi assign 3000cycl cost asap polici charg cycl tlb miss approxonlin polici charg 130 cycl tlb miss perform result present obtain complet simul bench mark measur kernel applic time direct overhead implement superpag promot algorithm result effect system includ expand tlb miss handler cach effect due access page tabl maintain prefetch coun ter overhead associ promot use superpag impuls present compar perform result applic benchmark suit 421 applic result evalu differ superpag promot approach larger problem use eight program mix sourc benchmark suit includ three spec95 benchmark com press gcc vortex three imag process benchmark describ earlier iso rotat filter one scientif benchmark adi one benchmark di benchmark suit dm 28 benchmark compil sun cc workshop compil 42 optim level xo4 compress spec95 data compress program run input ten million charact avoid overestim efficaci superpag compress algorithm run instead default 25 time gcc cc1 pass version 253 gcc compil sparc architectur use compil 306kilobyt file 1cpdec1c vortex objectori databas program measur spec95 test input isosurf interact isosurfac volum render describ section 415 filter perform order129 binomi filter 321024 color imag rotat turn 10241024 color imag clockwis one radian adi implement algorithm altern direct integr dm data manag program use input file dm07in two benchmark gcc compress also includ romer et al benchmark suit although use spec95 version wherea use spec92 version use spec92 applic studi due benchmark obsolesc sever romer et al remain benchmark base tool use research environ univers washington readili avail us tabl 6 list characterist baselin run benchmark fourway issu superscalar processor superpag promot occur tlb miss time total time spent data tlb miss handler benchmark demonstr vari sensit tlb perform system smaller tlb 92 351 execut time lost due tlb miss cost percentag time spent handl tlb miss fall less 1 334 system 128entri tlb figur show normal speedup differ combin promot polici asap approxonlin mechan remap copi compar baselin instanc benchmark experi found best approxonlin threshold twopag superpag 16 convent system 4 impuls system also threshold use fullappl test figur 9 give result 64 entri result 128entri tlb onlin superpag promot improv total cach tlb tlb benchmark cycl miss miss miss 64entri tlb compress 632 3455 4845 279 gcc 628 1555 2103 103 vortex filter 425 241 4798 351 rotat 547 3570 3807 179 dm 233 129 771 92 128entri tlb compress 426 3619 36 06 gcc 533 1526 332 20 vortex 423 763 1047 81 isosurf 93 989 548 174 filter 417 240 4544 334 rotat 545 3569 3702 169 dm 211 143 250 33 tabl characterist baselin run speedup impulseasap impulseapproxonlin copyingasap copyingapproxonlin compress gcc vortex 107 106093 106 085 filter 176 174 170 168 rotat dm 113 109 111 105 figur 9 normal speedup two promot polici 4issu system 64entri tlb perform factor two adi remap asap also decreas perform similar factor use copi version asap isosurf make two orthogon comparison figur remap versu copi asap versu approxonlin 422 asap vs approxonlin first compar two promot algorithm asap approxonlin use result figur 9 10 rel perform two algorithm strongli influenc choic promot mechan remap copi use remap asap slightli outperform approxonlin averag case exce perform approxonlin 14 16 experi trail perform approxonlin one case vortex 64entri tlb differ perform rang asapremap outperform aolremap 32 adi 64entri tlb aolremap outperform asapremap 6 vortex 64entri tlb gener howev perform differ two polici small asap averag 7 better 64entri tlb 6 better 128entri tlb result chang notic employ copi promot mechan approxonlin outperform asap nine 16 experi polici perform almost ident three seven case magnitud dispar approxonlin asap result also dramat larger differ perform rang asap outperform approxonlin 20 vortex 64entri tlb approxonlin outperform asap 45 isosurf 64entri tlb overal result confirm romer et al best promot polici use creat superpag via copi approxonlin take arithmet mean perform differ reveal asap averag 6 better 64entri tlb 4 better 128entri tlb speedup impulseasap impulseapproxonlin copyingasap copyingapproxonlin compress gcc vortex 107 103 084 082 106 106092 filter 173 169 167 165 rotat dm figur 10 normal speedup two promot polici 4issu system 128entri tlb rel perform asap approxonlin promot polici chang employ differ promot mechan asap tend creat superpag aggress approxonlin design assumpt underli approxonlin algorithm reason perform better asap copi use superpag creat cost tlb miss equal cost creat superpag given remap much lower cost creat superpag copi surpris aggress asap polici perform rel better approxonlin 423 remap vs copi compar two superpag creation mechan remap clear winner highli vari margin differ perform best overal remappingbas algorithm asapremap best copyingbas algorithm aonlinecopi larg 97 case adi 64entri 128entri tlb overal asapremap outperform aonlinecopi 10 eleven sixteen experi averag 33 better 64entri tlb 22 better 128entri tlb 424 discuss romer et al show approxonlin gener superior asap copi use remap use build superpag though find revers true use impulsestyl remap result larger speedup consum much less physic memori sinc superpag promot cheaper impuls also afford promot page aggress romer et al tracebas simul model cach interfer applic tlb miss handler instead studi assum superpag promot cost total 3000 cycl per kilobyt copi 40 tabl 7 show measur perkilobyt cost cpu cycl promot page copi four repres benchmark note cycl per 1k averag baselin byte promot cach hit ratio cach hit ratio filter 5966 9980 9980 raytrac 10352 9650 8720 dm 6534 9980 9986 tabl 7 averag copi cost cycl approxonlin polici also assum rel faster processor measur bound subtract execut time aolremap aolcopi divid number kilobyt copi simul platform benchmark suit copi least twice expens romer et al assum gcc raytrac superpag promot cost three time cost charg tracedriven studi part differ due cach effect copi incur find copi use promot page approxonlin perform better lower aggress threshold use romer et al specif best threshold experi reveal vari four 16 studi use fix threshold 100 differ threshold signific impact perform exampl run adi benchmark use threshold 32 approxonlin copi slow perform 10 128entri tlb contrast run approxonlin copi use best threshold 16 perform improv 9 gener find even copyingbas promot algorithm need aggress creat superpag suggest romer et al given cost promot page much higher 3000 cycl estim studi one might expect best threshold would higher romer howev cost tlb miss far outweigh greater copi cost tlb miss cost order magnitud greater assum studi 5 relat work number project propos modif convent cpu dram design improv memori system perform includ support massiv multithread 2 move process power dram chip 25 develop configur architectur 50 project show promis almost imposs prototyp nontradit cpu cach design perform well commod processor addit perform processorinmemori approach handicap optim dram process capac increas bit densiti rather speed morph architectur 50 almost entir configur programm logic embed virtual everi datapath system enabl optim similar describ primari differ impuls morph impuls simpler design use current system radram project uc davi build memori system let memori perform comput 34 radram pim processorinmemori project similar iram 25 raw project mit 46 even radic idea iram element almost entir reconfigur contrast project impuls seek put entir processor memori sinc dram process substanti slower logic process mani other investig memori hierarchi incorpor stream buffer focu nonprogramm buffer perform hardwar prefetch consecut cach line prefetch buffer introduc jouppi 23 even though stream buffer intend transpar programm care code requir ensur good memori perform palacharla kessler 36 investig use similar stream buffer replac l2 cach farka et al 14 identifi perform trend relationship among variou compon memori hierarchi includ stream buffer dynam schedul processor studi find dynam reactiv stream buffer yield signific perform increas imagin media processor streambas architectur bandwidtheffici stream regist file 38 stream model comput expos parallel local applica tion make system attract domain intellig dram schedul competit algorithm perform onlin costbenefit analys make decis guarante perform within constant factor optim offlin algorithm romer et al 40 adapt approach tlb manag employ competit strategi decid perform dynam superpag promot also investig onlin softwar polici dynam remap page improv cach perform 6 39 competit algorithm use help increas effici oper system function resourc includ page synchron file cach manag chen et al 11 report perform effect variou tlb organ size result indic import factor minim overhead induc tlb miss reach amount address space tlb map instant time even though spec benchmark studi rel small memori requir find tlb miss increas effect cpi cycl per instruct factor five jacob mudg 22 compar five virtual memori design includ combin hierarch invert page tabl hardwaremanag softwaremanag tlb find larg tlb necessari good perform tlb miss handl account much memorymanag overhead also project individu cost tlb miss trap increas futur microprocessor propos solut grow tlb perform bottleneck rang chang tlb structur retain work set eg multilevel tlb hierarchi 1 16 implement better manag polici softwar 21 hardwar 20 mask tlb miss latenc prefetch entri softwar 4 hardwar 41 approach improv exploit superpag commerci tlb support superpag sever year 30 43 research need best make gener use khalidi 24 mogul 31 discuss benefit system support superpag advoc static alloc via compil programm hint talluri et al 32 report mani difficulti attend upon gener util superpag result requir superpag map physic memori region contigu align 6 conclus impuls project attack memori bottleneck design build smarter memori control impuls requir modif cpu cach dram one special form smart control support applicationspecif physic address remap paper demonstr sever simpl remap function use differ way improv perform two import scientif applic kernel flexibl remap support impuls control use implement varieti optim experiment result show impuls finegrain remap result substanti program speedup use scattergath indirect vector remap mechan improv na conjug gradient benchmark perform 210 volum render benchmark perform 449 use stride remap improv perform imag filter imag rotat dens matrixmatrix product applic 94 166 21 respect impuls direct remap also effect rang program use dynam build superpag without copi therebi reduc frequenc tlb fault simul show optim speed eight program varieti sourc factor 203 25 better prior work pagelevel remap perform cach color improv perform conjug gradient 17 optim describ applic across varieti memorybound ap plicat particular impuls use improv systemwid perform ex ampl impuls speed messag interprocess commun ipc impuls support scattergath remov softwar overhead gather ipc messag data multipl user buffer protocol header abil use impuls construct contigu shadow page noncontigu page mean network interfac need perform complex expens address translat final fast local ipc mechan like lrpc 5 use share memori map buffer sender receiv address space impuls could use support fast nocopi scattergath share shadow address space acknowledg thank al davi bharat chandramouli krishna mohan bob devin mark swanson arjun dutt ali ibrahim shuhuan yu michael abbott sean cardwel yeshwant kolla contribut impuls project r amd athlon processor technic brief tera comput system na parallel benchmark softwar prefetch cach translat buffer lightweight remot procedur call avoid conflict miss dynam larg directmap cach organ use parallel memori memori bandwidth limit futur microprocessor simul base studi tlb perform compaq comput corpor revisit superpag promot hardwar support imag process comput graphic hal comput system inc comput architectur quantit approach control data star100 processor design intrins bandwidth requir ordinari program pentium pro famili develop manual look sever memori manag unit improv directmap cach perform addit small fulli associ cach prefetch buffer virtual memori support multipl page size scalabl processor billiontransistor era iram fast volum cach perform optim block algorithm access order memoryconsci cach util big memori desktop surpass tlb perform superpag less oper system support spars matrix kernel share memori messag pass system activ page model comput intellig memori rsim refer manual evalu stream buffer secondari cach replac interact ray trace isosurfac render bandwidtheffici architectur media process use virtual memori improv cach tlb perform reduc tlb memori overhead use onlin superpag promot atom system build custom program analysi tool increas tlb reach use superpag back shadow memori copi copi compiletim techniqu assess data copi use elimin cach conflict digit imag warp ursim refer manual memori system support imag process architectur adapt applicationspecif local optim tr lightweight remot procedur call cach perform optim block algorithm simul base studi tlb perform copi copi atom evalu stream buffer secondari cach replac avoid conflict miss dynam larg directmap cach surpass tlb perform superpag less oper system support reduc tlb memori overhead use onlin superpag promot memori bandwidth limit futur microprocessor intrins bandwidth requir ordinari program fast volum render use shearwarp factor view transform tera comput system memorysystem design consider dynamicallyschedul processor activ page increas tlb reach use superpag back shadow memori comput architectur 2nd ed interact ray trace isosurfac render bandwidtheffici architectur media process look sever memori manag unit tlbrefil mechan page tabl organ improv directmap cach perform addit small fullyassoci cach prefetch buffer recencybas tlb preload digit imag warp imag process comput graphic scalabl processor billiontransistor era bare softwar 3d transform imag scanlin order access order memoryconsci cach util softwaremanag address translat impuls memori system support imag process architectur adapt applicationspecif local optim reevalu onlin superpag promot hardwar support use virtual memori improv cach tlb perform ctr jun miyazaki hardwar support memori access high perform main memori databas proceed 1st intern workshop data manag new hardwar june 1212 2005 baltimor maryland mccorkl programm busmemori control modern comput architectur proceed 43rd annual southeast region confer march 1820 2005 kennesaw georgia hur calvin lin memori prefetch use adapt stream detect proceed 39th annual ieeeacm intern symposium microarchitectur p397408 decemb 0913 2006 lixin zhang mike parker john carter effici address remap distribut sharedmemori system acm transact architectur code optim taco v3 n2 p209229 june 2006 daehyun kim mainak chaudhuri mark heinrich evan speight architectur support uniprocessor multiprocessor activ memori system ieee transact comput v53 n3 p288307 march 2004 xipeng shen yutao zhong chen ding local phase predict acm sigop oper system review v38 n5 decemb 2004 eero aho jarno vann timo hmlinen configur data memori multimedia process journal signal process system v50 n2 p231249 februari 2008 xiaodong li zhenmin li yuanyuan zhou sarita adv perform direct energi manag main memori disk acm transact storag to v1 n3 p346380 august 2005 xiaodong li zhenmin li franci david pin zhou yuanyuan zhou sarita adv sanjeev kumar perform direct energi manag main memori disk acm sigarch comput architectur news v32 n5 decemb 2004 zhen fang lixin zhang john b carter ali ibrahim michael parker activ memori oper proceed 21st annual intern confer supercomput june 1721 2007 seattl washington bruno diniz dorgiv gued wagner meira jr ricardo bianchini limit power consumpt main memori acm sigarch comput architectur news v35 n2 may 2007 enric gibert jesu sanchez antonio gonzalez distribut data cach design cluster vliw processor ieee transact comput v54 n10 p12271241 octob 2005 xipeng shen yutao zhong chen ding predict local phase dynam memori optim journal parallel distribut comput v67 n7 p783796 juli 2007 ruchira sasanka manlap li sarita v adv yenkuang chen eric debe alp effici support level parallel complex media applic acm transact architectur code optim taco v4 n1 p3e march 2007 martin hirzel data layout objectori program acm sigmetr perform evalu review v35 n1 june 2007