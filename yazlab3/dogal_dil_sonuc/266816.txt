outoford vector architectur regist renam outoford instruct issu commonli use superscalar processor techniqu also use signific advantag vector processor paper show perform improv avail memori bandwidth use effect use trace driven simul compar convent vector implement base convex c3400 outoford regist renam vector implement number physic regist 12 outoford execut coupl regist renam provid speedup 124172 realist memori latenc outoford techniqu also toler main memori latenc 100 cycl perform degrad less 6 mechan use regist renam outoford issu use support precis interrupt gener difficult problem vector machin precis interrupt implement typic less 10 degrad perform new techniqu base regist renam target dynam elimin spill code techniqu shown provid extra speedup rang 110 120 reduc total memori traffic averag 1520 b introduct vector architectur use mani year high perform numer applic area still excel first vector machin supercomput use memorytomemori oper vector machin becam commerci success addit vector regist 12 follow cray1 number vector machin design sold supercomput high vector bandwidth 8 modest minisupercomput recent work support ministri educ spain contract 042995 cirit grant beai96ii124 cepba work support part nsf grant mip 9505853 valu vector architectur desktop applic recogn particular mani dsp multimedia applic graphic compress encrypt well suit vector implement 1 also research focus new processormemori organ iram 10 would also benefit vector technolog studi recent year 13 5 11 howev shown perform achiev vector architectur real program fall short achiev consid avail hardwar resourc function unit hazard conflict vector regist file make vector processor stall long period time result latenc problem similar scalar processor time vector processor stall memori port becom idl memori bandwidth goe unus furthermor latenc toler properti vector lost first load instruct idl memori port expos full memori latenc result suggest need improv memori perform vector architectur unfortun typic hardwar techniqu use scalar processor improv memori usag reduc memori latenc alway use vector architectur exampl data cach studi 9 6 howev result mix perform gain loss depend work set size fraction nonunit stride memori access data cach put widespread use vector processor except cach scalar data dynam instruct issu prefer solut scalar processor attack memori latenc problem allow memori refer instruct proceed instruct wait memori data memori refer instruct allow slip ahead execut instruct vector processor gener use dynam instruct issu except one recent design nec sx4 14 reason unclear perhap thought inher latenc hide advantag vector suffici possibl first success vector machin cray issu instruct order addit innov vector instruct issu simpli pursu besid inord vector instruct issu tradit vector machin rel small number vector regist 8 typic limit number vector regist initi result hardwar cost vector regist instruct set origin develop today small number regist gener recogn shortcom regist renam use outoford issu come rescu well regist renam physic regist made avail vector regist conflict reduc anoth featur tradit vector machin support virtual memori least fulli flexibl manner modern scalar processor primari reason difficulti implement precis interrupt page fault difficulti aris high level concurr vector machin featur implementingdynam instruct issu scalar easili adapt vector regist renam reorder buffer allow rel easi recoveri state inform fault condit occur paper show use outoford issu regist renam techniqu vector pro cessor perform greatli improv dynam instruct schedul allow memori latenc overlap complet use valuabl memori resourc effici process moreov renam introduc architectur enabl straightforward implement precis except turn provid easi way introduc virtual memori without much extra hardwar without incur great perform penalti also present new techniqu aim dynam elimin redund load use techniqu memori traffic significantli reduc perform increas vector architectur implement studi base tradit vector processor numer applic primarili matur compil avail benchmark simul tool feel gener conclus extend vector applic howev renam outoford vector architectur propos model convex c3400 section describ base c3400 architectur implement henceforth refer archi tectur dynam outoford vector architectur refer ooova 21 c3400 refer architectur convex c3400 consist scalar unit independ vector unit scalar unit execut instruct involv scalar regist ister issu maximum one instruct per cycl vector unit consist two comput unit fu1 fu2 one memori access unit fetch decoderenam unit reorder buffer releas reg sreg areg vreg maskreg figur 1 outoford renam version refer vector architectur mem fu2 unit gener purpos arithmet unit capabl execut vector instruct fu1 unit restrict function unit execut vector instruct except multipl divis squar root function unit fulli pipelin vector unit 8 vector regist hold 128 element 64 bit eight vector regist connect function unit restrict crossbar pair vector regist group regist bank share two read port one write port link function unit compil respons schedul vector instruct alloc vector regist port conflict aris refer machin implement vector chain function unit function unit store unit chain memori load function unit howev 22 dynam outoford vector architectur ooova outoford renam version refer architectur ooova shown figur 1 deriv refer architectur appli renam techniqu similar found r10000 16 instruct flow inord fetch decoderenam stage go one four queue present architectur base instruct type renam stage map tabl translat virtual regist physic regist 4 independ map tabl one type regist v mask regist map tabl associ list free regist instruct accept decod stage slot reorder buffer also alloc instruct enter exit reorder buffer strict program order instruct defin new logic regist physic regist taken issu rf alu wb areg issu rf sreg issu rf vreg renam fetch issu rf mem rang calcul depend calcul figur 2 outoford renam main instruct pipelin list map tabl entri logic regist updat new physic regist number old map store reorder buffer slot alloc instruct instruct commit old physic regist return free list note reorder buffer hold bit identifi instruct regist name never hold regist valu main pipelin four main pipelin ooova architectur see fig 2 one type instruct decod renam instruct wait four queue shown fig 1 v queue monitor readi statu instruct held queue slot soon instruct readi sent appropri function unit execut process instruct queue proce two phase first instruct proceed inord 3 stage pipelin compris issuerf stage rang stage depend stage complet three step memori instruct proceed order base depend inform comput operand avail store rang stage rang address potenti modifi memori instruct com pute rang use follow stage runtim memori disambigu rang defin byte fall base address call rang start address defin call rang end v l vector length regist v vector stride regist note multipli simplifi v l gamma 1 short never 7 bit product v kept nonarchitect regist implicitli updat either vl vs modifi depend stage use rang startrang end address memori instruct compar previou instruct found queue memori instruct free depend proceed issu memori request machin paramet tabl 1 present latenc variou function unit present architectur memori latenc shown tabl vari memori system model follow singl address bu share type memori tran paramet latenc scal vect intfp intfp read xbar 2 vector startup add 12 12 mul 52 52 logicshift 12 12 div 349 349 sqrt 349 349 tabl 1 function unit latenc cycl two architectur 0 ooova 1 ref action scalarvector loadstor physic separ data buss send receiv data tofrom main memori vector load instruct gather instruct pay initi latenc receiv one datum memori per cycl vector store instruct result observ latenc use valu 50 cycl default memori latenc section 43 present result effect vari valu v regist readwrit port modifi origin c34 scheme ooova vector regist 1 dedic read port 1 dedic port origin bank scheme regist file kept renam shuffl compil schedul readwrit port therefor would induc lot port conflict instruct queue set 16 slot reorder buffer hold 64 instruct machin 64 entri btb entri 2bit satur counter predict outcom branch also 8deep return stack use predict callreturn sequenc scalar regist file 64 physic regist mask regist file 8 physic regist fetch stage decod stage four queue process maximum 1 instruct per cycl commit instruct proce faster rate 4 instruct may commit per cycl commit strategi v regist start aggress implement physic regist releas time vector instruct begin execut consid vector instruct add v0v1v3 renam stage v3 remap say physic regist 9 ph9 old map v3 say physic regist 12 ph12 store reorder buffer slot associ add instruct add instruct begin execut mark associ reorder buffer slot readi com mit slot reach head buffer ph12 releas due semant vector regist ph12 releas guarante instruct need ph12 begun execut least one cycl thu first element ph12 alreadi flow regist file read cross bar even ph12 immedi reassign new logic regist instruct start writ insn op avg program suit v v vect vl hydro2d spec 415 392 39738 990 101 arc2d perf 633 429 40865 985 95 flo52 perf 377 228 12420 971 54 su2cor spec 1526 268 33568 957 125 bdna perf 2390 196 15899 869 81 trfd perf 3522 495 10953 757 22 dyfesm perf 2361 330 6962 747 21 tabl 2 basic oper count perfect club specfp92 program column 35 million ing ph12 instruct read ph12 least one cycl ahead alway read correct valu type releas allow precis except though section 5 chang releas algorithm allow precis except assess perform benefit outoford issu renam vector architectur taken trace driven approach subset perfect club specfp92 program use benchmark set program compil convex c3480 machin tool dixi 3 use modifi execut trace execut process dixi modifi execut run convex machin run produc desir set trace accur repres execut program trace fed two simul refer ooova architectur 31 benchmark program interest benefit outof order issu vector instruct select benchmark program highli vectoriz program perfect specfp92 benchmark chose 10 program achiev least 70 vec toriz tabl 2 present statist select perfect club specfp92 program column number 2 indic suit program belong next two column present total number instruct issu decod unit broken scalar vector instruct column five present number oper perform vector instruct sixth column percentag vector program ie column five divid sum column three five final column seven present averag vector length use vector instruct ratio column five four respect hydro2d10003000 execut cycl dyfesm5001500 figur 3 function unit usag refer ar chitectur bar repres total execut time program given latenc valu xaxi repres memori latenc cycl perform result 41 bottleneck refer archi tectur first present analysi execut ten benchmark program run refer architectur simul consid three vector function unit refer architectur fu2 fu1 mem machin state repres 3tupl captur individu state three unit given point time exampl 3tupl repres state unit work repres state vector unit idl figur 3 present execut time two ten benchmark program see 4 8 pro gram space limit prevent us provid two hydro2d dyfesm rep resent execut program eight possibl state plot time spent state memori latenc 1 20 70 100 cycl figur see number cycl program proceed peak float point speed state hfu2 fu1mem low number cycl state chang rel littl memori latenc increas fraction fulli use cycl decreas memori latenc high impact total execut time program dyfesm shown figur 3 trfd flo52 shown rel small vector length effect memori latenc seen note increas cycl spent state h sum cycl correspond state mem unit idl quit high program four state correspond cycl mem swm256 hydro2d arc2d flo52 nasa7 su2cor tomcatv bdna trfd dyfesm2060 idl memori port 170 figur 4 percentag cycl memori port idl 4 differ memori latenc ori port could potenti use fetch data memori futur vector comput figur 4 present percentag cycl total execut time latenc 70 port idl time rang 30 65 total execut time benchmark program memori bound run singl port vector machin two function unit therefor unus memori cycl result lack loadstor work done 42 perform ooova section present perform ooova compar refer archi tectur consid overal perform speedup memori port occup effect ad outoford execut renam refer architectur seen figur 5 program plot speedup refer architectur number physic vector regist vari 9 64 memori latenc set 50 cycl graph show speedup two ooova implement ooova 16 length 16 instruct queue ooova 128 length 128 queue also show maximum ideal speedup theoret achiev ideal along top graph comput ideal speedup program use total number cycl consum heavili use vector unit fu1 fu2 mem thu ideal essenti elimin data memori depend program consid perform limit satur resourc across entir execut seen figur 5 ooova significantli increas perform refer chine physic regist lowest speedup 124 tomcatv highest speedup trfd dyfesm 172 170 resp remain program give speedup 13145 number physic regist greater 16 addit speedup gener small largest speedup go physic regist bdna addit improv 83 improv bdna due extrem larg main loop gener sequenc basic block 800 vector instruct physic regist allow better match larg avail ilp basic block hand number physic vector regist major concern observ 12 physic regist still give speedup 163 170 trfd dyfesm program rang 123 138 result suggest physic vector regist 12 regist suffici case file 16 regist enough sustain high perform everi case increas depth instruct queue 128 perform improv quit small curv ooova128 analysi program show two factor combin prevent improv increas number issu queue slot first spill code present larg basic block induc lot memori conflict memori queue second lack scalar regist sometim prevent dynam unrol enough iter vector loop make full usag memori port memori outoford issu featur allow memori access instruct slip ahead comput instruct result compact memori access opera tion presenc fewer wast memori cycl shown figur 6 figur contain number cycl address port idl divid total number execut cycl bar refer machin ref outoford machin ooova shown ooova machin physic vector regist memori latenc 50 cycl ooova fraction idl memori cycl cut half case two benchmark memori port idl less 20 time resourc usag consid resourc usag ooova machin compar refer machin illustr figur 7 notat figur 3 use repres execut state previou subsect ooova machin physic vector regist memori latenc set 50 cycl figur 7 show major improv state h almost disappear also fullyutil state hfu2 fu1mem rel frequent due benefit outof order execut alreadi seen avail one memori instruct readi launch memori queue allow much higher usag memori port 43 toler memori latenc one way look advantag outoford execut regist renam allow long 1113 9 arc2d129 flo521216 9 nasa71216 9 trfd15speedup 9 ideal ooova128 figur 5 speedup ooova ref architectur differ number vector physic regist swm256 hydro2d arc2d flo52 nasa7 su2cor tomcatv bdna trfd dyfesm103050 idl memori ref ooova figur percentag idl cycl memori port refer architectur ooova archi tectur memori latenc 50 cycl vector regist file hold physic vector regist memori latenc hidden previou subsect show benefit ooova fix memori latenc 50 cycl subsect consid abil ooova machin toler main memori latenc figur 8 show total execut time ten program execut refer machin ooova machin memori latenc 1 50 100 cycl result 16 physic vector regist shown figur refer machin sensit memori latenc even though vector machin memori latenc influenc execut time consider hand ooova machin much toler hydro2d dyfesm51525 execut cycl figur 7 breakdown execut cycl ref left bar ooova right bar machin ooova machin 16 physic vector regist architectur memori latenc set 50 cycl creas memori latenc benchmark perform flat entir rang memori la tenci 1 100 cycl anoth import point even memori latenc 1 cycl ooova machin typic obtain speedup refer machin rang 115125 goe high 15 case dyfesm speedup indic effect look ahead instruct stream good even absenc long latenc memori oper end scale see long memori latenc easili toler use oford techniqu indic individ 5cycl x cycl x trfd15cycl x dyfesm10ref ideal figur 8 effect vari main memori latenc three memori model 16 physic vector regist machin ual memori modul memori system slow chang expens sram part much cheaper dram part without significantli degrad total throughput type technolog chang could major impact total cost machin typic domin cost memori subsystem 5 implement precis trap import side effect introduc regist renam vector architectur enabl straightforward implement precis except turn avail precis except allow introduct virtual memori virtual memori implement vector machin 15 use mani current high perform parallel vector processor 7 use restrict form exampl lock page contain vector data memori vector program execut 7 14 primari problem implement precis page fault high perform vector machin high number overlap inflight oper machin may sever hundr vector regist renam provid conveni mean save larg amount machin state requir rollback precis state follow page fault except content old logic vector regist kept instruct overwrit logic regist known free except architect state restor need order implement precis trap introduc two chang ooova design first instruct allow commit fulli complet oppos earli commit scheme use second store allow execut updat memorywhen head reorder buffer oldest uncommit instruct figur 9 present comparison speedup refer architectur achiev ooova earli commit label earli ooova late commit execut store head reorder buffer label late simul perform memori latenc 50 cycl make two import observ graph figur 9 first perform degrad due introduct late commit model small eight ten program program hydro2d arc2d su2cor tomcatv bdna degrad less 5 physic regist program flo52 nasa7 degrad 7 103 respect nevertheless perform two program trfd dyfesm hurt rather sever go late commit model 41 47 degrad respect behavior explain loadstor depend main loop trfd memori depend last vector store iter first vector load iter address earli commit model store done soon input data readi chain produc store late commit model store must wait 2 interven instruct produc store commit delay dispatch follow load first iter explain high slowdown similar situat explain degrad dyfesm second late commit model 12 regist 1113 9 arc2d129 flo521216 9 nasa71216 9 trfd15speedup 9 ideal late figur 9 speedup ooova refer architectur differ number vector physic regist earli late commit scheme clearli enough perform differ 12 16 regist much larger earli commit model thu costcomplex point view introduct late commit clear impact implement vector regist 6 dynam load elimin regist renam mani physic regist solv instruct issu bottleneck caus limit number logic regist howev anoth problem caus limit logic regist regist spill origin compil code still contain regist spill caus limit number architect regist function correct spill must execut furthermor besid obviou storeload spill limit regist also caus repeat load memori locat limit regist common vector architec ture spill problem aggrav store reload singl vector regist involv movement mani word data memori illustr import spill code vector ar chitectur tabl 3 show number memori spill oper number word move ten benchmark program benchmark rel load store due spill sever larg amount spill traffic ex ampl 69 memori traffic bdna due spill section propos studi method use regist renam elimin much memori load traffic due spill method propos also signific perform advantag vector load op vector store op total program load spill store spill hydro2d 1297 21 16 431 21 5 24 arc2d 1244 122 9 479 87 15 11 nasa7 1048 21 20 632 20 3 24 su2cor 786 201 20 404 103 20 20 bdna 142 266 tabl 3 vector memori spill oper column 2 3 5 6 million oper load spill data execut nearli zero time elimin spill store howev need maintain strict binari compat memori imag reflect function correct state relax compat could lead remov spill store yet pursu approach 61 renam dynam load elim inat elimin redund load instruct propos follow techniqu tag associ physic regist v tag indic memori locat current held regist vector regist tag 6tupl defin consecut region byte memori vl vs sz vector length vector stride access granular use tag creat v valid bit scalar regist tag 4tupl vl vs need although problem spill scalar regist somewhat tangenti studi import convex architectur limit number regist time memori oper perform rang address comput done second stage memori pipelin oper load tag associ destin physic regist fill appropri address informa tion oper store physic regist store memori tag updat correspond address inform thu time memori oper perform alia regist content memori address use load store physic regist tag indic area memori match regist data keep tag content consist memori store instruct execut tag compar tag alreadi present regist file conflict found memori rang defin store tag overlap exist tag exist tag must invalid simplifi conflict check hardwar invalid may done conserv use regist tag vector load oper elimin follow manner vector load enter third stage memori pipelin tag check tag found vector regist file exact match found exact match requir tag field ident destin regist vector load renam physic regist match point load effect complet time take renam furthermor match restrict live regist also occur physic regist free list long valid bit set regist free list use elig match load match regist free list regist taken list ad regist map tabl scalar regist elimin load simpler match involv two scalar regist de tect regist valu copi one regist scalar renam tabl affect note howev scalar store address still need compar vector regist tag vector store need compar scalar tag ensur full consist similar memori tag techniqu scalar regist describ 2 tag use store memori variabl regist face potenti alias problem approach though complic data automat copi regist regist tag match found fore compil techniqu requir adapt impli data movement applic tag oper either alter renam tabl b invalid tag without chang regist valu issu rf alu wb areg issu rf sreg renam fetch issu rf calcul rang depend calcul vreg vrenam rxbar rxbar ex0 figur 10 modifi instruct pipelin dynam load elimin ooova 62 pipelin modif scheme describ vector load elimin disambigu stage memori pipelin vector regist renam tabl date renam consider complic vector regist renam two differ pipelin stage decod disambigu stage therefor pipelin structur modifi renam vector regist one one stage figur show modifi pipelin decod stage scalar regist renam vector regist left untouch instruct use vector regist pass inord 3 stage memori pipelin arriv disambigu stage renam vector regist done ensur vector instruct see renam tabl modif introduc load elimin scheme avail follow vector instruct moreov ensur store tag compar previou tag order 63 perform dynam load elimina tion section present perform ooova machin enhanc dynam load elimi nation baselin use late commit ooova describ without dynam load elimin also studi ooova load elimin scalar data sle ooova load elimin scalar vector slevl figur 11 12 present speedup sle slevl baselin ooova differ number physic vector regist 16 32 64 slevl 16 vector regist figur 12 speedup base ooova 104 116 program high 178 213 dyfesm trfd regist regist avail storag space keep vector data doubl allow tag match speedup increas significantli rang program 110 120 dyfesm trfd speedup remain high appreci improv go 16 regist doubl number vector regist 64 yield much addit speedup swm256 hydro2d arc2d flo52 nasa7 su2cor tomcatv bdna trfd dyfesm1113 figur 11 speedup sle ooova machin 3 differ physic vector regist file size swm256 hydro2d arc2d flo52 nasa7 su2cor tomcatv bdna trfd dyfesm15speedup figur 12 speedup slevl ooova machin 3 differ physic vector regist file size program improv 5 tomcatv trfd seem abl take advantag extra regist tomcatv goe 119 140 result show data movement elimin captur vector regist remark differ perform behavior dyfesm trfd requir explan done look sle figur 11 sle program low speedup less yet trfd dyfesm achiev speedup 136 respect configur vector regist analysi two program show abil bypass scalar data allow program see iter certain loop particular abil bypass data load store allow unrol two critic loop wherea without sle unrol possibl 64 traffic reduct import effect dynam load elimin reduc total amount traffic seen memori system import featur swm256 hydro2d arc2d flo52 nasa7 su2cor tomcatv bdna trfd dyfesm08traff reduct sle figur 13 traffic reduct dynam load elimin physic vector regist multiprocess environ less load memori modul usual translat overal system perform improv comput traffic reduct program two dynam load elimin configur consid defin traffic reduct ratio total number request load store sent address bu baselin ooova divid total number request done either sle slevl configur figur 13 present ratio physic vector regist exampl figur 13 show us sle configur dyfesm perform 11 fewer memori request ooova configur seen slevl typic traffic reduct 15 20 program dyfesm trfd due special behavior alreadi men tion much larger reduct much 40 summari paper consid use outoford execut regist renam vector architectur seen simul tradit inord vector execut model enough fulli use bandwidth singl memori port cover main memori latenc even consid program memori bound shown outoford issu regist renam introduc vector perform increas perform advantag realiz even ad extra physic regist use renam outof order execut use vector processor wide recogn current superscalar microprocessor use 12 physic vector regist aggress commit model shown signific speedup refer machin modest cost 16 vector regist rang speedup 124172 increas number vector regist 64 lead signific extra improv ment howev moreov shown larg memori latenc 100 cycl easili toler dynam reorder vector instruct disambigu mechan introduc allow memori unit send continu flow request memori system flow overlap arriv data cover main memori latenc introduct regist renam give power tool implement precis except chang aggress commit model conserv model instruct commit predecessor known free except recov architectur state point time allow easi introduct virtual memori simul shown implement precis except cost around 10 applic perform though program may much sensit other one problem solv regist renam regist spill addit extra physic regist per se reduc amount spill data introduc new techniqu dynam load elimin use renam mechan reduc amount load spill traffic tag regist memori inform detect certain load redund requir data alreadi physic regist condit load perform simpl renam tabl chang simul shown techniqu improv perform typic factor 107116 high 178 dynam load elimin techniqu benefit physic regist sinc cach data insid vector regist file simul physic vector regist show load elimin yield improv typic rang 110120 moreov regist load elimin reduc total traffic memori system factor rang 1520 case 40 final feel result use grow commun processor architectur implement kind multimedia extens graphic coprocessor dsp function incorpor gener purpos microprocessor advantag vector instruct set becom evid order sustain high throughput special purpos devic frame buffer long memori latenc toler type applic gener requir high bandwidth chip memori system avail current microprocessor bandwidth latenc problem outoford vector implement help achiev improv perform r t0 vector microprocessor new kind memori referenc array pointer dixi trace gener system c3480 decoupl vector architectur quantit analysi vector code perform impact vector processor cach parallel process featur nec sx3 supercomput system cach perform vector supercomput er case intellig dram iram relationship averag real memori behavior cray1 comput system explain gap theoret peak perform real perform supercomput architectur hnsx supercomput inc architectur vpp500 parallel supercomput mip r10000 superscalar microprocessor tr creg new kind memori referenc array pointer distribut storag control unit hitachi s3800 multivector supercomput cach perform vector supercomput architectur vpp500 parallel supercomput relationship averag real memori behavior explain gap theoret peak perform real perform supercomput architectur cray1 comput system mip r10000 superscalar microprocessor decoupl vector architectur quantit analysi vector code ctr roger espasa mateo valero exploit instruct datalevel parallel ieee micro v17 n5 p2027 septemb 1997 lui villa roger espasa mateo valero perform studi outoford vector architectur short regist proceed 12th intern confer supercomput p3744 juli 1998 melbourn australia mark hampton krste asanovi implement virtual memori vector processor softwar restart marker proceed 20th annual intern confer supercomput june 28juli 01 2006 cairn queensland australia christo kozyraki david patterson overcom limit convent vector processor acm sigarch comput architectur news v31 n2 may francisca quintana jesu corbal roger espasa mateo valero ad vector unit superscalar processor proceed 13th intern confer supercomput p110 june 2025 1999 rhode greec francisca quintana jesu corbal roger espasa mateo valero cost effect architectur vectoriz numer multimedia applic proceed thirteenth annual acm symposium parallel algorithm architectur p103112 juli 2001 crete island greec karthikeyan sankaralingam stephen w keckler william r mark doug burger univers mechan dataparallel architectur proceed 36th annual ieeeacm intern symposium microarchitectur p303 decemb 0305 christoph batten ronni krashinski steve gerd krste asanov cach refillaccess decoupl vector machin proceed 37th annual ieeeacm intern symposium microarchitectur p331342 decemb 0408 2004 portland oregon banit agraw timothi sherwood virtual pipelin network memori proceed 39th annual ieeeacm intern symposium microarchitectur p197207 decemb 0913 2006 roger espasa mateo valero simul studi decoupl vector architectur journal supercomput v14 n2 p124152 sept 1999 christoforo kozyraki david patterson vector vs superscalar vliw architectur embed multimedia benchmark proceed 35th annual acmiee intern symposium microarchitectur novemb 1822 2002 istanbul turkey roger espasa mateo valero jame e smith vector architectur past present futur proceed 12th intern confer supercomput p425432 juli 1998 melbourn australia jesu corbal roger espasa mateo valero mom matrix simd instruct set architectur multimedia applic proceed 1999 acmiee confer supercomput cdrom p15e novemb 1419 1999 portland oregon unit state