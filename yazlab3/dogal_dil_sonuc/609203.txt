certifi compil runtim code gener certifi compil take sourc languag program produc object code well certif use verifi object code satisfi desir properti type safeti memori safeti certifi compil help increas compil robust program safeti compil robust improv sinc compil error caught check object code certif immedi compil program safeti improv object code certif alon suffici establish safeti even object code certif produc unknown machin unknown compil sent untrust network safe execut guarante long code certif pass verifierexist work certifi compil address static gener code paper extend code gener run time goal combin certifi compil runtim code gener produc program fast verifi safe achiev goal present two new languag explicit runtim code gener construct cyclon type safe dialect c talt type safe assembl languag design implement system translat safe c program cyclon compil talt final assembl execut object code paper focus overal approach front end systemsemi detail talt appear subsequ paper b introduct 11 runtim special special program transform optim program respect invari techniqu shown give dramat speedup wide rang appli cation includ aircraft crew plan program imag shader oper system 4 11 17 runtim special exploit invari becom avail execut program gener optim code fli opportun runtim special occur dynam chang valu remain invari period time exampl network softwar special particular tcp connect multicast tree runtim code gener tricki hard correctli write reason code gener code obviou optim debug program yet gener earli exampl runtim code gener includ selfmodifi code ad hoc code gener written hand specif function mind approach prove complic error prone 14 recent work appli advanc program languag techniqu problem new sourc languag design facilit runtim code gener provid programm highlevel construct compil implement lowlevel detail 15 21 22 program transform base static analys capabl automat translat normal program runtim code gener program 6 10 12 type system check runtim code gener program compil time ensur certain bug occur run time provid compil correct 22 25 techniqu make easier programm use runtim code gener address concern compil writer end user compil writer still need implement correct compilernot easi even languag without runtim code gener end user would like assur execut crash machin even program gener code jump itbehavior usual provok suspicion securityconci user address concern anoth program languag techniqu certifi compil 12 certifi compil certifi compil take sourc languag program produc object code certif may help show object code satisfi certain desir properti 16 18 separ compon call verifi examin object code certif determin whether object code actual satisfi properti wide rang properti verifi includ memori safeti unalloc portion memori access control safeti code enter valid entri point variou secur properti eg highli classifi data appear low secur channel often properti corollari type safeti appropri type system object code paper describ certifi compil cyclon highlevel languag support runtim code gener cyclon compil talt assembl languag support runtim code gener cyclon talt type safe certif system type annot talt output verifi talt type checker compil writer motiv implement cyclon certifi compil believ approach enhanc compil correct exampl forc develop type system oper semant talt provid formal framework reason object code gener object code run time eventu hope prove compil transform type correct sourc program type correct object pro gram import step toward prove correct compil meantim use verifi type check output compil get immedi feedback compil introduc type error other note 23 24 help identifi correct compil bug quickli also want certifi compil address safeti concern end user system type safeti depend certif object code method produc thu end user reli programm cyclon compil ensur safeti make system usabl basi securitycrit applic like activ network mobil code system 13 cyclon compil cyclon compil built two exist system special 19 popcorn certifi compil 16 three phase shown fig 1 first phase transform type safe c program cyclon program use runtim code gener start appli static analys tempo system c program context inform specifi function argument invari tempo front end produc actionannot program ad addit pass translat actionannot program cyclon runtim special second phase verifi cyclon program type safe compil talt modifi popcorn compil morrisett et al popcorn compil type safe dialect c tal type assembl languag extend front end popcorn handl cyclon program modifi back end output talt talt tal extend instruct manipul templat code fragment parameter hole correspond type compil phase transform highlevel cyclon construct lowlevel assembl instruct also transform cyclon type talt type third phase first verifi type safeti talt program type system talt ensur templat combin correctli hole fill correctli paper describ overal approach front end detail detail talt appear subsequ paper final talt program assembl link execut three phase design offer flexibl user interfac sinc allow program written c cyclon talt simplest case user simpli write c program reus exist program allow system handl rest user desir explicit control code gener process may write modifi cyclon program finegrain control de sire user finetun talt program produc cyclon write one hand note sinc verif perform talt level program cyclon verifi compil cyclon verifi assembl link execut translat actionannot program cyclon figur 1 overview cyclon compil safeti properti guarante three case 14 exampl present exampl illustr runtim code gener phase cyclon compil fig 2 show modular exponenti function mexp written standard c argument base valu expon modulu modular exponenti often use cryptographi key use encrypt decrypt sever messag function call repeatedli expon modulu thu mexp benefit special special function respect given expon modulu user indic two argument invari function call repeatedli valu invari argument fig 2 invari argument shown ital static analysi propag inform throughout program produc actionannot program action describ languag construct treat specializa tion construct depend invari evalu special construct display ital second part figur understand runtim special work c code invari argument ital int mexpint base int exp int mod f int u u1 actionannot code italic construct evalu int mexpint base int exp int mod f int u special sourc code int mexp spint base f int figur 2 special sourc level help first consid special could achiev entir within sourc languag exampl special function mexp sp fig 2 obtain actionannot mexp expon 10 modulu 1234 italic construct mexp like loop evalu note loop test depend known argument nonitalic construct mexp show sourc code mexp sp construct evalu mexp sp call depend unknown argument think mexp sp construct cut past togeth fragment sourc code mexp fragment templat central idea use design cyclon cyclon type safe dialect c extend four construct manipul templat codegen cut splice fill use construct possibl write cyclon function gener special version mexp run time int int mexp genint exp int mod f int u return codegen int mexp spint base f int cut splice splice figur 3 runtim special written cyclon fact system automat gener cyclon runtim special actionannot pro gram fig 3 show cyclon special produc actionannot modular exponenti function fig 2 function mexp gen take two invari argument origin mexp function return function mexp sp version mexp special argument figur italic code evalu mexp gen call nonitalic code templat code manipul mexp gen produc special function templat code evalu special function call exampl codegen express begin code gener process alloc region memori new function mexp sp copi first templat region templat includ declar function argument base local variabl also initi assign recal templat code evalu code gener process mere manipul cut statement mark end templat introduc code italic evalu code gener name loop test bodi includ condit statement splice state ment shiftassign statement evalu ate loop finish templat follow cut statement contain return ad code gener region evalu splice statement caus templat append code gener region exampl time first splice statement execut assign append similarli time second splice statement execut assign ap pend effect loop thu add number assign statement code mexp sp exactli mani one determin argument mexp gen fill express use within templat mark hole templat fill encount templat e evalu code gener time valu use fill hole templat exampl fill use insert known modulu valu assign statement code gener complet newli gener function mexp sp return result codegen take one remain argument mexp comput result cyclon program evalu symbol produc special sourc program like one fig 2 basi formal oper semant give appendix implement howev compil cyclon sourc code object code compil sourc templat object templat cyclon object code manipul object templat directli object code talt extens tal instruct manipul object templat talt instruct x86 machin instruct new templat instruct cgstart cgdump cgfill cghole start templat end exampl cyclon program fig 3 compil talt program shown fig 4 omit instruct save space ad sourc code fragment comment aid readabl begin mexp gen contain x86 instruct ad local variabl u stack assign valu argument exp next cgstart use dynam alloc code gener region first templat dump copi region cgdump instruct next bodi loop unrol cyclon splice statement compil cgdump instruc tion follow instruct comput hole valu cgfill instruct fill hole end mexp gen function final cgdump instruct output code last templat next come code four templat first templat alloc stack space local variabl assign valu second third templat come statement contain within cyclon splice instruct ie multipl mod assign final templat contain code return cghole instruct introduc placehold insid templat fill special describ summari design system perform type safe runtim code gener follow part ffl c actionannot program translat actionannot program cyclon translat ffl cyclon languag design ffl cyclon verifi ffl cyclon talt compil ffl talt languag design ffl talt verifi mexpgen mov esp0eax 1st templat ifend24 mov eaxesp0 mov esp0eax whileend22 cgend eax retn 1st templat mov esp0eax templatestart splcbeg25splcend26 templateend splcend26 templateend splcend32 templatestart cutbeg36cutend37 add esp8 retn templateend cutend37 figur 4 talt code ffl talt assembl translat ffl assemblerlink part abl reus exist softwar specif use tempo actionannot program gener microsoft masm assembl microsoft visual c link part extend exist work case cyclon languag type system verifi compil talt languag compon need written scratch includ translat actionannot program cyclon pro gram definit new talt instruct term x86 instruct weve organ rest paper follow section 2 present cyclon languag type sy tem section 3 give brief descript talt due limit space defer full descript later pa per give implement detail initi impress perform section 4 discuss relat work section 5 futur work section 6 final remark section 7 21 design decis cyclon codegen cut splice fill construct design express templatebas style runtim code gener cleanli concis made design decis base cyclon relationship c program languag implement concern first runtim special function return function result need higher order type cyclon c higher order type written use pointer type cyclon pointer fore introduc new notat higher order type cyclon exampl int floatint fint x cyclon function f take int argument x return function take float int return int f declar defin use int int floatint f note type first argument appear left remain argument consist order argument would appear c use pointer type second design decis concern extent support nest codegen consid follow exampl int float int fint x returncodegen int int gfloat returncodegen int hint z bodi h f function gener function g use codegen call run time turn g gener function h time call nest codegen thu use gener code gener code first version tempo support code gener code though recent extend sy tem c 20 21 also prohibit decid permit cyclon add littl complic type system implement nest codegen gener automat cyclon version tempo use programm alway explicitli final design decis concern extent cyclon support lexic scope bind last exampl function h nest insid two func tion f g languag true lexic scope argument local variabl outer function would visibl within inner function f x g could use bodi h decid would support full lexic scope cyclon scope rule bodi function function argument local variabl toplevel variabl visibl keep cs charact lowlevel machin systemsori languag oper languag close provid machin cost execut program hidden highlevel abstract felt closur lambda lift standard techniqu support lexic scope would stray far lexic scope desir programm introduc explicit closur lexic scope achiev use cyclon featur exampl need bodi h access use filli 22 syntax type rule formal core calculu cyclon full cyclon addit structur union array void break continu loop use x rang variabl c rang con stant b rang base type implicit signatur assign type constant speak type c figur 5 give grammar program modifi type declar sequenc declar function definit f statement express e write ffl type function defin modifi function definit xd declar x type ffl e sometim consid sequenc declar finit function variabl type assum x distinct achiev alpha convers nece sari impos standard syntact restrict cyclon program name function formal paramet must distinct global variabl distinct name defin type environ e support cyclon scope rule local global local local inform type environ sequenc hidden visibl frame follow outermost frame give vi outermostt figur cyclon environ function program modifi type declar x decl sequenc function defn f xd statement e return e splice express e x figur 5 grammar core cyclon type top level function type local vari abl type global variabl nonoutermost frame contain type function gener run time type paramet local variabl function e type environ write e vi visibl declar e e vi defin figur 6 inform definit say declar first nonhidden frame global declar vi ibl declar visibl note vi sequenc declar may write e vi x type x e figur 6 also defin two import oper environ rtype return type function first nonhidden frame e environ obtain ad declar local declar first nonhidden frame type rule cyclon given figur 7 interest rule codegen cut splice fill codegen express start process run time code gener type codeg xd environ e type bodi function environ make function x paramet visibl bodi enclos func tion paramet local variabl hidden express fill appear within tem plate type rule ensur look envi ronment must form framet xd 0 express fill type e type environ function gener codegen well paramet local variabl hidden comput valu fill hole necessari paramet local variabl becom avail function call avail hole fill rule cut splice similar like fill cut invok within templat chang frame hidden reason fill splice dual cut chang frame hidden cut back visibl frame thu splice introduc templat cut interrupt templat p wellform program wellform statement type constant c figur 7 type rule cyclon oper semant cyclon safeti theorem given appendix output cyclon compil program talt extens type assembl languag tal morrisett et al 16 design talt primari concern retain lowlevel assembl languag charact tal tal instruct x86 machin struction possibl annot type inform except macro malloc would difficult type expand form macro expand short sequenc x86 instruct sinc instruct simpl trust compon systemth type rule verifi macrosar also simpl give us high degre confid correct safeti system tal alreadi instruct power enough gener code run time malloc move suffici problem approach type malloc region code type clearli end code gener process type tal code jump start code gener safe jump must differ type moreov type region chang move instruct tal type system power enough show sequenc malloc move instruct result tal program safe jump solut talt extens tal type macro manipul templat sinc paper focus cyclon front end system sketch idea talt full detail appear subsequ paper tal procedur label address sequenc tal instruct procedur call jump label address type procedur precondit say entri x86 regist contain valu particular type exampl procedur return precondit say return address access stack pointer jump talt templat also label sequenc instruct unlik tal procedur howev templat meant jump exampl might need concaten anoth templat form tal procedur thu type templat includ postcondit well precondit type rule templat instruct talt ensur templat dump code gener region precondit match postcondit previou templat dump also templat may hole need fill type hole also given type templat type code gener region similar templat includ type hole remain fill region precondit first templat dump postcondit last templat dump hole fill templat postcondit dump region type consist precondit ie type tal procedur point code gener finish result jump int fint x returncodegen int gint return int hint xint returncodegen int kint figur 8 exampl show two codegen express execut call h start gener k stop middl call f gener g give brief descript new talt macro intend inform descript show macro go beyond alreadi talth macro low level remain close machin code macro manipul implicit stack code gener region region stack use function gener codegen stack need possibl two codegen express execut exampl see figur 8 ffl cgstart initi runtim code gener alloc new code gener region new region push onto stack code gener region becom current region cgstart macro complic malloc copi templat label l current code gener region execut regist r point copi templat use fill hole copi cgdump complic macro core simpl stringcopi loop must also check current code gener region enough room copi templat enough room cgdump alloc new region twice size old region copi content old region plu new templat new region replac old region new region stack complex talt instruct consist roughli twenti x86 instruct ffl cghole r l templat l hole move instruct contain hole use templat label l templat declar hole l hole ffl cgfill r1 l templat l hole r2 fill hole tem plate simpl move instruct regist r1 point copi templat label l templat hole label l hole regist r2 contain valu put hole ffl cgfillrel fill hole templat pointer second templat like cgfill expand simpl move instruct need jump templat int f returncodegen int gint cut return 4 figur 9 exampl show need cgabort call function f start gener function g abort middl return 4 ffl cgabort abort code gener pop top region region stack need runtim code gener function stop middl exampl figur 9 cgend r final code gener process current region pop region stack put regist r tal jump locat r implement statu describ key aspect implement previous mention compon written scratch other realiz modifi exist softwar 41 actionannot program cyclon translat tempo actionannot program runtim special written cyclon use tempo front end let us automat gener cyclon program c program actionannot program distinguish two kind code normal code execut specializa tion indic ital fig 2 templat code emit special nonitalic code annot c program translat cyclon program use codegen cut splice fill sinc italic construct execut code gener occur outsid codegen within cut statement fill express nonitalic construct place within codegen express splice statement algorithm oper two mode normal mode translat construct execut code gener time templat mode translat construct part templat algorithm perform recurs descent actionannot abstract syntax keep track mode start normal mode produc cyclon code begin runtim special argument invari local variabl initi statement annot ital first nonital construct encoun tere codegen express issu put translat templat mode rest program translat follow ital statement express must translat normal mode therefor translat tem plate mode insert cut process statement fill process express switch normal mode similarli nonital statement translat templat mode insert splice switch mode necessari isnt possibl encount nonital express within ital express anoth step need taken translat sinc special specul ie branch condit statement optimist special condit test evalu mean special store need save prior special one branch restor special branch therefor must introduc cyclon statement save restor store translat condit statement solut use tempo 6 42 cyclon talt compil cyclon talt extend exist com piler popcorn compil morrisett et al popcorn written caml compil type safe dialect c tal type assembl languag 16 current popcorn simpl stack base compil though extend regist alloc sophist optim popcorn compil work perform travers abstract syntax tree emit tal code goe use environ data structur follow form argsonstack int environ maintain execut state function compil field local env contain variabl identifi correspond stack offset argument push onto stack prior entri function bodi field arg stack record number argument pop stack upon exit function compil cyclon need extend environ datatyp first cyclon switch gener normal code templat code second cyclon nest function therefor use environ structur environ use cyclon type rule outermost env id list frame env cycloneenv hidden env cycloneenv environ sequenc type frame func tion frame either outermost normal hidden type environ visibl bind defin e vi section 2 outermost frame contain local environ toplevel function well global identifi frame use compil templat code new frame environ creat time codegen encount frame becom hidden switch back normal mode cut fill encount popcorn program compil travers abstract syntax tree translat popcorn construct appropri tal instruct result sequenc tal instruct compil program compil cyclon program howev complic perform two phase first phase altern gener normal templat talt instruct second phase rearrang instruct put proper place order instruct rearrang second phase first phase interleav special marker talt instruct mtemplatebeg id id mfill id exp marker use indic instruct normal belong within templat use fill hole templatebeg take two argument begin end label templat issu begin templat codegen splice encount cut end similarli templateend issu end templat end codegen splice begin cut note correspond templatebeg templateend marker templat may begin end therefor marker nest hole encount fill marker issu first argument fill label hole insid templat second argument cyclon sourc code express fill hole follow exampl show cut statement compil match stmt cut match cycloneenv outermost rais error cgfillhol hiddenenvcycloneenv emitmarkmtemplatebegidnew idnew b hidden rais error function compil stmt take cyclon statement environ emit talt instruct sideeffect first thing notic cut occur compil templat mode case environ begin frame cut statement end templat therefor cg fill hole call emit templateend marker emit talt code dump templat fill hole fill hole must done use normal environ therefor first frame becom hidden next compil stmt call recurs compil statement within cut sinc statement also compil normal mode also keep first frame hidden final templatebeg marker emit compil construct follow cut occur within new templat second phase code gener use marker rearrang code talt instruct issu templatebeg templateend marker extract made templat remain normal instruct concaten make one function hole fill instruct insert instruct dump templat contain hole exampl fig 4 show talt program second phase complet normal code includ instruct dump templat fill hole follow templat 43 talt execut tal translat assembl code expand tal macro sequenc x86 instruct similarli new talt macro expand sequenc x86 tal instruct descript talt macro given section 3 result x86 assembl languag program assembl microsoft masm link microsoft visual c linker 44 initi impress implement system start test program assess strength weak sinc current lot interest special interpret decid explor type applic program stateoftheart program special tempo typic achiev speedup 2 20 depend interpret program interpret see system compar took bytecod interpret avail tempo distribut ran system preliminari result show cyclon achiev speedup 3 encourag sinc roughli speedup tempo achiev similar program precis comparison two system still need done howev hand initi implement cost gener code higher tempo one possibl reason safeti alloc code gener region run time perform bound check dump templat approach taken tempo choos maximum buffer size compil time alloc buffer size faster safe 5 relat work propag type stage compil front end back end shown aid robust compil construct check type safeti stage quickli identifi compil bug 23 24 addit necula lee shown prove properti assembl languag level use safe execut untrust mobil code 18 far approach taken static gener code system intend achiev goal dynam gener code mani idea cyclon deriv tempo runtim special 7 12 13 design cyclon talt templatebas approach mind use tempo front end automat templat identi ficat anoth runtim special dyc share featur static analys templatelik back end 5 9 10 howev import differ cyclon system tri make compil robust tempo dyc make cyclon type safe use type verifi safeti compil code like tempo dyc cyclon automat construct special ad dition cyclon also give programm explicit control runtim code gener via codegen cut splice fill construct even possibl us handtweak special produc tempo front end complet type safeti like dyc perform optim intertempl code motion sinc write compil tempo strategi use unmodifi exist compil limit optim perform mlbox metaml c system add explicit code gener construct exist languag ml box metaml type safe dialect ml 15 25 22 c unsaf dialect c 20 21 three system featur combin code fragment go beyond provid cyclon exampl c possibl gener function n argument n valu comput run time possibl cyclon mlbox metaml hand c gener function gener function done cyclon use nest codegen also mlbox metaml advantag gain sophist featur manipul code fragment simplic exampl cyclon type system need new type code fragment fundament differ howev overal system present provid type safeti sourc level also object level make system robust make usabl proof carri code system 6 futur work paper present framework perform safe robust runtim code gener compil base simpl stackbas certifi compil written morrisett et al extend compil regist alloc standard optim expect merg cyclon improv interest studi templatespecif optimiza tion exampl templat appear explicitli talt plan studi intertempl optim code motion templat perform inter templat optim difficult system like tempo base exist compil awar templat also interest analys could static bound size dynam code gener region would let us alloc exactli right amount space begin gener code function would let us elimin bound check templat dump would like extend front end tempo take cyclon c input would mean extend analys tempo handl cyclon nlevel languag like mlbox addit may implement analysi gluck jrgensen 8 produc nlevel cyclon c cyclon 7 conclus design program languag compil combin dynam code gener certifi com pilat system cyclon follow featur robust dynam code gener exist dynam code gener system prove safeti sourc level approach extend object code mean bug compil produc unsaf runtim special caught compil time special run extrem help complex analys transform involv dynam code gener flexibl safeti cyclon produc dynam code gener exploit runtim invari produc optim program user interfac flexibl sinc final execut gener c program cyclon program talt assembl code type safeti static verifi three case safe execut untrust dynam mobil code gener approach use extend proofcarri code system includ dynam code gener sinc verif occur prior run time runtim cost incur safeti guarante sophist optim techniqu employ certifi compil result system could produc mobil code safe potenti extrem fast acknowledg abl implement cyclon quickli work exist tempo tal implement wed like thank charl consel tempo group greg morrisett tal group make possibl paper improv feedback julia lawal anonym refere r partial evalu aircraft crew plan ning gener approach runtim special applic c fast bindingtim analysi multilevel special dyc express annotationdirect dynam compil c special shader static analys effect special realist applic accur bindingtim analysi imper languag flow case runtim code gener lightweight runtim code gener ation system f type assembl languag fast optim sun rpc use automat program special design implement certifi compil tcc system fast design implement code optim typedirect compil standard ml tr ctr georg c necula peter lee design implement certifi compil acm sigplan notic v39 n4 april 2004 christoph colbi peter lee georg c necula fred blau mark plesko kenneth cline certifi compil java acm sigplan notic v35 n5 p95107 may 2000 ingo strmer integr code gener approach modelbas develop process mean tool certif journal integr design process scienc v8 n2 p111 april 2004 hongxu cai zhong shao alexand vaynberg certifi selfmodifi code acm sigplan notic v42 n6 june 2007 scott thibault charl consel julia l lawal renaud marlet gill muller static dynam program compil interpret special higherord symbol comput v13 n3 p161178 sept 2000 cristiano calcagno walid taha liwen huang xavier leroy implement multistag languag use ast gensym reflect proceed second intern confer gener program compon engin p5776 septemb 2225 2003 erfurt germani simon helsen bisimilar region calculu higherord symbol comput v17 n4 p347394 decemb 2004