simplifi failureinduc input given test case program fail part test case respons particular failur show delta debug algorithm gener simplifi fail input minim test case produc failurein case studi mozilla web browser crash 95 user action prototyp implement automat simplifi input 3 relev user action likewis simplifi 896line html singl line caus failur case studi requir 139 autom test run 35 minut 500 mhz pc b introduct often peopl encount bug spend lot time investig chang input file make bug go away chang affect richard stallman use port gnu cc mozilla engin face immin doom juli 1999 370 open bug report store bug data base readi simplifi simplifi meant turn bug report minim test case everi part input would signific reproduc failur overwhelm work engin sent mozilla bugathon call volunt would help process bug report 5 bug report simpli fie volunt would reward invit launch would earn tshirt sign grate engin 9 decompos specif bug report simpl test case troubl engin mozilla netscap open sourc web browser project 8 problem aris gener conflict issu bug report must specif possibl engin recreat context program fail hand test case must simpl possibl minim test case impli gener context thu minim test case allow short problem descript valuabl problem insight also subsum sever current futur bug report strike thing test case simplif one far thought autom task sever textbook guid debug avail tell use binari search order isol problembas assumpt test carri manual autom test howev also autom test case simplif describ paper delta debug algorithm ddmin fed test case simplifi success test ddmin stop minim test case reach remov singl input entiti would caus failur disappear gener ddmin requir time 2 given input n en titi wellstructur input lead better perform best case singl input entiti caus failur ddmin requir logarithm time find entiti ddmin tailor languagespecif knowledg begin discuss problem basic ddmin algorithm use number reallif failur show ddmin algorithm detect failureinduc input test case isol simplifi close discuss relat futur work 2 configur test ian hickson stay 540 simplifi bug first night bugathon mozilla bugathon call let us begin basic definit first minim test case mean everi program smallest possibl input induc welldefin behavior qualifi failur typic empti input someth close exampl c compil accept empti translat unit empti c file smallest possibl input given empti input www browser suppos produc defin error messag given empti input file l e x typeset system suppos produc error messag note smallest possibl input necessarili smallest valid input even invalid input possibl long program fail let us view failureinduc input c result appli number chang 1 2 n minim possibl input way gradual transit minim possibl input chang appli c chang appli deliber give formal definit chang gener stand chang circumst influenc execut program previou work instanc model chang program code 15 paper search failureinduc circumst program input henc chang oper appli input import thing appli chang result failureinduc set c case studi present paper alway chosen chang lexic decomposit failureinduc input stand lexic entiti present chang appli chang appli ex ampl consid minim possibl input empti failureinduc input consist n line text chang would add th line empti input appli chang result full set line model chang lexic decomposit easiest approach model easili extend notion chang still treat chang given entiti let us formal defin test test case describ test case minim possibl input c configur chang test case let set chang chang set c c call test case 1 test case construct appli chang minim possibl input possibl input empti test case call minim possibl input impos constraint chang may com bine particular assum chang order worst case 2 n possibl test case n chang determin whether test case induc failur assum test function accord posix 10033 standard test framework 5 distinguish three outcom 1 definit section adapt previou work 15 see section 8 discuss test succe pass written test produc failur intend captur test produc indetermin result unresolv written 2 definit 3 test function test 8 4 determin test case c c whether given failur occur 8 4 whether test unresolv practic test would construct test case appli given chang minim possibl input feed test case program return outcom let us model initi scenario minim possibl input work fine test case fail axiom 4 fail test case follow hold fail test case goal simplifi fail test case cthat minim test case c minim mean subset c caus test fail formal definit 5 minim test case test case c c minim hold want minim test case c part signific produc failurenoth remov without make failur disappear 3 minim test case simplifi test case mean simplest possibl web page still reproduc bug remov charact file simplifi test case longer see bug mozilla bugathon call one actual determin minim test case come bad news let test case c consist c chang charact line function insert minim input reli test alon determin minim requir test 2 c 1 true subset c obvious exponenti complex 3 determin howev approximationfor stanc test case everi part still signific produc failur check whether remov sever part might make test case even smaller malli defin properti 1minim nminim defin list untest unsupport outcom relev 3 precis axiom 4 tell us result test subset need test help much minim debug algorithm minim delta debug algorithm ddminc reduc subset reduc complement c otherwis done c c pairwis disjoint c c cn well recurs invari thu precondit ddmin 2 figur 1 minim delta debug algorithm definit 6 nminim test case test case c c nminim hold fail test case c compos c line would thu 1minim remov singl line would caus failur disappear likewis would 3minim remov combin three less line would make work c cminim c minim sens definit 5 definit 6 give first idea aim ever given say 100000 line test case simpli remov individu line order minim thu need effect algorithm reduc test case effici 4 minim algorithm proceed binari search throw away half input see output still wrong go back previou state discard half input brian kernighan rob pike practic program human order minim test case use binari search c contain one chang c minim definit otherwis partit c two subset c 1 c 2 similar size test give us three possibl outcom reduc c 1 test c 1 failsc 1 smaller test case reduc c 2 test c 2 failsc 2 smaller test case ignor test pass unresolvedneith c 1 c 2 qualifi possibl simplif first two case simpli continu search fail subset illustr tabl 1 line diagram show configur number stand includ chang dot stand exclud chang chang 7 minim fail test caseand isol step given suffici knowledg natur input certainli partit test case two subset least one fail test knowledg insuffici present let us begin worst case split c subset test pass unresolvedignor complet know c whole fail increas chanc get fail subset test larger subset c increas chanc test failsth differ c smaller hand smaller differ mean slower progressionth test case halv reduc smaller amount test smaller subset c get faster progress case test fail hand chanc test fail smaller specif method combin partit c larger number subset test small c well larg complement c subset contain one chang give us best chanc get fail test case disad vantag cours subset mean test happen let n number subset c 1 c n test c complement possibl outcom figur 1 reduc subset test c fail c smaller test case continu reduc c subset configur test 7 tabl 1 quick minim test case configur test test c 1 c 2 increas granular test c 1 c 4 test complement reduc test carri earlier step test complement reduc increas granular test c 1 c 4 c 1 2 7 8 test complement reduc 22 c 1 1 test c 1 c 3 test complement 26 tabl 2 minim test case increas granular reduct rule result classic divid conquer approach one identifi smaller part test case failureinduc rule help narrow test case effici reduc complement test c smaller test case continu reduc continu n 1 two subset split subset mean subset c ident subset c cin word everi subset c eventu get test continu two subset say would work way would next subset c test increas granular otherwis test fail tri 2n subset 2n c hold tri c subset instead contain one chang result twice mani test increas chanc failur process repeat granular longer increas next n would larger c case alreadi tri remov everi singl chang individu without failur result chang set minim exampl consid tabl 2 minim test case consist chang 1 7 8 test case includ subset chang result unresolv test outcom test case includ none chang pass test begin partit total set chang two halv none pass test continu granular increas 4 subset step 36 test complement set remov chang 3 4 continu split c 2 three subset next three test step 911 alreadi carri need repeat mark test elimin increas granular 4 subset test step 1619 last complement elimin chang 2 chang 1 7 8 remain step 2527 show none chang elimin minim test case total 19 differ test requir close formal properti ddmin first ddmin eventu return 1minim test case proposit 7 ddmin minim c c ddminc 1 minim sens definit 6 proof accord ddmin definit figur 1 ddminc return c n c test subset c c c c c n test condit definit 6 appli c 1minim worst case ddmin take 3c proposit 8 ddmin complex worst case number test carri ddminc 3c worst case proof worst case divid two phase first everi test inconsist test last complement result failur hold first phase everi test inconsist result reinvoc ddmin 2 doubl number subset 1 number test carri second phase worst case test last complement c n fail ddmin 2 reinvok ddmin 2 1 result c 1 call ddmin two test per call 2c overal number test thu 4cc 2 practic howev unlik ncharact input requir test divid conquer rule ddmin take care quickli narrow failureinduc part input proposit 9 ddmin complex best case one failureinduc chang c test case includ caus failur well number test limit proof given condit must alway either c 1 c 2 whose test fail thu overal complex binari search whether best case effici appli depend abil break input smaller chunk result determin better fail test outcom consequ knowledg structur input better identifi possibl failureinduc subset better overal perform ddmin surpris thing howev even knowledg input structur ddmin algorithm suffici per formanceat least case studi examin illustr follow three section 5 case studi gcc get fatal signal none us time studi larg program figur would work compil correctli much less line compil wrong richard stallman use port gnu cc let us turn reallif input c program figur demonstr particular nasti aspect languag also caus gnu c compil gcc crashat least use version 2952 intellinux optim enabl crash gcc grab avail memori stack process may run resourc die 4 latter prevent limit stack memori avail gcc effect remain 4 author deni liabil damag caus repeat experi defin size 20 doubl multdoubl z int n int return zn void copydoubl doubl int count int switch count case 0 case 7 case case 5 case 4 case 3 case 2 case 1 n 0 return multto 2 int mainint argc char argv doubl xsize ysize doubl px x return copyy x size figur 2 bugc program crash gnu cc gcc intern compil error program cc1 got fatal signal 11 gcc error messag result core dump help gcc maintain ordinari user must narrow failureinduc input bugcand minim bugc order file bug report case gcc minim test input empti input sake simplic model chang insert singl charact mean chang c becom th charact bugc c becom entir failureinduc input bugc partit c mean partit input part made exploit syntact semant knowledg c program consequ expect larg number input size test execut tcmin log bugc figur 3 minim gcc input bugc test case invalid c program minim bugc implement ddmin algorithm figur 1 wynot prototyp 5 test procedur would creat appropri subset bugc feed gcc return 8 iff gcc crash 4 otherwis result wynot run shown figur 3 first two test wynot alreadi reduc input size 755 charact 377 188 charact respectivelyth test case contain mult function reduc mult ever take time 731 test 34 second 6 get test case minim 77 charact left tdoubl zint nint 0return zn test case 1minimalno singl charact remov without remov failur even everi singl superflu whitespac remov function name shrunk mult singl least know neither whitespac function name failureinduc figur 4 show excerpt bugc test log charact indic omit charact regard minim put see ddmin algorithm tri remov everi singl chang charact order minim input even everi test result syntact invalid program tdoubl zint nint j tdoubl zint nint j tdoubl zint nint j tdoubl zint nint j tdoubl zint nint j tdoubl zint nint j tdoubl zint nint j figur 4 excerpt bugc test log gcc user file minim bug report gcc failur actual occur alreadi know work yesterday today 6 time measur linux pc 500 mhz pentium iii processor time given cpu user time wynot prototyp measur unix kernel includ spawn child process gcc run example100 1 option test execut tcmin log gcc option figur 5 minim gcc option failur associ optim could possibl influenc optim way failur disappear gcc document list 31 option use influenc optim linux shown tabl 3 turn appli option caus failur disappear fnodeferpop fstrictalias bugc mean option list prevent failur use test case minim order find prevent op tion time c stand gcc option tabl 3 sinc want find option prevent failur test outcom invert test return 4 gcc crash 8 gcc work fine wynot run straightforward divid conquer search shown figur 5 7 test less second singl option ffastmath found prevent failur unfortun ffastmath option bad candid work around failur may alter semant program remov ffastmath list option make anoth wynot run 7 test turn option fforceaddr also prevent failur ffloatstor fnodefaultinlin fnodeferpop fforcemem fforceaddr fomitframepoint fnoinlin finlinefunct fkeepinlinefunct fkeepstaticconst fnofunctioncs ffastmath fstrengthreduc fthreadjump fcsefollowjump fcseskipblock freruncseafterloop frerunloopopt fgcse fexpensiveoptim fscheduleinsn ffunctionsect fdatasect fcallersav funrollloop funrollallloop fmoveallmov freduceallgiv fnopeephol fstrictalias tabl 3 gcc optim option input size test execut tcmin log flex t16 figur minim flex fuzz input option prevent failur run gcc remain 29 option show failur still seem identifi failureprev option send gcc maintain 1 minim test case 2 failur occur optim 3 ffastmath fforceaddr prevent failur still identifi place gcc code caus problem hand identifi mani failur circumst practic program maintain easili enhanc autom regress test suit failur circumst automat simplifi fail test case 6 case studi minim fuzz understand context problem occur your like solv problem complet rather one aspect steve mcconnel code complet classic experi 6 7 bart miller team examin robust unix util servic send fuzz inputa larg number random charact studi show worst case 40 basic program crash went infinit loop fed fuzz input want know well ddmin algorithm perform minim fuzz input sequenc examin subset unix util list miller paper nroff format document display troff format document typesett flex fast lexic analyz gener crtplot graphic filter variou plotter ul underlin filter unit convert quantiti set 16 differ fuzz input differ size 10 3 10 6 charact content whether charact printabl charact includ whether nul charact includ shown tabl 4 miller result still applyat least sun solari 26 oper system test run util crash 42 time 431010001000000 5 input size test execut tcmin log crtplot test t16 figur 7 minim crtplot fuzz input appli wynot tool 42 case minim failur induc fuzz input tabl 5 show result input size tabl 6 list number test requir 7 depend crash caus program could partit two group first group program show obviou buffer overrun problem flex robust util crash sequenc 2121 nonnewlin nonnul charact ul crash sequenc 516 printabl non newlin charact 5 8 13 unit crash sequenc 77 8bit charact figur 6 show first 500 test wynot run flex 16 494 test remain size 2122 charact alreadi close final size howev take 10000 test elimin one charact second group program appear vulner random command nroff troff crash malform command like dj0f 8 8bit input 302n troff crtplot crash onelett input wynot run crtplot 16 shown figur 7 take 24 test minim fuzz input 10 6 charact singl failureinduc charact test run entir autom allow massiv autom stochast test program fed fuzz input order reveal defect soon failur detect input minim gener larg fuzz input minim bug report tabl 6 also includ repeat test carri earlier step averag number actual nonrep test 30 smaller 8 input shown c string notat test pass 4 8 tabl 4 test outcom unix util subject fuzz input name charact rang printabl printabl nul charact ye ye tabl 5 size minim failureinduc fuzz input 7 case studi mozilla print youv cut away much html css javascript cut away caus bug disappear your done mozilla bugathon call last case studi want simplifi realworld mozilla test case thu contribut mozilla bugathon search bugzilla mozilla bug databas show us bug 24735 report anantkyahoocom ok follow oper caus mozilla crash consist machin go bugzillamozillaorg select search bug print file set bottom right margin 50 use file vartmpnetscapep done print exact thing file vartmpnetscapep caus browser crash segfault case mozilla input consist two item sequenc input eventsthat success mous motion press key click buttonsand html code erron www page use xlab capturereplay tool 13 run mozilla captur user action log file could easili reproduc error creat xlab log 711 record x event wynot tool would use xlab replay log feed mozilla record user action thu autom mozilla execut first run want know whether action bug report actual necessari thu subject log test case minim order find failureinduc minimum user action 711 x event 95 relat user actionsthat move mous pointer press releas mous button press releas key keyboard 95 user action subject minim result run shown figur 9 82 test run 95 user action left 1 press p key alt modifi key held invok print dialog 2 press mous button 1 print button without modifi arm print button 3 releas mous button 1 start print user action remov includ move mous pointer select print file option alter default file name set print margin 50 releas p key click printal irrelev produc failur 9 sinc user action hardli gener turn attent anoth input sourceth failureinduc html code origin search bug page length 39094 charact 896 line order minim html code chose hierarch first run want minim number line c identifi line later run want minim failureinduc line accord singl charact 9 relev though mous button press releas tabl number requir test runs101000 number line test execut tcmin log queryhtml figur 8 minim mozilla html input result line run shown figur 8 57 test run ddmin algorithm minim origin 896 line 1 line input html input caus mozilla crash print gcc exampl section 5 actual failur induc input small minim 10 reveal attribut select tag relev reproduc failur either singl input alreadi suffic reproduc failur overal obtain follow selfcontain minim bug report creat html page contain load page print use altp print browser crash segment fault long bug report reproduc minim procedur easili repeat automat 5595 bug list bugzilla databas 11 one need html input sequenc user action observ failureand littl time let comput simplifi failureinduc input minim done hand apolog 11 14 feb 2000 number xevent test execut tcmin log mn event remov figur 9 minim mozilla user action 8 relat work two compet theori make exactli predict one simpler better state introduct unawar techniqu would automat simplifi test case determin failur induc input one import except simplif test case artifici produc 11 slutz describ stresstest databas gener sql state ment failur produc test case simplifiedaft fail 1000line sql statement would taken serious databas vendor 3line statement would simplif realiz simpli undo earlier product step test whether failur still occur gener delta debug determin circumst relev produc failur case part program put field autom debug failureinduc circumst almost exclus understood failur induc statement program execut signific method determin statement relev failur program slicingeith static form obtain program analysi 14 12 dynam form appli specif run program 1 3 strength analysi sever potenti failur caus elimin due lack data control depend suffic though check whether remain potenti caus relev produc given failur experi test prove circumst relevantbi show alter circumst make failur disappear come concret failur program analysi test complementari analysi disprov causal test prove would nice see far systemat test program analysi could work togeth whether delta debug could use determin failureinduc statement well determin part input relev produc failur debug could determin failurerelev statement program critic slice 2 relat approach testbas like delta debug addit data flow analysi use elimin circumstanti posit ddmin algorithm present paper altern origin delta debug algorithm dd present 15 like take set chang minim accord given test 15 chang affect program code obtain compar two program version main differ ddmin dd dd determin minim differ fail nonfail configur ddmin minim differ fail empti configur dd wellsuit failur induc larg combin chang particular dd guarante 1minim subset suit minim test case dd assum monotoni whenev hold everi subset c well assumpt found use chang program code gave dd better perform test produc determin result recommend ddmin gener replac dd exploit monotoni ddmin one make testc return 4 whenev superset c alreadi pass test 9 futur work get way groupsign tshirt qualifi stuf anim well 12 mozilla bugathon call futur work concentr follow topic domainspecif simplif method knowledg input structur much enhanc perform ddmin algorithm instanc valid program input frequent describ grammar would nice reli grammar order exclud syntact invalid input right start also formal input descrip tion one could replac input smaller altern input rather simpli cut away gcc exampl one could tri replac arithmet express constant program block noop html input could reduc accord html structur rule optim gener abstract descript ddmin algorithm leav lot flexibl actual implement thu provid hook sever domainspecif optim implement choos partit c subset c place knowledg structur input come handi implement choos subset test first subset may like caus failur other implement choos whether handl multipl independ failureinduc input case sever subset c option includ continu first fail subset continu smallest fail one simplifi individu fail subset implement current goe first fail subset thu report one subset reason economi wiser fix first failur check similar failur program analysi far treat test program black box refer sourc code howev sever program analysi method avail help relat input specif failur simpli tell us part input relat thu chang one run other simpl dynam slice fail test case tell us input actual influenc program input never combin inputcent executioncent debug method remain explor maxim pass test case right ddmin make distinct pass unresolv test sever set howev distinct may use ful could minim differ pass fail testnot minim failur induc input also maxim pass input expect twofold approach pinpoint failur faster precis failureinduc circumst chang input program one mean influenc execut state section 2 stand chang circumst influenc execut program thu research whether delta debug applic failureinduc circumst execut statement control predic thread schedul 10 conclus debug still matter trial error henri lieberman debug scandal shown ddmin algorithm simplifi failureinduc input base autom test procedur method appli number set find failur induc part program invoc gcc option program input gcc fuzz mozilla input sequenc user interact mozilla user action recommend autom test case simplif integr part autom test time test fail delta debug could use simplifi circumst fail ure given suffici test resourc reason choic chang influenc program execut ddmin algorithm present paper provid simplif straightforward easi implement practic test debug typic come pair ever debug research test play minor role surpris retest program chang circumst common debug approach delta debug noth autom process eventu expect sever debug task fact state search minim problem base autom testingand thu solv automat detail case studi list paper found 4 inform delta debug includ full wynot implement avail httpwwwfmiunipassaudestdd acknowledg mirko streckenbach provid help insight unix intern tom truscott point us gcc error holger cleve jen krink gregor snelt provid valuabl comment earlier revis paper special thank go anonym review construct comment 11 r dynam program slice critic slice softwar fault local minimierung fehlerverursachend eingaben empir studi reliabl unix util fuzz revist reexamin reliabl unix util servic mozilla web site mozilla web site gecko bugathon massiv stochast test sql survey program slice techniqu programm use slice debug tr dynam program slice empir studi reliabl unix util critic slice softwar fault local foundat softwar engin yesterday program work today effici relev slice method debug programm use slice debug massiv stochast test sql ctr simon carter malcolm graham paul strooper zhiguo yuan mutat analysi verifi featur matric isol error simul model proceed twentysixth australasian confer comput scienc research practic inform technolog p2934 februari 01 2003 adelaid australia zhang neelam gupta rajiv gupta locat fault autom predic switch proceed 28th intern confer softwar engin may 2028 2006 shanghai china zhang haifeng neelam gupta rajiv gupta experiment evalu use dynam slice fault locat proceed sixth intern symposium autom analysisdriven debug p3342 septemb 1921 2005 monterey california usa andi podgurski david leon patrick franci we masri melinda minch jiayang sun bin wang autom support classifi softwar failur report proceed 25th intern confer softwar engin may 0310 2003 portland oregon kaihui chang v bertacco l markov simulationbas bug trace minim bmcbase refin proceed 2005 ieeeacm intern confer computeraid design p10451051 novemb 0610 2005 san jose ca zhang neelam gupta rajiv gupta studi effect dynam slice locat real fault empir softwar engin v12 n2 p143160 april 2007 zhang neelam gupta rajiv gupta prune dynam slice confid acm sigplan notic v41 n6 june 2006 gregg rothermel sebastian elbaum alexey malishevski praveen kallakuri brian davia impact test suit granular costeffect regress test proceed 24th intern confer softwar engin may 1925 2002 orlando florida zhang neelam gupta rajiv gupta locat faulti code multipl point slice softwarepractic experi v37 n9 p935961 juli 2007 test malwar detector acm sigsoft softwar engin note v29 n4 juli 2004 mark last menahem friedman abraham kandel data mine approach autom softwar test proceed ninth acm sigkdd intern confer knowledg discoveri data mine august 2427 2003 washington dc sebastian elbaum hui nee chin matthew b dwyer jonathan dokulil carv differenti unit test case system test case proceed 14th acm sigsoft intern symposium foundat softwar engin novemb 0511 2006 portland oregon usa gregg rothermel sebastian elbaum alexey g malishevski praveen kallakuri xuemei qiu test suit composit costeffect regress test acm transact softwar engin methodolog tosem v13 n3 p277331 juli 2004