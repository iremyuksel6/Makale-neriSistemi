syntact theori dynam bind dynam bind tradit alway associ lisp still semant obscur mani even though program languag favour lexic scope dynam bind remain interest express program techniqu specialis circumst also key notion formal semant articl present syntact theori enabl programm perform equat reason program use dynam bind theori prove sound complet respect deriv allow program dynamicenviron pass style theori deriv sequenti evalu function contextrewrit system refin evalu function two popular implement strategi deep bind shallow bind valu cell afterward follow say deep bind suitabl parallel evalu present parallel evalu function futurebas function languag extend construct dynam bind final exhibit power use dynam bind two differ way first prove dynam bind add express pure function languag second show dynam bind essenti notion semant use defin except b introduct dynam bind tradit associ lisp dialect appear mccarthi lisp 10 24 bug becam featur succeed implemen tation like instanc maclisp 2 28 gnu emac lisp 23 even modern dialect languag favour lexic scope provid form dynam variabl special declar common lisp 43 even simul dynam bind lexicallyscop variabl mitschem fluidlet 18 lexic scope becom norm imper languag also function languag scheme 39 common lisp 43 standard ml 26 haskel 21 scope name bind text occurr name refer bind lexic scope impos variabl express refer innermost lexicallyenclos construct declar variabl rule impli nest declar follow block structur organis contrari scope name said indefinit 43 refer may occur anywher program hand dynam bind refer notion dynam extent dynam extent express lifetim express start end control enter exit express dynam bind bind exist use dynam extent express dynam variabl refer latest activ dynam bind exist variabl 1 express dynam scope conveni refer indefinit scope variabl dynam extent 43 dynam bind initi defin metacircular evalu 24 later formalis denot semant gordon 15 16 also part research support part epsrc grant grk30773 author address depart electron comput scienc univers southampton southampton so17 1bj unit kingdom email lmoreauecssotonacuk least interpret mode folklor exist translat dynamicenviron pass translat translat program use dynam bind program use lexic bind 36 p 180 like continuationpass transform 35 dynamicpass translat add extra argument function dynam environ everi refer dynam variabl translat lookup current dynam environ late eighti saw apparit syntact theori new semant framework allow equat reason program use nonfunct featur like firstclass continu state 10 11 12 44 framework later extend take account parallel evalu 9 14 29 30 purpos paper present syntact theori allow user perform equat reason program use dynam bind contribut fivefold first dynamicenviron pass translat construct invers translat use sabri felleisen techniqu 40 41 deriv set axiom defin calculu prove sound complet respect deriv accept dynamicenviron pass style section 3 second devis sequenti evalu function ie algorithm prove return valu whenev calculu evalu function reli contextrewrit techniqu 11 present section 4 third order strengthen claim dynam bind express program techniqu use notion semant give formal proof express use definit except section 5 defin relat observ equival use evalu function prove dynam bind add express 8 pure function program languag establish dynam bind macroexpress callbyvalu lambdacalculu section 6 use dynam bind semant primit formalis two differ model except nonresum except ml 26 resum one common lisp 43 34 fourth refin evalu function strategi call deep bind facilit creation restor dynam environ section 7 fifth extend framework parallel evalu base futur construct 14 17 30 section 8 defin parallel evalu function also reli deep bind techniqu deriv calculu motiv work describ three broad categori use dynam bind concis control delimit distribut comput let us insist purpos denigr qualiti lexic bind essenc abstract block structur organis present syntact theori allow equat reason dynam bind claim dynam bind express program techniqu use sensibl manner show dynam bind elegantli use defin semant construct let us note dynam bind found lisp also e x 22 perl 45 unix tm shell practic use dynam bind 21 concis typic use dynam bind print routin printnumb requir basi number display one solut would pass explicit argument call printnumb howev repeat program pattern across whole program sourc program mistak addit solut scalabl later requir printnumb routin take addit paramet indic font number display would modifi whole program scheme io function take option inputoutput port procedur inputfromfil withoutputtofil 39 simul dynam bind paramet gnu emac 23 exampl larg program use dynam variabl contain dynam variabl current buffer current window current cursor posit avoid pass paramet function refer exampl illustr felleisen concis conjectur 8 accord sensibl use express program construct reduc program pattern program order strengthen observ prove dynam bind actual add express pure function languag section 5 22 control delimit even though standard ml 26 lexicallyscop languag rais except caught latest activ handler usual programm instal except handler durat express ie handler dynam bound extent express maclisp 28 common lisp 43 catch throw eulisp letcc 34 exampl exceptionlik control oper dynam extent gener control delimit use creat partial continu whose differ semant toler variou degre dynam 5 20 31 38 42 23 parallel distribut parallel distribut usual consid possibl mean increas speed program execut howev anoth motiv distribut exacerb ubiquit www quest new resourc comput migrat site 1 anoth site 2 2 hold resourc access 1 explanatori purpos consid simpl resourc name comput sever solut model name run host languag last one entir satisfactori lexic variabl hostnam could bound name comput whenev process creat unfortun variabl may close closur alway return valu even though evalu differ site ii primit hostnam defin function argument ffi 35 return differ valu differ context unless defin nondeterminist function would prevent equat reason iii special form hostnam could satisfi goal contradict minimalist philosophi scheme avoid ad unnecessari special form furthermor would defin special form everi resourc would natur abstract uniqu special form parameteris resourc name introduc new name space exactli dynam bind offer iv solut dynam bind variabl hostnam name comput processcr time everi occurr variabl would refer latest activ bind variabl besid control task paralleldistribut set usual reli notion dynam extent sponsor 33 37 allow programm control hierarchi task 3 calculu dynam bind figur 1 display syntax u languag access end user let us observ purpos u captur essenc dynam variabl propos new syntax themth languag u base two disjoint set variabl dynam static lexic variabl consequ programm choos lexic abstract x lexic bind paramet appli dynam abstract x dynam bind paramet former repres regular abstract calculu 3 latter model construct like common lisp abstract special variabl 43 dynamicscop 6 fig 1 user languag u paramount import clearli state name convent adopt languag follow barendregt 3 consid term equal renam bound static variabl equival contrari two term differ dynam variabl consid equival e ddlet fig 2 dynamicenviron pass transform figur 2 dynamicenviron pass translat call program transform map program u target languag dep extend callbyvalu calculu base lexic variabl figur 3 intuit abstract static dynam u translat abstract take extra dynam environ argument target languag contain variabl e denot unknown environ result applic protocol target languag chang accordingli oper valu appli pair translat applic dynam environ e use translat oper operand also pass argument oper dynam abstract translat abstract extend dynam environ dynam variabl translat lookup correspond constant current dynam environ sourc languag extend u dlet construct dlet x d1 stand dynam let construct inaccess programm use intern system model bind dynam variabl x di valu syntax input languag call appear figur 5 bind list defin concaten oper x satisfi follow properti vn vn evalu target languag base set axiom display second part figur 3 applic binari abstract requir doubl fi v reduct model rule fi theta environ lookup implement lk 1 lk 2 follow sabri felleisen purpos rest section deriv set axiom perform term reduct allow term languag dep e j yp p term e unknown env variabl axiom lookup xd extend e xd w lookup xd extend e xd1 w e xd1 6 xd lk 2 j theta fig 3 syntax axiom depsd calculu fig 4 invers dynamicenviron pass transform gamma1 dep precis want defin calculu equat correspond calculu dep follow definit equat correspond taken verbatim 40 definit 1 equat correspond let r g two languag calculi xr xg also let f g translat r g h translat g r final let g calculu xr equat correspond calculu xg follow four condit hold 1 2 xg figur 4 contain invers dynamicenviron pass transform map term dep term first case worth explain term w 1 w 2 repres applic oper valu w 1 pair dynam environ e operand valu invers translat applic invers translat w 1 w 2 scope dlet invers translat e follow case invers translat remov environ argument ad abstract translat occurr dynam environ dletexpress state space bind list primari axiom dlet dlet dlet dlet dlet deriv axiom dlet compat dlet fig 5 syntax axiom calculu appli dynamicenviron pass transform term immedi translat result back gamma1 find first six primari axiom figur 5 explanatori purpos prefer present deriv axiom dlet intro 0 dlet propag 0 axiom dlet intro 0 counterpart fi v dynam abstract appli dynam abstract valu v creat dlet construct dynam bind paramet argument v bodi abstract rule dlet propag 0 rewritten use syntact sugar let tell us transform applic appear insid scope dlet dlet oper operand separ evalu insid scope dynam environ applic oper valu operand valu also appear insid scope dynam environ interpret dlet merg dlet elim 1 dlet establish follow properti concern composit lemma 2 term 2 valu v 2 v alu list bind bind environ e 2 dep let term p 2 dep valu w 2 depsv alu dynam environ appli invers translat gamma1 axiom dep obtain four last primari axiom figur 5 rule lookup 1 lookup 2 immedi correspond lk 1 lk 2 dep fi 0omega j v axiom discov sabri felleisen appli techniqu calculi continu assign 40 intuit set axiom explain follow absenc dynam abstract behav callbyvalu calculu whenev dynam abstract appli dlet construct creat rule dlet propag 0 propag dlet leav syntax tree replac occurr dynam variabl valu dynam environ lookup 1 lookup 2 rule dlet propag 0 also guarante dynam bind remain access extent applic dynam abstract ie delet dlet us also observ parallel evalu possibl dynam environ duplic oper operand reduc independ properti use section 8 defin parallel evalu function obtain follow sound complet result lemma 4 sound term e 2 dep dep lemma 5 complet term p follow theorem consequ lemma 2 5 theorem 1 calculu equat correspond calculu dep 2 within calculu defin partial evalu relat valu program v prove equal v calculu definit 6 eval c program 2 0 definit give us algorithm state specif must satisfi evalu procedur purpos next section defin procedur 4 sequenti evalu sequenti evalu function defin figur 6 reli notion evalu context 11 evalu context e term hole place next subterm evalu use notat e denot term obtain place insid hole context e four transit rule necessari dlet intro dlet elim deriv calculu rule lookup replac dlet propag dlet merg dlet lookup 1 dlet lookup 2 calculu state space alu xs j xsm j xdm valu e j e evalu context transit rule evalu function program 2 0 error 7 dynam bound variabl stuck term fig 6 sequenti evalu function intuit valu dynam variabl given latest activ bind variabl framework latest activ bind correspond innermost dlet bind variabl dynam extent dlet construct period time apparit dlet intro elimin dlet elim evalu algorithm introduc concept stuck term defin occurr dynam variabl evalu context contain bind evalu function defin total function return valu evalu termin evalu diverg error stuck term reach correct evalu function establish follow theorem relat eval c eval let us observ eval c may return valu v 0 differ valu v return eval calculu perform reduct insid abstract theorem 2 program 2 0 eval c implement lookup would start dynam variabl evalu search innermost enclos dlet contain bind variabl would return associ valu otherwis would proceed next enclos dlet behaviour exactli correspond search valu associ list assoc scheme strategi usual refer deep bind section 7 refin sequenti evalu function make associ list explicit beforehand show dynam bind add express function languag 5 express section 21 state dynam bind express program techniqu use sensibl manner could reduc program pattern program section give formal justif statement prove dynam bind add express 8 pure function languag first defin notion observ equival definit 7 observ equival given program languag l evalu function eval l two term observ equival context c 2 l cm 1 cm 1 program l eval l 1 defin equal v eval l 2 defin equal v 2 shall denot observ equival callbyvalu calculu calculu v respect order prove dynam bind add express 8 pure function languag let us consid follow lambda term assum exist primit con construct pair con v f dv term observationn equival v calculu ie 1 v 2 1 exampl show dynam bind enabl us distinguish term callbyvalu calculu distinguish result v 6ae use felleisen definit express 8 thm 314 conclud proposit 1 v macroexpress dynam bind rel 6 semant except firstclass continu state simul except 13 show except defin term firstclass continu dynam bind semant ml 26 rais except return except valu distinct normal valu effect prune evalu context handler abl deal except merg mechan abort comput mechan fetch handler except handler longer execut dynam environ except rais result approach use give semant kind except like resum one 43 order model abort effect extend sequenti evalu function figur 6 felleisen friedman abort oper 11 sake simplic assum exist one except type discrimin kind except perform handler also assum exist distinguish dynam variabl x ed figur 7 give semant mlstyle except except rais latest activ handler call escap appli f dynam environ handl dynam environ except rais 3 hand exist kind except like resum except eg common lisp resum error 43 eulisp resum condit 34 essenti offer opportun resum comput point except rais sequel present variant queinnec monitor 36 3 usag firstclass continu appear rule handl duplic evalu context e let us also observ continu use downward way amount pop frame stack exe va ef v fig 7 mlstyle except p 255 give essenc resum except primit monitorsign play role handlerrais mlstyle except let us note signal binari function take valu also boolean r indic whether except rais resum emonitor f 7d e xed let old xed r x esign r v 7d exe r v fig 8 resum except like handl monitor instal except handler durat comput except signal latest activ handler call dynam environ signal except except signal handler handl handler exist monitor call x ed shadow durat execut handler f access normal comput resum except signal resum ie first argument signal true valu return handler return signal comput continu exactli dynam environ 4 approach defin semant except two advantag least first model effect appropri primit abort handler instal dynam bind abil model differ kind semant except second defin semant except assign weaken theori 12 assign break equival would hold presenc except definit provid precis characteris theori except refin refin evalu function repres dynam environ explicitli associ list separ evalu context dynam environ facilit design parallel evalu function section 8 figur 9 display state space transit rule deep bind strategi dynam environ repres new dlet construct appear outermost level configur call state list bind ffi regard global stack initi empti evalu start bind push bind list everi time dynam abstract appli pop end dynam extent applic section 4 dlet construct also model dynam extent dynamicabstract applic dlet construct longer appear insid term introduc pop term play role creat dynam abstract appli destroy end dynam extent pop top bind bind list theorem 3 establish correct deep bind strategi 4 semant assum exist initi handler evalu proceed state space bind list e j e evalu context transit rule dlet dlet dlet dlet ffixx v evalu function db dlet error dlet 7 stuck state 2 stuck db fig 9 deep bind theorem 3 eval deep bind techniqu simpl implement bind push bind list ffi applic time dynam abstract pop end extent howev lookup oper ineffici requir search dynam list oper linear length exist techniqu improv lookup oper shallow bind techniqu consist index dynam environ variabl name 1 optimis call shallow bind valu cell associ dynam variabl fix locat contain correct bind variabl lookup oper simpli requir read content locat 8 parallel evalu section 3 observ axiom dlet propag 0 particularli suitabl parallel evalu allow independ evalu oper operand duplic dynam environ wellknown deep bind strategi adapt parallel evalu associ list repres dynam environ share differ task previou work 30 follow parallel annot approach programm use annot futur 17 indic express may evalu parallel semant futur describ pure function framework 14 presenc firstclass continu assign 30 figur 10 present semant futur presenc dynam bind 14 30 set term augment futur construct add set valu placehold variabl repres result comput progress addit new construct flet p doubl goal first let bind p valu second model potenti evalu parallel compon mandatori term first would evalu evalu sequenti specul valu known need termin state space transit rule dlet ae dlet dlet dlet dlet ae dlet dlet dlet ffixx v dlet error error dlet dlet dlet dlet dlet evalu function program 2 0 dlet dlet error dlet 7 error fig 10 parallel evalu differ figur import observ futur valid evalu context otherwis evalu allow proceed insid futur bodi could possibl chang dynam environ would make fork unsound instead rule ltc stand lazi task creation 27 7 replac futur express fmark interpret mark indic task may creat runtim elect creat new task fork creat flet express whose mandatori compon argument fmark ie futur argument whose specul compon new state evalu context fmark fill placehold variabl scope duplic dynam environ ffi 1 runtim elect spawn new task evalu proceed fmark argument rule ltc futur id specifi sequenti behaviour futur valu futur valu fmark valu argument evalu mandatori compon termin rule join substitut valu placehold specul state rule specul indic specul transit allow flet bodi follow 14 figur 10 defin relat 1 7 nm mean n step involv reduct 1 2 among mandatori correct evalu function follow modifi diamond properti observ number pop term state alway smaller equal length dynam environ theorem 4 eval far implement concern rule ltc seem indic dynam environ duplic refin system indic suffic duplic pointer associ list long list remain access share store rule ltc add overhead everi use futur duplic dynam environ even dynam variabl use feeley 7 describ implement avoid cost lazili recreat dynam environ task stolen due orthogon assign dynam bind previou result 30 assign merg within framework ad assign permit definit mutabl dynam variabl construct like dynamicset 34 due pure dynam natur semant presenc mutabl dynam variabl offer less parallel observ 30 interact dynam bind continu howev beyond scope paper 19 9 relat work confer histori program languag mccarthi 25 relat observ behaviour dynam bind program higherord function bug fix introduc funarg devic function con struct32 cartwright 4 present equat theori dynam bind languag extend explicit substitut assum callbynam paramet pass techniqu motiv work fundament differ goal deriv homomorph model function languag consid combin axiom deriv oecalculu axiom construct proof equat correspond calculu author 6 discuss issu tailrecurs presenc dynam bind observ simpl implement fluidlet 18 tailrecurs restor previou dynam environ evalu fluidlet bodi therefor propos implement strategi essenc dynamicenviron pass style solut program dynamicenviron pass style characteris fact requir growth control state dynam bind howev requir growth heap space analog continuationpass translat gener program function call termin posit although mean cpsprogram iter feeley 7 queinnec 36 observ program dynamicenviron ment pass style reserv special regist current dynam environ sinc everi nontermin call save restor regist strategi penalis program use dynam bind especi bytecod interpret margin cost extra regist high prefer solut penalis program price growth control state everi dynam bind consequ believ implementor decid whether dynam bind increas control state case result nonit behaviour tradit syntact theori continu assign present syntact theori dynam bind theori help us deriv sequenti evalu function refin implement like deep bind also integr dynamicbind construct framework parallel evalu futurebas program besid prove dynam bind add express pure function languag show dynam bind suitabl tool defin semant exceptionslik notion furthermor believ singl framework integr continu sideeffect dynam bind would help us prove implement strategi fluidlet presenc continu 19 acknowledg mani thank daniel ribben christian queinnec anonym refere help comment r anatomi lisp shallow bind lisp 15 lambda calculu syntax semant lambda ultim combin abstract control dynam identifi neat effici gener implement futur larg scale sharedmemori multiprocessor express power program languag reduct semant imper higherord languag syntact theori sequenti state syntact theori sequenti control revis report syntact theori sequenti control state control effect semant futur use program optim oper reason denot semant toward semant theori dynam bind mit scheme refer manual embed continu procedur object continu concurr report program languag haskel gnu emac lisp refer manual recurs function symbol express comput machin histori lisp definit standard ml lazi task creation maclisp refer manual sound evalu parallel function program firstclass contin uation semant scheme futur partial continu differ continu ation function function lisp funarg problem call environ problem specul comput multilisp eulisp definit lisp small piec design concurr distribut lan guag dynam extent control oper partial continu revis 4 report algorithm languag scheme formal relationship direct continuationpass style optim compil synthesi two paradigm reason program continuationpass style control delimit hierarchi languag rum intension theori function control abstract program perl tr ctr christian queinnec influenc browser evalu continu program web server acm sigplan notic v35 n9 p2333 sept 2000 matthia neubauer michael sperber emac lisp dynam scope analysi acm sigplan notic v36 n10 octob 2001 gavin bierman michael hick peter sewel gareth stoyl keith wansbrough dynam rebind marshal updat destructtim acm sigplan notic v38 n9 p99110 septemb zena ariola hugo herbelin amr sabri typetheoret foundat continu prompt acm sigplan notic v39 n9 septemb 2004 oleg kiselyov chungchieh amr sabri delimit dynam bind acm sigplan notic v41 n9 septemb 2006 magorzata biernacka olivi danvi syntact correspond contextsensit calculi abstract machin theoret comput scienc v375 n13 p76108 may 2007