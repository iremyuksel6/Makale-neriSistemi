systemat formal verif faulttoler timetrigg algorithm abstractmani critic realtim applic implement timetrigg system present systemat way deriv timetrigg implement algorithm specifi function program form correct faulttoler properti formal mechan verifi rel eas function program first transform untim synchron system timetrigg implement first step specif algorithm concern second gener prove correct proof formal mechan check pv verif system approach provid methodolog eas formal specif assur critic faulttoler system b introduct synchron system distribut comput system known upper bound time take nonfaulti processor perform certain op erat time take messag sent one nonfaulti processor receiv anoth exist bound simplifi develop faulttoler system nonfaulti process execut common algorithm use passag time predict other progress properti contrast asynchron system upper bound process messag delay therefor provabl imposs achiev certain form consist knowledg coordin action presenc even simpl fault 6 13 reason faulttoler system critic control applic air craft train automobil industri plant usual base synchron approach though differ extent basic mechan system realli guarante satisfact synchroni assumpt exampl process schedul algorithm miss deadlin buffer overflow content buse ethernet lead violat synchroni assumpt may consid good enough less truli critic appli cation applic truli critic howev often build mechan mere synchron synchron timetrigg clock differ processor kept close togeth processor perform action specif time task messag global static sched ule honeywel safebu tm 117 provid safetycrit backplan boe 777 airplan inform manag system aim 3139 control system shinkansen japanes bullet train 16 timetrigg protocol ttp propos safetycrit automobil function 21 use latter approach number basic function identifi provid import build block construct faulttoler synchron system 8 10 includ consensu also known interact consist byzantin agre ment 33 reliabl atom broadcast 9 group membership 7 numer algorithm develop perform function critic subtleti sever subject detail formal 15 23 43 mechan check 2 2628 34 verif combin larger function diagnosi 25 synthesi faulttoler architectur base activ statemachin replic 11 35 formal especi mechanicallycheck verif algorithm still someth tour de forc howev real impact practic need reduc difficulti formal verif domain routin larg autom process order achiev studi sourc difficulti exist treatment attempt reduc elimin particular look opportun systemat treatment may allow aspect common rang algorithm treat uniform way may even allow aspect broken verifi gener manner wide rang appar level difficulti detail verif cite differ attribut way problem formal differ resourc formal specif languag theorem prover employ exampl rushbi 34 bevier young 2 describ mechan check formal verif oral messag algorithm 24 consensu problem perform use differ verif system young 42 argu differ difficulti treatment 34 gener consid simpler clearer 2 due differ choic way thing formal may assum differ reduc elimin experi gain better choic becom wide known signific differ due thing formal differ due formal level detail consid necessari exam ple verif oral messag algorithm mention specifi algorithm function program proof convent induct follow approach special case tworound algorithm variant algorithm known om1 specifi 28 coupl line verif almost complet automat contrast treatment om1 23 long detail quit complic reason length complex treatment explicitli consid distribut messag pass charact intend implement calcul tight realtim bound timeout employ detail abstract away treatment use function programsbut mean verif inferior detail analys contrari would argu captur essenc algorithm concern ie explain algorithm fault toler messagepass realtim bound implement detail ought handl separ fact paper introduc algorithm concern standard textbook 29 use similarli abstract timefre treatment hand undeni import also verifi specif reason close intend implementa tion establish correct timeout use concret fault mode match assum abstract treatment natur resolut compet claim abstract concret hierarch approach essenc algorithm verifi abstract formul realist formul shown refin suitabl sens abstract formul thing work well refin argument routin calcul timeout concret detail purpos paper present framework hierarch treatment show import case timetrigg implement roundbas algorithm detail refin concret formul work systemat formal verif timetrigg algorithm 5 roundbas algorithm textbook 29 nanci lynch identifi algorithm synchron system model execut seri round round two phase first processor 1 send messag processor differ messag may sent differ processor messag depend current state send processor second phase processor chang state manner depend current state collect messag receiv first phase notion realtim model messag transfer instantan sender recipi two phase processor oper lockstep perform two phase current round move first phase next round sever algorithm interest explicitli formul term round first present other easili recast form exampl oral messag algorithm consensu om1 requir two round follow algorithm om1 round 0 commun phase distinguish processor call transmitt send valu processor call receiv receiv send messag comput phase receiv store valu receiv transmitt state round 1 commun phase receiv send valu receiv transmitt receiv transmitt send messag comput phase receiv set decis compon state major valu among receiv receiv store state receiv transmitt presenc one fewer arbitrari fault om1 ensur nonfaulti receiv decid valu transmitt nonfaulti valu one sent transmitt two differ way implement roundbas algorithm timetrigg approach implement close model processor close synchron eg within coupl bittim case refer particip processor stress assum fail independ agent perform action actual process safebu run common determinist schedul caus execut specif algorithm specif time accord local clock sequenc phase round similarli driven local clock commun bandwidth also alloc dedic fix time slot first commun phase round must suffici long nonfaulti processor abl exchang messag success consequ explicit timeout need messag arriv time second comput phase round begin implicitli time wherea alloc resourc static determin timetrigg approach eventtrigg approach resourc schedul dynam processor respond event occur implement style initi protocol may trigger local clock subsequ phase round driven arriv messag lamport merz treatment om1 exampl receiv receiv messag transmitt may forward immedi receiv without wait clock indic next round start word pace phase round determin local avail messag unlik timetrigg approach messag may explicitli time eventtrigg approach exampl lamport merz treatment om1 receiv wait relay messag receiv beyond past start algorithm ffi maximum commun delay ffl maximum time take receiv decid relay messag algorithm first introduc use eventtrigg formul exampl cristian atom broadcast group membership algorithm 7 9 possibl reconstruct explicitli roundbas equival transform timetrigg implement kopetz timetrigg algorithm 19 problem extent eventtrigg system gener easier construct timetrigg one requir big plan schedul effort upfront achiev better cpu util light load hand kopetz 2021 argu persuas timetrigg system predict henc easier verifi easier test make better use broadcast commun bandwidth sinc address need communicatedthes implicit time messag sent oper closer capac gener prefer truli critic appli cation previous mention safebu boe 777 shinkansen train control system ttp protocol automobil timetrigg goal systemat method transform roundbas protocol abstract function program whose properti compar easi formal mechan verifi timetrigg implement appropri time constraint consider realist fault mode transform accomplish two step first function program untim synchron system timetrigg implement first step systemat must undertaken separ algorithm see systemat formal verif timetrigg algorithm 7 section 4 gener deal larg class algorithm fault assumpt singl verif gener treatment second step describ follow section roundbas algorithm implement timetrigg system issu transform untim roundbas algorithm timetrigg implement basic ensur time durat event commun phase messag nonfaulti processor alway arriv commun phase round fault mode interpret appropri verifi transform introduc formal model untim synchron system timetrigg system establish simul relat treatment formal mechan check use pv verif systemse section 34 31 synchron system untim case use nanci lynch formal model synchron system 29 chapter 2 slight adjust notat make easier match mechan verifi treatment untim synchron system assum set mess messag includ distinguish valu null set proc processor processor partial connect direct channel channel thought buffer hold singl messag associ processor p follow set function ffl set processor outnbr p p connect outgo channel ffl set processor innbr p p connect incom channel function input p mess give messag contain channel ffl set state p state nonempti subset init p initi state conveni assum compon state count round counter zero initi state ffl function msg p state p theta outnbr p mess determin messag place outgo channel way depend current state ffl function tran p state p theta input p state p determin next state way depend current state messag receiv incom channel system start processor initi state processor p repeatedli perform follow two action lockstep commun phase appli messag gener function msg p current state determin messag place outgo channel messag valu null use indic messag comput phase appli state transit function tran p current state messag held incom channel yield next state round counter incrementeda particular algorithm specifi suppli interpret variou set function identifi fault distribut algorithm usual requir oper presenc fault specif kind number fault may aris constitut fault hypothesi usual processor fault distinguish commun fault former model perturb transit function tran p latter allow messag receiv along channel chang sent follow 29 page 20 execut system infinit sequenc tripl global state start round r r collect messag place commun channel n r possibl differ collect messag receiv goal show timetrigg implement achiev behavior untim synchron system serv specif need way ensur fault match across two system reason prefer model processor commun fault perturb tran p msg p respect rather allow messag receiv differ sent particular assum current round number record part state processor p faulti round r current state valu input channel repres array tran p may yield valu intend similarli channel p q faulti valu msg p sq may differ intend may null exactli valu may differ intend depend fault assumpt exampl crash fault round r result tran p null q state whose round compon r greater notic although tran p msg p may longer intend function still function fact need suppos tran p msg p chang fault arriv round systemat formal verif timetrigg algorithm 9 r sinc round counter part state assum function behav differ intend appli state round counter equal greater r benefit treatment sinc tran p msg p uninterpret repres algorithm fault behavior show timetrigg system suppli arbitrari tran p msg p function behavior untim synchron system suppli function demonstr encompass behavior presenc fault well faultfre case furthermor sinc longer need hypothes fault caus differ messag sent receiv instead assum fault msg p differ messag actual sent execut simplifi sequenc tripl simpl sequenc state global state start round r consequ demonstr timetrigg system implement behavior specifi untim synchron system simpli need establish system execut sequenc mathemat induct reduc show global state two system start round r 32 timetrigg system timetrigg system elabor model previou section follow processor suppli clock provid reason accur approxim real time speak clock usual distinguish two notion time clocktim denot c local notion time suppli processor clock realtim denot r abstract global quantiti also usual denot clocktim quantiti upper case roman greek letter realtim quantiti lower case letter formal processor ps clock function c p c intend interpret c p valu ps clock realtim 2 clock nonfaulti processor assum wellbehav sens satisfi follow assumpt assumpt 1 monoton nonfaulti clock monoton increas function satisfi assumpt requir care implement clock synchron algorithm make adjust clock caus 2 terminolog 22 actual invers clock jump backward lamport melliarsmith describ solut 22 particularli clever econom techniqu one particular algorithm introduc torrespomal 40 formal verifi miner johnson 30 schmuck cristian 38 examin gener case show monoton achiev loss precis assumpt 2 clock drift rate nonfaulti clock drift realtim rate bound small posit quantiti ae typic assumpt 3 clock synchron clock nonfaulti processor synchron within small clocktim bound sigma tj sigma system featur character timetrigg system activ driven global schedul processor perform action time local clock match action schedul formal model schedul function sched clocktim round r begin durat rth round given addit fix global clocktim constant p give offset round messag sent comput phase begin respect obvious need follow constraint constraint notic durat commun phase fix p durat comput phase differ one round anoth 3 state messag channel timetrigg system correspond untim synchron system transit messag function addit processor oneplac buffer incom messag channel timetrigg system oper follow initi processor initi state round counter zero clock synchron other initi c p current realtim processor p repeatedli perform follow two action 3 fact difficulti gener treatment allow time messag sent durat commun phase vari round round fix clocktim constant p systemat replac function dr p r respect gener develop mechan verif see section 34 systemat formal verif timetrigg algorithm 11 commun phase begin local clock read sched r r current valu round counter appli messag gener function msg p current state determin messag sent outgo channel messag place channel local clock time schedrd incom messag arriv commun phase ie later schedr move correspond input buffer remain stabl comput phase buffer initi null begin commun phase valu unspecifi one messag arriv associ commun channel given commun phase comput phase begin local clock time appli state transit function tran p current state messag held input buffer yield next state comput complet local clock time earlier schedr 1 increment round counter wait start next roundmessag transmiss commun phase explain follow use sentp q indic processor p sent messag processor q member outnbrsp real time must satisfi c p round r use recvq indic processor q receiv messag processor p member innbrsq real time must satisfi constraint schedr c q round r two event relat follow assumpt 4 maximum delay p q nonfaulti processor sent p q oe recvq 0 ffi addit requir spontan gener messag ie recvq correspond sent p q 0 provid exactli one recvq event p commun phase round r processor q p nonfaulti messag move input buffer associ p processor q start comput phase round remain throughout phase clock perfectli synchron possibl messag sent processor fast clock arriv recipi still previou round reason send messag clocktim unit start round gener need ensur messag processor round r arriv destin processor start round r finish commun phase round r must establish constraint paramet ensur condit satisfi processor p send messag processor q say realtim c p maximum delay assumpt messag arriv need sure clock synchron jc q tj sigma substitut c p schedr obtain monoton clock assumpt give first inequ 1 ensur constraint 2 sigma clock synchron calcul 2 also give clock drift rate assumpt give follow thu second inequ 1 ensur constraint fault prove timetrigg system satisfi variou assumpt constraint identifi achiev behavior untim synchron system suppli tran p msg p function explain earlier fault assum model tran p msg p use function untim timetrigg system ensur latter inherit fault behavior faulttoler properti former thu algorithm shown untim formul achiev faulttoler properti eg algorithm resist singl byzantin fault two crash fault may conclud implement properti systemat formal verif timetrigg algorithm 13 simpl view somewhat compromis howev timetrigg system contain mechanismtim triggeringthat present untim system mechan admit fault notabl loss clock synchron aris untim system implement must ensur fault either mask transform way manifest accur model perturb tran p msg p function gener desir transform lowlevel fault ie outsid model consid simplest easili toler fault class algorithm concern lowlevel mechan deal loss clock synchron present synchron fault may manifest arbitrari byzantin fault abstract algorithm exampl one pro cessor clock drift extent wrong round execut transit messag function appropri round suppli systemat incorrect messag processor could easili appear byzantin behavior level untim synchron algorithm reason desir includ round number messag wrong round reject therebi reduc fault manifest failsil ttp goe includ critic state inform oper mode time group membership messag part crc calcul 21 less drastic clock skew may leav processor right round send messag wrong time arriv comput phase correct processor partli counter fault mode timetrigg model use explicitli move messag input channel input buffer commun phase shield receiv processor chang channel content comput phase physic implement time trigger system multiplex commun channel onto share buse necessari control bab bling idiot fault mode faulti processor disrupt commun processor speak turn practic control bu interfac unit biu grant access bu appropri time exampl safebu processor pair member pair control other biu ttp biu independ knowledg schedul case babbl occur undetect doubl failur 33 verif need show timetrigg system achiev behavior correspond untim synchron system tradit way establish simul relationship state execut timetrigg system correspond untim execut usual necessari invent abstract function relat state implement specif howev state two system difficult point select moment time state timetrigg system correspond untim system untim system make progress discret global step compon processor perform commun comput phase lockstep possibl speak complet system round r processor timetrigg system howev progress separ rate govern intern clock imperfectli synchron one processor may still round r anoth move round r 1 need establish consist cut timetrigg system provid global state processor point round treatment distribut system necessari global cut correspond snapshot system particular realtim instant cut may abstract construct direct realiz case howev natur assum timetrigg system use control applic output individu processor ie function state use provid redund control signal real timefor exampl typic applic one output processor subject major vote separ drive actuat forc sum configur 4 consequ want identifi cut system global state specif real time instant particular need realtim instant gsr correspond global start rth round want instant one nonfaulti processor start rth round yet start comput phase chang state achiev defin global start time gsr round r realtim processor slowest clock begin round r gsr satisfi follow constraint sched r 4 intuit p processor slowest clock sinc processor perfectli synchron need sure drift far apart processor q alreadi reach comput phaseor even next roundat gsr thu need 3 c q plu clock synchron assumpt give x sigma processor q still 4 exampl output differ processor may energ separ coil singl solenoid multipl hydraul piston may link singl shaft see eg 12 figur 322 systemat formal verif timetrigg algorithm 15 round r commun phase provid ensur inequ deriv taken togeth constraint 3 wish establish global state timetrigg system time gsr correspond untim synchron system start rth round denot global state untim system start rth round gur global untim global state simpli array state individu processor state processor p point gurp similarli global state timetrigg system time gsr denot gtr global time state processor p gtrp state prove desir result theorem 1 given initi state global state untim timetrigg system begin round proof proof induct base case case system initi state hypothesi induct step assum result r prove r 1 untim case messag input q p processor p receiv q rth round msg p gurpq 5 induct hypothesi global state processor p timetrigg system time gsr gurp also furthermor processor p commun phase ensur 5 chang state sinc start round thu local clocktim schedr send msg p gurpq q 1 receiv q commun phase round r transfer input buffer input q p thu correspond processor untim timetrigg system state input compon begin comput phase round r state transit function tran p appli correspond processor two system yield valu correspond element gur complet induct proof5 benefit use read curri higherord function applic decod follow gurp ps state round appli state give msg p gurp array messag sent outgo channel qs compon array msg p gurpq 34 mechan verif treatment synchron timetrigg system section 31 32 formal specifi languag pv verif system 32 verif section 33 mechan check use pvss theorem prover pv languag higherord logic subtyp formal semiform treatment section 31 32 quit straightforward pv theorem prover includ decis procedur integ real linear arithmet mechan check calcul section 33 proof theorem also quit straightforward complet formal mechan verif took less day error discov formal specif verif describ appendix specif file avail url httpwwwcslsricomdcca97html reassur know semiform develop withstand mechan scrutini argu previous exampl 3236 mechan formal verif provid sever benefit addit certif proof particular mechan support reliabl inexpens explor altern design assumpt constraint case wonder whether requir messag sent fix offset clocktim unit round comput phase begin fix offset p might unduli restrict work minut gener formal specif allow offset becom function round adjust mechan proof contend correspond revis semiform develop section 32 33 would take longer would difficult summon fortitud scrutin revis proof care origin roundbas algorithm function program theorem section 33 ensur synchron algorithm correctli implement timetrigg implement satisfi variou assump tion constraint construct introduc previou section next though logic preced step ask one might verifi properti particular algorithm express untim synchron system although simpler timetrigg implement specif algorithm synchron system especi conveni formal particularli mechan verif requir reason attribut imper program explicit state control gener easier verifi rather imper program repres state control applic manner express directli convent logic fairli systemat transform synchron system function program eas verif task allow perform function program illustr idea come bevier systemat formal verif timetrigg algorithm 17 young 2 use om1 algorithm section 2 algorithm alreadi introduc synchron system illustr transform function program techniqu becom familiar easi perform transform direct begin introduc function sendr v p q repres send messag valu v processor p processor q round r valu function messag receiv q p q nonfaulti valu v otherwis depend fault mode consid byzantin case left entir unconstrain repres transmitt v valu q arbitrari receiv commun phase first round om1 repres comput phase round simpli move messag receiv state processor concern ignor function treatment though see footnot 6 commun phase second round processor q send valu receiv first round ie send0 v q receiv p one receiv describ function composit comput phase second round processor p gather messag receiv commun phase subject major vote 6 6 repres valu p receiv q need gather togeth way valu messag p receiv receiv q use combin argument major vote function gather togeth repres depend resourc specif languag logic concern treatment use boyermoor logic exampl repres list valu 2 higherord logic pv 32 howev repres function specifi abstract ie function appli q return valu p receiv q major vote repres function maj take two argument particip vote function particip return 6 formul algorithm synchron system p vote messag receiv messag receiv directli transmitt save state function treatment q includ among recipi messag send commun phase second round vote simpli messag receiv round valu associ function maj return major valu one exist otherwis function determin valu behavior either specifi axiomat defin construct use algorithm boyer moor linear time mjrti 4 thu ps decis comput phase second round repres rcvr set receiv processor use formula definit higherord function om1t v whose valu function give decis reach receiv p possibl faulti transmitt send valu properti requir algorithm follow provid number receiv three one processor faulti definit 7 requir agreement valid state accept specif pv almost given pv requir littl explicit type quantif involv use construct definit maj pv prove agreement valid specif number processor eg complet automat gener case n 4 processor pv abl prove agreement singl usersuppli proof direct valid requir half dozen one requir insight casesplit whether transmitt faulti synchron system easili transform recurs func tion properti alway formal verifi easili nonetheless believ approach promis mani algorithm practic interest similar method advoc florin gomez lavalle 14 5 conclus mani roundbas faulttoler algorithm formul synchron system shown synchron system implement timetrigg system prove provid care taken fault mode correct faulttoler properti algorithm express synchron system inherit timetrigg implement proof identifi necessari time constraint independ particular algorithm concern provid gener abstract treatment analysi systemat formal verif timetrigg algorithm 19 perform particular system di vito butler 5 rel simplic proof support argument timetrigg system allow straightforward analysi prefer critic applic reason 20 also shown exampl roundbas algorithm formul synchron system transform function program specif logic properti verifi easili mechan systemat transform faulttoler algorithm function program synchron system timetrigg implement provid methodolog significantli eas specif assur critic faulttoler system current work appli methodolog algorithm ttp 21 acknowledg discuss n shankar advic joseph sifaki instrument develop work comment anonym refere improv present r arinc specif 659 backplan data bu design proof correct faulttoler circuit imposs group membership reach agreement processorgroup membership synchron distribut system understand faulttoler distribut system atom broadcast simpl messag diffus byzantin agreement di vito gener dynam case studi f16 flybywir flight control system imposs distribut consensu one faulti process systemat build distribut recurs algorithm group membership protocol specif verif concept technolog depend realtim comput system shinkansen train control safebu tm fault toler comput symposium 25 highlight 25 year respons system eventtrigg timetrigg ieic transact inform system synchron clock presenc fault specifi verifi faulttoler system byzantin gener problem formal verifi algorithm diagnosi manifest formal verif algorithm interact consist hybrid fault model formal verifi algorithm interact consist hybrid fault model formal verif interact consist algorithm draper ftp architectur hybrid fault model distribut algorithm verif optim faulttoler clock synchron circuit case studi explor boundari formal reason system integr modular avion nextgener commerci airplan formal verif faulttoler architectur prolegomena design pv reach agreement presenc fault formal verif oral messag algorithm interact consist faultmask transientrecoveri model digit flightcontrol system formal verifi algorithm clock synchron hybrid fault model less elementari tutori pv specif verif system continu clock amort need affect precis clock synchron algorithm boe seventh wonder optim implement faulttoler clock synchron circuit formal techniqu realtim faulttoler system compar verif system interact consist acl2 formal specif composit verif atom broadcast protocol tr ctr clara benac earl larsk fredlund john derrick verifi faulttoler erlang program proceed 2005 acm sigplan workshop erlang septemb 2628 2005 tallinn estonia christoph kreitz build reliabl highperform network nuprl proof develop system journal function program v14 n1 p2168 januari 2004 faith fich eric ruppert hundr imposs result distribut comput distribut comput v16 n23 p121163 septemb