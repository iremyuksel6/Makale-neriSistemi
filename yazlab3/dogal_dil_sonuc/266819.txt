improv code densiti use compress techniqu propos method compress program embed processor instruct memori size domin cost postcompil analyz examin program replac common sequenc instruct singl instruct codeword microprocessor execut compress instruct sequenc fetch code word instruct memori expand back origin sequenc instruct decod stage issu execut stage appli techniqu powerpc arm i386 instruct set achiev averag size reduct 39 34 26 respect spec cint95 program b introduct accord recent predict instat inc merchant processor market set exceed 60 billion 1999 nearli half embed processor howev unit count embed processor exceed number gener purpos microprocessor factor 20 compar gener purpos microprocessor processor embed applic much less studi figur suggest deserv attent embed processor highli constrain cost power size gener purpos microprocessor control orient embed applic common type signific portion final circuitri use instruct memori sinc cost integr circuit strongli relat die size memori size proport die size develop want program fit smallest memori possibl addit pressur program memori rel recent adopt highlevel languag embed system need control develop cost typic code size grown cost balloon rate compar seen desktop world thu abil compress instruct code import even cost execut speed high perform system also impact program size due delay incur instruct cach miss studi digit perl96 show sql server dec 21064 alpha bandwidth limit factor two instruct cach miss alon problem increas gap processor perform memori perform grow reduc program size one way reduc instruct cach miss achiev higher perform chen97b paper focus compress embed applic execut speed trade compress borrow concept field text compress appli compress instruct sequenc propos modif microarchitectur level support compress program postcompil analyz examin program replac common sequenc instruct singl instruct codeword microprocessor execut compress instruct sequenc fetch codeword instruct memori expand back origin sequenc instruct decod stage issu execut stage demonstr techniqu appli powerpc instruct set 11 code gener compil gener code use syntax direct translat scheme sdt aho86 syntact sourc code pattern map onto templat instruct implement appropri semant consid simpl schema translat subset integ arithmet pattern show syntact fragment right hand side two product replac reduc simpler syntact structur two express ad multipli togeth result singl new express regist number hold operand express 1 3 encod add multipl oper emit gener object code result regist 1 pass pars tree use parent oper two pattern reus arithmet oper throughout program compil complex action translat control structur gener instruct albeit still driven templat structur sdt gener differ instruct sequenc given sourc code fragment differ point object modul regist number arithmet instruct operand offset load store instruct consequ object modul gener mani common subsequ instruct high degre redund encod instruct program program examin small number instruct bit pattern encod repeat elsewher program inde found small number instruct encod highli reus program illustr redund instruct encod profil spec cint95 benchmark spec95 benchmark compil powerpc gcc 272 use o2 opti mizat figur 1 show compil program consist mani instruct ident encod averag less 20 instruct benchmark bit pattern encod use exactli program go benchmark exampl 1 frequent instruct word account 30 program size 10 frequent instruct word account 66 program size clear redund instruct encod provid great opportun reduc program size compress techniqu 12 overview compress method compress method find sequenc instruct byte frequent repeat throughout singl program replac entir sequenc singl codeword rewritten encod sequenc instruct kept dictionari turn use program execut time expand singleton codeword instruct stream back origin sequenc instruct codeword assign compress algorithm mere indic instruct dictionari final compress program consist codeword interspers uncompress instruct figur 2 illustr relationship uncompress code compress code dictionari complet descript compress method present section 3 compress gcc go ijpeg li benchmark 0 10 20 30 40 program instruct distinct instruct encod use program distinct instruct encod use multipl time program figur 1 distinct instruct encod percentag entir program uncompress code clrlwi r11r924 addi r0r111 cmplwi cr1r08 ble cr1000401c8 cmplwi cr1r117 bgt cr100041d34 stb r180r28 clrlwi r11r924 addi r0r111 cmplwi cr1r08 bgt cr100041c98 compress code codeword 1 ble cr1000401c8 cmplwi cr1r117 bgt cr100041d34 codeword 2 codeword 1 bgt cr100041c98 dictionari clrlwi r11r924 addi r0r111 cmplwi cr1r08 stb r180r28 figur 2 exampl compress background relat work section discuss strategi text compress method current employ microprocessor manufactur reduc impact risc instruct set program size 21 text compress text compress method fall two gener categori statist dictionari statist compress use frequenc singleton charact choos size codeword replac frequent charact encod use shorter codeword overal length compress text minim huffman encod text wellknown exampl dictionari compress select entir phrase common charact replac singl codeword codeword use index dictionari entri contain origin charact compress achiev codeword use fewer bit charact replac sever criteria use select use dictionari statist compress techniqu two import factor decod effici overal compress ratio decod effici measur work requir reexpand compress text compress ratio defin formula eq dictionari decompress use codeword index dictionari tabl insert dictionari entri decompress text stream codeword align machin word dictionari lookup constant time oper statist compress hand use codeword differ bit size align machin word bound ari sinc codeword align statist decompress stage must first establish rang bit compris codeword text expans proceed shown everi dictionari method equival statist method achiev equal compress improv upon give better compress bell90 thu statist method alway achiev better compress dictionari method albeit expens addit comput requir decompress note ever dictionari compress yield good result system memori time constraint one entri expand sever charact gener dictionari compress provid faster simpler decod statist compress yield better compress ratio 22 compress risc instruct set although risc instruct set easi decod fixedlength instruct format wast program memori thumb arm95mpr95 mips16 kissell97 two compress ratio compress size origin size recent propos instruct set modif defin reduc instruct word size effort reduc overal size compil program thumb subset arm architectur consist 36 arm 32bit wide instruct reencod requir 16 bit instruct includ thumb either requir full 32bit frequent use import compil gener small object code program compil thumb achiev 30 smaller code comparison standard arm instruct set arm95 mips16 defin 16bit fixedlength instruct set architectur isa subset mipsiii instruct use mips16 chosen statist analyz wide rang applic program instruct frequent gener compil code written 32bit mipsiii typic reduc 40 size compil mips16 kissell97 thumb mips16 act preprocessor underli architectur case 16bit instruct fetch instruct memori expand 32bit wide instruc tion pass base processor core execut thumb mips16 shrink instruct width expens reduc number bit use repres regist design immedi valu field confin thumb mips16 program 8 regist base architectur significantli reduc rang immedi valu subset base architectur thumb mips16 neither capabl gener complet program oper underli machin thumb reli 32bit instruct memori manag except handl mips16 reli 32bit instruct floatingpoint oper moreov thumb exploit condit execut zero latenc shift rotat underli arm architectur thumb mips16 requir special branch instruct toggl 32bit 16bit mode fix set instruct compris thumb mips16 chosen assess instruct use rang applic neither architectur access regi ter instruct mode underli 32bit core architectur contrast deriv codeword dictionari specif characterist program execut compress program access resourc avail machin yet still exploit compress individu program 23 ccrp compress code risc processor ccrp describ wolfe92wolfe94 instruct cach modifi run compress program compiletim cach line byte huffman encod runtim cach line fetch main memori uncom press put instruct cach instruct fetch cach address uncompress program therefor core processor need modif support compress howev cach miss problemat miss instruct cach resid address main memori ccrp use line address tabl lat map miss instruct cach address main memori address compress code locat lat limit compress program execut processor line size compil one shortcom ccrp compress granular byte rather full instruct mean ccrp requir overhead encod instruct scheme encod group instruct moreov scheme requir less effort decod program sinc singl codeword encod entir group instruct addit compress method need lat mechan sinc patch branch use new instruct address compress program 24 liao et al pure softwar method support compress code propos liao96 author find minisubroutin common sequenc instruct program instanc minisubroutin remov program replac call instruct minisubroutin place text program end return instruct minisubroutin constrain basic block may contain branch instruct restrict condit prime advantag compress method requir hardwar support howev subroutin call overhead slow program execut liao96 suggest hardwar modif support code compress consist primarili calldictionari instruct instruct take two argument locat length common instruct sequenc program save dictionari sequenc replac program calldictionari instruct execut processor jump point dictionari indic locat execut length instruct implicitli return liao96 limit dictionari use sequenc instruct within basic block liao96 explor tradeoff field width locat length argument calldictionari instruct codeword 1 2 instruct word size consid requir dictionari contain sequenc least 2 3 instruct respect sinc shorter sequenc would bigger calldictionari instruct compress would result sinc singl instruct frequent occur pattern import use scheme compress paper vari paramet dictionari size number entri dictionari dictionari entri length number instruct dictionari entri thu allow us examin efficaci compress instruct sequenc length 3 compress method 31 algorithm compress method base techniqu introduc bird96chen97a dictionari compress algorithm appli compil gener program take advantag sdt find common sequenc instruct place dictionari algorithm divid 3 step 1 build dictionari 2 replac instruct sequenc codeword 3 encod codeword 311 dictionari content arbitrari text choos entri dictionari achiev maximum compress npcomplet size text storer77 dictionari method use greedi algorithm quickli determin dictionari entri 1 everi iter algorithm examin potenti dictionari entri find one result largest immedi save algorithm continu pick dictionari entri termin criteria reach usual exhaust codeword space maximum number dictionari entri determin choic encod scheme codeword obvious codeword bit index larger rang dictionari entri limit dictionari entri sequenc instruct within basic block allow branch instruct branch codeword may branch within encod sequenc also compress branch offset field restrict simplifi code gener 312 replac instruct codeword greedi algorithm combin step build dictionari step replac instruct sequenc dictionari entri defin instanc program replac token token replac effici encod encod step 313 encod encod refer represent codeword compress program discuss section 21 variablelength codeword use huffman encod expens decod fixedlength codeword hand use directli index dictionari make decod simpl tabl lookup oper baselin compress method use fixedlength codeword enabl fast decod also investig variablelength scheme howev restrict variablelength codeword multipl basic unit exampl present compress scheme codeword 4 bit 8 bit 12 bit 16 bit instruct compress uncompress align size smallest codeword shortest codeword encod frequent dictionari entri maxim save achiev better compress fixedlength encod complic decod 32 relat issu 321 branch instruct one side effect compress scheme alter locat instruct program present special problem branch instruct sinc branch target chang result program compress 1 greedi algorithm often nearoptim practic studi compress rel branch instruct ie contain offset field use comput branch target make easi us patch offset field branch instruct compress allow compress rel branch might need rewrit codeword repres rel branch compress pass would affect rel branch target thu requir rewrit codeword etc result npcomplet problem szymanski78 indirect branch compress studi sinc branch take target regist branch instruct need patch compress creat codeword rewrit problem outlin howev jump tabl contain program address need patch reflect address chang due compress gcc put jump tabl data text section immedi follow branch instruct assum tabl could reloc data section patch postcompress branch target address 322 branch target fixedlength instruct set fixedlength instruct set typic restrict branch use target align instruct word boundari sinc primari concern code size tradeoff perform advantag align fixedlength instruct exchang compact code use codeword smaller instruct word boundari align size smallest codeword 4 bit studi therefor need specifi method address branch target fall instruct word boundari one solut pad compress program branch target align defin origin isa obviou disadvantag solut decreas compress ratio complex solut one adopt experi modifi control unit processor treat branch offset align size smallest codeword exampl size codeword 8 bit 32bit align instruct set would branch offset rang reduc factor 4 tabl 1 show branch benchmark use entir rang offset field postcompil compressor modifi branch offset use align codeword branch requir larger rang modifi load target jump tabl cours result slight increas code size branch sequenc 33 compress program processor gener design compress program processor given figur 3 assum level memori hierarchi contain compress instruct conserv memori sinc compress program may contain compress uncompress instruct two path program memori processor core uncompress instruct proceed directli normal instruct decod compress instruct must first translat use dictionari decod execut usual manner dictionari could load varieti way dictionari small one possibl place perman onchip memori altern dictionari larger might kept data segment compress program dictionari entri could load need 4 experi section integr compress techniqu powerpc instruct set compil spec cint95 benchmark gcc 272 use o2 optim optim includ common subexpress elimin includ function inlin loop unrol sinc optim tend increas code size link done static tabl 1 usag bit branch offset field bench number rel branch branch offset wide enough provid 2byte resolut branch target branch offset wide enough provid 1byte resolut branch target branch offset wide enough provid 4bit resolut branch target number percent number percent number percent compress li 4806 0 000 perl 14578 15 010 74 051 191 131 vortex cpu core figur 3 overview compress program processor uncompress instruct stream dictionari compress program memori usual rom librari includ result compress program size includ overhead dictionari recal interest dictionari size number codeword dictionari entri length number instruct dictionari entri 41 baselin compress method baselin compress method use codeword 2byte first byte escap byte illeg powerpc opcod valu allow us distinguish normal instruct compress instruct second byte select one 256 dictionari entri dictionari entri limit length 16 byte 4 powerpc instruct powerpc 8 illeg 6bit opcod use 8 illeg opcod possibl pattern remain 2 bit byte 32 differ escap byte combin second byte codeword specifi 8192 differ codeword sinc compress instruct use illeg opcod processor design execut program compress baselin method abl execut origin program well first experi vari paramet baselin method figur 4 show effect vari dictionari entri length interestingli dictionari entri allow contain 8 instruct overal compress begin declin attribut greedi select algorithm gener dictionari select larg dictionari entri remov opportun format smaller entri larg entri chosen result immedi reduct program size howev guarante best entri use achiev good compress larg sequenc replac destroy small sequenc partial overlap may save use multipl smaller sequenc would greater save singl larg sequenc howev greedi algorithm detect case potenti save lost gener dictionari entri size 4 instruct improv compress notic figur 5 illustr happen number codeword entri dictionari increas compress ratio program continu improv maximum amount codeword reach uniqu singl use encod remain uncompress tabl 2 list maximum number codeword program baselin compress method repres upper bound size dictionari compress gcc go ijpeg li benchmark 0 10 20 30 40 50 70 80 90 100 compress ratio 1357maximum number instruct dictionari entri figur 4 effect dictionari entri size compress ratio benchmark contain numer instruct occur time dictionari becom larg codeword avail replac numer instruct encod occur infrequ save compress individu instruct tini multipli length program compress notic achiev good compress import increas number codeword dictionari rather increas length dictionari entri thousand codeword enough spec cint95 program 411 usag dictionari sinc usag dictionari similar across benchmark show result use ijpeg repres benchmark extend baselin compress method use dictionari entri 8 instruct figur 6 show composit dictionari number instruct dictionari entri contain number dictionari entri singl instruct rang 48 80 surprisingli larger dictionari higher proport short dictionari entri figur 7 show dictionari entri contribut compress dictionari entri 1 instruct achiev 48 60 compress save short entri contribut larger portion save size dictionari increas compress method liao96 take advantag tabl 2 maximum number codeword use baselin compress max dictionari entri bench maximum number codeword use compress 647 go 3123 ijpeg 2107 li 1104 perl 2970 vortex 3545 compress gcc go ijpeg li benchmark 0 10 20 30 40 50 70 80 90 100 compress number codeword figur 5 effect number codeword compress ratio sinc codeword size singl instruct singl instruct compress 412 compress use small dictionari implement compress code processor may constrain use small dic tionari investig compress dictionari rang 128 byte 512 byte size present one compress scheme demonstr compress benefici even small dictionari compress scheme small dictionari use 1byte codeword dictionari entri 4 instruct size figur 8 show result dictionari 8 16 entri averag dictionari size 512 byte suffici get code reduct 15 413 variablelength codeword baselin method use 2byte codeword improv compress ratio use smaller encod codeword figur 9 show baselin compress use 8192 codeword 40 compress program byte codeword sinc baselin compress use 2byte codeword mean 20 final compress program size due escap byte investig sever compress scheme use variablelength codeword size dictionari number entri 0 20 40 80 100 percentag dictionari figur composit dictionari ijpeg max dictionari length dictionari entri number instruct size dictionari number entri 100 200 300 400 program byte removed2468 length dictionari entri due compress figur 7 byte save compress ijpeg accord instruct length dictionari entri number instruct align 4bit nibbl although higher decod penalti use variablelength codeword abl achiev better compress restrict codeword integ multipl 4bit given decod process regular 1bit align huffman encod wolfe94 lack choic encod base spec cint95 benchmark present best encod choic discov use codeword 4bit 8bit 12bit 16bit length program may benefit differ encod exampl mani codeword necessari good compress 4bit 8bit code word could use reduc codeword overhead diagram nibbl align encod shown figur 10 scheme predic observ unlimit number codeword use final compress program size domin codeword byte therefor use escap code indic less uncompress instruct rather codeword first 4bit codeword determin length codeword scheme provid 128 8bit codeword thousand 12bit 16bit codeword offer flexibl mani short codeword thu minim impact frequent use instruct allow larg overal number codeword one nibbl reserv escap code uncompress instruc compress gcc go ijpeg li benchmark 0 10 20 30 40 50 70 80 90 100 compress number codeword number codeword figur 8 compress ratio 1byte codeword 4 instructionsentri figur 9 composit compress program 8192 2byte codeword 4 instructionsentri compress gcc go ijpeg li benchmark 100 200 300 400 500 700 800 900 1000 compress program size dictionari codeword escap byte codeword index byte uncompress instruct tion reduc codeword overhead encod frequent sequenc instruct shortest codeword use encod techniqu effect redefin entir instruct set encod method compress use exist instruct set avail escap byte unfortun also mean origin program longer execut unmodifi processor execut compress program without mode switch result 4bit align compress present figur 11 obtain code reduct 30 50 depend benchmark comparison extract instruct byte benchmark compress unix compress compress use adapt dictionari techniqu base zivlempel code modifi dictionari respons chang characterist text addit also use huffman encod codeword thu abl achiev better compress method figur 11 show compress inde better compress ratio still within 5 benchmark figur 10 nibbl align encod instruct 128 8bit codeword 1536 12bit codeword 4096 16bit codeword 36bit uncompress instruct figur 11 comparison nibbl align compress unix compress compress gcc go ijpeg li benchmark 100 200 300 400 500 700 800 900 1000 compress compress nibbl align codeword unix compress 5 conclus futur work propos method compress program embed microprocessor program size limit approach combin element two previou propos first use dictionari compress method liao96 allow codeword expand sever instruct second allow codeword smaller singl instruct wolfe94 find size dictionari singl import paramet attain better compress ratio second import factor reduc codeword size size singl instruct find much save come compress pattern singl instruct aggress compress spec cint95 achiev 30 50 code reduct compress ratio similar achiev thumb mips16 thumb mips16 design complet new instruct set compil instruct decod achiev result process compil object code slightli modifi instruct fetch mechan sever way compress method improv first compil could attempt produc instruct similar byte sequenc could easili compress one way accomplish alloc regist common sequenc instruct use regist anoth way gener gener std code sequenc would less effici would semant correct larger varieti circumst exampl optim compil function prologu sequenc might save regist modifi within bodi function prologu sequenc standard alway save regist instruct sequenc could compress singl codeword space save optim would decreas code size expens execut time tabl 3 show prologu epilogu combin typic account 12 program size type compress would provid signific size reduct also plan explor perform aspect compress examin tradeoff partit onchip memori dictionari program tabl 3 prologu epilogu code benchmark bench static prologu instruct percentag entir program static epilogu instruct percentag entir program compress 53 62 gcc 42 49 go 62 68 ijpeg 69 94 li 81 99 perl 37 43 vortex 63 71 6 r compil principl advanc risc machin ltd instruct stream compress techniqu impact instruct compress icach perform enhanc instruct fetch mechan use data com pression highdens mip embed market code gener optim embed digit signal processor thumb squeez arm code size studi window nt perform use dynam execut trace npcomplet result concern data compress assembl code machin spandepend instruct execut compress program embed risc architectur compress embed system program tr text compress execut compress program embed risc architectur studi window nt perform use dynam execut trace assembl code machin spandepend instruct compress embed system program code gener optim embed digit signal processor enhanc instruct fetch mechan use data compress ctr seokwon seong prabhat mishra bitmaskbas code compress techniqu embed system proceed 2006 ieeeacm intern confer computeraid design novemb 0509 2006 san jose california heidi pan krste asanovi head tail variablelength instruct format support parallel fetch decod proceed 2001 intern confer compil architectur synthesi embed system novemb 1617 2001 atlanta georgia usa chang hong lin yuan xie wayn wolf lzwbase code compress vliw embed system proceed confer design autom test europ p30076 februari 1620 2004 chang hong lin yuan xie wayn wolf code compress vliw embed system use selfgener tabl ieee transact larg scale integr vlsi system v15 n10 p11601171 octob 2007 hari lekatsa jrg henkel wayn wolf design simul pipelin decompress architectur embed system proceed 14th intern symposium system synthesi septemb 30octob 03 2001 montral pq canada seokwon seong prabhat mishra effici code compress techniqu use applicationawar bitmask dictionari select method proceed confer design autom test europ april 1620 2007 nice franc hari lekatsa jrg henkel wayn wolf code compress low power embed system design proceed 37th confer design autom p294299 june 0509 2000 lo angel california unit state x h xu c clark r jone high perform code compress architectur embed armthumb processor proceed 1st confer comput frontier april 1416 2004 ischia itali jari heikkinen jarmo takala effect program compress journal system architectur euromicro journal v53 n10 p679688 octob 2007 paulo centoducatt guido araujo ricardo pannain compress code execut dsp architectur proceed 12th intern symposium system synthesi p56 novemb 0104 1999 timothi sherwood brad calder patchabl instruct rom architectur proceed 2001 intern confer compil architectur synthesi embed system novemb 1617 2001 atlanta georgia usa talal bonni joerg henkel effici code densiti lookup tabl compress proceed confer design autom test europ april 1620 2007 nice franc youtao zhang jun yang rajiv gupta frequent valu local valuecentr data cach design acm sigop oper system review v34 n5 p150159 dec 2000 youtao zhang jun yang rajiv gupta frequent valu local valuecentr data cach design acm sigplan notic v35 n11 p150159 nov 2000 hari lekatsa jrg henkel wayn wolf code compress variabl hardwaresoftwar codesign proceed eighth intern workshop hardwaresoftwar codesign p120124 may 2000 san diego california unit state shlomo weiss roman tsikel approxim prefix code systemonachip program journal system architectur euromicro journal v48 n1315 p367375 may darko kirovski johnson kin william h mangionesmith procedur base program compress intern journal parallel program v27 n6 p457475 1999 e wanderley netto r azevedo p centoducatt g araujo multiprofil base code compress proceed 41st annual confer design autom june 0711 2004 san diego ca usa guido araujo paulo centoducatt mario cart ricardo pannain code compress base operand factor proceed 31st annual acmiee intern symposium microarchitectur p194201 novemb 1998 dalla texa unit state jack liu fred chow timothi kong rupan roy variabl instruct set architectur compil support ieee transact comput v52 n7 p881895 juli jun yang youtao zhang rajiv gupta frequent valu compress data cach proceed 33rd annual acmiee intern symposium microarchitectur p258265 decemb 2000 monterey california unit state israel waldman shlomit pinter profiledriven compress scheme embed system proceed 3rd confer comput frontier may 0305 2006 ischia itali montserrat ro peter sutton postcompil regist reassign techniqu improv ham distanc code compress proceed 2005 intern confer compil architectur synthesi embed system septemb 2427 2005 san francisco california usa brad calder chandra krintz ur hlzle reduc transfer delay use java class file split prefetch acm sigplan notic v34 n10 p276291 oct 1999 alberto macii enrico macii fabrizio crudo roberto zafalon new algorithm energydriven data compress vliw embed processor proceed confer design autom test europ p10024 march 0307 andrea dandali viktor k prasanna configur compress fpgabas embed system proceed 2001 acmsigda ninth intern symposium field programm gate array p173182 februari 2001 monterey california unit state montserrat ro peter sutton ham distanc base vliwep code compress techniqu proceed 2004 intern confer compil architectur synthesi embed system septemb 2225 2004 washington dc usa kelvin lin chungp chung jean jyhjiun shann compress mip code multipl operand depend acm transact embed comput system tec v2 n4 p482508 novemb montserrat ro peter sutton compil optim order effect vliw code compress proceed intern confer compil architectur synthesi embed system octob 30novemb 01 2003 san jose california usa shaoyang wang rongguey chang code size reduct compress repeat instruct sequenc journal supercomput v40 n3 p319331 june 2007 mat brorsson mikael collin adapt flexibl dictionari code compress embed applic proceed 2006 intern confer compil architectur synthesi embed system octob 2225 2006 seoul korea talal bonni joerg henkel use linkernighan algorithm lookup tabl compress improv code densiti proceed 16th acm great lake symposium vlsi april 30may 01 2006 philadelphia pa usa arvind krishnaswami rajiv gupta dynam coalesc 16bit instruct acm transact embed comput system tec v4 n1 p337 februari 2005 kelvin lin jean jyhjiun shann chungp chung code compress regist operand depend journal system softwar v72 n3 p295304 august 2004 keith cooper nathaniel mcintosh enhanc code compress embed risc processor acm sigplan notic v34 n5 p139149 may 1999 john gilbert david abrahamson adapt object code compress proceed 2006 intern confer compil architectur synthesi embed system octob 2225 2006 seoul korea greiv gunnar braun andrea andrea rainer leuper oliv schliebusch heinrich meyr instruct encod synthesi architectur explor use hierarch processor model proceed 40th confer design autom june 0206 2003 anaheim ca usa ahmad zmili christo kozyraki simultan improv code size perform energi embed processor proceed confer design autom test europ proceed march 0610 2006 munich germani stephen hine david whalley gari tyson adapt compil techniqu enhanc pack instruct regist proceed 2006 intern confer compil architectur synthesi embed system octob 2225 2006 seoul korea marc l corliss e christoph lewi amir roth dise implement dynam code decompress acm sigplan notic v38 n7 juli charl lefurgi eva piccininni trevor mudg evalu high perform code compress method proceed 32nd annual acmiee intern symposium microarchitectur p93102 novemb 1618 1999 haifa israel lar rder clausen ulrik pagh schultz charl consel gill muller java bytecod compress lowend embed system acm transact program languag system topla v22 n3 p471489 may 2000 stephen hine joshua green gari tyson david whalley improv program effici pack instruct regist acm sigarch comput architectur news v33 n2 p260271 may 2005 stephen hine gari tyson david whalley reduc instruct fetch cost pack instruct registerwindow proceed 38th annual ieeeacm intern symposium microarchitectur p1929 novemb 1216 2005 barcelona spain subash chandar mahesh mehendal r govindarajan area power reduct embed dsp system use instruct compress reconfigur encod journal vlsi signal process system v44 n3 p245267 septemb 2006 chandra krintz brad calder han bok lee benjamin g zorn overlap execut transfer use nonstrict execut mobil program acm sigop oper system review v32 n5 p159169 dec 1998 yuan xie wayn wolf hari lekatsa code decompress architectur vliw processor proceed 34th annual acmiee intern symposium microarchitectur decemb 0105 2001 austin texa jeremi lau stefan schoenmack timothi sherwood brad calder reduc code size echo instruct proceed intern confer compil architectur synthesi embed system octob 30novemb 01 2003 san jose california usa marc l corliss e christoph lewi amir roth dise programm macro engin custom applic acm sigarch comput architectur news v31 n2 may marc l corliss e christoph lewi amir roth implement evalu dynam code decompress use dise acm transact embed comput system tec v4 n1 p3872 februari 2005 luca benini francesco menichelli mauro olivieri class code compress scheme reduc power consumpt embed microprocessor system ieee transact comput v53 n4 p467482 april 2004 larin thoma cont compilerdriven cach code compress scheme embed ilp processor proceed 32nd annual acmiee intern symposium microarchitectur p8292 novemb 1618 1999 haifa israel stephen roderick hine gari tyson david whalley address instruct fetch bottleneck use instruct regist file acm sigplan notic v42 n7 juli 2007 oliv rthing jen knoop bernhard steffen spars code motion proceed 27th acm sigplansigact symposium principl program languag p170183 januari 1921 2000 boston usa christoph w fraser instruct direct interpret lz77compress program softwarepractic experi v36 n4 p397411 april 2006 rpd beszd rudolf ferenc tibor gyimthi andr dolenc konsta karsisto survey codes reduct method acm comput survey csur v35 n3 p223267 septemb