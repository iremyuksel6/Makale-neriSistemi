toward foundat type assembl languag present design type assembl languag call talt support heterogen tupl disjoint sum gener account address mode talt also implement von neumann model program store memori support rel address type safeti execut garbag collect shown machinecheck proof talt first formal type assembl languag provid featur b introduct prolifer lowcost comput hardwar ubiqu internet creat situat huge amount comput power idl andin principleaccess develop goal exploit idl comput resourc exist year begin setihom 27 1997 hand project success made profit use idl comput resourc internet recent paradigm call grid comput elicit seriou interest among academ 5 15 industri gener mean conduct lowcost supercomput despit increas interest grid comput remain obstacl growth understand reluct comput owner download execut softwar develop know trust may even heard limit practic use grid comput small number potenti user abl obtain trust thousand comput owner know concert project cmu 9 seek overcom obstacl develop system trustless dissemin softwar concert framework machin owner instal steward program ensur safeti download softwar new grid applic obtain execut part concert framework determin take place applic express form certifi code execut code accompani certif prove code safe steward verifi certif valid permit code execut form certifi code use prototyp concert system 7 type assembl languag tal 19 18 implement talx86 system 17 develop primarili cornel talx86 special tal intel ia32 architectur 1 14 enhanc number construct support theoret system although certifi code elimin need trust develop grid applic remain need trust sound steward talx86 productionqu certifi code system java vm 16 proofcarri code pcc 8 similar need trust stem four issu 1 talx86 safeti justifi inform analog tal work rigor proof 2 safeti tal talx86 analog given term abstract machin although abstract machin lowlevel type system way still somewhat highlevel compar concret architectur obscur import issu thereof 3 safeti proof exist given written form consequ check verac errorpron done expert 4 one must trust talx86 type check softwar correctli implement type system certain extent need trust steward condit seriou obstacl machin owner routin trust safeti great varieti applic far less formal basi moreov certain amount trust requir case sinc particip person inspect compon system use nevertheless minim system trust comput base alway laudabl goal known x86 architectur grid comput howev desir minim trust steward goe beyond gener consider key issu extens aim enabl establish decentr grid comput fabric avail wide array particip purpos implaus imagin singl type system suce potenti grid applic furthermor also implaus inde undesir singl trust agent would check sound propos new type system thu necessari basic steward safe extend new type system untrust sourc natur way achiev use foundat certifi code entir safeti argument safeti polici express term concret architectur given machinecheck form incarn foundat pcc 1 binari accompani complet proof safeti propos foundat tal program safeti argument broken two part first portion selfcertifi type system specif type system machinecheck proof satisfi establish safeti polici portion would gener independ particular applic second portion applic type deriv certifi type system model grid applic develop could devis type system sucient certifi applic whenev steward encount certifi applic refer unknown type system steward would automat download type system verifi safeti proof thereaft accept applic valid type deriv type system model address four issu demand trust new type system first three issu clearli dealt use complet machinecheck proof packag applic type deriv oppos type annot fourth issu also address singl proof checker check deriv type system new checker need ever employ aim work implement first exampl foundat type assembl languag intel ia32 architectur also build flexibl foundat varieti type system may built accordingli broken develop system two stage model hamid et al develop featherweight tal 12 first stage develop gener type assembl languag specif architectur gener languag given oper semant abstract safeti establish machinecheck proof type preserv progress safeti garbag collect also establish level section 4 second stage show abstract oper semant map correctli onto concret architectur gener type system design account issu pertain type system includ nearli central issu second stage simul argument topic paper first stage eort second current underway 11 talt paper present new type assembl languag call talt tal two aim talt threefold first talt intend provid sucient express power serv target languag certifi compil express highlevel languag particular standard ml popcorn safe dialect c 17 second talt oper semant intend account greatest extent possibl central issu execut actual hardwar second stage foundat safeti proof discuss simpl albeit lengthi tediou simul argument third talt intend fulli formal enjoy machinecheck type safeti proof begin discuss overview talt accomplish aim express order provid express power necessari compil practic highlevel program languag talt follow talx86 17 ad support heterogen tupl ie tupl field size recurs type disjoint sum array unlik talx86 howev talt support construct use formal type theori rather use special code type checker talt provid express power origin publish talx86 except tal initi flag replac anoth slightli less gener mechan sec tion 222 later enhanc talx86 support talt although mani could ad without diculti complet oper semant tal specifi term lowlevel abstract machin includ explicit regist file memori stackbas tal 18 stack bring tal nearli low level possibl without commit detail architectur howev tal machin model includ program counter instead includ stream input instruct serv surrog program counter branch instruct machin would discard current stream instruct copi instruct branch address talt hand includ explicit program counter program counter must part model address import issu concret architectur possibl principl write code ahead program counter rare permit practic cours even sinc program fact store memori essenti part foundat safeti proof explicitli address issu requisit argument dicult talt follow standard practic make code readonli machin model must includ explicit program counter make argument explicit program counter also necessari account notion rel address particularli import ia32 control transfer includ condit jump rel final explicit program counter precis fact instruct individu address allow true call instruct return address taken program counter system includ conserv garbag collector 4 part trust comput base make garbag collector eectiv part architectur accordingli need prove collector safe necessari show program adher invari collector requir 3 2 talt type system account invari use invari prove type safeti disrupt garbag collect section 4 interest simplic version talt paper provid repres oper add subtract compar also omit discuss float point ia32 implement float point use regist stack idiosyncrat forese fundament diculti extend talt either direct talt also follow stackbas tal view stack separ unbound resourc rather design area memori dramat simplifi type system 18 requir second stage foundat safeti proof show talt stack map onto concret stack princip issu stack overflow address section 6 machinecheck proof talt formal lf 13 mechan twelf system 23 24 accord usual lf methodolog talt type judgement correspond lf type type rule correspond lf constant talt type deriv correspond lf term valid type deriv verifi type check central import eort type safeti metatheorem progress type preserva tion gc safeti express twelf relat form logic program 21 22 support twelf provid total checker 26 24 ensur relat repres total function therefor valid metaproof discuss detail section 5 import note decid check typabl aim talt unlik tal talx86 talt type assign currystyl system valu contain none type annot carri explicitli type churchstyl system tal mean check typabl talt program requir type infer sinc talt type system polymorph mean typabl check almost certainli undecid 30 consequ safeti certif talt program entir type deriv rather thana talx86a collect type annot one reconstruct type deriv howev larg matter present talt type deriv contain littl inform would appear type annot conjectur overhead remain elimin use necula rahul techniqu 20 paper organ follow begin section 2 present basic talt languag section 3 present extens support disjoint sum array rel address section 4 give formal gc safeti section 5 discuss pragmat machinecheck proof conclud remark follow section 6 2 basic talt begin present basic talt languag present untyp fragment four part first present structur valu second present machin model third discuss instruct set fourth give oper semant follow present type system throughout section remark dierenc talt tal benefit reader familiar latter reader unfamiliar tal may skip remark adopt follow notat convent w stand size machin word measur byte 4 ia32 j k n rang nonneg integ bit rang 0 1 b rang byte ie integ modulo 256 b rang word ie integ usual consid alphaequival express ident howev section identifi regist r consid variabl alphavari variabl appear talt type constructor variabl unit valu u b junk ai k valu v u 1 address n cond code cc cf bit zf bit memori regist file r state h r figur 1 untyp talt syntax 21 untyp talt valu tal separ collect valu two syntact class call heap word valu 2 syntact distinct determin could fit regist talt combin singl syntact class valu may vari size use type rather syntax determin may use syntax typefre talt appear figur 1 valu simpli sequenc zero unit valu exactli one byte size construct valu unit valu ensur byte includ byte middl atom object may address make easi comput size valu note mere cosmet chang elimin word valu add unit valu unlik tal word valu unit valu never object interest use construct valu conveni abus notat also often write valu form v 1 v n repres append sever valu four form valu may consid atom liter byte b junk valu address w byte length instruct encod k metavari k rang kbyte instruct encod level abstract appropri specifi possibl valu k instead instead assum exist decod function k take instruct encod instruct discuss bit later note need inject singl instruct multipl encod need surject liter junk valu one byte size repres directli unit valu con struct howev address usual instruct encod size greater one byte thu latter two form unit valu repres byte taken larger atom valu ai repres ith byte address k repres ith byte instruct encod k appropri rang construct consid junk valu rare need deal subcompon address instruct purpos k view valu form use abbrevi includ third class call small valu truli valu renam operand later work 18 call regist r r1 rn operand destin rdestr mdestm n condit eq neq lt lte gt gte instruct add cmp jcc jmp malloc n mov sub code figur 2 instruct also write b encod b byte littleendian architectur ia32 machin model like tal talt machin model contain memori regist file replac tal stream input instruct explicit program counter also augment state collect condit code indic carri zero flag would dicult add conveni consid part regist file contain flag fl regist talt regist file fix collect n generalpurpos regist r1 rn 3 tal hand assum infinit suppli regist talt memori broken section identifi section identifi section repres area memori known contigu distinct section howev appear unknown order memori possibl interven gap thu view talt memori map section identifi valu sinc valu simpli sequenc byte byte memori address subject limit garbag collector combin section identifi numer oset n section produc address n consid garbag collect section 4 necessari us distinguish heap collector manag remaind memori refer portion heap code segment anticip develop make remark view segment section resid intrins properti section may determin identifi formal use two predic hseg hold resid heap segment convers cseg heap segment trace collector readwrit code segment trace readonli newli alloc section alway appear heap segment instruct set basic talt instruct set given figur 2 except malloc implement runtim system rather architectur 3 ia32 n 7 sinc stack pointer treat special section 23 struction familiar programm ia32 note instruct given intelstyl destin first notat note also load store instruct tal omit replac mov instruct use appropri address mode code sequenc use talt oper semant aris type check rule notat operand destin novel operand imv indic immedi operand operand rcor indic operand content regist r content memori obtain use operand mcom n sub operand provid address n indic fix oset address read indic size operand read typic w similarli rdestr indic destin instruct regist r mdestm n indic destin size memori address indic operand order make talt eleg gener possibl eort made limit avail operand operandinstruct combin actual support ia32 architectur exampl real architectur permit arbitrari chain indirect nest memori operand talt size memori read permit eleg includ varieti unsupport possibl note unsupport instruct simpli rang decod function oper semant oper semant given figur 3 main judgement indic machin state step machin state three main auxiliari judgement discuss establish use auxiliari definit given figur oper semant entir unsurpris resolut operand formal judgement indic machin state operand resolv valu v propag comput result destin formal judgement v h r indic machin state destin assign valu v result memori regist file h r final condit condit jump jcc handl proposit cc true condit code cc satisfi condit point notat merit comment note arithmet equat semant specifi condit code result well numer result condit code result determin usual manner carri flag cf set oper gener carri borrow formal denorm result lie outsid allow rang zero flag zf set result zero map updat written h v memori similarli regist file map extens memori written h v fresh 22 type system type talt appear figur 4 base type b0 type zerolength valu b1 type byte liter import type constructor product space 1 2 contain valu consist two adjac valu type 1 2 sinc append valu associ unit name product also associ left right unit name b0 equival realiz collect subtyp rule note unlik tal product space contain pointer tupl talt pointer made explicit type constructor box one factor necessari combin tal heap word valu sinc tupl pointer tupl dierent type need distinguish syntact class tal add o1 o2 h r fl cc jcc jcc h junk n mov sub o1 o2 operand resolut destin propag condit satisfact definit u1 un def z time figur 3 oper semant kind k type type size b0 null valu b1 byte box pointer mbox mutabl pointer code code valu k univers quant k existenti quant ns top nonsens type void bottom empti type recurs type r f type mem type context figur 4 type syntax three dierent type provid pointer box type ordinari pointer mbox type mutabl pointer 0 type code pointer pointer type provid dierent privileg box covari immut mbox mutabl invari code pointer may jump subtyp rule provid promot mutabl pointer covari one seri instruct given type code execut provid regist file type function space 0 contain execut code pointer 0 like boxcod except pointer must point code segment univers existenti quantifi intersect type union type recurs type standard currystyl system top type ns contain valu size 1 wider top type may defin expon ns bottom type void empti sever use abbrevi includ wordsiz top nsw defin figur 5 two kind talt type kind contain type size kind contain type whose element size exampl b0 belong t0 b1 belong belong variou pointer type belong tw uninhabit type may vacuous belong one size kind eg b0 b1 belong t0 t1 void vacuous belong ti inhabit type one size kind regist file type give type regist fl wellform regist file type regist type must kind tw everi regist must includ width int ns w figur 5 type abbrevi judgement interpret wellform kind k wellform wellform subtyp 2 subtyp 2 propag valu type destin result regist file type code execut regist file type init rmbox discuss section 222 wellform type wellform type wellform figur subtyp rule need includ instead regist valu irrelev may given type nsw promot nsw done use depth subtyp heap type give type section 221 static semant collect judgement talt static semant given figur 6 thirteen total judgement complet set rule appear appendix a1 three judgement type format rule unsurpris given appendix two judgement subtyp one ordinari type one regist file type latter simpli appli former pointwis regist type remain judgement type three type valu operand destina tion two type code second auxiliari judgement type tupl initi code final three judgement type machin state toplevel compon sinc pointer may appear anywher type pointer depend type valu ns figur 7 type rule except instruct point type judgement except state type 4 includ memori type part context operand destin code also refer regist type judgement also includ regist file type context talt type rule appear figur 7 8 discuss machin state type rule machin state essenti tal state wellform exist memori type regist file type respect memori regist file program counter may consist type type check program counter current code look memori program counter address type check memori seri byte convert code sequenc function lift instruct decod function singl instruct seri instruct two aspect chang futur develop first add second state type 4 state type judgement omit memori type full machin state close although full memori also close memori type judgement still includ memori type part context occasion necessari type check memori weaken assumpt rule type intermedi state tupl initi section 222 second decod function gener account rel address section 33 valu valu type rule selfexplanatori rule pointer merit di cussion pointer oset n may given type section point element 1 size n ie skip oset pointer heap segment may given stronger type mbox 2 provid subtyp supertyp 1 2 ensur 2 written back heap object object still type heap type unchang valu type rule tell far entir stori flexibl talt type system provid subtyp rule subtyp provid introduct facil existen tial union recurs type elimin facil univers intersect recurs type associ ident rule product distribut rule intersect union type void fifti subtyp rule list appendix a1 interest breviti discuss individu rule aris operand destin sinc operand may drawn regist operand type judgement includ regist file type context similarli sinc destin may regist propag valu destin chang regist file type henc destin type judgement includ regist file type type rule memori operand destin novel use associ ident subtyp rule product 5 one cast pointer type form mbox operand type 1 3 type left right residu valu size check use kind 1 must kind tn match oset 2 must kind tm match operand size note unlik regist destin memori destin forbidden chang data type allow chang would unsound due possibl alias instruct much type system move rule operand destin type rule instruct given figur 8 larg expect final two rule merit comment first subtyp rule code state type check assumpt also type check stronger assumpt second rule elimin rule existenti type regist contain valu existenti type allow valu unpack place tal instruct unpack obtain combin mov instruct rule 222 alloc initi complic talt type rule malloc newli alloc tupl begin fill junk initi fieldbyfield tupl initi type must chang reflect new compon mean initi incompat usual rule memori write tal provid eleg way handl use initi flag newli alloc tupl essenti stamp ultim type initi must move toward ultim type 10 address alias problem alias could 5 although mbox invari respect symmetr subtyp associ ident product appli beneath mbox add jcc jmp mov figur 8 instruct type rule except alloc weaker view tupl incompat one moreov sinc tal conflat mechan pointer tupl tal track initi tupl fieldbyfield basi thu tal permit interleav initi comput unfortun fieldbyfield initi flag incompat talt talt decoupl pointer tupl moreov flexibl aord initi flag appear rare use practic therefor expedi altern talt requir newli alloc object fulli initi comput take place uninterrupt initi easi maintain invari alias new object exist power account initi could like given use alia type 28 explor extens rule implement mechan appear figur 9 first rule provid object alloc pointer place regist r type check move special mode rs type updat r use purpos latter enforc give type nsw seri initi move final rule use make r ordinari pointer shift back ordinari type check mode addit ugli rule type check machin state midst initi appear appendix a1 express invari initi type preserv properti establish mov mdestm rcor n init rmbox init rmbox figur 9 allocationiniti type rule 23 stack talt support stack use type mechan essenti ident stackbas tal 18 although varieti special instruct fold talt operanddestin mechan full detail appear appendix reason breviti omit discuss stack bodi paper beyond remark sinc talt alreadi notion null object concaten object memori need introduc special type nil stackbas tal howev need special kind sinc stack type must determin size talt type alway eg b0b1 requir kind type whose size determin though possibl unknown variabl kind td kind call td rare use asid stack practic purpos serv kind stack type 24 multipl entri point one facil provid talt may immedi obviou abil jump middl block code imposs tal oper clear one jump valid address less obviou jump welltyp suppos simplic v code v morecod v morecod execut regist file type suppos v code wish assign type 0 n type 0 possibl give type ns n make possibl structur talt code desir forward backward jump without need insert arbitrari break type purpos importantli sinc execut address given type manner talt support true call instruct return address obtain program counter detail call instruct appear appendix figur 10 integ rang extens 31 disjoint sum standard implement disjoint sum type say int pointer tupl whose lead field tag identifi arm sum talx86 idiom support directli special type disjoint sum talt decompos primit compon first add notion singleton type written set b contain integ b easili construct type faith character encod element type either pointer int follow zero tag pointer intint follow one tag figur give type rule pertin subtyp rule set also upper lower subrang type set set use shortli rule sucient howev although type accur express member disjoint sum immedi use problem absenc elimin rule union type may load tag word instruct cmpjcc neqb unsat unsat void 7 figur 11 union elimin oset 0 disjoint union sinc distribut box distribut promot set int boxint int int int compar tag zero may determin dynam arm disjoint union object belong howev rule discuss far way take advantag inform static type way access variant constitu disjoint union make possibl elimin union type add new instruct cmpjcc oper ident twoinstruct sequenc cmp evalu rule formal appendix a2 special pseudoinstruct type rule r use comparison exampl r type comparison mcow rcor 0 im0 use condit eq idea rule elimin rs union type provid static proof r type 2 branch taken r type 1 branch skip follow r given type 1 branch 2 nonbranch consid cmpjcc type rule given figur 11 claus 1 2 ensur comparison permiss indic valu compar number b event branch taken must type b sat b unsat claus 3 identifi union type interest 1 2 follow r either type 1 type retyp first operand first hypothet circumst thu r 1 howev branch skip must also type b unsat claus 7 prove simultan true therefor branch skip may conclud r type 2 claus 10 similar argument show branch taken may conclud r type 1 claus 9 exampl suppos r type wish jump tag zero use cmpjcc mcow rcor 0 im0 eq first six claus easili establish use argument claus 1 set 0 set 1 remain show easi obtain first use distribut contradict subtyp rule set b void second observ set 1 set 0 result follow latter contradict subtyp rule thu may continu type check refin type r branch gener case nari sum may wish caseanalyz sum use binari search execut log 2 n comparison rather n 1 done use rule choos inequ comparison rather equal set rule necessari use associ union type cast nari sum form singl union type one arm incompat branch branch 32 array develop far talt alreadi support arraylik type form n nelement array howev type shortcom array length must known static want someth like n n first add facil quantifi array length ad new form type constructor repres number thu far refer type constructor talt type constructor actual type must renam syntact class type type constructor tycon short use metavari c type constructor gener continu use metavari tycon kind use metavari x tycon kind num terminolog establish add new kind num new tycon b num occasion find conveni allow word b integ modulo 2 8w use place ordinari nonneg integ case b interpret canon repres also gener integ subrang type defin tycon kind num includ variabl gener variou rule deal subrang accordingli final add type xelement array x develop summar figur 12 give type array unknown length num set mbox kind k num tycon c x set x set x set x operand destin imdestm figur 12 array sinc address mode provid far provid fix oset tupl must also provid operand destin construct read write dynam specifi oset array purpos provid index memori operand form imcom similar destin form imdestm oset calcul construct n k base address size remain thu point array element size k imco extract oset n element array type rule imco imdest given figur 12 oper rule given appendix a2 pseudoinstruct mallocarr provid alloc initi array due space consider discuss full detail appear appendix note imco imdest includ arraybound check type deriv respons show index within allow rang typic case array bound check necessari one could add anoth cmpjcc rule refin integ subrang turn exist cmpjcc suce addit trichotomi rule 6 ia32 address mode provid primit 8 architectur valu k would need synthes rearrang may obtain seem like sophist treatment array bound check possibl use someth like xi harper dtal 31 track depend variou integ valu explor extens time mechan proof seem like burdensom 33 rel address given talt machin model pcrel address dicult add oper simpli add new operand form pcreln operand resolut rule type system howev matter trickier rel address creat situat code therefor valu gener may certain type resid particular locat least view naiv situat undesir two reason first make type rule awar locat valu resid would requir widescal chang type system would lessen eleg second result type system would unlik convent type system valu type depend written preserv type system current form introduc technic devic call deloc izat employ function deloc convert rel address absolut one exampl deloca mcom code alway type check deloc form type rule need provid rel operand consequ type rule instruct preserv without chang burden deloc assum code type rule valu convert code sequenc type check recal rule figur 8 old first modifi decod function va account deloc second sinc type rule know memori v lie permit assum address may assum regist file type record assumpt type new type codea read code may execut regist file type provid resid address oblig discharg type rule code pointer admit properli deloc pointer code pointer new note code block deloc address resid address given code pointer type chang must made type system toplevel state type rule must modifi obviou manner account deloc princip safeti result talt usual progress type preserv theorem 41 progress theorem 42 type preserv progress proof induct type deriv type preserv proof case analysi evalu deriv outer induct type deriv handl regist file subsumpt existenti unpack rule addit sinc talt oper semant account garbag collect must prove addit result show garbag collect disrupt typabl like talx86 talt design use boehmdemersweis conserv garbag collector 4 therefor need maintain tag invari order assist collector distinguish pointer integ howev one gc safeti condit must maintain collector function properli 3 everi live heap object must reachabl chain pointer root set pointer permit reach object point anywher object begin end 7 root set collect valu regist file stack condit maintain consequ live object may garbag collect therefor purpos defin live object one whose presenc requir state welltyp main gc result proof garbag collect unreach object break typabl state order satisfi gc safeti condit impos follow two invari welltyp talt code 7 interior pointer permit boehm chase specif 3 permit collector implement dom cseg figur 13 modifi rule gc safeti 1 code segment contain nonaccident pointer heap segment 2 immedi operand contain nonaccident pointer heap segment invari 1 necessari code segment part collector root set invari 2 stricli speak necessari burdensom either operand part instruct code segment invari 2 follow invari 1 instruct useless anyway invari impos dramat simplifi develop sinc mean need formal look pointer code valu invari achiev replac type rule immedi operand memori rule figur 13 strip heap section memori type type code section immedi operand formal gc safeti theorem need definit unreach definit 43 suppos set heap section identifi hreachabl v v written form v 1 n v 2 n h section unreach memori whole everi section reach either untrac ie code segment unreach definit 44 suppos set heap section identifi unreach h everi domh either cseg hreachabl h definit 45 suppos set heap section identifi unreach h r unreach h everi r hreachabl rr hreachabl rsp note definit unreach determinist unreach small empti set definit craft manner predict object actual collect conserv collector instead prove result unreach set therebi cover whatev collector turn theorem 46 gc safeti suppos unreach h r suppos h r proof induct type deriv 5 machinecheck proof result paper formal machinecheck proof twelf system 23 24 first step formal encod talt syntax type system oper semant lf signatur 13 wherein judgement becom type deriv becom term process standard belabor languag formal state prove princip metatheorem progress type preserv gc safeti metatheorem statement encod relat deriv 21 22 exampl princip metatheorem statement becom progress mode progress d1 d2 preserv machineok type mode preserv d1 d2 d3 collect collect machineok type mode collect ok d1 d2 d3 instanc progress theorem relat machineok deriv stepsto deriv forth mode declar follow statement indic input output argument relat 25 case last argument mode sole output argument proof metatheorem encod logic program whose type relat encod theorem program principl given deriv input argument unif variabl output argument execut obtain result deriv logic program repres valid metaproof execut alway run success conclus twelf total checker verifi logic program fact total assist programm identifi induct variabl consist check three fact 1 mode check output argument input argument subcal fulli determin 2 termin check induct variabl decreas recurs call 3 total check everi case analysi case cover detail reader refer pfen schurmann 24 schurmann 26 specif talt lf consist 2081 line twelf code complet proof theorem 41 42 46 consist 10137 line twelf code includ comment breakdown proof code interest reader given tabl 1 full proof take approxim three minut check twelf 13r3 pentium 3 128 meg ram proof compon line purpos 210 properti canon form 252 properti condit properti memori lookupupdateextens instruct decod lemma 372 properti regist file lookupupd 399 properti valu 407 equal lemma 429 properti natur number arithmet 515 valid wellbehaved deriv 537 canon form lemma 548 lemma regard type format progress 713 weaken strengthen memori type operanddestin lemma 925 type preserv 1245 properti binari arithmet tabl 1 safeti proof breakdown 6 conclus talt provid eleg express fulli formal type system assembl languag machinecheck safeti theorem section 5 provid complet safeti argument talt program term safeti polici express oper semant assembl languag level complet foundat tal system work must combin proof talt oper semant map correctli concret architectur talt design latter stage proof implement typefre simul argument talt also design easili adapt architectur gener architectur constant bigendian vs littleendian number regist size machin word paramet languag easili chang new instruct also easili ad fact given gener talt operanddestin mechan mani new instruct may alreadi present mean primari burden special talt architectur account idiosyncrasi eg ia32 treatment float point delay slot follow jump mani risc architectur one issu address talt issu processor except fault eg divis zero stack overflow variou floatingpoint except prohibit expens prevent dynam dicult prevent static fortun purpos safe ignor assum occurr except abort program program longer run certainli safe issu stack overflow littl bit involv must ensur stack overflow caus stack overflow except follow standard practic preced 8 stack memori least one typic mani unmap memori page push instruct overflow stack therefor hit unmap page caus except salloc instruct increas stack size arbitrari amount bit trickier could skip unmap page land access memori prevent limit salloc one page time forc touch top stack push ensur overflow salloc hit unmap page assist develop talt program also design explicitli type variant talt call xtalt enjoy decid type check xtalt add type annot section replac talt subtyp explicit coercion implement assembl typecheck xtalt program gener correspond talt deriv compress use necula rahul techniqu 20 also develop popcorn 17 xtalt compil tool combin dunfield standard ml popcorn compil 11 base rml 29 mlton 6 provid complet certifi compil standard ml talt direct standard ml talt compil also underway r semant model type machin instruct proofcarri code simpl garbagecollector safeti propos garbagecollectorsaf c compil garbag collect uncoop environ first intern workshop grid comput ing trustless grid comput concert certifi compil java type structur lowlevel program langaug person commun syntact approach foundat proofcarri code framework defin logic second intern workshop grid comput java virtual machin specif realist type assembl languag system f type assembl languag logic program lf logic framework implement metatheori deduct sy tem system descript twelf metalog framework deduct system twelf user guid mode termin check higherord logic program autom meta theori deduct system alia type ml ada stronglytyp languag interoper via sourc translat typabl type check system f equival undecid depend type assembl languag tr garbag collect uncoop environ logic program lf logic framework framework defin logic simpl garbagecollectorsafeti system f type assembl languag semant model type machin instruct proofcarri code certifi compil java oraclebas check untrust softwar java virtual machin specif grid comput mode termin check higherord logic program flowdirect closur convers type languag alia type syntact approach foundat proofcarri code type structur lowlevel program languag stackbas type assembl languag implement metatheori deduct system system descript ctr joseph c vanderwaart karl crari autom certifi conform respons polici proceed 2005 acm sigplan intern workshop type languag design implement p7990 januari 1010 2005 long beach california usa michael f ringenburg dan grossman type describ coordin data structur proceed 2005 acm sigplan intern workshop type languag design implement p2536 januari 1010 2005 long beach california usa adam chlipala modular develop certifi program verifi proof assist acm sigplan notic v41 n9 septemb 2006 hongxu cai zhong shao alexand vaynberg certifi selfmodifi code acm sigplan notic v42 n6 june 2007 brigitt pientka verifi termin reduct properti higherord logic program journal autom reason v34 n2 p179207 decemb 2005 feng zhaozhong ni zhong shao yu guo open framework foundat proofcarri code proceed 2007 acm sigplan intern workshop type languag design implement januari 1616 2007 nice nice franc boryuh evan chang adam chlipala georg c necula robert r schneck typebas verif sssembl languag compil debug proceed 2005 acm sigplan intern workshop type languag design implement p91102 januari 1010 2005 long beach california usa feng zhong shao modular verif concurr assembl code dynam thread creation termin acm sigplan notic v40 n9 septemb 2005 andrew w appel paulandr melli christoph richard jrme vouillon modal model modern major gener type system acm sigplan notic v42 n1 januari 2007 boryuh evan chang adam chlipala georg c necula robert r schneck open verifi framework foundat verifi proceed 2005 acm sigplan intern workshop type languag design implement p112 januari 1010 2005 long beach california usa juan chen dinghao wu andrew w appel hai fang provabl sound tal backend optim acm sigplan notic v38 n5 may zhaozhong ni zhong shao certifi assembl program embed code pointer acm sigplan notic v41 n1 p320333 januari 2006 dan grossman quantifi type imper languag acm transact program languag system topla v28 n3 p429475 may 2006