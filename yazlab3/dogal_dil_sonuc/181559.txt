use virtual line enhanc local exploit spatial local numer code signific potenti perform improv import howev larg cach line use current onchip data cach import pollut breed paper propos hardwar design call virtual line scheme allow util larg virtual cach line fetch data memori better exploit spatial local actual physic cach line smaller current found cach line better exploit tempor local simul show 17 64 reduct averag memori access time obtain 20cycl memori latenc also shown simpl softwar inform use significantli decreas memori traffic flaw associ util larg cach line b introduct due constantli decreas processor cycl time averag memori access time observ processor rapidli increas high network memori latenc consequ cost cach miss becom prohibit monoprocessor multi processor urg develop hardwar softwar solut numer code particularli sensit cach perform work set usual larg result numer memori access array refer numer code gener strong spatial tempor local properti tempor local exploit loop block 2 12 16 littl support except cach line flexibl avail exploit spatial local howev experi 15 tend show optim cach line code depend whether spatial tempor local prefer exploit small directmap cach popular 13 4 onchip space use cach hit time minim cach hit time minim determin processor cycl time work fund bra esprit iii projet ap part european agenc dgxiii high perform comput divis depart comput scienc univers leiden netherland howev cach sensit cach conflict pollut phenomena prevent use larg cach line paper propos cach design call virtual line scheme vl allow util larg cach line small directmap cach avoid flaw associ larg cach line increas cach conflict cach pollu tion scheme propos give illus variabl line size use refer within code actual physic cach line size smaller usual cach line size order better exploit tempor local larg virtual cach line use order better exploit spatial local simul show mean averag memori access time observ benchmark equal 17 cycl per refer 20cycl memori latenc also shown simpl softwar inform use significantli decreas memori traffic flaw common larg physic larg virtual line section 2 tradeoff spatial local tempor local exploit discuss section 3 principl virtual line scheme present perform measur provid section 4 shown assist virtual line scheme softwar inform decreas memori traffic final section 5 design implement issu discuss 2 exploit spatial tempor local tradeoff spatial tempor local principl cach exploit tempor spatial local resid code tempor local exploit keep data cach spatial local exploit load sever consecut data ie cach line memori request choic optim line size delic tradeoff tempor spatial local exploit respect tempor local number cach entri larg possibl minim cach pollut data load cach use cach conflict data compet cach locat sinc number cach entri equal ratio cach size cach line size cach line size chosen small possibl respect spatial local number element brought cach one time ie cach line size larg possibl order minim number memori request therebi reduc averag memori access time element j11n1 j21n2 reg enddo enddo figur 1 exampl numer loop nest reduc cach pollut vs exploit spatial local let us illustr tradeoff exampl figur 2 refer b exhibit flawless spatial local columnwis storag assum c appar refer larger line size smaller number cach miss note array b exhibit tempor local therefor necessari minim cach pollut array b kept cach howev refer c exhibit spatial local actual time reus cach line equal one execut loop j 2 unlik spatial local exploit consequ cach line size equal l word l word array c load cach iter j 2 l word load everi l iter refer due spatial local array c go pollut cach l time faster array besid refer c miss iter j 2 refer miss one everi l iter ideal small line size use refer c refer use larg line size would reduc number miss array c would consider decreas cach pollut due array therebi increas hit ratio array b note array also pollut cach bring data without tempor local howev gain obtain exploit spatial local array gener outperform cach pollut induc cach line size perform bottleneck numer code abil use larg cach line could significantli increas perform inde array refer often stride1 access 17 side array without tempor local also commonli found like matrix access matrixvector multipli primit way reduc number cach miss refer call coldstart miss use larg line size true effici algorithm exist exploit tempor local 2 12 16 miss physic line victim replac main cach c1 secondari cach c2 virtual cach line physic cach line figur 2 virtual line scheme becom perform bottleneck numer loop nest assum instanc loop nest figur 2 refer c n 2 small enough b fit cach number cach miss approxim equal l l first term correspond c second term assum spatial local exploit due reus di tanc third term b doubl line size nearli decreas two number miss loop nest nonnumer code contrari nonnumer code like unix tool typic exhibit irregular pattern access memori therefor though exhibit spatial local mostli favour small line size better exploit tempor local ie minim cach conflict cach pollut 3 virtual line scheme virtual line scheme solut elimin tradeoff small cach line tempor local larg cach line spatial local cach miss larg chunk element fetch memori ie virtual cach line actual store cach ie physic cach line therefor spatial local exploit induc cach pollut 31 principl scheme physic line size ie actual cach line size l either order smaller current cach line size 8 byte memori request larg virtual line size made n physic line fetch memori physic line contain request word actual load cach remain physic line virtual line load small secondari cach way virtual line divid n sublin primari secondari cach divid n bank see figur 2 virtual line scheme confus subblock placement see 6 subblock place ment one tag subblock virtual line scheme one tag physic line ie physic line subblock effect cach line purpos subblock placement reduc miss penalti associ long cach line onchip space use address tag purpos virtual line scheme allow flexibl use cach space better tempor local exploit reduc cach line size virtual physic subblock place ment group togeth cach line order exploit spatial local group correspond virtual line main flaw virtual line scheme addit onchip space requir implement multibank design secondari cach case physic line equal 16 byte exampl instead usual 32 byte doubl number tag necessari increas cach size approxim 10 physic line 16 byte compar physic line 32 byte assum 20bit tag per cach line secondari cach also induc onchip space overhead howev two fact make good tradeoff first secondari cach use write buffer explain section 5 second also use victim cach discuss section 5 though victim cach yet implement clear evid 11 perform improv bring secondari cach addit tag main overhead associ implement virtual line scheme less signific hardwar addon must includ detail section 5 311 work virtual line scheme main paramet remaind paper main cach call secondari cach call characterist sever current onchip cach ie cach size equal 8192 byte directmap 13 4 secondari cach 1024 byte larg 4way associ paramet secondari cach determin experiment size associ use shown section 5 c 1 directmap c 2 setassoci hit time c 1 consid equal one cycl hit time c 2 equal two cycl physic line size 16 byte chosen virtual line size taken equal 64 byte see section 5 ie cach divid 4 bank virtual line scheme algorithm processor request cach test time answer one cycl later processor hit c 1 execut resum repli c 2 ignor processor miss c 1 hit c 2 processor resum execut two cycl mean physic line hit occur transfer c 2 c 1 besid due cach role c 2 victim physic line c 1 transfer c 2 place hit line see figur 2 reason cach consid stall respect proce two cycl hit c 2 occur processor miss cach memori request issu virtual line mention target physic line transfer c 1 physic line virtual line store c 2 nearli step mechan awar virtual line rest time cach work much alik twolevel cach hierarchi except multibank mechan line size equal l note cach miss latenc increas one cycl standard cach delay answer cach c 2 312 larg physic line vs larg virtual line observ memori latenc due 2cycl access time c 2 benefit use larg virtual line versu larg physic line obviou access 4 physic line virtual line case l cost l cycl l memori latenc plu 1 cycl first physic line 3 theta cycl remain 3 line case use total l cycl physic line byte total penalti equal l cycl nevertheless physic line virtual line necessarili use actual averag total latenc access larg physic virtual line alik besid request physic line come back memori processor resum execut primari cach stall sinc remain line store cach c 2 standard cach would also resum execut primari cach would stall sever cycl new cach line load superscalar processor one request per cycl issu result processor stall cycl solut avoid processor stall larg cach line reload alreadi propos ibm rs6000 7 buffer use store incom line processor need wait cach reload perform virtual line act buffer cach pollut howev import asset larg virtual line larg physic line minim primari cach pollut inde physic line virtual line load c 1 request processor hit ratio primari cach 16byte cach line nearli alway equal standard cach 32byte cach line see figur 7 see section 321 detail benchmark note standard cach still perform better code strong spatial local hand mm reduct pollut increas significantli hit ratio c 1 besid physic line load primari cach request latter fact im portant though refer exhibit spatial local time reus long store cach data use also form cach pollut scarc spatial local case stride refer equal one virtual line scheme perform better larg physic line sinc among physic line larg virtual line use load cach c 1 virtual line scheme prove particularli use refer exhibit scarc spatial local exampl figur 2 64byte physic line would load cach 8 64bit word cache7 correspond cach pollut 64byte virtual line would load 2 word 16 byte cach word stay cach perform comparison figur 3 show perform comparison larg physic line larg virtual line increas physic line size nearli alway result perform reduct hand virtual line size scheme toler well larg virtual line numer code perform increas nonnumer code perform either slowli increas stabl virtual line size increas degrad rapidli physic line size increas 32 perform virtual line scheme 321 overview experi simul perform cycl cycl order catch phenomena associ design bu util cach stall line tran fer slower respons time cach collect 10 benchmark use though difficult choos repres set bench mark tri combin differ type code illustr maximum number behavior numer code pick perfect club suit 1 benchmark aparcbdnaw code unix tool cc gnucc compil cpr compress util tex latex compil code numer primit lawrenc livermor loop spmv spars matrixvector multipli loop mm matrixmatrix multipli loop onemillion refer trace extract code first million refer ignor order avoid nonrepres refer correspond initi section code 322 reduct averag memori access time ap arc bdna cc cpr mm spmv tex ws20406080 averag memori access time standard cach virtual line scheme figur 4 perform comparison virtual line scheme averag memori access time bank 4 bank 8 bank bank figur 5 influenc physic virtual line size mm numer nonnumer code signific perform improv observ standard 8192byte cach line size 32 byte see figur 4 reduct averag memori access time vari 17 64 mean averag access time equal 17 cycl 27 cycl standard cach perform improv spectacular mm matrixmatrix multipli one two main refer innermost loop nest non stride1 refer exhibit flawless spatial local consequ standard cach pollut import cach line larg virtual line scheme larg virtual line induc addit pollut far physic line kept small see figur 5 matrixmatrix multipli exampl exploit properti virtual line scheme increas exploit spatial local reduc cach pollut ap arc bdna cc cpr mm spmv tex ws20406080 averag memori access time ls32 standard cach ls128 standard cach ls256 standard cach ap arc bdna cc cpr mm spmv tex ws20406080 averag memori access time ls32 standard cach figur 3 perform larg virtual physic line otherwis notic averag memori access time smaller virtual line scheme standard cach code see figur 4 mean design safe ie degrad perform code least benchmark use memori latenc valu consid 323 increas perform reduct cach pollut exploit spatial local virtual line scheme profit either limit cach pollut allow exploit spatial local tempor local exploit figur 8 fraction word prefetch ie fetch memori belong request physic line effect use indic seen numer code like arc benefit virtual line scheme use neglig number prefetch data hand figur 7 show hit ratio c 2 signific paradox behavior indic reduc cach pollut due smaller physic line secondari cach allow better exploit tempor local note small physic cach line size also increas effici secondari cach type phenomenon expect nonnumer code see benchmark cpr rather numer code spatial local exploit natur virtual line scheme also perform well simpli exploit spatial local figur 8 seen benchmark bdnallmmspmv ws use effici word prefetch effici increas physic line size decreas recal doubl number access c 2 necessari physic line size divid two therefor number hit c 2 artifici doubl number hit c 1 remain constant still secondari cach intens use prefetch buffer andor victim cach hit ratio c 2 ap arc bdna cc cpr mm spmv tex ws10 hit hit ratio c1 vl hit ratio c2 vl hit ratio standard cach figur 7 hit ratio c 1 c 2 ap arc bdna cc cpr mm spmv tex ws010305 fraction fraction word prefetch fraction prefetch word use figur 8 effici virtual line scheme rel high see figure7 benchmark ccllmm effici mechan decreas virtual line size increas see figur 6 benchmark cprmm non stride1 access sever pollut secondari cach overal perform improv nonnumer code nearli alway due better exploit tempor local thank smaller physic line size victim cach hand numer code benefit either larg virtual line andor decreas cach pollut 324 memori traffic whether physic virtual line use memori traffic increas theori word load ap arc bdna cc cpr mm spmv tex ws103050 word fetch memori word referenc ls32 standard cach ls128 standard cach ls256 standard cach ap arc bdna cc cpr mm spmv tex ws103050 word fetch memori word referenc ls32 standard cach figur memori traffic larg virtual physic line use size line would impact memori traffic figur 8 show though true code llspmvw true code arccccprmm select miss request howev virtual line scheme design minim memori traffic cach miss issu physic line virtual line present c 1 fetch memori inde due loos connect physic line virtual line possibl miss occur physic line physic line virtual line still present cach fetch line memori would induc coher issu would wast therefor presenc complementari physic line c 1 test issu miss request note problem aris cach c 2 issu discuss section 5 implement issu howev argu facil may increas latenc two solut adopt avoid first physic line test simultan sinc necessarili belong differ bank tag hand addit hardwar necessari perform oper otherwis anoth cheaper solut appli miss request issu time necessari spend request first word significantli larger subsequ word therefor conceiv first word request process cach test presenc physic line solut advantag limit amount hardwar requir reduct memori traffic use two method choic transpar simul observ memori traffic increas significantli less virtual line scheme larg physic line see figur 8 overal increas memori traffic remain reason l nonnumer code like cpr still exhibit memori traffic increas approxim 30 though averag memori access time decreas larger virtual line though averag memori access time remain competit memori traffic significantli increas 33 prefetch ap arc bdna cc cpr mm spmv tex ws20406080 averag memori access time standard cach virtual line scheme prefetch figur 9 perform vlsprefetch ap arc bdna cc cpr mm spmv tex ws010305 fraction fraction word prefetch vl fraction prefetch word use vl fraction word prefetch vlsprefetch fraction prefetch word use vlsprefetch figur 10 memori traffic vlsprefetch though virtual line scheme allow util larg line size excess larg size could induc sever bu content secondari cach pollu tion reduc effici buffer victim cach see figur 3 6 besid larger line size smaller effici ie smaller ratio word fetch word use seen final larg line size prevent period cach miss vector access prefetch altern larg line size propos 9 3 14 10 principl detect accesss stride refer predict next address use base address current referenc stride prefetch correspond data though simul prove effici scheme requir rel heavi complex implement besid array refer within loop nest often stride1 see 17 make complex stride detect mechan less necessari combin virtual line scheme prefetch virtual line scheme actual constitut conveni architectur base introduc simpl stride prefetch consid physic line virtual line store one bank c 2 caus request processor first word correspond virtual address line use later physic line correspond word l prefetch ie next physic line correspond bank bank behav independ bank con sequent even stride access exploit stride equal size virtual line note necessari physic line load instead whole virtual line respect implement one bit necessari per cach line secondari cach indic whether line prefetch victim replac ment otherwis buffer necessari store data address next physic line prefetch case memori busi prefetch request need issu perform effici vector access miss occur first virtual line next physic line prefetch note regular access disrupt one physic line excess load secondari cach inde physic line fetch c 2 use next line never prefetch sinc prefetch occur line c 2 never use transfer c 1 principl limit amount addit memori traffic wrong pre diction besid mechan propos appear complex code nonrectangular loop loop statement also exploit seen figur 9 prefetch increas perform code strong spatial local llmm degrad perform code respect standard virtual line scheme respect standard cach perform degrad first due addit memori traffic increas observ memori latenc case cach miss request pend prefetch request lock memori also addit data fetch secondari cach degrad effici victim cach sometim even prefetch buffer see figur 10 benchmark ap note howev fraction prefetch word use nearli often increas see figur 10 benchmark mean prefetch potenti improv perform far sideeffect increas memori traffic secondari cach pollut elimin relat work virtual line scheme combin prefetch also close multiway stream buffer propos 11 mechan time refer miss cach four cach line plu request cach line fetch memori four addit cach line store buffer first line buffer use three line shift upward next consecut line prefetch design four physic line prefetch instead one cost wrong predict higher besid physic line larger one use virtual line scheme sinc correspond standard cach line size around byte number interleav access loop nest greater number stream buffer sever refer would compet buffer prevent exploit prefetch data final stride access smaller physic line could exploit flaw avoid virtual line scheme coupl prefetch ever clear cost secondari cach higher cost four stream buffer nevertheless toler case secondari cach develop purpos prefetch actu alli assum virtual line scheme impl ment ad prefetch facil come nearli cost 4 softwaredirect scheme previou section shown virtual line scheme allow improv exploit spatial local without increas cach conflict cach pollut usual induc larg cach line howev well larg physic cach line larg virtual line increas significantli memori traffic could particularli troublesom within multiprocessor environ latenc high besid some case import fraction physic line load use therebi pollut secondari cach limit effici buffer victim cach howev least numer code rel straightforward determin whether given ref standard cach vl vl prefetch soft vl soft vl pref2040averag memori access time figur 11 perform softwaredirect vl exampl figur 1 standard cach vl vl prefetch soft vl soft vl fraction total word fetch memori total word referenc word prefetch vl prefetch word fetch word prefetch use word prefetch figur 12 memori traffic softwaredirect vl exampl figur 1 erenc exhibit spatial local inform could use virtual line scheme decid whether larg virtual line small physic line load correspond refer possibl data local optim algorithm 2 12 16 suffici matur power detect tempor spatial local numer code besid suggest 5 simpl inform suffici coordin combin soft warehardwar mechan exploit local case one bit per loadstor instruct suffici specifi whether refer exhibit spatial local exampl consid exampl figur 2 refer spatial local refer dj 1 spatial local therefor refer virtual line four physic line load refer cj singl physic line load first consequ reduct secondari cach pollut induc reduct averag memori access time shown figur 11 second import effect signific reduct memori traffic shown figur 12 note experi restrict ex ampl unavail compil instrument code spatial local inform underli idea assist virtual line scheme decid whether physic virtual line fetch effect implement variabl cach line size mechan give illus cach c 1 mechan use possibl refin system specifi number physic line brought instead choos one physic line one virtual line gener purpos provid necessari hardwar support develop softwar optim spatial local hardwar design current cach provid flexibl perform optim assist tempor local exploit structur virtual line scheme also conveni assist exploit tempor local well cach pollut conflict reduc data depriv tempor local allow resid primari cach least use underli idea impos prioriti data base tempor local properti principl alreadi investig 5 perform scheme limit absenc altern cach store nonreus data order avoid cach pollu tion fact tempor local favour spatial local techniqu also compar bypass even implement processor like i860 8 howev bypass prevent exploit spatial local unless dedic buffer use store bypass cach line secondari cach virtual line scheme could use purpos far inform avail tempor local refer inform use assist victim cach process refer tempor lo caliti line transfer secondari cach victim replac note inform use bypass cach mention effici sinc spatial local refer exploit consid exampl figur 2 refer dj 1 j 2 tempor local strong spatial local therefor reduct pollut obtain bypass cach would probabl compens ad memori access therefor cach line refer victim line transfer c 2 tempor local line dj victim replac turn discard instead transfer c 2 result pollut cach c 2 remain minimum prefetch note softwar control also use prefetch ing seen section 3 sometim prefetch bring perform improv often sever increas memori traffic make unsaf techniqu solut start prefetch refer spatial local detect inform provid spatial local bit case unlik mani wrong predict would occur figur 11 seen combin softwaredirect virtual line scheme prefetch perform significantli better standard virtual line scheme prefetch best perform actual obtain case seen figur 12 perform improv due better effici prefetch consequ reduct memori traffic implement issu inform provid ie presenc spatial tempor local refer loop nest extract compiletim two bit necessari store inform instruct set extend accommod new loadstor inform compil unabl provid inform local refer altern set default data tempor local experi prove solut effici tempor local default regard spatial local also possibl set spatial local bit default sinc load one physic line per memori request prove ineffici code known exhibit littl spatial local would possibl set default virtual line size smaller valu like byte 5 design implement issu 51 physic line virtual line size size elementari physic line virtual line tightli coupl tradeoff choos physic line small enough maxim number cach entri ie cach size line size order better exploit tempor local also find physic line larg enough number access secondari cach frequent hit time c 2 longer similarli tradeoff virtual line find line size larg enough suffici spatial local exploit small enough import fraction word fetch use therebi minim excess memori traffic experi prove rel larg virtual line size consid see figur 3 promis mean spatial local effici exploit still virtual line size 64 byte select induc moder memori traffic increas hand choic physic line size restrict optim valu seem equal 16 byte though case physic line size 8 byte prefer howev mostli code without spatial local benefit small line perform code spatial local degrad numer access secondari cach note 8 byte correspond one doubl precis float point number 52 secondari cach ap arc bdna cc cpr mm spmv tex ws associ cach c2 ls64ls16size c2102420averag memori access figur 13 variat vl perform associ cach c 2 ap arc bdna cc cpr mm spmv tex ws size cach c2 ls64ls16fullyassociative20averag memori access figur 14 variat vl perform cach size associ characterist secondari cach determin size associ find optim tradeoff difficult perform whole mechan either stabl vari nearli linearli secondari cach size associ increas sinc secondari cach size small anyway surpris cach conflict numer therefor perform improv constantli associ size creas implement constraint perform reason secondari cach size limit 1024 byte chosen 4way associ write buffer mechan ap arc bdna cc cpr mm spmv tex ws fraction write requests005 fraction standard cach virtual line scheme figur 15 amount write back request mention section 3 secondari cach act write buffer spare onchip space mechan reli replac polici secondari cach lru polici use bank secondari cach physic line dirti reach lowest prioriti respect lru written back memori therefor data use long time ie fair chanc reus written back memori mechan significantli reduc number memori write request see figur 15 could decreas burden coher protocol multiprocessor 53 coher issu coher secondari cach mention section 3 coher issu aris twolevel cach hierarchi shown coher maintain primari cach test presenc physic line virtual line fetch line memori secondari cach problem aris two solut adopt first techniqu use c 1 employ c 2 miss latenc must increas one cycl access time secondari cach longer anoth solut send memori request without test secondari cach beforehand cach c 2 test request process bank flag bit set physic line found data return memori physic line correspond bank bit set discard note would simpl directli invalid data secondari cach sinc dirti would alway possibl prefetch difficult problem maintain coher prefetch use physic line prefetch store c 2 possibl test presenc c 1 order check coher test would stall c 1 could mean stall processor especi processor superscalar cach often solicit sinc prefetch request numer toler solut adopt store physic line c 2 without check c 1 sinc secondari cach act write buffer coher issu elimin inde dirti physic line c 1 need go cach c 2 write buffer written back memori transfer dirti line c 1 c 2 test presenc physic line occur line immedi invalid line c 1 store c 2 note imposs line c 2 dirti sinc write occur c 1 mechan increas swap time victim cach oper possibl refin processor request hit c 1 hit redund detect data c 2 invalid note dirti 54 comparison larg associ cach ap arc bdna cc cpr mm spmv tex ws2040averag memori access time cs8192assoc1ls32 standard cach cs8192assoc2ls32 standard cach cs16384assoc1ls32 standard cach cs16384assoc4ls128 standard cach figur comparison vl differ cach architectur due onchip space requir implement virtual line scheme necessari compar scheme perform larger cach seen figur 16 16kbyte directmap cach either compar nonnumer code smaller numer code perform virtual line scheme indic avail onchip space prefer dedic hardwar optim perform setassoci cach also investig provid indic amount cach conflict remov seen figur 16 16kbyte 4way associ cach 128byte cach line ibm rs6000 outperform virtual line scheme though 2way 8kbyte cach also increas significantli perform nonnumer code less effici exploit spatial local therefor perform wors numer code note experi hit time setassoci cach taken equal one cycl optimist 6 conclus paper hardwar scheme use larg cach line without usual associ flaw propos simul show effici scheme numer code nonnumer code larg virtual line allow better exploit spatial local small physic line secondari cach allow better exploit tempor local inspit increas memori traffic code exhibit perform degrad simpl softwar solut reduc memori traffic investig though prove effi cient extens test still necessari fulli valid concept underli idea virtual line scheme propos cach design provid flexibl exploit spatial tempor local current cach architectur design intend architectur base hardwar softwar optim develop provid conveni environ mani solut current investig cach bypass ing data prioriti prefetch next goal show perform current data local optim techniqu significantli enhanc proper hardwar support provid minim cach conflict exploit spatial local r supercomput perform evalu perfect benchmark strategi array manag local memori direct prefetch scalar processor integr hardwaresoftwar solut effect manag local storag highperform system comput architectur quantit approach ibm risc system6000 technolog intel i860 refer manual specul prefetch improv directmap cach perform addit small optim parallel data local site editor alpha architectur refer manual prefetch unit vector oper scalar comput cach memori data local optim algorithm empir studi array subscript data de pendend tr data local optim algorithm mip risc architectur effect onchip preload scheme reduc data access penalti alpha architectur refer manual prefetch unit vector oper scalar comput optim parallel data local specul prefetch supercomput perform evalu perfect benchmark cach memori ctr toni juan tom lang juan j navarro differencebit cach acm sigarch comput architectur news v24 n2 p114120 may 1996 kuangchih liu chungta king perform studi bounteou transfer multiprocessor sector cach journal supercomput v11 n4 p405420 dec 1997 edward h gornish alexand veidenbaum integr hardwaresoftwar data prefetch scheme sharedmemori multiprocessor intern journal parallel program v27 n1 p3570 feb 1999 weifen lin steven k reinhardt doug burger design modern memori hierarchi hardwar prefetch ieee transact comput v50 n11 p12021218 novemb 2001