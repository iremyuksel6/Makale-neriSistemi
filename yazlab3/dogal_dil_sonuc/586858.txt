check approxim comput polynomi function equat major result selftest correct deal program purport comput correct result precis relax notion correct show check program comput numer approxim correct answer type program deal comput polynomi function defin certain type function equat present result show perform approxim check selftest selfcorrect polynomi settl affirm question rais p gemmel et al proceed 23rd acm symposium theori comput 1991 pp 3242 r rubinfeld sudan proceed third annual acmsiam symposium discret algorithm orlando fl 1992 pp 2343 r rubinfeld sudan siam j comput 25 1996 pp 252271 obtain first build approxim selftest linear multilinear function show perform approxim check selftest selfcorrect function satisfi addit theorem settl question rais r rubinfeld siam j comput 28 1999 pp 19721997 case show properti use test program function robust approxim sens stabl final explor use reduct function equat context approxim selftest result implic stabil theori function equat b introduct program check introduc blum kannan bk89 order allow one use program safe without know apriori program correct input relat notion selftest selfcorrect explor blr93 lip91 notion seen power practic point view cf bw94 theoret angl cf as92 alm 92 well techniqu use usual consist test perform runtim compar output program either predetermin valu function output program dierent input order appli power techniqu program comput real valu function howev sever issu deal precis need dealt standard model consid output wrong even small margin strong make practic sens due reason follow 1 mani case algorithm intend comput approxim eg newton method 2 represent limit roundotrunc error inevit realvalu comput 3 represent fundament constant eg inher imprecis framework present glr accommod inher inevit accept small loss inform overlook small precis error detect actual bug manifest greater magnitud given function f program p purport comput f error bound jp x fxj denot p x fx appropri notion norm say p x approxim correct input x approxim result checker test p approxim correct given input x approxim selftest program test p approxim correct input approxim selfcorrector take program approxim correct input turn program approxim correct everi input domain work nite subset xed point arithmet refer nite ration domain n l precis allow n vari gener domain let denot posit neg element test use properti mani approach build selftest illustr one paradigm particularli use approach order test program p comput function f input test p satis certain properti f exampl consid function properti fx f satis one might pick random input x verifi p 2 clearli x p incorrect program howev might quit incorrect still satisfi choic random input particular exist p instanc p high probabl p satis properti random x henc pass test ii function satis properti x p agre function input thu see method use naiv yield selftest work accord specic nevertheless approach use good heurist check correct program cod91 cs91 vai93 exampl properti yield good tester consid linear properti function map ns r form random sampl conclud program p satis properti x shown p agre linear function g input blr93 rub94 call linear properti properti exhibit behavior robust properti describ formal build selftest class f function character robust properti twostep approach introduc blr93 test p satis robust properti properti test ii check p agre specic member f equal test success approach depend nding robust properti easi test lead ecient equal test properti pair hi e ns consist equat f valu function f variou tupl locat hx k ns locat pick properti hi e ns said char natur extend mod function ns let xmodk stand j modk x k 2 ns acter function famili f follow way function f member f f nonzero measur e ns instanc linear properti written f ns distribut hx 1 chosen randomli distribut 2 domain ns case hi e lin rg set linear function ns adher denit properti throughout paper howev simplic notat appropri talk distribut equal togeth instanc intuit express linear properti fx give distribut x write pair rst consid robust properti detail suppos want infer correct program domain ns allow call program larger domain ns xed function depend structur ideal would like n technic reason allow ns proper much larger superset ns particular descript size element ns polynomi descript size element ns 3 use properti selftest one must prove properti roubust inform robust properti hi e ns impli program p p probabl least 1 hx chosen distribut e ns function g 2 f agre p 1 fraction input ns case linear shown distribut e lin 11n 11n properti 2 11n ns robust 148 blr93 rub94 therefor test p satis p probabl input pick randomli e lin 11n possibl conclud p agre linear function input 2 exampl choos x 1 x 2 uniformli ns suce character linear prove robust howev rub94 use complic distribut describ 3 altern one could test program domain ns attempt infer correct program input dn 0 0 dn 0 0 larg subdomain ns ns somewhat involv denit robust given rub94 given function n ns larg enough subset ns paper say properti robust 0 1 n properti robust consid equal test recal determin p satis robust properti equal test determin p agre input specic member f instanc case linear ensur p comput specic linear function input perform equal test ensur x neither properti test equal test sucient test program howev sinc x function satis linear properti equal properti combin properti test equal test shown sucient construct selftest combin approach yield extrem ecient tester make o1 call program xed program comput homomorph eg multipl integ matric exponenti logarithm idea gener rub94 class function equat call addit theorem shown use selftest addit theorem mathemat ident form 8x addit theorem character mani use interest mathemat function acz66 cr92 g algebra use character famili function ration function x e cx doubli period function see tabl 1 exampl function equat famili function character real polynomi degre character via sever dierent robust function equat eg bfl91 lun91 alm approxim robust stabil program work nite precis properti upon tester built rare satis even program whose answer correct requir hardwarewis maxim number digit sinc involv strict equal thu test one might will pass program properti approxim satis relax test howev lead diculti approxim set 1 harder cot ax fxfi 2fxfi co sin ax sin axa fxfi 2fxfi cosh sinh ax sinh axa ax fxfy2fxfi cosh sinh ax sinh axa ax x tabl 1 addit theorem form fx analyz function famili solut robust properti 2 equal test dicult instanc obviou famili function would satisfi approxim linear properti x 2 ns approxim equal properti construct approxim selftest approach rst investig notion approxim robust properti use rst requir notion distanc two function denit 1 chebyshev norm function f domain fjfxjg domain obviou context drop given function f g distanc kf gk next dene approxim function anoth denit 2 function p approxim f domain kp fk least 1 fraction approxim robust natur extens robust properti say program satis properti approxim properti true program exact equal replac approxim equal consid linear properti program p satis properti approxim ie p fraction choic hx ns approxim robust linear impli exist function g choic 0 00 2approxim p ns gener would like dene approxim robust properti follow program p satis equat approxim choic input accord distribut e ns exist function g approxim input chosen accord e ns ii approxim p input ns function relat distribut use describ behavior p g depend requir uniformli turingcomput give formal denit approxim robust denit 3 approxim robust let hi e ns character famili function f domain ns let f 0 famili function satisfi approxim input chosen accord e ns properti hi e ns function famili f 0 approxim robust 8p pr x 1 x k 2e ns impli approxim p ns g know properti approxim robust second step analyz stabil properti ie character set function f 0 satisfi properti approxim compar f set function satisfi properti exactli hyersulam stabil linear exampl problem follow given satisfi gx domain homomorph h 0 depend size domain answer arm say properti stabl follow denit denit 4 stabil properti hi e ns function famili f ns n 0 stabl 8g satis g 0 tupl nonzero support accord e ns function h satis support accord e n 0 0 kh gkd n 0 0 properti approxim robust stabl 4 use determin whether p approxim function desir famili furthermor method approxim equal test construct approxim self tester previou work previous mani known checker extend approxim case often rather straightforward extend robust result show approxim robust howev diculti extend checker appear lie show stabil properti issu rst mention glr approxim checker mod exponenti logarithm construct domain assum close result domain said close oper rang oper subset domain instanc nite precis ration domain close addit abc 93 approxim checker sine cosin matrix multipl matrix invers linear system solv determin given domain assum close result sine cosin bw95 approxim checker oatingpoint divis given sud91 techniqu use approxim theori present test univari polynomi degre 9 left open glr whether properti use test polynomi hyperbol trigonometr function use approxim set instanc show stabil function equat obviou function equat involv divis larg numer small denomin small addit error denomin lead larg addit error output signic work stabil specic function equat stabil linear homomorph address hye41 for80 fs89 cho84 techniqu use prove result howev ceas appli domain close stronger properti stabil nonclos space call local stabil 4 associ distribut need sampleabl address skof sko83 prove cauchi function equat local stabl nite interv r problem stabil univari polynomi continu domain rst address ab83 problem local stabil r solv gaj90 see for95 survey result extend obviou way nite subset r thu use show correct selftest extend error bound obtain naiv extens optim dierent approach allow us oper ns obtain tight bound result paper answer question glr arm give rst approxim version tester rst present approxim tester linear multilinear function tight bound result appli sever function includ multipl exponenti logarithm nonclos domain next present rst approxim tester multivari poli nomial final show approxim test function satisfi addit theorem result appli mani algebra function trigonometr hyperbol function eg sinh cosh result appli nonclos discret domain sinc function equat r constraint function equat ns may happen function equat r character famili function proper subset function character function equat ns limit abil construct selftest program function due equal test perform selftest show result prove new local stabil result discret domain techniqu show stabil multilinear dier use previous 1 requir domain discret 2 requir rang complet metric space allow us appli result multivari polynomi character addit new combinatori argument employ tool approxim theori stabil theori techniqu appear gener applic cleaner work previous use selfcorrector built take advantag random selfreduc polynomi function equat blr93 lip91 exact case glr 91 employ similar idea approxim case make sever guess answer return median output show guess within correct answer high probabl median yield good answer high probabl build approxim checker function combin approxim selftest approxim selfcorrector blr93 organ section 2 address stabil properti use test linear multilinear function use result section 3 consid approxim selftest polynomi section 4 address stabil robust function equat section 5 illustr actual construct approxim selftest selfcorrector 2 linear multilinear section consid stabil robust properti use test linear multilinear nite ration domain ns result section addit use test linear multilinear function crucial result section 3 glr 91 approxim robust easi show appropri modifi proof robust rub94 involv replac exact equal approxim equal keep track error accru step proof show stabil use two type bootstrap argument rst show error bound small subset domain impli error bound larger subset domain second show error bound whole domain impli tighter error bound domain result appli give rst approxim selftest sever function ns includ multipl exponenti logarithm section 22 21 approxim linear follow dene formal mean function approxim linear denit 5 approxim linear function g approxim linear ns hyer hye41 skof sko83 obtain linear approxim approxim linear function domain r see appendix approach method extend discret domain suppos dene h 1 0approxim linear case exact linear sinc induct element ns show approach typic use prove sucienc equal test howev approxim linear case 6 0 use induct argument yield linear function h h quit unattract sinc error bound depend domain size thu problem obtain linear function h whose discrep g independ size domain nontrivi glr 91 solut given domain nite group techniqu requir domain close addit therefor work ns give brief overview scheme glr 91 point break nonclos domain exist linear h close g done glr argu sucient larg error least maximum error point x would impli even bigger error 2x contradict maxim assumpt error x crucial assumpt x 2 impli 2x 2 step fail domain close addit instead employ dierent construct techniqu obtain linear h ns given approxim linear g techniqu yield tight bound 2 error e h g instead 4 sko83 requir domain close addit import achiev best lowest constant possibl error result use section 32 constant aect error exponenti way follow lemma show construct linear function h within approxim linear function g ns lemma 6 let g approxim linear function ns let h linear ns proof prove contradict 8x 2 argument made show ex recal n greatest posit element domain note e approxim linear function assum exist point ns error greater maxim element p lie n 2s n otherwis ns would error greater 2 contradict maxim p let p eq also x 2 p n ns denit p ex note x written satisfi approxim linear properti ex 0 must error strictli less know point interv 0 q error strictli less 2 point q error strictli less put two fact approxim linear togeth sinc x 2 q 2q written q conclud point q 2q error 2 repeat argument take 0 2q rather 0 q bound error interv 0 3q 2 continu argument eventu interv contain point p mean p error 2 contradict initi assumpt ep greater 2 addit sinc e0 gener error bound ns ns lemma 7 function g approxim linear ns h e dene je n proof observ error upper bound 0 n 2s e2x also jexj je xj ns bound error ns rst 3 observ ex 4 2s 2s assum 9x 2 ns minim point p n 2s otherwis error 2p would exceed 3 point highest error ns maxim one tie consid possibl locat bound et 1 n 2s ensur e2t et et 2s 2s therefor satisfi bound et 2s therefor satisfi bound et 2 regardless lie et henc error ns bound howev e n ns contradict bound establish therefor point ns error greater argument use bound neg error reduc error bound 2 assum p minim point ns error least 2 proof similar previou stage use tighter bound ex 2s stay case 2 therefor error exceed contradict follow special case prove stabil result linear corollari 8 linear properti ns ns proof suppos function g approxim linear ns set h n 7 uniqu dene linear h intuit drive us set h n proof corollari 8 follow consid follow function g n integ part number easi see gxi gxgi set h 1 obtain h n kg hk grow function n way bound error point follow exampl show error bound obtain corollari 8 use techniqu tight shown construct linear function h kh gk 2 show function g given method construct h asymptot approach bound dene g follow 3xn easi see g approxim linear x construct set 0 zero function howev kg larg enough n 22 approxim multilinear section focu attent multilinear function multivari function multilinear linear one input input xed multilinear function k variabl call klinear function exampl bilinear function multipl bilinear properti state concis distribut properti multipl respect addit special case multilinear natur extens class function class approxim multilinear function formal dene denit 9 approxim multilinear kvariat function g approxim klinear k ns approxim linear ns variabl instanc approxim bilinear 8x 1 gener lemma 7 approxim klinear function let g approxim klinear function h multilinear function uniqu dene condit h n g e approxim klinear function sinc g take k input ns consid input g coordin set possibl ktupl input g form 2n dimens k show point theorem 10 approxim klinear properti k word function g approxim klinear k ns exist klinear h ns kh gk 2k proof h dene e n first argu point one coordin dierent n fix k 1 input n hardwir g vari one say x oper transform g approxim klinear function x approxim linear function x lemma 7 function error 2 ns therefor je n next consid point two coordin dierent n consid without loss gener input b n result argu know e n 2 xing input 2 k b n vari rst input lemma 7 jea b n j 4 2 ns via symmetr argument bound error 4 two input dierent n continu way shown input error 2k follow theorem show error reduc 1 constant 0 impos multilinear condit larger domain 0 tting multilinear function h jd 0 d2ke note doubl domain size involv ad one bit represent domain element theorem 11 0 approxim multilinear properti k stabl proof theorem 10 g 2kclose klinear h 2kn x x coordin except x argu ith coordin ms rst show jexj dm jexj m2 observ note x 2 m2 2x 2 ms therefor function satisfi exex e2x impli jexj 2 thu gener maximum error m2 error 2kn 2k error ns 1 choic paramet multilinear case make similar argument use point least one coordin x within smaller half axi note sinc h multilinear also symmetr test program purportedli comput polynomi tempt 1 interpol polynomi randomli chosen point 2 verifi program approxim equal interpol polynomi larg fraction input sinc degre kvariat polynomi lead exponenti run time furthermor obviou error bound independ domain size obtain test use evenli space interpol ident rs96 0 ident comput method success dierenc never explicitli interpol polynomi comput program thu give particularli simpl ecient od 2 oper test show interpol ident approxim robust modifi robust theorem rs92 section 33 proof stabil interpol ident section 32 howev use character polynomi term multilinear function previous appli program check turn allow us use result stabil multilinear section 22 idea stabil theori section 34 extend techniqu multivari polynomi 31 preliminari section present basic denit theorem use dene standard forward dierenc oper let r z r 1 fx follow simpl fact concern oper fact 12 follow true dierenc oper r 1 r linear rf 2 r commut r 1 3 r 1 2 let x k denot z x kari symmetr f let f diagon restrict use three dierent character polynomi mo34 dji69 follow equat valid input f must 5 fact 13 follow equival 1 8x 2 k x k 2 3 exist symmetr klinear function f k 0 k 8x 2 f follow denit motiv notion use evenli unevenli space point interpol denit 14 strong approxim polynomi function g call strongli approxim degre polynomi 8x gxj denit 15 weak approxim polynomi function g call weakli approxim degre polynomi 8x n x gxj 32 stabil polynomi first prove function strongli approxim polynomi polynomi 2 lg 0approxim next show function weakli approxim polynomi domain coarser subdomain function strongli approxim polynomi combin two show function weakli approxim polynomi domain subdomain 5 due denit r oper input may sometim slip outsid domain stipul equat must hold function approxim polynomi use theorem 11 bring error arbitrarili close assum hypothesi larg enough domain order pass program err 0 need set strongli approxim case one must care dene polynomi h close g instanc dene h base valu g point work proceed modifi techniqu ab83 gaj90 use follow fact fact 16 function f symmetr klinear r 1 f follow theorem show stabil strong approxim polynomi properti theorem 17 strong approxim polynomi properti nd2 ns stabl word g strongli approxim degre polynomi nd2 degre polynomi h kg h k dn o2 lg proof hypothesi g strongli approxim degre polynomi nd2 fact xt 1 rest proof use modi hypothesi work ns induct degre modi hypothesi 8x 2 constant done suppos lemma hold degre strictli less 1 modi hypothesi use fact 12 modi hypothesi jr 1 0 symmetri dierenc oper eect approxim symmetr dlinear function ns say gt multilinear guarante symmetr dlinear h kg hk 2d let x x 2 ns 8x xj denit g 0 xj triangl inequ xj denit r xj denit g denit h modi hypothesi g appli induct hypothesi g 0 satis hypothesi larger error induct guarante exist degre 1 polynomi h 1 kg 0 h 1 k e 1 0 set h fact 13 character polynomi h degre polynomi e unwind recurr nal error kg h weakli approxim case rst need follow use fact dji69 help us go equal space point unequ space point fact use fact obtain follow theorem let dg theorem 19 g weakli 2 d1 approxim degre polynomi nd1sd1 g strongli approxim degre polynomi ns proof choic paramet 0 therefor jr d1 33 approxim robust polynomi section show interpol equat degre polynomi sens approxim robust result subsect modic exact robust polynomi given rs92 let d1 selftest p ns use follow domain domain use technic reason becom appar proof theorem section use pr x2d denot probabl event x chosen uniformli domain 1 d2n 2 3 assum p satis follow properti test sampl 1 pr 2 0 j 3 0 f obtain follow theorem show approxim robust polynomi let e ns distribut ip fair threesid die outcom 2 f1 2 3g choos input accord distribut given ith equat let ns union domain use properti theorem 20 interpol equat input pick accord distribut approxim robust rest section devot prove theorem markov inequ gs denit properti p easi show p 2approxim g theorem 21 program p satis three properti 2 set prove g weakli approxim polynomi let p otherwis two domain b subset univers x let call domain close b 1 follow fact simpl fact 22 x 2 d2n domain j fx x domain ij fx follow lemma show sens g wellden lemma 23 x 2 d2n pr proof consid l xed 0 j use properti p jk fxjt 2 close fact 22 get prp sum 0 note use lemma 45 show relax twice error probabl lower bound probabl rst part lemma second part lemma follow rst via simpl averag argument follow theorem complet proof g weakli approxim degre polynomi theorem 24 x 2 d2n 8i pr jr d1 proof theorem 21 lemma 23 close ij fx impli sum latter express put togeth rst part lemma second part follow rst part fact j ft appropri choic 1 2 g weakli 2 d3 approxim degre polynomi ns g 2approxim p ns 34 multivari polynomi follow approach illustr bivari polynomi easili gener multivari polynomi easi show approxim robust hold interpol equat rs96 use section 33 axi parallel line xed horizont line set point l zg vertic line dene analog consequ approxim robust bivari function gx strongli approxim degre polynomi along everi horizont vertic line use consequ prove stabil character use fx bivari polynomi assum degre x rang space degre univari polynomi x valu g x strongli approxim degre polynomi use univari case theorem 17 exact degre polynomi p x x gx 2 lg p x construct function g 0 x xed x ie vertic line use r 1 d1 gx 0 bivari function along everi horizont line exact degre polynomi along everi vertic line strongli 0 approxim degre polynomi interpret g 0 x g 0 x use idea univari case conclud rt symmetr approxim dlinear function use fact g 0 x rest argument theorem 17 goe proof approxim linear lemma multilinear theorem 10 assum rang metric space true pd x say chebyshev norm result follow character bivari polynomi 4 function equat extend techniqu lemma 7 addit theorem fx straightforward sinc g arbitrari function order prove approxim robust section 43 sever relat properti g requir prove g satis individu one tediou howev notion modulu continu approxim theori give gener approach problem show bound modulu continu impli bound quantiti g requir stabil g shown care induct techniqu base canon gener element ns section 42 scope techniqu limit addit theorem also show jensen equat approxim robust stabl section 424 41 preliminari addit theorem assum g algebra symmetr function latter true gener technic assumpt rub94 need notion smooth g follow notion wellknown approxim theori lor66 tim63 denit 25 moduli continu modulu continu function f dene domain follow function 2 0 modulu continu function f follow function x 2 0 partial moduli continu function f follow function 2 sup sup present fact easili prove fact 26 follow true modulu continu 1 2 3 f 4 f 0 deriv f exist bound 5 7 f symmetr f 8 b x partial deriv f respect x f f need notion invers g gx sinc g symmetr g 1 2 denot g 1 z exampl wherev necessari illustr scheme use function equat solut function equat constant c follow fact tit47 use locat maxima analyt function fact 27 maximum modulu principl f analyt compact region f attain extremum boundari bound rectangl analyt henc fact 27 attain maximum boundari g 2 c 1 l u ie continu dierenti g 0 decreas function x fact 27 kg 0 attain maximum therefor use 26 42 stabil function equat section prove assumpt function g satis function equat approxim everywher close function h satis function equat exactli everywher function equat form exampl gx valid x function h hx valid x hx 0 gx valid x domain valid valu x well relationship 0 discuss later ns follow section show construct function h close g satisfi particular function equat given h let ex denot consid case c 1 rst show obtain h obtain bound ex conclud h satis function equat everywher also approxim g ie function equat stabl call x even resp odd x even resp odd 421 c 1 rst construct h set h 1 determin h valu fact h satis function equat obtain relationship error x 2x use function equat lemma 28 e2x cex proof use denit modulu continu jh 1 explor relationship ex 1 ex simplic let h j constant proof ex j show scheme bound ex x 1 scheme thought enumer strategi step process certain constraint equat satis first show canon list element ns construct binari tree k follow manner node tree label element ns root tree label 1 x label node 2x label left child 2x alreadi tree x label right child x alreadi tree use induct prove k contain element ns induct k tree obviou suppos requir build k follow everi leaf label k 1 left child 2x ad left child right child 2x ad assumpt k 1 k node n2 moreov left child gener even element 2 k 1 right child gener odd element 2 k corollari k x even except root x left child x odd x right child canon way list element ns aris preorder travers k order use induct argument lemma 31 x ns x even ex 1c proof prove induct preorder enumer tree given order let x next element enumer preorder list parent alreadi enumer henc error known even corollari 30 left child henc gener 2y oper henc ey 2 induct hypothesi togeth lemma 28 yield ex cey preserv induct hypothesi odd corollari 30 right child henc gener induct hypothesi togeth lemma 29 1 yield ex dey 1c preserv induct hypothesi yield assumpt made c follow theorem theorem 32 addit theorem stabl exampl h 1 h 0 thu 1 theorem 32 ex 4 x ns n power 2 argu follow manner proof see use specic valu x approxim function equat first extend ns nearest power 2 get 0 dene valu g new point even x 2y let odd x thought new assumpt g satis exactli ie without error use lemma 31 conclud linear h 0 2 close g henc h close g even ns argu ns pick pivot point ns 0 simplic h therefor e x 1 error longer bound case c 1 let cd see structur k maximum error occur 2 k 1 simpl induct depth tree error given e e 1 obtain constant error bound geometr summat otherwis obtain 422 c 1 case requir addit assumpt dene quantiti note f c 0 1 addit theorem use x h 1 wellden let rst obtain relationship error x 2x use addit theorem lemma proof lemma 28 jh 1 denit assumpt get ex simplic let h 3 x let h 3 constant follow lemma prove easili lemma 34 ex de 2 k construct adopt strategi similar one previou section construct binari tree k follow manner node tree label element ns root tree label 2 k x label node x even x2 label left child x2 alreadi tree 2 k x label right child 2 k x alreadi tree easi see k contain element ns corollari except root x left child x x right child use preorder enumer ns use k follow induct argument lemma 36 x 1 ex 2c 0 proof proof induct preorder enumer tree given order use lemma 34 corollari 35 similar avor proof lemma 31 yield assumpt c follow theorem theorem 37 addit theorem case aris linear h 1 2 use theorem get weaker bound ex 3 oppos 2 corollari 8 similar techniqu previou section use argu ns case 1 handl scheme previou section 423 case mean h word fact 26 kh 0 1 fact 27 maximum occur boundari domain henc test look subdomain maximum less 1 424 jensen equat jensen equat follow 8x 2 ns f fxfi solut function equat ane linear ie constant b jensen equat prove approxim robust modifi proof robust rub94 show modi version techniqu prove stabil 8x 2 ns g xy gxgi prove stabil equat construct ane linear h note two point necessari sucient fulli determin h set h n lemma 38 e xy ex2 proof e follow corollari immedi corollari proof sinc construct slightli dierent tree k case root k label n x label node x2 integr alreadi present label left child n integr alreadi present label right child easi see k contain element ns theorem 40 jensen equat proof proof induct enumer order k given say breadthrst travers clearli root e n 2 ex 2 consid children left resp right child exist x2 resp 2 thu corollari 39 e x 43 approxim robust function equat glr 91 rs92 test program 2p make conclus ns relationship p n determin later domain g analyt therefor consid case f bound 2p ie g famili function f satisfi follow condit 1 pr x2d 2p 2 pr x2d 2p 3 pr xy2d2p 4 pr note membership g easi determin sampl dene distribut ns p satis function equat e ns probabl least 1 p also satis follow four properti 1 pr xy2dp 2 pr xy2d ps 3 pr xy2d ps 4 pr x2dn y2dp e ns dene ip fair foursid die outcom 2 f1 2 3 4g choos input accord distribut given ith properti recal fact 26 b show follow theorem 41 addit theorem distribut e ns approxim robust dene x 2 ps inequ denit g properti p easi show follow lemma 42 pr x2dn gx p x 1 2 proof consid set element ns pr y2dp p x gp x 1 fraction element 2 contradict hypothesi p pr x2dn y2d ps p x gp rest least half ys p x gp dene g median ys ps element simplic notat let p x denot p x x 2 ps g xy denot gp x p x 2 ps sinc g xed drop g modulu continu let fact 43 x 2 2n pr y2d ps x lemma 44 x 2 2n pr proof pr note x z z random error rst step due comput p x 0 equat hold probabl 1 hypothesi 3 bound g x zz also hold probabl least 1 2 hypothes 3 4 error 0 loss 2 probabl x z ps fact 43 next line rewrit similar manner nal equat hold probabl least 1 hypothesi 2 error bound 0 bound random point hold probabl least 1 8 hypothes b p make error 0 henc total error fact 26 equal hold probabl least 1 12 2 follow lemma help us bound error ks95 lemma random graph edg insert probabl graph probabl randomli chosen node largest cliqu proof let p crucial observ cliqu number g 2 least big maximum degre g henc random node x probabl x present largest cliqu g 2 probabl x connect maximum degre vertex say g let degre vertic g 1 p degre 1 probabl x edg 1 p probabl edg two random node 1 p lemma follow follow show sens g wellden lemma 46 x 2 2n pr y2d ps gx 2 0 g x yy proof follow x 2 2n pr yz2d ps g x yy 0 g x zz use lemma 45 g denot graph z edg g x yy 0 g x zz g 2 denot graph z edg g x yy 2 0 g x zz use lemma 45 number element 2 0 away largest cliqu 2 thu least 1 2 element within 2 0 12 sinc gx median lemma follow follow theorem complet proof g satis addit theorem approxim theorem 47 probabl least 1 g proof pr uv2d ps 0 g uxi u lemma 46 rst equal hold probabl 1 error 2 bound g ux u hold probabl least 1 4 make error 2 fact 26 second third equal alway true fourth equal hold probabl least 1 hypothesi 1 p error accru 0 0 bound p probabl least 1 10 make error 0 0 fth equal also hold probabl least 1 2 hypothesi 1 p error accru 0 bound p probabl least 1 4 nal equal hold probabl least 1 12 2 lemma 46 error thu total error 9 g fact 26 henc use fact 26 0 b 156 p 11n 1 56 9 0 lemma true probabl 1 case exampl function alreadi calcul b henc 5 approxim selftest selfcorrect 51 denit follow modic denit glr captur idea approxim check selftest selfcorrect formal manner let p program f ns input p condenc paramet denit 48 approxim result checker f probabilist oracl program given p x 2 ns satis follow 0approxim f ns prt p output pass 1 2 output fail 1 denit approxim selftest f probabilist oracl program given p satis follow 0approxim f ns prt p output pass 1 2 p 2 approxim f ns prt p output fail 1 observ properti approxim robust ns n 0 stabl possibl equal test function famili satisfi properti possibl construct denit 50 0 ns ns approxim selfcorrector f probabilist oracl program sc p f given p approxim f ns x 2 ns output sc p f x prsc p note selfcorrector yield 52 construct approxim selfcorrector illustr build approxim selfcorrector function equat approach subsect follow blr93 glr selfcorrector sc p f input x construct follow obtain condenc 1 choos random point 2 let sc p f x median gp assumpt call p within f probabl greater 34 case valu gp g away fx see section 41 b g use cherno bound see least half valu gp 0 away fx thu median sc p f x also 0 away fx degre polynomi similar selfcorrector work order pass good program almost best 0 possibl use evenli space interpol equat sinc coecient interpol equat e use interpol equat use evenli space point seem requir 0 depend size domain 53 construct approxim selftest follow selftest function satisfi addit theorem fx comput function famili f ns use notat section 41 obtain condenc choos random point x omaxf1 48g ln 1 verifi assumpt program p begin section 43 p pass test use cherno bound approxim robust stabil properti guarante p approxim function f next perform equal test ensur p approxim given f 2 f assum f 1 modifi proof section 42 one show constant sc p 1 error sc p f f bound constant rest ns sinc sc p approxim p correct selftest follow polynomi use random sampl verifi condit program p requir approxim robust given begin section 33 p satis condit use approxim robust stabil evenli space interpol equat p guarante approxim degre polynomi h perform equal test determin p approxim correct polynomi f assum tester given correct valu polynomi f evenli space point x use selfcorrector sc p f section 52 ksc p equal tester test x call input x bad jfx hxj x bad jfx sc p x sampl point x bad test would fail dene bad interv sequenc consecut bad point test pass bad interv domain length 2n longer interv would contain least one sampl point two sampl point immedi preced follow bad interv satisfi jfx hxj 00 impli must local maximum f h degre polynomi insid bad interv sinc extrema f h bad interv total number bad point d2n 1 thu 1 fraction ns sc p f error argument gener kvariat case partit kdimension space cube 54 reduct function equat section explor idea use reduct among function bk89 abc obtain approxim selftest new function consid pair function f interreduc via function equat suppos approxim self tester f 1 let exist continu function f f 1 f 2 given program p 2 comput f 2 construct program p 1 comput selftest p 1 suppos p 1 close f 1 larg portion domain everi x p 1 x close f 1 x bound deviat bound righthand side constant least portion domain bound maximum deviat 0 p 2 f 2 idea use give simpl altern approxim selftest function like sin x co x sinh x cosh x reduc e x suppos given want approxim selftest function f 2 given f 2 x euler given program p 2 supposedli comput build program p 1 e ix given p 2 co x selftest p 1 let rang f 1 equip follow word case jp 1 x e ix metric ensur p 1 erron x p 2 erron least one x x32 altern cancel error suppos p 1 say fraction bad domain p 1 error occur place p 2 invok henc fraction domain p 2 bad rest domain p 1 1 close metric impli p 2 also 1 close f 2 thu p 2 similarli suppos p 1 good least 2 fraction domain p 1 2 close f 1 thu point domain least one point p 2 call denit 2 2close f 2 thu p 2 therefor approxim selftest f 2 approxim selftest f 1 given glr acknowledg would like thank jano aczel u waterloo peter borwein simon fraser u gian luigi forti u milan sivakumar suni bualo madhu sudan ibm yorktown nick trefethen cornel u suggest pointer r lectur function equat applic function bound nth dierenc check approxim comput real proof veri probabilist check proof new character np design program check work softwar reliabl via runtim resultcheck journal acm volume44volumeissue6issuepages826849pag ection pentium divis bug function equat model scienc engin stabil problem gener cauchi type function equat perform evalu program relat real gamma function use taylor seri test accuraci function program represent theorem exist stabil theorem class function equat stabil homomorph complet local stabil function equat character polynomi func tion stabil linear function equat new direct test approxim function power interact grundlegend eigenschaften der polynomischen opera tionen robust function equat applic program test ing test polynomi function e robust character polynomi applic program test sullapprossimazion dell applicazioni localment person commun theori approxim function real variabl theori function algebra method hardwaresoftwar test tr