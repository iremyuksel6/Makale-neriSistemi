automat accur costbound analysi highlevel languag paper describ languagebas approach automat accur costbound analysi approach consist transform build costbound function presenc partial known input structur symbol evalu costbound function base input size paramet optim make overal analysi effici well accur sourcelanguag level calcul cost bound express term primit cost paramet paramet obtain base languag implement measur conserv approxim yield accur conserv approxim time space bound implement approach perform number experi analyz scheme program result help confirm accuraci analysi b introduct analysi program cost run time space consumpt import realtim system embed system interact environ compil optim perform evalu mani comput applic extens work support part nsf grant ccr9711253 onr grant n0001499 10132 n000140110109 yanhong liu address comput scienc depart state univers new york stoni brook stoni brook ny 117944400 gustavo gomez address comput scienc depart indiana univers bloomington 474057104 correspond author yanhong liu email liucssunysbedu tel 6316328463 fax 6316328334 url httpwwwcssunysbeduliu studi mani eld comput scienc algorithm 25 16 17 53 program languag 50 26 41 44 system 46 37 43 42 particularli import mani applic realtim system embed system abl predict accur time bound space bound automat ecient particularli desir abl highlevel languag 46 37 38 analyz system run time sinc shaw propos time schema highlevel languag 46 number peopl extend analysi presenc compil optim 37 12 pipelin 20 28 cach memori 4 28 14 etc howev remain obviou seriou limit time schema even absenc lowlevel complic inabl provid loop bound recurs depth execut path automat accur analysi 36 3 exampl inaccur loop bound caus calcul worstcas time much 67 higher measur worstcas time 37 manual way provid inform potenti even larger sourc error addit inconveni 36 variou program analysi method propos provid loop bound execut path 3 13 19 21 amelior problem complet solv appli class program use approxim crude analysi similarli loop bound recurs depth need also space analysi 38 paper describ languagebas approach automat accur costbound analysi approach combin method techniqu studi theori languag system call languagebas approach primarili exploit method techniqu static program analysi transform approach consist transform build costbound function presenc partial known input structur symbol evalu costbound function base input size paramet optim make overal analysi ecient well accur sourcelanguag level describ analysi transform algorithm explain work calcul cost bound express term primit cost paramet paramet obtain base languag implement measur conserv approxim yield accur conserv approxim time space bound cost analysi current includ cach analysi implement approach perform number experi analyz scheme program result help conrm accuraci analysi describ prototyp system alpa well analysi measur result approach gener sens work multipl kind cost analysi main analysi sum cost term dierent oper perform give upper bound kind oper arithmet oper data eld select constructor alloc variat analyz stack space live heap space output size etc analyz lower bound well upper bound basic idea also appli program languag rest paper organ follow section 2 outlin languagebas ap proach section 3 4 5 present analysi transform method techniqu section 6 describ implement experiment result section 7 compar relat work conclud languagebas approach 21 cost cost bound languagebas costbound analysi start given program written highlevel languag c lisp rst step build cost function take input origin program return cost place addit origin return valu done easili associ paramet program construct repres cost sum paramet base semant construct 50 10 46 call paramet describ cost program construct primit cost paramet calcul actual cost bound base cost function three dicult problem must solv first sinc goal calcul cost without given particular input calcul must base certain assumpt input thu rst problem character input data ect cost function gener due imperfect knowledg input cost function transform costbound function algorithm analysi input character size accommod requir manual semiautomat transform cost time space function 50 26 53 analysi mainli asymptot primit cost paramet consid independ input size ie constant comput iter recurs whatev valu primit cost paramet assum second problem aris theoret challeng optim costbound function close form term input size 50 10 26 41 17 7 although much progress made area close form known subclass function thu optim automat done analyz gener program system input character indirectli use loop bound execut path program inform must gener provid user 46 37 36 28 even though program analys help case 3 13 19 21 close form term paramet bound obtain easili cost function isol third problem interest system research obtain valu primit cost paramet depend compil runtim system oper system machin hardwar recent year much progress made analyz lowlevel dynam factor clock interrupt memori refresh cach usag instruct schedul parallel architectur time analysi 37 4 28 14 nevertheless inabl comput loop bound execut path automat accur led calcul bound much higher measur worstcas time programminglanguag area rosendahl propos use partial known input structur 41 exampl instead replac input list l length n done algorithm analysi annot loop number relat n done system simpli use input list n unknown element call paramet n describ partial known input structur input size paramet cost function transform automat costbound function control point decis depend unknown valu maximum cost possibl branch comput otherwis cost chosen branch comput rosendahl concentr prove correct transform assum constant 1 primit cost paramet reli optim obtain close form term input size paramet close form obtain costbound function 22 languagebas costbound analysi combin result theori system explor method techniqu static program analysi transform studi languagebas approach comput cost bound automat ecient accur approach three main compon first use automat transform construct costbound function origin program base partial known input structur result function take input size paramet primit cost paramet argument caveat costbound function might termin howev nontermin occur recursiveit structur origin program depend unknown part given partial known input structur comput worstcas cost bound ecient without reli close form optim costbound function symbol respect given valu input size paramet base partial evalu increment comput symbol evalu alway termin provid costbound function termin result function express cost bound count dierent oper perform cost kind oper denot primit cost paramet third compon consist transform enabl accur cost bound comput lift condit simplifi condit inlin nonrecurs func tion transform appli origin program costbound function construct may result larger code size allow subcomput base control condit merg lead accur cost bound comput ecient well approach gener three compon develop base gener method techniqu particular compon meant new analysi transform combin applic automat accur costbound analysi highlevel languag new result cost bound primit cost paramet obtain base languag implement measur conserv approxim give accur conserv approxim time space bound implement analys transform subset scheme 2 11 1 dialect lisp transform done automat cost bound express oper count comput ecient accur exampl program analyz includ number classic sort program matrix comput program variou list process program also estim approxim bound actual run time measur primit cost paramet run time use control loop calcul accur bound heap space alloc constructor program base number byte alloc constructor compil use function subset scheme three reason function program languag togeth featur like automat garbag col lection becom increasingli wide use yet work calcul actual run time space function program lack much work done analyz transform function program includ complex analysi use estim actual run time space ecient accur well analys transform develop function languag appli improv analys imper languag well 52 analys transform perform sourc level allow implement independ compil underli system allow analysi result understood sourc level 23 languag use rstorder callbyvalu function languag structur data primit arithmet boolean comparison oper condit bind mutual recurs function call program set mutual recurs function denit express e given grammar 1 e v variabl refer primit oper bind express applic binari primit oper chang inx prex notat depend whichev easier present follow lisp scheme use 1 keyword taken ml 35 implement support syntax scheme syntax consh construct list head h tail use carl cdrl select head tail respect list l use nil denot empti list use nulll test whether l empti list exampl program select least element nonempti list els let carx carx els end use least small run exampl present variou analysi result also use sever exampl insert sort select sort merg sort set union list revers standard lineartim version revers append standard quadratictim version even though languag small sucient power conveni write sophist program structur data essenti record pascal struct c constructor applic ml condit bind easili simul condit statement assign recurs simul loop also see cost analysi presenc array pointer fundament harder 37 cost program construct count similar way cost con struct exampl access array element ai cost access oset element address nalli get valu address note side eect caus featur often caus analysi dicult 9 22 pure function languag higherord function lazi evalu import cost function accommod featur studi 49 44 symbol evalu optim describ appli well construct costbound function 31 construct cost function rst transform origin program construct cost function take origin input primit cost paramet argument return cost straightforward base semant program construct given origin program add set cost function one origin function simpli count cost origin program execut algorithm given present transform c origin program call transform c e recurs transform subexpress exampl variabl refer transform symbol c varref repres cost variabl refer condit statement transform cost test plu condit true cost true branch otherwis cost fals branch plu cost transfer control use cf denot cost function f program c44 variabl refer data construct c e primit oper c e els bind function call c e appli transform program least obtain function least origin given cost function cleast inx notat use addit unnecessari parenthes omit note variou cs inde argument cost function cleast omit argument posit eas read els c transform similar local cost assign 50 stepcount function 41 cost function 44 etc work transform extend method bind make primit cost paramet explicit sourcelanguag level exampl primit oper p given dierent symbol c p constructor c given dierent symbol c c note cost function termin appropri sum primit cost paramet origin program termin run forev sum inniti origin program termin desir mean cost function 32 construct costbound function character program input captur cost function dicult autom 50 26 46 howev partial known input structur provid natur mean 41 special valu unknown repres unknown valu exampl captur input list length n follow partial known input structur use listn els consunknown listn 1 similar structur use describ array n element matrix mbyn element complet binari tree height h etc sinc partial known input structur give incomplet knowledg input origin function need transform handl special valu unknown particular primit function p dene new function f p f p v return unknown v unknown return pv usual otherwis exampl unknown unknown els v 1 v 2 also dene new function lub denot least upper bound take two valu return precis partial known structur valu conform exampl unknown els els unknown also cost function need transform comput upper bound cost truth valu condit test known cost chosen branch comput normal otherwis maximum cost branch comput transform b given embodi algorithm b e transform express origin function b c transform express cost function use uf denot function f extend valu unknown use cbf denot costbound function f program b44 variabl refer data construct primit oper els v e 0 function call primit cost paramet els v e 0 appli transform function least cleast yield function uleast cbleast function f p primit oper p function lub given share code present whereclaus make code smaller els v e 1 els e 2 end let els v f car x els end end els v e 1 els e 2 end c els v c car result costbound function take argument partial known input structur listn take argument input size paramet n therefor obtain result function take argument input size paramet primit cost paramet comput accur cost bound possibl transform c b take linear time term size program extrem ecient also seen prototyp system alpa note result costbound function might termin occur recurs structur origin program depend unknown part partial known input structur trivial exampl partial known input structur given unknown correspond costbound function recurs function termin sinc origin program cost innit resourc worst case modifi analysi detect nontermin mani case exampl 27 exampl give unknown recurs costbound function nontermin trivial detect sinc argument recurs call would remain unknown optim costbound function section describ symbol evalu optim make comput cost bound ecient transform consist partial evalu realiz global inlin increment comput realiz local optim rst point costbound function might extrem ineci evalu given valu paramet fact worst case evalu take exponenti time term input size paramet sinc essenti search worstcas execut path input satisfi partial known input structur 41 partial evalu costbound function practic valu input size paramet given almost applic timeanalysi techniqu use system requir loop bound user time bound comput gener possibl obtain explicit loop bound automat accur implicitli achiev desir eect evalu costbound function symbol term primit cost paramet given specic valu input size paramet evalu simpli follow structur costbound function specic control structur determin condit branch make recurs function call usual primit oper sum primit cost paramet maximum among altern sum easili done symbol thu transform inlin function call sum primit cost paramet symbol determin condit branch take maximum sum among possibl branch symbol evalu e dene perform transform take argument express e environ variabl bind variabl map valu return result symbol valu contain primit cost paramet evalu start applic costbound function partial unknown input structur eg cbleastlist100 start empti environ assum add function symbol sum argument function symbol take maximum argument variabl refer look bind v environ primit cost paramet e data primit bind v valu e 1 environ function call e f dene exampl appli symbol evalu cbleast list size 100 obtain follow result symbol evalu exactli special partial evalu fulli automat comput accur cost bound possibl respect given program structur alway termin long costbound function termin symbol evalu given valu input size paramet ineci compar direct evalu given valu input size paramet particular primit cost paramet even though result function take virtual constant time given valu primit cost paramet exampl directli evalu quadratictim revers function use append oper input size 20 take 096 millisecond wherea symbol evalu take 670 millisecond hundr time slower propos optim greatli speed symbol evalu 42 avoid repeat summat recurs symbol evalu global optim costbound function volv evalu summat symbol primit cost paramet within function denit perform repeatedli comput recurs thu speed symbol evalu rst perform summat preprocess step specic creat vector let element correspond primit cost paramet transform given perform optim use vcbf denot transform costbound function f oper vector use function add v comput componentwis sum argument vector use function comput componentwis maximum argument vector program s44 primit cost paramet c creat vector 0s except compon correspond c set 1 other c let v follow vector primit cost paramet appli transform function cbleast yield function vcbleast compon vector correspond compon v inx notat v use vector addit els v e 1 els e 2 end 2 0 0 0 els v els costbound function cbleastx simpli dot product vcbleastx v transform increment comput recurs avoid repeat summat fulli automat take time linear term size costbound function result optim drastic speedup evalu exampl optim symbol evalu quadratictim revers input size 20 take 255 millisecond direct evalu take 096 millisecond result less 3 time slowdown 260 time faster symbol evalu without optim make costbound function accur loop recurs aect cost bound accuraci cost bound calcul also depend handl condit origin program ect costbound function condit whose test result known true fals symbolicevalu time appropri branch chosen branch may even take longer consid worstcas cost major sourc accuraci worstcas bound condit whose test result known symbolicevalu cost need take maximum cost among altern case would produc inaccur cost bound test condit one subcomput impli test condit anoth subcomput exampl consid variabl v whose valu unknown comput cost bound e 1 directli result least cf cf ibonacci2000 howev consid two realiz execut path know worst case cf ibonacci2000 plu small constant known falsepath elimin problem 3 two transform lift condit simplifi condit appli sourc program construct costbound function allow us achiev accur analysi result function denit former lift condit outermost scope test depend latter simpli condit accord lift condit exampl lift condit e 1 obtain simplifi condit two occurr e 2 f ibonaccis2000 2 respec tive obtain 2 facilit transform inlin function call function dene recurs power transform depend reason use simplifi condi tional studi mani program transform method 51 45 47 18 32 least syntact equal use identi obviou sourc inac curaci optim also speed symbol evalu sinc obvious infeas execut path search transform implement appli mani test program even though result program analyz accur ecient perform separ measur major reason exampl program contain condit test impli condit test simpl transform exampl mani power program optim techniqu especi function program use make costbound function accur well ecient plan explor optim measur eect experi program note transform sourc program aim make cost bound function accur ecient optim sourc program even though make sourc program faster also make correspond costbound function faster two goal dierent optim sourc program meant produc dierent program smaller cost cost analysi meant analyz accur cost given program make use techniqu make costbound analysi ecient accur perform overal costbound analysi appli follow transform order sourc program lift condit simplifi condit section 5 construct cost function costbound function section 3 precomput repeat local summat perform global symbol evalu section 4 6 implement experiment implement analysi approach prototyp system alpa automat languagebas perform analyz perform larg number experi obtain encourag good result 61 implement experiment result implement subset scheme 2 11 1 editor sourc program implement use synthes gener 40 thu easili chang syntax sourc program exampl current implement support syntax use paper scheme syntax construct costbound function written ssl simpl function languag use synthes gener lift condit simplifi condit inlin nonrecurs call also implement ssl symbol evalu optim written scheme figur 1 give result symbol evalu costbound function six exampl program input size 10 2000 exampl second row gure mean insert sort input size 10 costbound function last column list sum everi row set union exampl use input argument given size number gure character variou aspect exampl contribut actual time space bound discuss veri number also exact worstcas count exampl insert sort input size 10 inde function call made worstcas execut worstcas count veri use modi evalu experi show costbound function give accur cost bound term count dierent oper perform figur 2 compar time direct evalu costbound function primit cost paramet set 1 time optim symbol evalu obtain exact symbol count figur 1 measur taken sun ultra 1 167mhz cpu 64mb main memori includ garbagecollect time time without garbagecollect time 1 faster shown experi show optim costbound function allow symbol evalu time slower direct evalu rather hundr time slower merg sort costbound function construct use algorithm paper take sever day evalu input size 50 larger special simpl optim done obtain number figur 1 name let costbound function merg avoid base case long possibl use size list place list unknown result symbol evalu take second optim yet implement perform automat exampl take 27 hour evalu costbound function note small input symbol evalu take rel much time direct evalu due rel larg overhead vector setup input get larger symbol evalu almost fast direct evalu exampl exampl size varref nil con null car cdr let call total insert 200 120401 201 20100 20301 40000 20100 19900 40201 0 20300 301504 1000 3002001 1001 500500 501501 1000000 500500 499500 1001001 0 501500 7507504 2000 12004001 2001 2001000 2003001 4000000 2001000 1999000 4002001 0 2003000 30015004 select 200 220501 201 20100 40401 79800 80000 39800 80201 20100 40400 621504 500 1376251 501 125250 251001 499500 500000 249500 500501 125250 251000 3878754 1000 5502501 1001 500500 1002001 1999000 2000000 999000 2001001 500500 1002000 15507504 2000 22005001 2001 2001000 4004001 7998000 8000000 3998000 8002001 2001000 4004000 62015004 200 19526 598 3089 7372 5779 4832 1345 8717 0 5428 56686 1000 124710 2998 19953 45900 37907 30928 8977 54877 0 33924 360174 2000 273422 5998 43905 99804 83811 67856 19953 119757 0 73852 788358 set union 20 2162 20 20 441 440 420 400 861 20 440 5224 50 12902 50 50 2601 2600 2550 2500 5151 50 2600 31054 100 50802 100 100 10201 10200 10100 10000 20301 100 10200 122104 200 201602 200 200 40401 40400 40200 40000 80601 200 40400 484204 300 452402 300 300 90601 90600 90300 90000 180901 300 90600 1086304 500 1254002 500 500 251001 251000 250500 250000 501501 500 251000 3010504 1000 5008002 1000 1000 1002001 1002000 1001000 1000000 2003001 1000 1002000 12021004 2000 20016002 2000 2000 4004001 4004000 4002000 4000000 8006001 2000 4004000 48042004 list 2000 8003 1 2000 2001 2000 2000 0 2001 0 2001 20007 1000 2003001 1001 500500 501501 500500 500500 0 501501 0 501500 5010004 2000 8006001 2001 2001000 2003001 2001000 2001000 0 2003001 0 2003000 20020004 figur 1 result symbol evalu costbound function symbol evalu cost bound comput virtual time given valu primit cost paramet insert sort select sort merg sort set union list revers revers wapp size direct symbol direct symbol direct symbol direct symbol direct symbol direct symbol 500 582400 580800 394800 460500 xxxxxx xxxxxx 125910 117240 050305 624266 215400 221800 2000 figur 2 time direct evalu vs optim symbol evalu millisecond among twenti program analyz use alpa two termi nate one quicksort contriv variat sort diverg recurs structur split list depend valu unknown list element similar nontermin caus merg path method 33 34 nontermin happen much less often method sinc essenti avoid merg path much possibl found dierent symbolicevalu strategi use kind increment path select evalu would termin exampl well exampl give accur worstcas bound evalu algorithm yet implement futur work exploit result static analysi identifi sourc nontermin 27 make costbound analysi termin often practic use costbound analyz might termin certain input modifi evalu stop time output cost bound calcul till point mean longerrun analysi might yield higher bound 62 experi also estim approxim bound actual run time measur primit cost paramet run time use control loop calcul accur bound heap space alloc constructor program base number byte alloc constructor compil timebound analysi perform two set experi rst machin cach enabl second machin cach disabl rst give tight bound case underestim input small larg attribut cach eect second give conserv tight bound input rst describ experi timebound analysi cach enabl analysi heap space alloc bound analyz cach eect show result timebound analysi cach disabl measur analys timebound perform sourc program compil chez scheme compil 8 sourc program use librari partic ular number larg enough trigger bignum implement chez scheme tri avoid compil optim set optim level 0 view necessari optim alreadi appli program handl garbagecollect time perform separ set experi exclud garbagecollect time calcul measur includ garbagecollect time 2 current analysi handl eect cach memori instruct pipelin approxim cach eect take operand circularli cycl 2000 element measur primit cost paramet discuss timebound analysi cach enabl particular number report taken sun ultra 1 167mhz cpu 64mb main memori also perform analysi sever kind sparc station result similar sinc minimum run time program construct 01 microsecond precis time function 10 millisecond use controltest loop iter 10000000 time keep measur error 0001 microsecond ie 1 loop repeat 100 time averag valu taken comput primit cost paramet test construct varianc less 10 case calcul time bound done plug measur paramet optim timebound function run exampl program appropri number time measur run time less 1 error figur 3 show estim measur worstcas time six exampl program input size 10 2000 time includ garbagecollect time item meca measur time express percentag calcul time gener measur time close bound calcul time 9095 accuraci except input small 20 1 case larg 2000 3 case analyz address measur includ garbagecollect time similar except case underestim figur 4 depict number origin tri avoid garbag collect write loop instead recurs much possibl tri exclud garbagecollect time complet idea includ garbagecollect time come earlier experi mistakenli use time function chez scheme includ garbagecollect time insert sort select sort merg sort size calcul measur meca calcul measur meca calcul measur meca 50 155379 148250 954 326815 301125 921 092702 085700 924 100 614990 586500 954 130187 119650 919 215224 198812 924 200 244696 243187 994 519678 474750 914 490017 457200 933 300 549593 538714 980 116847 107250 918 786231 755600 961 500 152448 147562 968 324398 304250 938 141198 129800 919 1000 609146 606000 995 129706 117750 908 312153 285781 916 2000 243529 308125 1265 518717 548275 1057 683816 653750 956 set union list revers revers wappend size calcul measur meca calcul measur meca calcul measur meca 50 227555 211500 929 004436 004193 945 114035 101050 886 100 895400 833250 931 008834 008106 918 447924 393600 879 300 796987 751000 942 026424 024437 925 398220 356328 895 500 220892 208305 943 044013 040720 925 110344 102775 931 1000 882094 839780 952 087988 082280 935 440561 399700 907 2000 352542 338531 960 175937 165700 942 176061 223575 1270 figur 3 calcul measur worstcas time millisecond cach enabl figur 3 input size 1000 exampl sort classi complex exampl previou studi 37 28 calcul time much 67 higher measur time result one sort program singl input size report experi use cost bound comput also calcul accur instead approx imat bound heap space dynam alloc constructor sourc program number byte alloc constructor obtain precis base languag implement exampl chez scheme alloc 8 byte conscel heap inform also obtain easili use statist utili tie base result figur 1 set c con 8 primit cost paramet 0 obtain exact bound heap space dynam alloc constructor program shown figur 5 consid accuraci timebound analysi cach enabl found input small 20 measur time occasion calcul time exampl also input larg 1000 measur includ time millisecond input size insert sort calcul time millisecond input size select sort calcul time millisecond input size merg sort calcul time millisecond input size set union calcul time millisecond input size list revers calcul time millisecond input size revers wappend calcul figur 4 comparison calcul measur worstcas time cach enabl size insert sort select sort merg sort set union list revers revers wapp 50 10200 10200 4584 400 400 10200 100 40400 40400 10760 800 800 40400 200 160800 160800 24712 1600 1600 160800 500 1002000 1002000 71816 4000 4000 1002000 1000 4004000 4004000 159624 8000 8000 4004000 2000 16008000 16008000 351240 16000 16000 16008000 figur 5 bound heap space alloc constructor byte garbagecollect time 2000 exclud garbagecollect time measur time exampl calcul time attribut cach memori eect follow reason first initi cach miss like show small input second underestim input size 2000 figur 3 happen exactli 3 exampl whose alloc heap space larg figur 5 recal use cycl data structur size 2000 measur primit cost paramet furthermor program use less space calcul bound accuraci even larger input size program use extrem larg amount space even small input much wors underestim exampl cartesian product underestim occur small input size 50 200 exampl input size 200 measur time 65 higher calcul time perform second set experi timebound analysi machin cach disabl machin use sun ultra 10 333mhz cpu 256mb main memori figur 6 show estim measur worstcas time six program input size 10 2000 time includ garbagecollect time see measur time close bound calcul time underestim figur 7 depict number figur 6 accommod cach eect timebound analysi cach enabl could adjust measur primit cost paramet data structur appropri size appropri size determin base precis space usag analysi heapspac alloc one less direct aspect directli incorpor precis knowledg compilergener machin instruct analysi method leav futur work current method use approxim timebound estim insert sort select sort merg sort size calcul measur meca calcul measur meca calcul measur meca 50 352196 322160 915 715578 622520 870 200717 191025 952 200 555253 505195 910 113871 975660 857 106383 994885 935 300 124726 113551 910 256057 219080 856 170790 159820 936 500 346007 315220 911 710928 610595 859 306905 285640 931 1000 138266 125581 908 284268 243877 858 678999 633030 932 2000 552791 505300 914 113687 979400 861 148836 138786 932 set union list revers revers wappend size calcul measur meca calcul measur meca calcul measur meca 50 473684 460915 973 010007 009114 911 256979 224415 873 200 737997 717215 972 039786 035615 895 400575 346355 865 300 165552 161145 973 059639 053297 894 898657 778655 866 500 458766 446670 974 099345 088594 892 249041 216280 868 1000 183175 178491 974 198611 176579 889 994409 859320 864 2000 732041 713300 974 397142 352055 886 397412 346958 873 figur calcul measur worstcas time millisecond cach disabl presenc lowlevel eect precis analysi absenc use accur spacebound analysi help address memori issu 7 relat work conclus preliminari version work appear 30 overview comparison relat work cost analysi appear section 2 certain detail comparison also discuss present method section summar compar analys loop bound execut path detail conclud compar work algorithm analysi program complex analysi 26 44 53 7 work consist push symbol primit cost paramet allow us calcul actual cost bound valid result experiment measur also work analyz averagecas complex 17 dierent goal worstcas bound compar work system 46 37 36 28 work explor program analysi transform techniqu make analysi automat ecient accur overcom diculti caus inabl obtain loop bound time millisecond input size insert sort calcul time millisecond input size select sort calcul time millisecond input size merg sort calcul time millisecond input size set union calcul time millisecond input size list revers calcul time millisecond input size revers wappend calcul figur 7 comparison calcul measur worstcas time cach disabl recurs depth execut path automat precis also work measur primit cost paramet purpos gener perform predict 43 42 work inform execut path obtain run program number input program insert sort whose bestcas worstcas execut time dier greatli predict time use method could inaccur number techniqu studi obtain loop bound execut path time analysi 36 3 13 19 21 manual annot 36 28 inconveni errorpron 3 automat analysi inform two main problem first even precis loop bound obtain symbol evalu program 13 separ loop path inform rest analysi gener less accur integr analysi 34 second approxim merg path loop recurs often lead nontermin time analysi looser bound 13 19 34 newer method power appli certain class program 21 contrast method allow recurs loop consid natur overal cost analysi base partial known input structur addit method merg path recurs loop may caus exponenti time complex analysi worst case experi test program show analysi still feasibl input size thousand also studi simpl power optim speed analysi dramat analysi cach behavior 14 15 loop transform recurs call preden callstr level determin mani time xedpoint analysi iter thu analysi result approxim method allow analysi perform exact number recurs iter given partial known input data structur work lundqvist stenstrom 33 34 base similar idea appli idea machin instruct level accur take account eect instruct pipelin data cach handl dynam alloc data structur method merg path loop would lead nontermin analysi mani program method appli idea sourc level experi show calcul accur cost bound mani program merg path calcul still ecient also method time analysi base program ow graph 39 6 unlik method method exploit given input size requir programm give precis path inform idea use partial known input structur origin rosendahl 41 extend manipul primit cost paramet also handl bind construct simpl necessari ecient comput innov method optim costbound function use partial evalu increment comput transform condit make analysi ecient accur partial evalu 5 24 23 increment comput 32 31 29 transform studi intens program languag applic costbound analysi particularli simpl clean result transform fulli automat ecient start explor suit new languagebas techniqu cost analysi particular analys optim speed evalu cost bound function also appli gener approach analyz stack space live heap space 48 help predict garbagecollect cach behavior also analyz lower bound use symmetr method name replac maximum minimum condit point futur work accommod lowerlevel dynam factor time sourcelanguag level 28 14 examin correspond compil gener code cach pipelin eect explicit conclus approach propos base entir highlevel program languag method techniqu intuit togeth produc automat tool analyz cost bound ecient accur use accur approxim analyz time space bound acknowledg thank anonym refere care review mani help comment r revis report algorithm languag scheme structur interpret comput program fals path problem hard realtim program bound worstcas instruct cach perform cadenc research system analysi pointer structur scheme program languag facilit worstcas execut time analysi optim code deriv annot tight calcul execut time appli compil techniqu cach behavior predict automat averagecas analysi algorithm gener partial evalu automat deriv path loop annot objectori realtim program retarget techniqu predict execut time abstract recurs pointer data structur improv analysi transform imper program introduct partial evalu partial evalu automat program gener art comput program sizechang principl program termin accur worst case time analysi risc processor static cach increment comput systemat deriv increment program predict program execut time analyz static dynam program path experi program time tool base sourcelevel time schema live memori analysi garbag collect embed system comput maximum task execut time synthes gener system construct languagebas editor automat complex analysi analysi benchmark character benchmark perform predict machin character base abstract highlevel languag machin complex analysi lazi higherord languag program improv intern special reason time higher level languag softwar concept supercompil automat accur live memori analysi garbagecollect languag strict analysi aid time analysi mechan program analysi valu depend graph represent without taxat automat complex analysi divideandconqu algo rithm tr ctr yanhong liu scott stoller optim ackermann function increment acm sigplan notic v38 n10 p8591 octob yanhong liu scott stoller dynam program via static increment higherord symbol comput v16 n12 p3762 marchjun