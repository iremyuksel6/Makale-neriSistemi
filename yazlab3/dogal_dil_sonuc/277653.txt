complet remov redund express partial redund elimin pre import compon global optim gener remov common subexpress loopinvari comput exist pre implement base code motion fail complet remov redund fact observ 73 loopinvari statement elimin loop code motion alon dynam term tradit pre elimin half redund strictli partial achiev complet pre control flow restructur must appli howev result code duplic may caus code size explosionthi paper focus achiev complet pre incur accept code growth first present algorithm complet remov partial redund base integr code motion control flow restructur contrast exist complet techniqu resort restructur mere remov obstacl code motion rather carri actual optimizationguid optim profil enabl addit code growth reduct select duplic whose cost justifi suffici executiontim gain paper develop two method determin optim benefit restructur program region one base pathprofil dataflow frequenc analysi furthermor abstract underli new pre algorithm enabl simpl formul specul code motion guarante posit dynam improv final show balanc three transform code motion restructur specul achiev nearcomplet pre littl code growthw also present algorithm effici comput dynam benefit particular use eliminationstyl dataflow framework deriv demanddriven frequenc analyz whose cost control permit bound degre conserv imprecis solut b introduct partial redund elimin pre wide use effect optim aim remov program statement redund due recomput previous produc valu 27 pre attract target statement redund along execut path subsum gener two import valuereus techniqu global common subexpress elimin loopinvari code motion consequ pre serv unifi valuereus optim pre algorithm employ code motion 11 12 14 15 16 17 25 27 program transform reorder instruct without chang shape control flow graph unfortun codemot alon fail remov routin redund practic one half comput strictli partial redund redund along path left unoptim due codemot obstacl theori even optim codemot algorithm 25 break loop invari whileloop unless support explicit dountil convers recent steffen demonstr control flow restructur remov program redund comput includ condit branch 31 propertyori expans algorithm poe complet caus unnecessari code duplic first step toward complet pre afford code growth paper present new pre algorithm base integr code motion control flow restructur allow complet remov redund express minim code duplic prior work systemat treat combin two tran format control code duplic restrict scope codemot prevent cmp region local advers effect control flow desir valu reus wherea poe algorithm appli express elimin denot poepr use restructur carri entir transform appli econom codemot transform full extent resort restructur mere enabl necessari code motion result code growth provabl greater poepr spec95 found three time smaller second answer overrid question complet feasibl pre algorithm allow move theori practic consid profil inform use dynam amount elimin comput measur optim benefit develop profileguid pre algorithm limit code growth cost els r cd els p break en en duplic make ab fulli redund duplic allow code motion ab en en code motion en duplic complet optim cd duplic partial optim cd r r cd cd cd cd ab r cd u ab cd r cd cd r cd cd ab ab r cd ab ab optim cd sourc program b poepr ab c optim ab e tradeoff variant r figur 1 complet pre integr code motion control flow restructur sacrif valuereus opportun infrequ requir signific duplic third describ specul code motion use instead restructur guarante specul pre profit final demonstr nearcomplet pre littl code growth achiev integr three pre transform pure code motion restructur specul code motion algorithm paper reli specif way notion cmp region use reduc code duplic program analysi cost thu make pre optim usabl increas effect power costsensit restruc ture also improv effici implementa tion develop compiletim techniqu determin impact restructur program region dynam amount elimin comput runtim benefit correspond cumul execut frequenc control flow path permit valu reus restructur describ benefit obtain either use edg profil pathprofil 7 dataflow frequenc analysi 28 anoth contribut reduc cost frequenc analysi present frequenc analyz deriv new demanddriven dataflow analysi framework base interv analysi framework enabl formul analyz whose time complex independ lattic size requir frequenc analysi whose lattic infiniteheight due requir exist demand framework unabl produc frequenc analyz 18 23 30 furthermor introduc notion approxim dataflow frequenc inform conserv underestim meetoverallpath solut keep imprecis within given degre approxim permit analyz avoid explor program path guarante provid insignific contribut frequenc wise overal solut besid pre demanddriven approxim frequenc analysi applic interprocedur branch correl analysi 10 dynam optim 5 let us illustr pre algorithm loop figur 1a assum statement loop defin variabl although comput ab cd loopinvari remov loop code motion possibl consid first optim ab comput move loop would execut path en opex execut b origin program could slow program creat spuriou excep tion pre disallow unsaf code motion 25 desir optim possibl cfg restructur poepr algorithm 31 would produc program figur 1b creat duplic node valu ab avail subset incom path b fulli opti mize scope restructur unnecessarili larg complet optim compr produc program figur 1c code duplic appli mere enabl necessari code motion exampl move loop suffici separ offend path eno pex encapsul cmp region highlight figur opportun valu reus remain result optim complet restructur may gener irreduc program figur 1c also present restructur transform maintain reduc hoist loop invari loop prevent shape control flow experi show problem remov loop invari code li suffici solv complet li prevent 73 loopinvari express case simpl transform may help exampl optim peel one loop iter perform tradit li 1 produc progra figur 1b whileloop li often enabl econom dountil convers exampl present allow transform loop exit postdomin loop entri effect restructur pre alway abl perform smallest necessari dountil convers arbitrari loop next optim comput cd figur 1c optim perform complet pre c duplic shade cmp region subsequ perform code motion figur 1d result program may caus much code growth depend size duplic basic block assum size block outweigh runtim gain elimin upper c case select smaller set node duplic shown figur 1e block q duplic optim longer complet howev optim cost measur code growth justifi correspond runtim gain section 32 specul code motion use reduc code duplic summari paper make follow contribut ffl present approach integr two wide use code transform techniqu code motion code restructur result algorithm pre complet ie exploit opportun valu reus minim code growth necessari achiev code motion ffl show restrict algorithm code motion produc tradit codemot pre 17 25 ffl profileguid techniqu limit code growth integr select duplic specul code motion develop ffl develop demanddriven frequenc analyz base new elimin dataflow analysi framework ffl notion approxim dataflow inform defin use improv analyz effici ffl experi compar power codemot pre specul pre complet pre section 2 present complet pre algorithm section 3 describ profileguid version algorithm section 4 present experi section 5 develop demanddriven frequenc analyz paper conclud discuss relat work complet pre section develop algorithm complet remov partial redund compr base integr code motion control flow restructur code motion primari transform behind compr reduc code growth restructur use enabl hoist region prevent necessari code motion smallest set motionblock node identifi solv problem avail anticipabil iti express lattic also show control flow restructur disabl compr becom equival optim codemot pre algorithm 25 express partial redund valu comput incom control flow path previou express codemot pre elimin redund hoist redund comput along path reach edg reus valu avail along either path path former case comput remov latter insert make origin comput fulli redund unfortun code motion may block edg reach node prevent desir code motion character follow set condit 1 hoist express e across node n necessari optim candid follow n comput e downstream n path b valuereus opportun e node n comput e preced n path 2 hoist e across n disabl c path go n comput e sourc program path would impair comput e three condit characteriz via solut dataflow problem anticip avail defin follow path start node node n express e avail n along p iff e comput p without subsequ redefinit operand let r path n end node express e anticip n along r iff e comput r operand defin avail e entri n wrt incom path defin avail n must avail along path may anticip antic defin analog given refin valuereus definit code motion necessari b defin hold mutual henc avail n e 6 code motion disabl condit c hold must avail n e 6 must node n prevent necessari code motion e motion necessari disabl time way conjunct get code motionprev condit avail n predic prevent character smallest set node must remov code motion enabl code motion prevent cmp region b cmp region dilut via code duplic c complet pre ab code motion becom possibl code motion anticno anticmust availno availmust r ab r ab ab ab r availmay anticmay anticmay anticmay anticmay availno availmust availno availmust anticmay figur 2 remov obstacl code motion via restructur motion prevent region denot cmp e set node prevent hoist comput e cmp e fn j antic n avail n mayg enabl code motion compr remov obstacl present cmp region duplic entir region illustr figur 2 central idea factor mayavail hold entir region must noavail hold respect region copi altern view separ within region path must noavail achiev observ region entri edg mayavail b solut avail within region depend sole solut entri edg express neither comput kill within region henc desir factor carri attach region copi subset either must entri edg shown figur 2c cmp duplic condit prevent fals node enabl code motion compr algorithm shown figur 3 follow three step 1 comput anticip avail problem use lattic flow function distribut least common element oper defin use partial order v shown distribut properti impli dataflow fact approxim control flow merg point intuit l powerset lattic fno mustg fact may hold along individu path partial order v must may 2 remov cmp region via control flow restructur given express e cmp region identifi examin dataflow solut local node line 2 figur 3 duplic cmp node line 3 adjust control flow edg new copi region host must solut restructur necessit updat dataflow solut within cmp region line 412 antic solut alter previous comput avail solut invalid path flow region elimin region entri edg discon nect express e avail becom either must entir region express solut may becom conserv imprecis word split may path mustno path e might also split may path express therefor line 6 reset initi guess line 1012 recomput solut within cmp 3 optim program code motion transform carri replac origin comput e temporari variabl te temporari initi comput insert noavail edg sink either maymust avail path origin comput insert edg must also mustanticip verifi hoist origin comput edg theorem 1 complet compr optim minim number comput path proof first origin comput replac temporari second comput insert valu avail along incom path henc addit comput remov within domain morel renvios code motion transform pre accomplish hoist optim candid statement 27 compr achiev minimum code growth 1 follow fact cmp restructur program node remov merg node without destroy valu reus shown follow observ prior step 2 node n may belong cmp region multipl offend express duplic n restructur view partit control flow path go n result copi n path partit contain must noavail path offend express 1 outsid domain code growth reduct possibl move instruct cmp duplic step 1 dataflow analysi anticip avail ffl input control flow graph node contain singl assign x e ffl compn e node n comput express e ffl transpn e node n assign variabl e ffl boundari condit express e antic end e avail start e ffl initi guess set vector number candid express solv iter antic n e must compn e antic n e otherwis antic n e antic e avail n e avail e avail n e f e n avail n e must compn e transpn e x otherwis step 2 remov cmp region control flow restructur ffl modifi g cmp node exist express e 1 express e duplic cmpe node creat copi cmp n must copi node n host must attach new node perform restructur must must must updat dataflow solut within cmp copi 4 node n 2 cmpe 5 antic n must antic n antic n must antic n 6 avail n must avail n avail n must 7 avail n must e avail n must e must 8 avail n e avail n e 9 end reanalyz avail insid cmp copi express e 0 yet process 12 end 13 end step 3 optim code motion insertn e antic must avail n avail replacen e compn e figur 3 compr algorithm complet pre follow properti step 2 verifi 1 number path partit node copi creat given node independ order express consid line 1 2 node copi reachabl start node 3 two copi n express e remerg two copi incom path prevent code motion e across result node compar compr restructuringonli pre consid poepr version steffen complet algorithm 31 includ minim duplic node restrict express elimin case compr elimin carri use temporari step 3 theorem 2 compr creat new node poepr proof outlin proof base show poepreoptim program minim less node program cmp restructur shown given origin node n two copi n creat cmp restructur two distinct copi n creat poepr minim merg without destroy valu reus opportun fact poepr express form com pre nonstrictli larger region comput e poepr duplic fnjantic n e 2 fmust mayg avail n superset cmp e algorithm complex dataflow analysi step 1 line 1012 requir on step n flow graph size number express restructur step 2 howev may caus n grow exponenti node may need split multipl express practic constantfactor codegrowth budget like defin asymptot program size chang therefor run time step 2 domin entir algorithm on 2 21 optim codemot pre besid support complet pre notion cmp region also facilit effici formul codemot pre call cmpre section show complet algorithm natur constrain prohibit restructur modif result optim optim motiononli pre 17 25 comparison compr constrain cmpre algorithm bypass cmp remov last step tran format unchang figur 3 first step data flow analysi modifi goal prevent hoist across node n motion would subsequ block cmp region path flow node n first anticip comput compr second avail modifi includ detect cmp node cmp node found instead propag forward mayavail solut adjust adjust mask valu reus opportun exploit without restructur result mask code motion prevent enter path cross cmp region see predic insert step 3 figur 3 modifi flow function avail problem fol low third line detect cmp node noavail extend mean valu might avail along path valu reus block cmp region along path must compn e transpn e x otherwis given maxim fix point solut redefin avail cmpre perform unchang transform phase figur 3 step 3 easi show result optim complet immut shape control flow graph proof analog theorem 1 origin comput remov comput insert optim opportun block cmp exist besid exploit opportun pre algorithm guarante live rang insert temporari variabl minim order moder regist pre sure live rang minim insert point specifi predic insert delay move direct control flow theorem 3 shortest live rang given cmp restructur origin control flow graph compr cmpre optim minim live rang length insert temporari variabl proof initi point insert delay either would becom partial redund destroy complet temporari variabl use immedi successor exist pre algorithm find liverang optim placement two stage first comput hoist high possibl maxim remov redund later placement correct comput delay 25 formul specifi optim placement directli never hoist path block cmp subsequ encount howev note redefinit f e n longer monoton given antic n must x1 v x2 f e must although direct approach solv system equat may produc conserv imprecis solut desir maxim fix point easili obtain use bitvector genkil oper follow first comput antic figur 3 second solv wellknown avail properti denot av hold express comput along incom path must final comput av character somepath avail also encapsul cmp detect av avail 6 pair solut directli map desir solut avail gen kill set 1 problem given valu initi guess fals meet oper bitwis must antic 6 must condit avail 6 must antic 6 must detect cmp node less strict definit 2 equival purpos safe kill singl loop copi reduc entri node en en ab cd r cd cd sourc program cd ab r cd reduc compr ab figur 4 reduc restructur see figur 1c reus hoist less strict condit benefici comput test must requir one bit per express two bit requir may con sequent substitut antic 6 must defin analog av result obtain implement complex algorithm 17 25 three dataflow problem must solv requir one bit solut per express conclus cmp region conveni abstract termin hoist would unnecessarili extend live rang also provid intuit way explain shortestliverang solut without appli correct step base delay 25 furthermor cmpbase motiononli solut implement effici exist shortestliverang algorithm 22 reduc restructur duplic cmp region may destroy reduc control flow graph figur 1c exampl compr result loop two distinct entri node even though poepr preserv reduc loop figur 1b like restructuringbas optim 4 10 31 also plagu introduc irreduc one way deal problem perform optim presuppos singleentri loop prior pre howev mani algorithm schedul follow pre reli reduc compr reduc graph obtain addit code duplic effect algorithm normal irreduc program given 24 suppress unnecessari invoc algorithm employ simpl test whether irreduc may creat region duplic test base upon examin cmp entri exit edg rather entir program assum start reduc graph restructur make loop l irreduc multipl cmp exit edg sink l least one region entri outsid l ie domin ls header node region duplic target node region exit edg may becom multipl loop entri node consid loop figur 4a two three exit cmp fall loop restructur becom loop entri shown figur 1c rather appli global algorithm like 24 straightforward approach make affect loop reduc peel part bodi goal extend replic scope region exit sink onto singl loop node becom new loop entri node closest common postdomin within loop offend region exit origin loop entri figur 4a highlight node cd whose duplic cmp restructur restor reduc loop postdomin offend exit node q becom new loop header 3 profileguid pre cmp region smallest set node whose duplic enabl desir code motion size often prohibit practic section reli profil estim optim benefit complet pre made practic avoid unprofit code replic first extend compr inhibit restructur respons code duplic cost expect dynam benefit result profileguid algorithm duplic cmp region incur code growth justifi correspond runtim gain elimin redund second notion cmp region combin profil formul specul codemot pre guarante posit dynam effect despit impair certain path third algorithm integr restructur specul select profit subgraph cmp profit balanc cost benefit given profil np hard empir small number hot program path promis effici algorithm 4 19 final support profil guid show estim runtim gain thwart cmp region obtain use edg profil frequenc analysi 28 path profil 7 31 select restructur model profit duplic cmp region r costbenefit threshold predic r hold region optim benefit exce constant multipl region size metric benefit dynam amount comput whose elimin enabl r duplic denot remr true region r algorithm equival complet com pre r fals region algorithm reduc codemotiononli cmpre obvious predic determin suboptim tradeoff exploit pre opportun limit code growth particular explicitli consid instruct cach size increas regist pressur due introduc temporari variabl chosen form order avoid model complex interact among compil stage implement supplement code growth budget exampl 6 code allow grow 20 first present algorithm comput optim benefit remr method base fact step 1 comput anticip avail unchang step 2 partial restructur remov profit cmp region 1 comput e 2 disconnect subregion r cmpe build largest connect subregion 3 select node r collect connect cmp node determin optim benefit remr 4 carri frequenc analysi avail r profit duplic line 212 fig 6 end 7 end 8 recomput avail solut use f e n section 21 step 3 optim code motion unchang figur 5 pgpre profileguid version compr cmp scope local entir benefit thwart region comput benefit suffic examin path within region consid express e cmp region e region exit edg e valu antic e either must otherwis would cmp e let exitmust r set must exit edg dynam benefit deriv observ time edg execut outgo path contain exactli one comput e elimin r duplic ii valu e avail exit edg let exa execut frequenc edg pavail n probabl valu e avail n execut region dupli cate expect benefit connect exit edg exapavail n correspond number comput remov path start benefit duplic region r thu sum exit edg benefit anm2exit must r exapavailout n probabl p comput edg profil use frequenc analysi 28 frequenc domain probabl dataflow fact occur rather mere boolean meetoverallpath exist comput incorpor execut probabl control flow edg dataflow system frequenc analyz exploit bitvector parallel instead comput dataflow solut float point number desir reduc cost calcul probabili tie cmp region lend effect restrict scope program need analyz region entri edg either must noavail probabl e avail edg 1 0 respect therefor probabl p exit edg influenc path within region result suffici perform frequenc analysi express e cmp e use entri edg precis boundari condit cmp dataflow equat system section 5 reduc cost frequenc analysi demanddriven approach algorithm pgpre duplic profit cmp region given figur 5 structur complet counterpart compr dataflow analysi proceed elimin cmp region separ express compr suffici treat node singl cmp togeth select duplic benefit divid cmp disconnect subregion exist intuit hoist particular express may prevent multipl group node differ part procedur therefor line 3 group node connect subregion frequenc analysi determin benefit group line 4 profit region elimin motionblock effect cmp region remain program must captur need appli cmpre algorithm section 21 improv control flow graph block hoist avoid recomput avail line use redefin flow function f e n section 21 assert noavail whenev cmp detect 32 specul codemot pre codemot pre hoist comput e block whenev e would need place control flow path p comput e origin program specul code motion prevent execut e along path p could rais spuriou except e eg flow wrong address b outweigh dynam benefit remov origin comput e former restrict relax instruct except lead safe specul new processor gener support controlspecul instruct suppress rais except gener valu eventu use allow unsaf specul 26 latter problem solv 20 aggress codemot pre navig path profil develop goal allow specul hoist path dynam impair would outweigh benefit elimin comput origin posit next util cmp region determin profit specul code motion ii posit specul insert point minim live rang temporari variabl figur 6 illustr principl specul pre 20 instead duplic cmp region hoist express noavail entri edg make exit fulli avail enabl complet remov origin comput along must exit exampl move noavail region entri edg e2 hoist specul ab execut path go e2 e3 previous contain express benefit comput follow dynam amount comput decreas execut frequenc exe4 mustanticip exit edg follow comput remov increas frequenc exe2 noavail entri edg comput insert sinc specul alway associ cmp region abl obtain simpl precis profit test specul pre express profit total execut frequenc mustanticip exit edg exce noavaila entri edg note benefit calcul local examin entryexit edg path within region necessari select restructur henc specul benefit independ branch correl edg profil precis path profil case speculativemot pre far temporari live rang concern insert entri edg result shortestliverang solut theorem 3 still hold code motion availmust availno anticmust specul anticno remov insert optim benefit ab ab figur specul codemot pre 33 partial restructur partial specul section 31 edg profil frequenc analysi use estim benefit rem duplic region altern use path profil 3 7 conveni establish costbenefit optim tradeoff 4 19 20 arriv valu region benefit path profil suffici sum frequenc must must path path cross region entri edg mustavail exit edg must anticip precis path along valu reus exist block region exponenti number profil acycl path 54 procedur execut 50 distinct path spec95 19 number drop 13 lowfrequ path account 5 total frequenc remov sinc afford approxim disregard infrequ path sum individu path frequenc constitut feasibl algorithm mani cmp region furthermor encapsul branch correl path profil comput benefit precis frequenc analysi base correlationinsensit edg profil moreov notion individu cmp path lead better profileguid pre algorithm consid cmp region indivis duplic unit overli conserva tive may profit restructur entir region region may contain path mustmust path frequent execut inexpens dupli cate goal find largest subset frequencywis region path togeth pass threshold test r similarli specul hoist entri edg may fail profit test instead seek find subset entri edg maxim specul benefit section show partial restructur specul carri combin partial specul select specul insert subset region entri select entri influenc subset r region exit abl exploit valu reus r consist must exit becom mustavail due insert rational behind treat entri separ entri may enabl littl valu reus henc specul note entri edg point specul insert need consid insert insid region would partial redund insert outsid region would extend liverang partial specul optim differ total frequenc r maxim nonneg point 22 cd r sourc program b specul made profit cd rt nopath peel profit profit speculation1001000901000 100 figur 7 integr specul restructur problem solv maximum network flow problem interest observ determin optim partial specul edg profil inferior path profil b frequenc analysi requir therefor exploit power path profil partial restructur rather specul code motion alon must use becom intuit realiz without control flow restructur one restrict consid individu edg path express insert remov compar cmpbase partial specul specul pre 20 show effici comput benefit defin cmp region appli edg profil precis path profil acycl code achiev preci sion cyclic code precis presenc loopcarri reus task partial restructur local subgraph cmp small size contain mani hot mustmust path duplic subregion effect peel hot path struction figur 1e presum hot path node q separ problem find optim subregion one whose benefit maxim pass r predic smaller constant budget nphard howev empir small number hot path promis effici exhaustivesearch algorithm integr partial specul restructur offer addit opportun improv costbenefit ra tio longer restrict peel hot mustmust path andor select noentri specul high frequenc entri prevent specul peel hot noavail path eman therebi reduc entri edg frequenc allow specul cost code duplic figur 7a show exampl program annot edg profil peel hot mustmust path highlight cmp cd would duplic block except tri specul elimin redund cmp exit edg frequenc exi comput must insert noentri b c b lowfrequ 10 c 100 henc specul di advantag exi assum exit branch q strongli bias path c qx frequenc 100 edg c execut execut alway follow x peel noavail path shown b effect move specul point c path peel frequenc c becom 0 specul profit exi 4 experi perform experi use hp lab vliw backend compil elcor fed spec95 benchmark previous compil edgeprofil inlin spec95int impact compil tabl 1 show program size total number node expr sion node correspond one intermedi state ment memori requir indic column space give largest nodesexpress product among procedur run time rather ineffici implement behav quadrat number procedur node procedur 1000 node time 5 second pa8000 typic complet pre ran faster subsequ dead code elimin experi 1 disabl effect cmp region column label optimiz give percentag express reus valu along path 139 static express partial redund comput next column preventedcmp report percentag optimiz express whose complet optim code motion prevent cmp region codemot pre fail fulli optim 305 optimiz express comparison column preventedpo report express requir restructur poepr experi 2 loop invari express next determin percentag loop invari li express remov invari loop code motion column loop invar show percentag optimiz express pass test loopinvari follow column give percentag li express cmp region averag 725 li comput hoist enclos invari loop without restructur experi 3 elimin comput column global cse report dynam amount comput remov global common subexpress elimin correspond full redund column complet pre give dynam amount partial redund statement fact strictli partial redund contribut 17 differ complet pre global cse may due style impact intermedi code eg multipl virtual regist variabl expect power redund analysi perform better figur 8 plot dynam amount strictli partial redund remov variou pre tech niqu codemot pre yield half benefit complet pre furthermor specul result nearcomplet pre benchmark even without special hardwar support ie safe specul specul carri cmp whole note graph account dynam impair caus specul benchmark program size e1 cm prevent e2 loop inv e3 dynam e4 code growth spec95int spec95fp procedur node k express space optimiz preventedcmp preventedpo loop invar invarprev global complet compr increas poepr increas 099go 372 1536 373 58 102 296 454 71 834 95 117 499 902 126gcc 1661 9172 1582 380 80 342 450 25 698 37 46 339 367 129compress 130li 357 374 84 20 118 224 344 104 699 68 80 215 351 132ijpeg 472 818 228 12 139 241 453 51 781 43 51 488 1047 134perl 276 1350 255 404 96 395 518 119 935 48 68 312 500 147vortex 923 3259 657 58 166 295 361 63 816 111 130 357 554 avg spec95int 5421 2167 420 122 121 291 434 82 750 74 91 333 565 103su2cor 37 106 39 25 153 298 538 145 437 128 130 421 1420 104hydro2d 43 85 24 04 168 217 427 59 417 19 60 439 1417 145fpppp 37 136 67 196 146 522 577 430 919 71 77 24 182 146wave5 110 333 123 53 124 348 478 49 662 71 78 366 1076 avg spec95fp 392 114 44 47 162 324 498 153 692 83 100 943 3130 avg spec95 3266 1287 259 90 139 305 461 113 725 78 95 595 1664 tabl 1 experi pre base control flow restructur go compress li ijpeg perl vortex avgint tomcatv swim su2cor hydro2d fpppp wave5 avgfp avg103050 dynam comput elimin codemot pre safe specul pre unsaf specul pre complet pre figur 8 benefit variou pre algorithm dynam op count decreas due strictli partial redund algorithm also complet remov full redund measur indic ideal pre algorithm integr specul restructur use restructur specul would wast larg portion benefit provid almost complet pre small code growth experi 4 code growth final compar code growth incur compr poepr make experi feasibl limit procedur size 3000 node made comparison procedur exceed limit either algorithm overal compr creat three time less code growth poepr 5 demanddriven frequenc analysi amen bitvector represent frequenc analysi 28 expens compon profileguid opti mizer shown compr allow restrict scope frequenc analysi within cmp region without loss accuraci howev larg cmp region cost may remain high path profil use effici substitut numer hot path fall region one method reduc cost frequenc analysi comput demand subset data flow solut need optim section develop demanddriven frequenc analyz reduc dataflow analysi time examin node contribut solut option alli b termin analysi prematur solut determin desir precis besid pre analyz suitabl optim accept run time must maintain restrict analysi scope runtim optim 5 interprocedur branch remov 10 frequenc analysi comput probabl dataflow fact occur execut therefor probabl lattic infinit chain real number exist demanddriven analysi framework built iter approach permit lattic finit size 18 finit height 23 30 henc deriv frequenc analyz overcom limit design demanddriven analyz base upon elimin dataflow method 29 whose time complex independ lattic shape develop demanddriven analysi framework motiv allencock interv elimin solver 2 next use framework demanddriven algorithm gener frequenc dataflow analysi deriv 8 present frequenc solver special problem avail definit assum forward dataflow problem specifi equat system vector n solut node n variabl n denot fact associ express e equat system induc depend graph eg whose node variabl x e n edg repres flow function edg exist valu x e n comput x predn graph eg call explod graph 23 data flow problem underli compr separ henc x e depend x e valuebas pre 9 constant propag 30 branch correl analysi 10 edg e may exist complic analysi analyz present handl gener explod graph requir demanddriven analyz grew four specif design requir 1 demanddriven rather comput xn node n determin desir x e n ie solut express e node n analysi speedup obtain requir node transit contribut valu x e n visit examin guarante worstcas behavior solut eg node desir solver time complex exceed exhaust allencock method 2 n number eg node 2 latticeindepend amount work per node depend lattic size eg shape 3 onlin analysi possibl even eg complet known prior analysi save time memori algorithm construct eg analysi progress central idea ondemand construct determin flow function f e target variabl x e n known contribut desir solut furthermor solver must produc solut even eg irreduc happen even underli cfg reduc 4 inform cours frequenc analysi contribut weight examin node desir solut must known inform use develop version analyz approxim frequenc disregard lowcontribut node goal restrict analysi scope exhaust interv dataflow analysi 2 comput xn n follow first loop header identifi partit graph hierarch acycl subregion call interv second forward substitut equat perform within interv express node solut term loop header substitut proce interv order revers postord node visit third mutual equat depend across loop backedg reduc loop break rule l second third step remov cyclic depend innermost loop eg repeat nest level process solut express term start node propag previous reduc equat final propag phase 2 demanddriven interv analysi substitut equat reduc interv desir x e n transit depend find relev equat backsubstitut equat flow function righthand side x e n along eg edg edg ad explod graph onlin whenev new eg node visit first comput flow function node insert predecessor graph 2 defin eg interv set node domin sink backedg irreduc eg backedg loop edg sink onto loop entri node eg shape known prior analysi onlin identif eg interv reli structur underli control flow graph cfg node eg node x cfg loop entri x may eg loop entri conserv assum interv head within interv backsubstitut perform revers interv order order provid latticeindepend equat need substitut per interv reduct reduct find interv order incomplet eg observ within eg interv order consist revers postord cfg node number loopbreak cyclic depend along interv back edg loop reduc continu preced interv recurs invok reduct nest loop process achiev demand analysi relev interv desir solut obtain x e n express exclus use constant term point also identifi eg subgraph contribut x e n remov cyclic depend forward substitut subgraph yield solut subgraph node cach case later desir worstcas run time step correspond propag phase 2 cach 18 30 framework instanc calcul probabl express e avail exit node n execut x e denot probabl edg taken given sink node execut relat edg probabl sink rather sourc exhaust analysi 28 demand solver proce backward direct frequenc flow function return probabl 1 node comput express e 0 kill ex pression otherwis sum probabl predecessor weight edg execut probabl return predic comp transp defin figur 3 10 compn e transpn e 00 transpn e pm nx e otherwis demand frequenc analyz shown figur 9 two data structur use sol accumul constant term desir probabl x e rh current righthand side x e n backsubstitut variabl sol rh organ stack top use current analyz interv algorithm treat rh symbol express work set pend node yet unsubstitut variabl precis exampl valu rh may 025 m04 k weight contribut node k desir probabl x e n e never avail avail k probabl 05 avail node n probabl 025 004 formal contribut weight node repres probabl path node n without comput kill express e execut first rh set 10 n line 1 flow function backsubstitut rh postord line 3 substitut repeat variabl replac constant line 2 accumul sol substitut node x comput express e weight rhsx ad solut x remov rh assign rhsx 00 line 6 simpl case x loop entri node line 12 contribut c ad predecessor contribut weight edg probabl p x loop entri node line 8 continu loop predecessor selfdepend x found call reduc loop procedur reduc loop mimic main loop line 1 push new entri stack initi reduct new interv also mark loop entri node stop backsubstitut collect cyclic depend along cyclic path backedg edg x result reduc loop return solrh pair r constant r set unresolv vari abl eg 01 eg reduc set r contain x valu 03 weight xs selfdepend remov loop break rule deriv frequenc analysi sum infinit geometr sequenc line 1011 algorithm termin stack visit line 14 specifi order forward substitut perform cach result also shown figur 9 execut trace demanddriven analysi comput probabl express comput node f h kill avail node c path avail hold highlight approxim dataflow analysi often necessari sacrific precis analysi speed defin notion approxim data flow inform allow analyz predetermin degre conserv imprecis exampl given 5 imprecis level 005 analyz may output avail 07 maxim fix point solut avail 075 intent permit underestim reduc analysi cost analyz certain contribut node incom path overal solut less imprecis level avoid analyz path assum node conserv dataflow fact algorithm figur 9 design inform natur extend approxim analysi know precis contribut weight node analysi progress whenev sum weight rh highest interv level fall ffl whilecondit line 2 termin guarante desir pre cision altern scenario attract howev lowweight node select line 3 throw away keep disregard node total weight exceed ffl essenc approach perform analysi along hot path 4 onlin region format 21 idea termin analysi could find precis solut first appli implement interprocedur branch elimin 10 stop visit thousand node result two magnitud analysi speedup optim opportun still discov howev without approxim frequenc analyz develop paper unabl determin benefit restructur b select profit subset node duplic c get bound amount opportun lost due earli termin algorithm complex arbitrari explod graph reduc loop may recurs invok node henc node may visit ne time number eg node n number cfg node number optim express cach result node process one invoc algorithm figur 9 yield worstcas time complex 2 real program loop nest level bound small con stant expect complex ns 2 although exist demanddriven dataflow algorithm 18 23 30 particular view like oper principl backsubstitut flow function righthand side target variabl focu specifi profit order substitut unlik reli instead find fix point er approach fail infiniteheight lattic cfg loop keep alway iter toward better approxim solut note break control flow cycl insert widen oper 13 appear resolv problem widen local adjust primarili intend approxim solut therefor frequenc analysi mani iter would requir achiev accept approxim instead fix equat system local global approach structur identifi interv reduc cyclic depend seem necessari shown identifi interv perform substitut interv order demand even explod graph known prior analysi believ exist demand method extend oper structur manner enabl applic loopbreak rule would make method reminisc elimin algorithm 29 6 conclus relat work focu paper improv program transform constitut valuereus optim commonli known partial redund elimin pre long histori pre research implement three distinct transform identifi semin paper morel renvios 27 deriv 11 14 15 16 17 25 employ pure nonspecul code motion second complet pre steffen 31 base control flow restructur third navig path profil inform gupta et al appli specul code motion order avoid codemot obstacl control impair path 20 work defin codemotionprev cmp region cfg subgraph local advers effect control flow desir valu reus notion cmp appli enhanc integr three exist pre transform follow way 1 code motion restructur integr remov redund minim code growth cost compr 2 morel renvios origin method express restrict motiononli case complet algorithm cmpre 3 develop algorithm whose power adjust contin input node n express e output sol probabl e avail exit n stack real name sol rh refer alway top stack stack set unsubstitut node n weight rh n postord number cfg node rh empti 3 select rh node x smallest postdfsx 5 end procedur substitutenod x x visit determin flow function x comput kill e adjust sol remov x rh compx e transpx e 7 els transpn e rh x 00 return backedg edg meet loopentri edg 8 backedg x exist assum one backedg per node substitut x occur rh 9 r reduc loopi x appli loop break rule sum infinit geom sequenc substitut acycl predecessor nonbackedg node z 2 predx end x fulli substitut 14 rh x 00 visitedpushx substitut function reduc loopnod u node v rh contain unmark node 17 select rh unmark node x lowest postdfsx 19 end reduc loop f postdf h g 9 reduc loop b 14 rh 0391 7 sol 02818 unchang final probabl 7 rh 00 figur 9 demanddriven frequenc analysi avail comput trace execut ualli motiononli complet pre respons program profil pgpre 4 demonstr specul navig precis edg profil alon 5 path profil use integr three transform balanc power level cmp path pre significantli improv effect program transform present paper larg orthogon potenti lie detect redund techniqu use power analysi uncov valu reus tradit pre analysi 9 11 howev use code motion fail complet exploit addit reus opportun thu transform present applic style pre well exampl elimin load ammon laru 4 develop constant propag optim base restructur name peel hot path analysistransform framework restructur use exploit optim opportun previous detect analysi case also improv analysi precis elimin control flow merg hot path even though pre benefit hot path separ distribut dataflow analysi preserv reus opportun across merg complic analysi eg redund array bound check would improv approach analysi algorithm recombin separ path present use opportun like path recombin integr code motion present paper reduc code growth global view identifi four main issu pathsensit program optim 8 solv nondistribut problem without conserv approxim eg nonlinear constant propag b collect distinct opportun eg variabl differ constant along path c exploit distinct opportun eg enabl fold pathdepend constant structur direct analysi effort toward hot path approach ammon laru four issu attack uniformli separ hot path subsequ individu analysi recombin approach reserv restructur actual transforma tion impli differ overal strategi solv nondistribut problem precis along path custom dataflow name space 9 b collect distinct opportun demanddriven analysi branch elimin 10 form constant propa gation c exploit profit opportun econom transform avoid infrequ program region use approxim frequenc analysi last three present paper acknowledg indebt elcor impact compil team provid experiment infrastructur sadun anik benchung cheng brian dietrich john gyllenha scott mahlk provid invalu help implement experi comment glenn mon evelyn duesterwald jim laru mooli sagiv bernhard steffen anonym review help improv present paper research partial support nsf pyi award ccr9157371 nsf grant ccr9402226 grant hewlettpackard univers pittsburgh r compil principl program data flow analysi procedur exploit hardwar perform counter flow context sensit profil improv dataflow analysi path profil aggress inlin effici path profil effect partial redund elimin new algorithm partial redund elimin base ssa form abstract intrepret unifi lattic model static analysi program construct approxim fixpoint analyz larg program effici infor mativ practic adapt global optim algorithm morel renvois global optim suppress partial redund variat knoop practic framework demanddriven interprocedur data flow analysi path profil guid partial redund elimin use specul partial redund elimin base costbenefit analysi demand interprocedur dataflow analysi control node split ting optim code motion theori practic sentinel schedul vliw superscalar processor global optim supress partial redund data flow frequenc analysi elimin algorithm data flow analysi precis interprocedur dataflow analysi applic constant propag properti orient expans tr compil principl techniqu tool elimin algorithm data flow analysi analyz larg program effici inform variat knoop rumyampersandumlth steffen italiclazi code motionital sentinel schedul effect partial redund elimin optim code motion solut problem morel renvois myampersandldquoglob optim suppress partial redundanciesmyampersandrdquo practic adapt global optim algorithm morel renvois demand interprocedur dataflow analysi regionbas compil fast effect dynam compil data flow frequenc analysi precis interprocedur dataflow analysi applic constant propag effici path profil exploit hardwar perform counter flow context sensit profil aggress inlin interprocedur condit branch elimin new algorithm partial redund elimin base ssa form resourcesensit profiledirect data flow analysi code optim pathsensit valueflow analysi practic framework demanddriven interprocedur data flow analysi improv dataflow analysi path profil global optim suppress partial redund program data flow analysi procedur abstract interpret propertyori expans control node split path profil guid partial redund elimin use specul ctr daniel connor wenmei w hwu compilerdirect dynam comput reus rational initi result proceed 32nd annual acmiee intern symposium microarchitectur p158169 novemb 1618 1999 haifa israel jin lin tong chen weichung hsu penchung yew roy dzching ju tinfook ngai sun chan compil framework specul optim acm transact architectur code optim taco v1 n3 p247271 septemb 2004 zhang rajiv gupta whole execut trace proceed 37th annual ieeeacm intern symposium microarchitectur p105116 decemb 0408 2004 portland oregon bernhard scholz nigel horspool jen knoop optim space time usag specul partial redund elimin acm sigplan notic v39 n7 juli 2004 rei odaira kei hiraki sentinel pre hoist beyond except depend dynam deoptim proceed intern symposium code gener optim p328338 march 2023 2005 timothi heil jame e smith relat profil enabl threadlevel parallel virtual machin proceed 33rd annual acmiee intern symposium microarchitectur p281290 decemb 2000 monterey california unit state david gregg andrew beatti kevin casey brain davi andi nisbet case virtual regist machin scienc comput program v57 n3 p319338 septemb 2005 dhananjay dhamdher epathpr partial redund elimin made easi acm sigplan notic v37 n8 august 2002 eduard mehof bernhard scholz probabilist data flow system twoedg profil acm sigplan notic v35 n7 p6572 juli 2000 jin lin tong chen weichung hsu penchung yew roy dzching ju tinfook ngai sun chan compil framework specul analysi optim acm sigplan notic v38 n5 may spyridon triantafylli matthew j bridg easwaran raman guilherm ottoni david august framework unrestrict wholeprogram optim acm sigplan notic v41 n6 june 2006 max hailperin costoptim code motion acm transact program languag system topla v20 n6 p12971322 nov 1998 ran shaham elliot k kolodn mooli sagiv heap profil spaceeffici java acm sigplan notic v36 n5 p104113 may 2001 reinhard von hanxleden ken kennedi balanc code placement framework acm transact program languag system topla v22 n5 p816860 sept 2000 jingl xue qiong cai lifetim optim algorithm specul pre acm transact architectur code optim taco v3 n2 p115155 june 2006 zhang rajiv gupta whole execut trace applic acm transact architectur code optim taco v2 n3 p301334 septemb 2005 uday p khedker dhananjay dhamdher bidirect data flow analysi myth realiti acm sigplan notic v34 n6 june 1999 keith cooper li xu effici static analysi algorithm detect redund memori oper acm sigplan notic v38 n2 supplement p97107 februari keith cooper l taylor simpson christoph vick oper strength reduct acm transact program languag system topla v23 n5 p603625 septemb 2001 elimin array bound check demand acm sigplan notic v35 n5 p321333 may 2000 litong song krishna kavi gain unfold loop acm sigplan notic v39 n2 februari 2004 glenn ammon jame r laru improv dataflow analysi path profil acm sigplan notic v33 n5 p7284 may 1998 phung hua nguyen jingl xue strength reduct loopinvari type proceed 27th australasian confer comput scienc p213222 januari 01 2004 dunedin new zealand youtao zhang rajiv gupta timestamp whole program path represent applic acm sigplan notic v36 n5 p180190 may 2001 k v seshu kumar valu reus optim reus evalu math librari function call compil gener cach acm sigplan notic v38 n8 august sriraman tallam xiangyu zhang rajiv gupta extend path profil across loop backedg procedur boundari proceed intern symposium code gener optim feedbackdirect runtim optim p251 march 2024 2004 palo alto california qiong cai jingl xue optim effici speculationbas partial redund elimin proceed intern symposium code gener optim feedbackdirect runtim optim march 2326 2003 san francisco california mari lou soffa loadreus analysi design evalu acm sigplan notic v34 n5 p6476 may 1999 matthew arnold michael hind barbara g ryder onlin feedbackdirect optim java acm sigplan notic v37 n11 novemb 2002 glenn ammon jame r laru improv dataflow analysi path profil acm sigplan notic v39 n4 april 2004 motohiro kawahito hideaki komatsu toshio nakatani partial redund elimin access express specul code motion softwarepractic experi v34 n11 p10651090 septemb 2004