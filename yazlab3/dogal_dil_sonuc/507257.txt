regular viewpoint paprocess pa process algebra allow nondetermin sequenti parallel composit recurs suggest view paprocess astre usingtreeautomata techniqu verif problem pa main result set iter predecessor regular set paprocess regular tree languag similarli iter successor furthermor correspond tree automata built effect polynomi time mani immedi applic verif problem paprocess among simpl gener modelcheck algorithm b introduct veric innit state process activ eld research today concurrencytheori commun cours alway activ petrinet com muniti research involv process algebra modelcheck realli becam interest innit state process proof bisimul decid norm bpaprocess bbk87 prompt sever research investig decid issu bpp bpa without normed hypothesi see chm94 mol96 be97 partial survey bpa bpp pa bpa inondetermin recursionj fragment process algebra bpp inondetermin parallel composit recursionj fragment pa beh95 combin much less tractabl year ago decid result bpp bpa present pa still beyond reach current techniqu mayr show decid reachabl pa process may97c extend decid modelcheck pa wrt ef fragment ctl may97b import breakthrough allow mayr success attack power process algebra may97a decid result pa present research eg ku96 ku97 jkm98 eld ask new insight decid proof may97b follow paper certainli trivial construct quit complex hard check easi see direct result andor proof could adapt gener without much troubl probabl complex avoid techniqu current avail eld believ point import look new insight concept techniqu simplifi eld rather tri extend alreadi exist result contribut paper show treeautomata techniqu greatli help deal pa main result two regular theorem state post l resp pre l set congur reachabl resp allow reach congur l regular tree languag l give simpl polynomialtim construct associ automata mani import consequ follow directli includ simpl algorithm modelcheck paprocess work regular post l pre l could obtain combin two main insight 1 treeautomata techniqu prove power sever eld see cksv97 use processalgebra commun well pa simpl termrewrit system special contextsensit rewrit strategi unlik headrewrit presenc sequenti composit oper rr n0123456789 2 syntact congruenc use simplifi notat simpl process algebra help one get closer intend semant process break regular behavior decid result much simpler one introduc syntact congruenc later stage besid gener approach plan paper start recal basic treeautomata theori 1 introduc denit pa process algebra 2 explain set pa process seen tree languag 3 give simpl proof show post pre regular tree languag start list applic veric problem move post l pre l l regular languag 5 main technic result devot 6 import applic modelcheck end extens reachabl modelcheck constraint 7 simpl import techniqu allow deal pa process modulo structur equival 8 relat work sever recent work eld use treeautomata describ behaviour system use describ set congur set reachabl congur pushdown automaton form regular word languag proven bc64 extend cau92 applic modelcheck pushdown automata propos fww97 bem97 decid rstorder theori rewrit relat induc ground term rewrit system reli ground tree transduc dt90 note pa dene condit ground rewrit system among applic develop regular theorem sever suggest mayr work pa may97c may97b andor earlier work rpp ks97a ks97b regular tree languag tree automata recal basic fact tree automata regular tree languag detail reader refer classic sourc eg cdg rank alphabet nite set symbol f togeth ariti function partit f accord ariti set term f call nite tree tree tree languag f subset f nite bottomup tree automaton tupl hf q f ri f rank alphabet nite set state f q subset nal state r nite set transit rule form fq ariti jf symbol f 2 f tree automata rule also allow transit rule form transit rule dene rewrit relat term built f q see state q nullari symbol work bottomup rst nullari symbol leav inria regular viewpoint paprocess 5 replac state q quasileaf symbol immedi top leav q replac state q write rewritten number step q 2 q say accept rewritten nal state write la set term accept tree languag coincid la regular tree languag regular tree languag close complement union etc exampl let f given f ffg automaton accept set occur even number time given q g let gfga b rewrit follow gfga b 7gamma gfgq 0 henc 7gamma q 0 2 f 2 la replac r automaton accept set even number gs along everi path root leaf size tree automaton denot jaj number state augment size rule rule fq 2 paper shall never precis count jqj number state automata notic xed f largest ariti 2 jaj ojqj tree automaton determinist transit rule distinct lefthand side rule otherwis nondeterminist given nondeterminist tree automaton one use classic isubset constructionj build determinist tree automaton accept languag construct involv potenti exponenti blowup size tell whether la empti nonnecessarili determinist tree automaton done time ojaj tell whether given tree accept given nonnecessarili determinist done time polynomi jaj tree automaton complet speci also complet f 2 fn q q rule fq ad sink state obviou rule extend complet one accept languag 2 pa process algebra present pa explicitli refrain write term modulo simplic law eg neutral law 0 henc use isnil predic see inspir chr93 viewpoint agreement earliest work gener process algebra like cc acp etc key condit result next section clearli prevent consid term modulo structur congruenc later stage demonstr section 8 rr n0123456789 6 dlugiez phschnoebelen 21 syntax set action name set process variabl set paterm given follow abstract syntax given 2 epa write vart set process variabl occur subtermst set subterm includ guard pa declar nite set ng process rewrit rule note x need distinct write var delta set process variabl occur delta subterm delta union subtermst right lefthand side rule delta rule ix tj deltag deltax a2act delta x var set variabl delta provid rewrit follow assum xed var delta 22 semant pa declar delta dene label transit relat delta epa theta act theta epa alway omit delta subscript confus possibl use standard notat abbrevi w induct dene via follow so rule x predic induct dene ae true fals otherwis isnil predic syntact test termin inde lemma 21 follow three properti equival 1 2 6 ie termin 3 inria regular viewpoint paprocess 7 proof 3 deriv use x induct prove obviou denit tree languag shall use tree automata recogn set term epa possibl epa f f given f kg cours shall keep use usual inx notat term built ij ikj begin one simplest languag epa proposit 31 singleton tree languag ftg regular automaton ftg need jtj state similarli immedi consequ lemma 21 corollari 32 l set termin process regular tree languag automaton l need one state 4 regular reachabl set post def denot set iter predecessor resp set iter successor also call reachabl set notion take account sequenc w 2 act action name allow move 0 post inde forget action name section 7 devot pre ct post ct c act given two tree languag l l 0 epa let 41 regular pre dene l t2epa innit famili tree languag least solut follow set recurs equat intuit quasiregular equat satis rr n0123456789 pre 1 observ equat dene l contain ly process variabl allow one step transit lemma 41 2 epa l proof sketch proof u induct length transit sequenc u case analysi so rule gave last transit induct structur proof u 2 l impli u xpoint induct follow case analysi summand equat use reli simpl lemma reachabl 1 equat 1 easili transform regular equat introduc new variabl set ftg denit l tt 0 given l depend nite number l u fug name us subtermst subterm delta 1 corollari 42 2 epa set l regular tree languag correspond tree automaton ojdeltaj state entail theorem 43 2 epa pre pret pre regular tree languag 42 regular post dene l 0 two innit famili tree languag least solut follow set recurs equat aim l 0 coincid section 51 shall see corollari 42 hold even delta innit var delta must nite inria regular viewpoint paprocess 9 post resp post x x 2 easili turn regular equat given l 0 l 00 depend nite number l 0 u fug corollari 44 2 epa set l 0 l 00 regular tree languag correspond tree automata ojdeltaj state pre easili show lemma 45 2 epa l 0 post l 00 henc corollari theorem 46 2 epa post postt post regular tree languag construct eoeectiv theorem 43 46 gener section 5 7 howev found enlighten give simpl proof simplest variant regular result alreadi theorem 43 46 eoeectiv construct associ automata mani applic 43 applic theorem 47 reachabl problem ii reachabl 0 j p proof combin cost membership test nondeterminist tree automata regular pre 0 regular post dioeerent present pa delta may97c show reachabl problem npcomplet section 8 describ get result byproduct approach mani problem solv simpl applic theorem 43 46 bounded post innit rr n0123456789 cover aka controlst reachabl reach 0 resp occur inclus state reachabl 1 also reachabl 2 question modulo regular preserv oper eg project live given delta live reachabl state least one transit delta 0 red 5 regular post l pre l regular languag section prove regular pre l post l regular languag l notat simplic given two state q q 0 automaton denot q k q 0 state q 00 q k q 0 possibl use rule 51 regular pre ingredi pre assum al automaton recogn l epa pre new automaton combin sever ingredi ffl complet speci automaton accept termin process see corollari 32 ffl al automaton accept l ffl also use boolean record whether rewrit step done state pre state pre 3tupl q q denot set state relev automaton transit rule pre transit rule pre dene follow type 0 rule form 0 7gamma q 7gamma q l type 1a rule form x 7gamma q q l true st exist u 7gamma q l type 1b rule form x 7gamma q 7gamma q l type 2 rule form q type 3a rule form q state inria regular viewpoint paprocess 11 type 3b rule form q lemma 51 2 epa pre u 2 epa p 2 n p u u proof structur induct three case 1 pre rule observ rule type 0 1a 1b exactli correspond lemma requir 2 requir pre type 3 rule q 1 induct hypothesi entail 1 correspond rewrit 1 2 pre pre use type 3b rule b use type 3a rule q 1 nal state therefor u 1 2 l termin process henc 1 2 convers assum 7gamma q l u rst case ind hyp entail 1 pre al pre use type 3b rule show pre u al l second case al nal state use type 3a rule show pre 3 case similar previou one actual simpler let nal state pre state q q l nal state al u u accept al ioe pre accept use assumpt complet speci theorem 52 regular 1 l regular subset epa pre l regular 2 furthermor automaton al recogn l possibl construct polynomi time automaton pre recogn pre l al k state pre need 4k state rr n0123456789 proof 1 immedi consequ lemma 51 observ result need nite delta var delta must nite 2 build pre eoeectiv requir eoeectiv way list type 1a rule done comput product ax automaton post x al exist u 7gamma q l ioe languag accept nal state fq nal state ax g notempti give us pair q q l need type 1a rule observ need nite delta build ax 52 regular post ingredi post assum al automaton recogn l epa post new automaton combin sever ingredi automata al previou construct time need assum complet speci automata delta complet speci automaton recogn subterm delta state q 2 subterm delta ensur delta take transit rule belong subterm delta addit automaton sink state q obviou transit complet speci automaton ffl use boolean b record whether rewrit step occur state post state post 4upl q transit rule post transit rule type 0 rule form 0 7gamma q type 1 rule form x 7gamma q 7gamma q l type 2 rule form q rule delta x al 7gamma q l type 3 rule form type 4a rule form inria regular viewpoint paprocess 13 type 4b rule form nal state lemma 53 2 epa post u 2 epa u p u al proof rst prove direct induct length k rewrit post distinguish four case 1 use type 0 type 1 rule take sati requir 2 k 1 last rewrit step use type 2 rule rewrit form z true ind hyp u 0 p 0 st u exist type 2 rule entail take requir 3 k 1 last rewrit step use type 4 rule 1 2 type 4 rule appli top two rewrit sequenc 7gamma q 2 ind hyp give us last rule type 4a rule b take requir otherwis last rule type 4b rule q 1 nal state 1 entail 1 termin process henc take requir 4 k 1 last rewrit step use type 3 rule case similar actual simpler previou one direct assum u p accompani condit ac proceed induct length transit sequenc ie p follow structur induct u case 1 ac ensur use type 0 rule show post 2 0 like previou case type 1 rule 3 0 sequenc form x 1 ac read subterm delta take q 0 rr n0123456789 14 dlugiez phschnoebelen st l one q 0 must exist let b 0 fals ioe ind hyp give us post must type 2 rule q use show post 4 combin u 1 addit 2 rewrit 7gamma q l u delta use al l u delta dene b accord p ind hyp entail post two case 1 2 l q 1 nal state post type 4b rule q 1 use 1 62 l type 4a rule use 5 similar previou case actual simpler let nal state post state q q l nal state al post accept term ioe u u accept al ioe belong post l theorem 54 regular 1 l regular subset epa post l regular 2 furthermor automaton al recogn l possibl construct polynomi time automaton post recogn post l al k state pre need okjdeltaj state proof obviou previou construct result relat pre resp post natur question ask relat j ie ft u j ug recogniz sens relev notion recogniz relat problem link ground tree transduc gtt short detail sinc shown relat induc ground rewrit system recogniz gtt tri extend result pa case rule ground rewrit rule simpl left hand side notion prex rewrit unfortun prex rewrit entail stabl context natur extens gtt could handl condit rule immedi abl recogn recurs enumer relat 6 modelcheck pa process section show simpl approach modelcheck problem solv may97b see one immedi applic main regular theorem inria regular viewpoint paprocess 15 consid set p atom proposit mod p denot set pa process p hold consid proposit p mod p regular treelanguag thu p could make alabel step right nowj ither least two occur x insid tj ither exactli one occur x nonfrozen positionj logic ef follow syntax semant thu ex read iit possibl reach one step state st j ef read iit possibl reach via sequenc step state st j denit 61 modelcheck problem ef pa input given delta given epa given ef answer ye ioe dene mod def mod mod theorem 62 1 ef formula mod regular tree languag 2 given treeautomata ap recogn regular set mod p tree automaton recogn mod built eoeectiv proof corollari 3 regular theorem give us decis procedur modelcheck problem build automaton mod check whether accept estim complex approach term jj n alt dene n alt number altern negat tempor connect rr n0123456789 theorem 63 modelcheck automaton mod comput time2 jjjdeltaj2 ojjjdeltaj proof assum automata mod p size bound constant construct automaton mod appli usual automatatheoret construct intersect union complement regular tree languag invok regular theorem pre pre construct polynomi except complement polynomi construct would 2 ojj size result automaton negat involv complement caus nonelementari blowup negat push inward except cross tempor connect ef ex one exponenti blowup determin level altern repeat n alt time yield given bound number state henc overal complex procedur describ may97b nonelementari today known lower bound pspacehard observ comput represent mod gener tell whether given belong observ also result allow modelcheck approch base combin forward backward method theorem 62 reli standard backward approach 7 reachabl constraint section consid reachabl constraint let c act word languag action name write c 0 reach constraint c extend notat write pre cl post obviou mean observ even assum c regular problem tell whether c ie whether post ct empti undecid pa algebra prove reduct intersect problem contextfre languag follow let sigma alphabet distinguish symbol use two copi everi letter sigma fg contextfre languag dene bpa pa without k contextfre languag l 1 resp l 2 sigma dene pa rule x 1 w w rule dont overlap introduc regular hold ioe undecid inria regular viewpoint paprocess 17 section give suoecient condit c problem becom decid comput cconstrain pre regular tree languag recal shue w k w 0 two nite word set word one obtain interleav w w 0 arbitari way denit 71 ffl g nite seqdecomposit c ioe w w 0 2 act g nite paraldecomposit c ioe w w crucial point denit seqdecomposit c must appli possibl way split word c even appli decomposit ww 0 one c one c 0 contain observ formal dioeerenc seqdecomposit paraldecomposit come fact w k w 0 set shue w w 0 usual contain sever element denit 72 famili cng languag act nite decomposit system ioe everi c 2 c admit seqdecomposit paraldecomposit use c c c act admit nite decomposit even regular case consid ab assum nite paraldecomposit everi k shue k b k c henc must must exist shue w 00 k b k 0 w 00 2 c possibl henc k distinct contradict nite simpl exampl nite decomposit system ie set singleton languag word shorter k paraldecomposit fwg ffw 1 gg w subword 2 w w 0 correspond remaind exampl show decompos compos pair c appear decomposit member c gener linear weight function form w def n set c k belong nite decomposit system assum c nite decomposit system shall show theorem 73 regular regular l epa c 2 c pre cl post cl regular tree languag subword w w 0 obtain eras letter w posit rr n0123456789 ingredi post c build post c way post state contain new c 2 c compon state post c state post c 5upl q transit rule post c transit rule type 0 rule form 0 7gamma q type 1 rule form x 7gamma q type 2 rule form q rule delta x al appear seqdecomposit c type 3 rule form appear paraldecomposit c 00 type 4a rule form type 4b rule form state st c c 0 appear seqdecomposit c 00 lemma 74 2 epa post c u 2 epa w 2 c u w u al proof post c post equip new compon proof follow exactli line proof lemma 53 refer earlier proof explain deal new c compon direct lemma 53 new observ 4 case 1 take 2 k 1 last rewrit step use type 2 rule use fact w 3 k 1 last rewrit step use type 4 rule use fact cc 0 c 00 4 k 1 last rewrit step use type 3 rule use fact w 1 2 c entail exist least one shu w w 1 w 2 st w 2 c 00 inria regular viewpoint paprocess 19 direct lemma 53 new observ 5 case 1 0 type 0 rule allow cs contain 2 3 0 sequenc form x must c seqdecomposit c st 2 c 0 w type 2 rule c use 4 type 4a rule need otherwis pair c seq decomposit c st w pair give us type 4b rule need 5 shue w 1 w 2 therefor paraldecomposit c st w pair give us type 3 rule need let nal state post c q nal state al post c accept term ioe 2 post ct set nal state easili adapt recogn post ingredi pre c construct pre addit c 2 c compon state pre state pre 4tupl q nal state q nal state al c constraint satisfi transit rule pre transit rule pre dene follow type 0 rule form 0 7gamma q type 1a rule form x 7gamma q q l true c st exist u u 7gamma q l type 1b rule form x 7gamma q type 2 rule form appear paraldecomposit c 00 rr n0123456789 type 3a rule form nal state c c 0 appear seqdecomposit c 00 type 3b rule form lemma 75 2 epa pre c u 2 epa u u proof pre c pre equip new compon proof follow exactli line proof lemma 53 refer earlier proof explain deal new c compon 1 x condit c compon exist rule type 0 1a 1b agre statement lemma 2 pre type 3 rule c also ind hyp give type 3b case w 1 2 c type 3a case use c either 1 rst case appli induct hypothesi c 1 c 0 contain 2 use type 3b rule second case must seqdecomposit c w use ind hyp type 3a rule 3 case similar previou one direct use pair accout w paraldecomposit c direct use crucial fact whenev shu w w 1 w 2 particular w c must contain 71 applic modelcheck result let us appli modelcheck method section 6 extend ef logic allow hci formula decompos c semant given mod hci def inria regular viewpoint paprocess 21 decompos c quit gener condit exclud undecid situat would exist gener regular case immedi includ extens propos may97b observ possibl combin decompos constraint alreadi modelcheck algorithm c 2 c c decompos deal hc directli ie without construct nite decomposit system contain c c 0 obviou extend construct pre c pre cc 0 sever c compon dealt simultan also deal hc c 0 hcc 0 directli sinc pre c c 0 l pre cc 0 l pre cl pre c 0 l pre cpre c 0 l c c 0 l 8 structur equival pa term section investig congruenc j induc pa term follow equat choic equat motiv fact sever recent work pa extens consid process upto congruenc techniqu could deal variant use explain denit pa compar denit use may97c may97b consid transit system term epa term mayr consid transit system seen equival class modulo j epa term write j set ft g transit relat use mayr coincid transit relat dene follow speak ipaj j mean transit system one obtain jclass term state transit given 4 approach gener sens dene approach framework contrast one reason modulo j right start one lose inform requir revert approach exampl reachabl problem ido u j theorem 47 ask precis form u reachabl problem solv may97c ask u modulo j framework state igiven u 0 rr n0123456789 22 dlugiez phschnoebelen see framework imposs state problem cours rst motiv framework allow two regular theorem rest section devot applic treeautomata approach problem paj aim exhaust rather simpli want show framework allow solv state problem framework variant 81 structur equival regular associativitycommut axiom satis k call permut axiom write p u 0 permut equival axiom dene 0 neutral element k call simplic axiom write u u simplic ie u obtain appli simplic axiom left right posit note wellfound partial order write gamma1 simplic normal form written uniqu u one obtain simplifi much possibl permut allow axiom classic rewrit extens studi bn98 j coincid p permut axiom commut simplic axiom let us decompos question j question p question start p lemma 81 set p ug regular tree languag automaton p need mm2 state proof sketch p nite set m2 element exponenti blowup avoid simplic axiom nice properti allow nite mani combin behav better wrt regular write l fu j lemma 82 regular l set l l l regular tree languag automaton al recogn l build automata size ojaj three languag polynomi time proof 1 l u l ioe u 2 l addit 0s simpli henc automaton accept l obtain al ad new state q 0 subterm simpli also add rule 0 7gamma q 0 q 0 k q 0 7gamma q 0 inria regular viewpoint paprocess 23 accept subterm q al rule qq 0 7gamma q q 0 q 7gamma q simul simplic 2 simpli simpl way obtain automaton l synchron automaton al accept l complet automaton 0 recogn term built 0 k 0 two state q 0 q 60 two automata synchron 7gamma q q 0 7gamma q a0 simul simplic nullabl term addit rule name whenev rule q add rule q add symmetr rule q 0 instead k routin induct length deriv show 7gamma q q 0 ioe 9t 2 l 7gamma q 3 l simplest way see regular note l note regular l l p l j necessarili regular gd89 howev proposit 83 set j regular tree languag automaton need mm2 state proof combin 5 lemma 81 82 82 structur equival behaviour see term modulo j modifi observ behaviour follow standard result proposit 84 j bisimul relat ie j 0 u proof standard tediou shall give proof sketch proof singl equat l r denit j show set floe roeg instanc equat bisimul relat complet proof take better part p 95 book mil89 equat dealt similarli note isnil compat j remain prove gener congruenc bisimul standard so rule pa obey format ensur behaviour term depend behaviour subterm syntax may dene new transit relat term u u 0 amount j 4 simplest way translat rr n0123456789 problem paj problem set term adopt usual abbrevi proposit 85 w 2 act w proof induct length w use proposit 84 83 reachabl modulo j easi prove decid reachabl problem modulo j post recal u j post regular treelanguag one build eoeectiv henc decid whether nonempti intersect give us simpl algorithm use exponenti time size u j actual better result 3 theorem 86 reachabl problem paj igiven u np proof npeasi straightforward automata framework u 0 st note ju 00 j juj simpl algorithm comput u guess nondeterminist permut u 00 build automata 1 u 00 2 post automata polynomials remain check whether 1 2 nonempti intersect know whether requir u 0 exist corollari 87 reachabl problem paj npcomplet proof nphard reachabl bpp prove esp97 proof idea reus framework reduc 3sat reachabl paj consid instanc p 3sat p variabl n claus everi gammag dene follow r ij note j r1 rule pick valuat v x r r3 rule use v list satis claus r2 rule discard unnecessari element final applic possibl eg first prove may97c inria regular viewpoint paprocess 25 proposit 88 bounded problem paj decid polynomialtim proof j reach nite number state paj ioe reach nite number nonj term pa permut axiom allow nite mani variant given term post l contain nite number nonj process ioe post l nite 84 modelcheck modulo j modelcheck problem solv may97b consid ef logic paj translat framework amount interpret tempor connect term instead write mod j interpret modulo j mod addit consid atom proposit p compat j ie j u impli u modelcheck paj simpl modelcheck pa lemma 89 efformula mod j proof structur induct use prop 85 closur wrt j hci case immedi corollari use exactli approach modelcheck pa without j conclus paper show treeautomata techniqu power tool analysi pa process algebra main result two gener regular theorem numer immedi applic includ modelcheck pa extend ef logic treeautomata viewpoint mani advantag give simpler gener proof help understand problem solv ptime other nptime etc quit versatil mani variant pa attack approach acknowledg thank h comon r mayr numer suggest remark question work rr n0123456789 26 dlugiez phschnoebelen r decid bisimul equival process gener contextfre languag innit result verifi innit state process sequenti parallel composit reachabl analysi pushdown auto mata applic modelcheck rewrit regular structur prex rewrit tree automata applic decid subset cc decid decomposit process algebra applic tree automata rewrit theori ground rewrit system decid petri net direct symbol approach model check pushdown system extend abstract reachabl problem ground tr extens model recursiveparallel program formal framework analysi recurs parallel program combin petri net paprocess model check paprocess tableaux method paprocess commun concurr tr decid bisimul equival process gener contextfre languag process algebra regular structur prefix rewrit petri net commut contextfre grammar basic parallel process tree languag rewrit effici algorithm pre post interprocedur parallel flow graph automatatheoret approach branchingtim model check commun concurr formal framework analysi recursiveparallel program combin petri net paprocess bisimul equivanl decid norm process algebra decid firstord transit logic paprocess decid bisimulationlik equival finitest process reachabl problem ground tr extens reachabl analysi pushdown automata parallel sequenti process infinit result model check paprocess automatatheoret approach interprocedur dataflow analysi regular decid norm pa process polynomi time tableau method paprocess ctr ahm bouajjani javier esparza tayssir touili gener approach static analysi concurr program procedur acm sigplan notic v38 n1 p6273 januari vineet kahlon aarti gupta analysi interact pushdown system acm sigplan notic v42 n1 januari 2007 ann labrou philipp schnoebelen automatatheoret approach reachabl analysi rpp system nordic journal comput v9 n2 p118144 summer 2002 marku mllerolm precis interprocedur depend analysi parallel program theoret comput scienc v311 n13 p325388 23 januari 2004 antonn kuera philipp schnoebelen gener approach compar infinitest system finitest specif theoret comput scienc v358 n2 p315333 7 august 2006 deni lugiez philipp schnoebelen decid firstord transit logic paprocess inform comput v203 n1 p75113 novemb 25 2005 kamal lodaya regular viewpoint process algebra acta cybernetica v17 n4 p751763 januari 2006