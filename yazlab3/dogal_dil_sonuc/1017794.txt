methodolog gener verifi combinatori circuit highlevel program languag offer signific express provid littl guarante resourc use resourcebound languag hardwaredescript languag provid strong guarante runtim behavior comput often lack mechan allow programm write structur modular reusabl program overcom basic tension languag design recent work advoc use resourceawar program rap languag take account natur distinct develop platform deploy platform resourceconstrain softwarethi paper investig use rap languag gener combinatori circuit key challeng encount rap approach safe admit mechan express posteriori postgener optim paper propos studi use abstract interpret overcom problem approach illustr use indepth analysi fast fourier transform fft gener comput compar gener fftw b introduct hardwar descript languag primarili concern resourc use except highend applic verifi support nsf itr0113569 put multistag annot work permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit commerci advantag copi bear notic full citat first page copi otherwis republish post server redistribut list requir prior specif permiss andor fee septemb 2729 2004 pisa itali correct hardwar system prohibit expen sive contrast softwar languag primarili concern issu express safeti clariti maintain softwar languag provid abstract mechan higherord function polymorph gener recurs abstract mechan make design maintain reusabl also keep program close mathemat definit algorithm implement help ensur correct hardwar descript languag vhdl 16 verilog 32 provid limit support abstract mechan grow interest reconfigur hardwar invit us consid integr hardwar softwar world consid verif techniqu one world use appli current program reconfigur hardwar hard 3 first softwar develop typic train design circuit second specifi circuit hand tediou error prone difficult maintain challeng integr hardwar softwar world summar key question get raw perform hardwar without give express clariti softwar 11 gener manifest interfac recent work resourceawar program rap 30 context softwar gener suggest promis approach hardwar verif rather verifi circuit case bycas basi propos circuit design express gener specif automat gener whole famili cir cuit technic novelti approach gener specif verifi guarante gener circuit correct approach naivelygener circuit correct construct effici circuit correct produc systemat verifi improv correct naiv gener verifi naiv gener verifi posteriori postgener optim fix result gener verif point view mean replac problem verifi transform one verifi modif one program gener classic exampl gener one use selesnick burru 11 produc fast fourier transform fft circuit primenumb size extens survey found frigo account fftw system 8 write use program gener howev challeng cf 27 one challeng manifest interfac gener hard express tradit type system exampl string algebra datatyp pars tree even graph use repres gener program would allow us express manifest interfac type circuit type choos repres circuit soon start compos gener exampl want build circuit comput fft perform multipli cation comput invers fft run prob lem type circuit provid static guarante consist wellformed composit circuit illustr assum given two trivial gener take input produc andgat invert meaningless composit aris write connect oper infix oper type circuit circuit circuit wire output first circuit input second circuit problem second circuit one input two type system prevent error circuit type circuit gener desir circuit type express possibl time express valu circuitrealiz exampl programm might want use abstract list dynam data structur describ circuit need know earli possibl develop process use realiz use finit memori 10 30 12 resourceawar program resourceawar program rap languag 30 design address problem describ 1 provid highli express untyp substrat support featur dynam datastructur modul object higherord function 2 allow programm express stage distinct comput develop platform comput deploy platform conveni notat static type safeti ensur use multistag program msp construct 29 28 3 use advanc static type system ensur comput intend execut resourcebound platform inde resourcebound 30 31 combin three ingredi allow programm use sophist abstract mechan program static guarante gener resourcebound program exampl rather use one concret type repres circuit rap languag provid abstract datatyp parameter inform gener code type two trivial gener would type connect oper would refin code code code gener type variabl must alway instanti consist extra inform type system reject bad declar type variabl instanti output inv bool input boolbool note type function similar type standard mathemat function composit oper addit ensur gener program well type rap languag also ensur gener program satisfi variou notion resourc constraint cf 30 13 problem ensur gener program welltyp resourcebound gener code type rap languag must remain abstract provid construct travers valu type jeopard sound decid static type 27 complic reason correct program written languag 28 time abl look insid code mean posteriori optim express within languag optim still implement standalon sourcetosourc transform outsid languag invalid safeti resourcebounded guarante distinguish two form posteriori optim gener one independ applic one specif applic gener optim gener welltest less like invalid guarante provid rap set domainspecif optim written programm particular applic less like test extens therefor problemat time system fftw make strong case practic import domainspecif optim 8 therefor face technic problem implement domainspecif optim without lose benefit rap framework contribut paper propos use abstract interpret 5 program gener avoid need posteriori optim allow us gener desir circuit without lose guarante provid rap languag benefit propos techniqu extend untyp set avoid gener larg circuit first place thu reduc overal runtim need gener accept code verif point view approach replac problem verifi sourcetosourc transform verifi correct finit set optim one specif program gener propos method abstract interpret carri four initi standard step build program gener 27 1 implement inputoutput behavior express typesaf languag ocaml 15 run exampl use fft fft step implement cooleytukey recurr comput fft 2 verifi correct inputoutput behavior program use express languag implement fft step reduc make sure first textbook definit cooleytukey recurr transcrib correctli second program correctli transform monad style monad transform welldefin mechaniz 21 paper explain monad transform style conveni use propos approach often necessari convert whole program monad style transform done hand done need 3 identifi relev comput stage program cf 27 involv determin part comput done develop platform must left deploy platform 4 add stage annot step stage construct hy gienic quasiquot ensur done semant transpar manner twolevel type system understand use quasiquot gener program cf 31 ensur inconsist use first secondstag input rap type system 30 goe ensur secondstag comput use featur resourc avail target platform sourc code result gener often concis minor variat result first step qualiti gener code satisfactori paper propos follow addit step 5 use abstract interpret techniqu shift comput develop platform rather deploy platform step gener lead smaller effici circuit short term technolog reduc time effort need program reconfigur hardwar reconfigur hardwar 6 17 potenti deliv signific perform improv comput intens applic main exampl najjar et al 22 report speedup 10800 time highlytun softwar implement rather perform numer intens kernel nativ softwar platform rest applic implement system offshor kernel fieldprogramm gate array fpga fieldprogramm hardwar wellsuit massivelyparallel implement comput express combinatori circuit longer term hope propos approach posit impact vlsi logic design verif relat work work build long tradit use function program languag describ hardwar circuit rubi 12 lava 2 hawk 14 hml 18 hydra 23 reflect 9 ever none languag provid kind manifest interfac static type discuss hardwaredescript languag recogn need macro distinguish circuit descript circuit exampl sac 3 singleassign arraybas languag sa cs facil improv c macro system provid neither express higherord languag manifest interfac static guarante deliv rap type system mckay singh 19 use partial evalu autom approach stage dynam special fpga special optim circuit use intension analysi program partial evalu system user chose two level abstract either treat tool black box case control gener process deleg tool treat tool white box case wellform correct guarante gener code void twolevel static type system allow programm safe gain full control gener process safl 26 allow programm breakdown comput compon implement hardwar softwar safl firstord monomorph type languag whole comput must resourc bound thu rap point view whole safl comput perform deploy platform hardwarec 13 similar safl use clike imper featur 16 organ paper section 2 give quick introduct basic stage explain basic approach context minim exampl though static type system metaocaml check type correct circuitrealiz code suffici present valid idea abstract interpret code gener section 3 describ fast fourier transform express function languag stage section 4 describ generationtim optim optim enabl abstract interpret gener code show effect techniqu compar number float point oper result naiv stage version fftw system section 5 conclud 2 abstract interpret power stage construct mechan distinguish comput stage program follow minim exampl illustr use construct metaocaml 4 20 let rec power n n0 1 els x power n1 x ignor stage construct bracket escap e code standard definit function comput use defin special function x 3 without stage last step simpli return function would invok power function everi time get invok valu x contrast stage version build function comput third power directli use multipl see stage construct work start last statement code wherea term fun x e x valu annot term fun x e outer bracket contain escap express still need evalu bracket mean want construct futur stage comput escap mean want perform immedi comput build bracket comput multistag languag construct hint imper thu applic e must perform even though x still uninstanti symbol power ex ampl power 3 perform immedi repeat everi time new valu x bodi definit function power recurs applic power escap ensur immedi execut first stage evalu definit power3 first result fun x x x x 1 wherea implement unstag definit power3 hardwar nontrivi stage one evalu program clearli circuitrealiz 21 abstract give minim exampl abstract interpret gener use consid presenc multipl 1 bodi power3 resort posteriori techniqu elimin unnecessari comput code gener requir make code data type less abstract disadvantag void equat reason principl comput insid bracket 28 essenti reduc syntact quotat cf 1 footnot 32 equal importantli ensur static type safeti would necessit use higherord type cf 25 abstract interpret allow us avoid problem still achiev essenti result first step appli abstract interpret identifi concret domain gener code type use pro gram would like look insid type gener implicit origin program second step design abstract domain provid us inform code valu exampl use one int code type split singl case concretecod two first indic inform code valu name liter 1 second say addit inform code valu note term concret abstract may seem backward abstract type approxim second stage valu concret type see abstract type contain inform origin type need present concret function convert abstractcod concretecod let conc match c one 1 c c next step lift oper concret type abstract type use work done first stage less work left second stage oper power function use multipl oper achiev desir effect defin correspond abstract oper follow match xy one one one one x one x x conc x conc seen definit abstractcod type make possibl directli express optim would requir inspect concretecod type wherea concret function express within languag abstract function would go way particular latter requir inspect valu abstract type code stage function express let rec power n n0 one els x power n1 x evalu declar fun x conc power 3 would yield precis desir result fun x x x x last multipl elimin simpl exampl abstract interpret gener code provid systemat safe approach achiev essenti result posteriori optim next two section show scale substanti exampl fft yield result compar produc fftw system 3 stage fft fft find applic mani timecrit embed applica tion therefor import abl gener effici circuit use fft run exampl paper section begin show fft implement pure function manner ocaml metaocaml stage construct use express variant function special respect size input vector 31 unstag fft implement basic cooleytukey recurr implement let rec fft dir l listlength l els l merg dir y0 y1 two paramet direct flag dir input vector l repres list input vector length one simpli return otherwis split vector even odd compon eo recurs appli fft subvector merg result 32 complex number auxiliari function complex number repres pair ocaml float oper complex addit implement follow let add r1i1 r2 function split merg use defin fft implement follow let rec split l match l xyx let rec merg dir l1 let rec mg l1 l2 match l1 l2 xx yy zxa zyb function w comput power nth complex root uniti 33 monad share avoid explos size gener code use monad librari share 7 requir rewrit part fft program monad style explicit open recurs let fft dir f l listlength ret l els l bind f e fun y0 bind f fun y1 ret merg dir y0 y1 new paramet f use place recurs call fft dir bodi origin function return ret bind two standard monad oper 21 33 get exactli function origin program would use monad librari ret ident function noop bind pass result first argument second one detail monad librari monad share beyond scope paper describ elsewher 7 purpos paper reader view librari avoid code duplic gener exampl fft merg function need convert monad style 34 stage fft stage fft respect size input vector add stage annot get stage fft function fft ms stage function take vector code valu denot delay element sinc oper split parametr element requir explicit stage merg function written monad style chang use stage version complex arithmet function name w add sub mult ret oper exactli ret oper use stage function achiev ad stage annot origin one exampl add function defin let add r1i1 r2 let mergem dir l1 let rec mg l1 l2 match l1 l2 xx yy bind ret mult ws dir n j fun z1 bind ret add x z1fun zx bind ret sub x z1fun zy bind mg xs ys j1 fun ab ret zxa zyb ret bind mg l1 l2 ret b fft function use stage monad version merg let fftm dir f l listlength els l bind f e fun y0 bind f fun y1 mergem dir y0 y1 use fft ms pass monad fix point oper sm result monad valu pass appropri monad run combin runm fun x run ysm fftm 10 2 n follow focu qualiti code gener comput improv use abstract interpret gener code auxiliari function nonstandard run construct see 7 allow metaocaml output c function code correspond stage definit special size input vector preliminari syntax nonstandard run construct current trxrun gcc gcc replac name differ backend compil icc f90 input vector size 4 get follow output result translat c int fundefdoubl x234 doubl doubl doubl doubl doubl doubl doubl doubl x234 return 0 function fundef take array four complex num ber realiz array four pair doubl two floatingpoint number pair repres real imaginari part complex number respect function comput fft inplac exit function input array contain comput transform code repres fulli unfold complex fft comput sampl size 4 singleassign straightlin code easili translat combinatori circuit 36 what wrong gener code gener code point need domainspecif opti mizat suffer obviou problem includ repeat comput 1 y1245 0 y2246 appear subexpress larger express statement x1235x2340 assign array element temporari temporari use also statement y1243x1235 kind statement perform unnecessari move trivial expens float point multipl factor 10 00 roundoff error result unnecessari comput multipl 612303176911e17 exact 4 point fft contain factor exactli zero furthermor replac factor exact zero would lead cascad simplif aggress compil optim might elimin problem mani ensur elimin requir knowledg fft algorithm note mean posteriori optim need follow illustr point show benefit focus write better gener rather fix result simpl gener 4 abstract interpret fft use abstract interpret seri refin gener show problem identifi end last section address key featur modif extract inform secondstag gener comput make avail first stage 41 abstract domain want avoid code duplic want avoid trivial multipl addit therefor need two abstract domain stack one top domain success refin float type use element vector produc fft first domain exp float code keep track whether code valu cheap duplic complic express tag exp simpl express float liter exampl tag val second domain lit float float maybevalu allow us construct complex arithmet oper discrimin liter known gener time comput comput valu unknown gener stage tag valu repres multipl known factor keep factor floatingpoint datatyp analog one discuss section 21 carri inform code valu must stress inform fragment liter simpl variabl refer etc obtain look insid code fragment rather make note inform gener code fragment data avail us gener time never look insid code gener element type view sometim exact approxim futurestag valu note also abstract interpret respect gener code fragment 42 abstract interpret section 21 defin concret function two abstract domain defin val x x exp x x any10x x any10x exp mvconc x anyfactorx exp factor mvconc x function success forget inform result mvconc opaqu code valu inform valu gener stage forgotten function conc intern multipl factor comput yield maybevalu 43 avoid code duplic trivial bind butterfli oper offer opportun avoid repeat comput oper repres follow code snippet appear merg ms bind ret mult ws dir n j fun z1 bind ret add x z1 fun zx bind ret sub x z1 fun zy multipl mult ws dir n j use subsequ add sub oper one might expect bind result valu z1 avoid repeat com putat inde case unstag program stage program multipl first line realli symbol z1 use two place comput duplic alreadi mention one techniqu avoid form code explos monad share 7 butterfli problem point need concis control way name intermedi result gener avoid duplic express contain comput achiev defin variant monad return oper name argument name get duplic call variant retn defin appendix retn oper singl valu must deal tupl maybevalu domain repres complex number therefor rais retn work valu type use function liftcm retn v defin appendix allow us gener name bind exp variant avoid gener trivial bind val variant result code merg oper shown let mergemv dir l1 let rec mg l1 l2 match l1 l2 xx yy bind liftcm retnv x fun x bind liftcm retnv fun bind liftcm retnv fun z1 bind ret addsv x z1 fun zx bind ret subsv x z1 fun zy bind mg xs ys j1 fun ab ret zxa zyb ret bind mg l1 l2 ret b differ merg ms function two way first use liftcm retn v instead ret wherev opportun control name express second use complex arithmet oper viz add sv sub sv mult sv w sv work maybevalu domain rather float domain add sv oper simpl chang stage add oper add let mvadd x let addsv r1i1 r2 mvadd r1 r2 mvadd i1 i2 gener code result form replac merg ms merg mv fft ms function avoid duplic ex pression also avoid gener name trivial express 44 avoid trivial oper case multipl function section 21 replac code type abstract domain type must lift stage complex arithmet function abstract domain essenc mean studi oper defin differ case aris result use abstract interpret abstract multipl oper section 21 made use ident x avoid redund comput gener code similarli use ident avoid unnecessari addit multipl fft code exampl addit function add defin abstract domain abstract code use ident x avoid gener unnecessari addit oper function lit variant allow us discrimin zero valu other thu perform case analysi given code fragment let rec adda n1 match n1 n2 x lit 00 x similarli know valu pair factor use inform avoid gener unnecessari multipl use ident f x code fragment fxx fyy fy fxmvadd x els case gener code addit mvadd x gener code multipl common fac tor rather carri factor along multipl factor gener need excerpt illustr inform known annot input fragment use set appropri annot output fragment never examin gener code addit oper add individu valu use defin addit oper complex valu let addta r1 i1 r2 adda r1 r2 adda i1 i2 subtract sub ta multipl mul ta oper use abstract interpret avoid gener trivial oper code similarli defin 45 avoid roundoff error factor fft algorithm root uniti order n n sampl size n known gener time comput factor follow function w comput return result pair lit floatingpoint number repres one complex number let wa dir exp dir 2pi jn dir 1 expdir pi exp dir pi2 exp dir 3pi2 8j mod must odd cossign 10 10 10 10 sinsign 10 10 1010 els 3 quadrant lit csh cossign quadrant lit csh sinsign quadrant els floatofint 2 j pi floatofint n lit co theta lit sin theta gener exact valu possibl eg co exactli zero comput e 4 ensur real imaginari part ident due specif librari trigonometr function comput valu co ident comput valu sin result success refin code function merg defin let mergea dir l1 let rec mg l1 l2 match l1 l2 xx yy bind liftcm retnva x fun x bind liftcm retnva fun bind liftcm retnva multa wa dir n j fun z1 bind ret addta x z1 fun zx bind ret subta x z1 fun zy bind mg xs ys j1 fun ab ret zxa zyb ret bind mg l1 l2 stepwis refin earlier merg mv function involv chang oper new oper viz retn va abstract away sign factor perform name bind similar done retn v earlier mul ta add ta sub ta perform optim complex arithmet oper w gener exact float valu possibl chang fft function use merg instead merg mv effect abstract interpret code gener 46 gener code use stage fft function describ gener code 4point fft yield follow code int fundefdoubl x382 doubl doubl doubl doubl doubl doubl return 0 code contain fewer oper present abstract interpret problem point address fact code contain floatingpoint multipl inspect gener code 8point complex fft show use 4 floatingpoint multipl 52 floatingpoint addit subtract exactli number oper code gener fftw tabl figur 1 summar measur effect abstract interpret fft first column give size fft input vector second column give number floatingpoint multiplicationsaddit subtract code result direct stage third column show number multiplicationsaddit code result use abstract interpret techniqu stage last column show number multiplicationsaddit code gener fftw variou problem size tabl indic gener fft circuit improv abstract interpret abstract interpret produc circuit almost float point oper fftw 1 1 number fftw obtain codelet fftw codelet sampl size 128 256 valu estim base valu smaller size gener fft algorithm size direct stage abst interp fftw 4 8 figur 1 number floatingpoint multiplicationsaddit fft transform differ sampl size 5 conclus propos methodolog write gener produc famili effici combinatori circuit build top rap languag programm guarante gener program would welltyp circuitrealiz gener written express languag easier ascertain correct gener turn correct full famili gener circuit illustr use stage memoiz abstract interpret make possibl refin gener seri small modif gener effici circuit key featur methodolog avoid ad construct intension analysi gener code ensur static welltyped resourc bounded guarante rap languag pre serv inabl travers gener code sever limit posteriori optim run exampl fft circuit show abstract interpret provid promis altern approach allow us keep nextstag datatyp abstract immedi goal futur work see optim perform fftw achiev use abstract interpret particular implement present perform obviou optim broadli interest develop monad librari support use abstract interpret resourceawar program 6 acknowledg would like thank jason eckhardt stephan ellner roumen kaiabachev help comment 7 r structur interpret comput program hardwar design haskel map singl assign program languag reconfigur system implement multistag languag use ast abstract interpret unifi lattic model static analysi program construct approxim fixpoint densiti advantag configur comput monad multistag program fast fourier transform compil reflect function languag hardwar design theorem prove type system bound space function inplac updat design arithmet circuit refin rubi embed microarchitectur design languag within haskel object caml seek solut configur comput hml languag highlevel design highfrequ circuit dynam specialis xc6200 fpga partial evalu metaocaml compil notion comput monad integr formal method digit circuit design hydra oregon graduat institut technic report emir pasal higherlevel languag hardwar synthesi sound reduct semant untyp cbn multistag comput gentl introduct multistag program gener imper environ classifi verilog hardwar descript languag comprehend monad tr comprehend monad notion comput monad fast fourier transform compil embed microarchitectur design languag within haskel sound reduct semant untyp cbn mutlistag comput theori metaml nontriv extend abstract map singl assign program languag reconfigur system abstract interpret verilog hardwar descript languag structur interpret comput program tagless stage interpret type languag environ classifi seek solut configur comput densiti advantag configur comput type system bound space function inplac updateextend abstract higherlevel languag hardwar synthesi dynam specialis xc6200 fpga parial evalu design arithmet circuit refin rubi hardwarec languag hardwar design version 20 multistag program highlevel languag abstract reconfigur comput implement multistag languag use ast gensym reflect ctr christoph herrmann tobia langhamm combin partial evalu stage interpret implement domainspecif languag scienc comput program v62 n1 p4765 septemb 2006 edwin bradi kevin hammond verifi stage interpret verifi compil proceed 5th intern confer gener program compon engin octob 2226 2006 portland oregon usa kedar swadi walid taha oleg kiselyov emir pasal monad approach avoid code duplic stage memoiz function proceed 2006 acm sigplan symposium partial evalu semanticsbas program manipul januari 0910 2006 charleston south carolina jacqu carett gaussian elimin case studi effici gener metaocaml scienc comput program v62 n1 p324 septemb 2006 albert cohen sbastien donadio mariajesu garzaran christoph herrmann oleg kiselyov david padua search program gener implement gener transform highperform comput scienc comput program v62 n1 p2546 septemb 2006