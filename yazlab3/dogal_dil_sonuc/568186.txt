unifi objectori program type function program wide practic objectori program current softwar construct evid despit extens studi type program object still undeni challeng research task design type system objectori program effect captur program error unobtrus program construct paper present novel approach type object make use recent invent notion guard depend datatyp show approach address variou difficult issu eg handl self type type binari method etc simpl natur typetheoret manner remedi defici mani exist approach type object b introduct popular objectori program current softwar practic evid popular may result part tendenc chase latest fad program languag undeni real substanc grow use objectori program ming particular objectedori program significantli softwar organ reus encapsul inherit polymorph build previou experi depend ml 20 18 partial support nsf grant ccr0081316 ccr0092703 permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit commerci advantag copi bear notic full citat first page copi otherwis republish post server redistribut list requir prior specif permiss andor fee asiapepm02 septemb 1214 2002 aizu japan natur interest combin objectori program depend type howev straightforward combin depend type objectori program eg follow javalik approach larg un satisfactori approach often requir substanti use runtim type downcast search satisfactori approach notic recent invent notion guard recurs datatyp constructor 19 combin depend type enabl construct type system program object need use type downcast highli desir type downcast probabl one common caus program error objectori languag like java briefli outlin basic idea behind approach type program object central idea objectedori program cours program ob ject realli program object unfortu nate current simpl answer question unlik paper take view program object spirit smalltalk 12 14 suggest conceptu program object littl intellig capabl perform action accord messag receiv suggest think program object record field method paper present exampl illustr view object formul type set assum exist type constructor msg take type form messag type msg receiv messag type msg object suppos return valu type therefor assign follow type obj object suppos declar msggetfst msggetsnd msgsetfst msgsetsnd messag constructor follow type 1 stand unit type msggetfst msgsetfst figur 1 implement integ pair messagepass style withtyp claus type annot assign type int int obj defin function newintpair 1 note mllike syntax use present exampl throughout paper given integ x 1 reason newintpair welltyp explain section 2 figur 2 valu constructor associ gr datatyp constructor hoa fun newintpair x val val fun dispatch msggetfst xref dispatch msggetsnd yref dispatch msgsetfst dispatch msgsetsnd dispatch dispatch end withtyp int int obj figur 1 implement integ pair construct integ pair anintpair call newintpairxi send messag msggetfst pair obtain first compon anintpairmsggetfst also reset first compon x send messag msgsetfstx oper second compon pair perform similarli except rais runtim anintpair interpret messag sent obvious exist seriou problem approach implement object sinc everi object current assign type obj use type dierenti object instanc suppos msgfoo anoth declar messag constructor type 1msg anintpair msgfoo welltyp execut lead uncaught except unknownmessag runtim clearli undesir anintpairmsgfoo reject compiletim illtyp express address issu mani one objectedori program make use restrict form depend type develop depend ml 20 18 type constructor msg call guard recurs gr datatyp constructor notion gr datatyp constructor extend notion datatyp ml recent invent set function program handl intent polymorph runtim type pass 19 write guard type type variabl context may contain type constraint instanc 1 guard type type equival int int sinc must map 1 int order satisfi type constraint 1 2 int bool type 2 also guard type equival type void ie type element sinc type constraint 1 2 int satisfi 1 2 1 2 notic type follow interest featur instanti type 0 obtain type equival 1 1 0 form 1 2 void 0 form guard recurs datatyp constructor recurs defin type constructor construct guard datatyp a1a2 a1a2 a1a2 a2 hoasapp a1 a2 hoa a1 hoa a1 a1 hoaslift a1 figur 3 exampl gr datatyp constructor special form sum type compon guard type present short exampl gr datatyp constructor follow illustr tion detail exampl found 19 syntax figur 3 essenti declar type constructor hoa take type form anoth type hoa intuit valu type hoa repres higherord abstract syntax tree 9 16 valu type valu constructor associ hoa given type figur 2 note type constructor hoa defin ml neg occurr hoa argument type hoaslam hoa induct defin either reason call hoa guard recurs datatyp constructor hoa defin follow fixedpoint oper kind type valu constructor associ hoa readili defin use foldunfold recurs type inject sum type defin evalu function follow comput valu repres given higherord abstract syntax tree fun evalhoastup x1 evalhoaslam evalhoasapp x1 withtyp hoa note withtyp claus type annot provid user indic eval function type hoa word evalu function eval typepreserv rest paper present type system support gr datatyp constructor outlin approach implement program object explain variou issu objectori program address type 1 1 2 1 2 pattern p x p1 p2 cp claus ms p1 e1 pn en express e x f c e case e ms valu v x c v v1 v2 exp var ctx typ var ctx 1 2 figur 4 syntax intern languag 2g 2 languag 2g present languag 2g base explicitli type secondord polymorph calculu present static dynam semant 2g show type system 2g support gr datatyp con structor sound 21 syntax present syntax 2g figur 4 mostli standard use type variabl 1 unit type possibl empti sequenc type 1 n two kind express variabl x lamvari f fixvari use xf either lamvari fixvari form abstract lamvari fixedpoint express fixvari note lamvari valu fixvari use c constructor assum everi constructor unari 2 also requir bodi either fix valu syntax pattern explain section 24 use substitut map type variabl type dom domain note assum dom extend map similar notat also use substitut map variabl xf express write result appli type express type variabl context express variabl context etc use type variabl context 2g requir explan usual declar type variabl type variabl context use mean wellform type everi type variabl declar type format rule standard thu omit also declar type equal 1 2 intuit decid type equal assum type 1 2 equal 1 2 declar given two type 1 2 write mean 1 equival 2 follow rule deriv judgment form roughli mean match 2 constructor take argument treat constructor take unit argument pattern type rule p pattup patcon claus type rule p claus type rule ms 1 2 figur 5 pattern type rule use 1 2 type constraint constraint satisfi 12 everi deriv expect follow proposit proposit 21 deriv hold 1 2 hold 2 1 also hold 1 2 2 3 hold 1 3 also hold 22 solv type constraint need solv type constraint form 1 2 form type rule 2g tunat decis procedur base set rule figur 7 rule use rang type constructor either builtin userdefin gr datatyp constructor skolem constant theorem 22 1 2 hold 1 2 deriv proof induct deriv 1 2 23 gr datatyp constructor use kind type kind type constructor ariti n n number use recurs type constructor ariti n associ list valu constructor c1 ck 1 k type c form sequenc type express type rule tycon tysnd case e ms 2 figur type rule express free occurr free occurr fresh skolem constant figur 7 rule solv type constraint stand possibl empti sequenc quantifi assum concret syntax declar follow typecon type 2 k n ck k present simpl exampl gr datatyp constructor facilit understand concept exampl 1 follow syntax top declar valu constructor top type top top defin equival exampl 2 follow syntax nil con list declar two constructor nil con type 1 list list list respect type constructor list defin follow essenti equival type constructor t1 note usual list type constructor ml defin 24 pattern match use p pattern usual either type variabl valu variabl may occur pattern use judgment form v p mean match valu v pattern p yield substitut type valu variabl p rule deriv judgment list follow given type variabl context 0 pattern p type use rule figur 5 deriv judgment form 0 p whose mean formal captur lemma 24 25 static dynam semant present type rule 2g figur 6 assum exist signatur type constructor declar type rule standard type tyeq indic type equal 2g modulo type constraint solv pleas notic great dierenc rule present figur 5 type claus standard one 15 form dynam semant 2g use evalu context defin evalu context e fste snde e ev e ee case e ms definit 23 redex defin follow fstv1 v2 redex reduc v1 sndv1 v2 redex reduc v2 x ev redex reduc ex v v redex reduc v let e end redex reduc ex v fixf v redex reduc vf fixf v case v ms redex v p deriv claus p e ms redex reduc e note may certain amount nondetermin reduct case v ms v may match pattern sever claus ms given redex e1 write e1 e2 e1 reduc e2 e1 redex reduc e2 say reduc e 2 one step let reflex transit closur say e1 reduc e2 mani step e1 e2 hold given close welltyp express e 2g use e type erasur e express obtain eras type e evalu e untyp calculu extend pattern match clearli hold e evalu e word 2g support typeerasur semant 26 type sound given express variabl context x close type x dom write deriv x gener write mean deriv hold follow lemma essenti verifi rule deriv judgment form p properli form lemma 24 assum 0 p deriv hold v close valu type 0 deriv v p 0 0 hold proof structur induct deriv 0 p usual need follow substitut lemma establish subject reduct theorem 2g lemma 25 assum e deriv hold e deriv proof structur induct deriv e theorem 26 subject reduct assum e deriv e e hold e also deriv proof assum e1 reduc e2 proof follow structur induct e case proof proce induct height deriv handl variou case use lemma 25 handl type rule tycas lemma 24 need howev prove e welltyp nonvalu express e must reduc anoth welltyp express case case v ms redex v match pattern ms evalu e becom stuck far reason evalu express becom stuck 3 implement object section briefli outlin approach implement object use gr datatyp constructor 31 section 1 notic seriou problem type obj allow dierenti object address problem provid type constructor msg anoth paramet given type class c msgc type intuit messag type sent object class c assign type objc defin follow first foremost emphas class type realli tag use dierenti messag instanc may declar class intpairclass associ fun newpair x val val fun dispatch msggetfst xref dispatch msggetsnd yref dispatch msgsetfst dispatch msgsetsnd dispatch dispatch end withtyp ab b objpairclassab figur 8 constructor pair follow messag constructor correspond type msggetfst msgsetfst function newintpair given type int int objintpairclass sinc anintpair type objintpairclass anintpair msgfoo becom illtyp msgfoo type 1msgc class c intpairclass although class treat type syntact feel better treat type index express follow depend ml 20 18 use class sort class follow present assum avail gr datatyp constructor dml 32 parameter class immedi need class tag parameter type suppos gener monomorph function newintpair polymorph function newpair take argument x type return object repres pair whose first second compon x respect need class constructor pairclass take two given type 1 2 form class 1 2pairclass may use syntax declar class constructor associ follow polymorph messag constructor msggetfst msgsetfst function newpair construct pair object implement figur 9 33 subclass inherit major issu objectori program significantli facilit code organ reus approach issu inherit introduc predic sort class given two class c1 c2 c1 c2 mean c1 subclass c2 type messag constructor mc gener form ac msga ac1 2msga c mean subset sort class c ie sort subclass class c sequenc type length mc becom messag constructor polymorph subclass therefor mc use fun newpair x val fun dispatch msggetfst xref dispatch msggetsnd yref dispatch msgsetfst dispatch msgsetsnd dispatch dispatch end withtyp ab b objabpairclass fun newcoloredpair c x val fun dispatch msggetcolor cref dispatch msgsetcolor dispatch msggetfst xref dispatch msggetsnd yref dispatch msgsetfst dispatch msgsetsnd dispatch dispatch end withtyp ab color b figur 9 function construct object class pairclass coloredpairclass construct messag object tag subclass class c0 instanc messag constructor associ pairclass assign type figur 10 suppos introduc anoth class constructor coloredpairclass take two type form class also assum follow ie 1 2 coloredpairclass subclass 1 2p airclass type 1 2 coloredpairclass pairclass associ coloredpairclass messag constructor msggetcolor msgsetcolor assign type figur 10 implement function newcoloredpair figur 9 construct color pair clearli implement newcoloredpair share lot common code newpair provid proper syntax later programm ecient reus code implement newpair implement newcoloredpair 34 binari method approach type objectori program offer particularli clean solut handl binari meth od instanc declar class eqclass associ two messag constructor msgeq msgneq given follow type suppos self object type objc c eq pass messag msgeqoth self requir type objc order self msgeqoth welltyp unfortun requir enforc type system java consequ msggetfst msgsetfst msggetcolor coloredpairclass color msggetcolor msgsetcolor coloredpairclass color 1msgsetcolor figur 10 messag constructor type type downcast often need implement test equal object 35 self type approach also oer particularli clean solut handl notion self type name type receiv messag suppos want support messag msgcopi sent object obtain copi object 3 may assum msgcopi messag constructor associ class objclass c objclass hold class c assign msgcopi follow type indic return object class object messag sent done java state type system java object return anoth object receiv messag msgcopi imprecis rich sourc use type downcast 36 inherit inherit done smalltalklik manner signific dierenc use concret exampl illustr inherit implement also proper place us introduc syntax design facilit objectori program use follow syntax declar class objclass messag constructor msgcopi type note selftyp mere syntact sugar class objclass msgcopi selftyp self addit syntax also automat induc definit function superobj written follow mllike syntax self ordinari variabl fun dispatch msgcopi self dispatch dispatch end withtyp objclass obja obja function superobj present sole explain inherit implement function 3 actual implement copi construct occur sourc program type function objclassobja obja indic function take object tag subclass c objclass return object tag class gener class c super function type cobja obja associ c soon clear function hold key implement inherit use follow syntax declar class int1class coloredint1class well messag constructor associ class int1class inherit objclass msggetx int msgsetx int unit msgdoubl unit class coloredint1class inherit int1class color alreadi defin type msggetc msgsetc super function associ class int1class coloredint1class automat induc follow fun dispatch msgdoubl dispatch dispatch end withtyp int1class obja obja fun dispatch dispatch end withtyp coloredint1class obja obja function construct object class int1class coloredint1class implement figur 11 someth realli interest suppos use newint1 newcoloredint1 construct object o1 o2 tag int1class coloredint1class respect send messag msgcopi o1 copi o1 o1 return send msgdoubl o2 integ valu o2 doubl inherit correspond method class int1class remark object o2 return send messag msgcopi o2 reason copi method defin o2 search copi method eventu find one defin class objclass method defin either class coloredint1class class int1class desir consequ o2 treat object fun newint1 x0 val fun dispatch dispatch msgsetx dispatch msgcopi newint1 x dispatch dispatch msg dispatch end withtyp int objint1class fun newcoloredint1 c0 color x0 val fun dispatch dispatch msgsetc dispatch dispatch msgsetx dispatch dispatch msg dispatch end withtyp int objcoloredint1class figur 11 function construct object int1class coloredint1class class int1class either fbound polymorph matchbound polymorph return object would class int1class class coloredint1class would gener newint1 o2msgget x make type system unsound current awar approach correctli type simpl exam ple note function newint becom illtyp employ notion mytyp 37 subtyp explicit subtyp relat ap proach instead use existenti quantifi depend type simul subtyp instanc given class tag c type acobja sum type obja satisfi c henc c1 c objc1 regard subtyp objectc valu type objc1 coerc valu type objectc exampl type objobjecteqclassobjecteqclasspairclass pair object whose compon support equal test 4 relat work conclus work relat intent polymorph type class alreadi rich bodi studi literatur pass type runtim typesaf manner 11 10 17 mani studi follow framework 13 essenti provid construct typecas term level perform type analysi primit recursor typerec type name type level defin new type construc tor languag ml 13 subsequ extend r 11 support typeerasur semant type constructor r r seen special gr datatyp constructor system type class haskel provid program methodolog great use practic common approach implement type class dictionarypass dictionari essenti record member function particular instanc type class 1 encount notion gr datatyp constructor seek altern implement type class intension polymorph approach implement type class use gr datatyp constructor found 19 depend datatyp dml 20 18 also shed light gr datatyp constructor instanc follow depend datatyp declar dml datatyp list nnat consn1 listn syntax introduc type constructor list take type type index sort nat form list type constructor nil con assign follow type con given type natur number n type listn list length n element type formal type constructor list defin follow clearli also form guard datatyp constructor guard constraint type index express rather type notion object paper larg taken smalltalk 12 particularli clean intuit articul found 14 literatur type objectori program simpli vast us give even modestli comprehens overview relat work pleas see 5 refer instead focu close relat work either directli influenc motiv current work bound polymorph 8 6 essenti impos subtyp restrict quantifi type variabl instanc suppos want implement class order sequenc order insert element sequenc must compar element sequenc therefor insert element class provid appropri method comparison achiev bound polymorph fbound polymorph 7 gener simpl bound polymorph introduc handl complex issu type binari method objectori program sinc adopt design gj 2 help significantli increas express type system java howev fbound polymorph seem interact well subclass relat eg pleas see exampl page 59 5 matchingbound polymorph similar bound polymorph main dierenc match constraint impos quantifi type variabl instead subtyp constraint notion mytyp 4 essenti refer type receiv object me sage matchbound polymorph notion mytyp allow possibl dispens use fbound polymorph languag 4 realli stateoftheart objectori program languag static type concern work carri 3 imper featur introduc type system design share mani common featur work 4 though employ complet dierent typetheoret approach particular intend simplifi notion mytyp also make eectiv captur program invari current particularli interest implement closlik object system top dml extend gr datatyp constructor facilit objectori program style type function program set 5 r implement haskel overload make futur safe past ad gener java program languag paradigmat objectori program languag design foundat objectori languag modest model record understand type formul simpl type theori type flexibl type analysi intension polymorph typeerasur semant compil polymorph use intension type analysi definit standard ml revis comput deduct fulli reflex intension type analysi depend type practic program guard recurs datatyp constructor depend type practic program tr smalltalk80 languag implement understand type data abstract polymorph fbound polymorph objectori program implement haskel overload compil polymorph use intension type analysi smalltalk object design make futur safe past intension polymorph typeerasur semant depend type practic program flexibl type analysi foundat objectori languag definit standard ml depend type practic program