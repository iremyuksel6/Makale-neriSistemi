larg fast instruct window toler cach miss instruct window size import design paramet mani modern processor larg instruct window offer potenti advantag expos larg amount instruct level parallel unfortun naiv scale convent window design significantli degrad clock cycl time undermin benefit increas parallelismthi paper present new instruct window design target achiev latenc toler larg window clock cycl time small window key observ instruct depend long latenc oper eg cach miss execut sourc oper complet instruct move convent small issu queue much larger wait instruct buffer wib long latenc oper complet instruct reinsert issu queue paper focu specif load cach miss depend instruct simul reveal 8way processor 2kentri wib 32entri issu queue achiev speedup 20 84 50 convent 32entri issu queue subset spec cint2000 spec cfp2000 olden benchmark respect b introduct mani today microprocessor achiev high perform combin high clock rate abil dynam process multipl instruct per cycl unfortu nate two import compon perform often odd one anoth exampl small hardwar structur usual requir achiev short clock cycl time larger structur often necessari identifi exploit instruct level parallel ilp particularli import structur issu window examin cycl choos readi instruct execut larger window often expos larger number independ instruct execut outof order unfortun size issu window limit due strict cycl time constraint conflict cycl time dynam exploit parallel exacerb long latenc oper data cach miss even crosschip commun 1 22 challeng develop microarchitectur permit short cycl time larg instruct window paper introduc new microarchitectur reconcil compet goal short cycl time larg instruct window observ instruct depend long latenc oper execut long latenc oper complet allow us separ instruct execut near futur execut distant futur key design entir chain instruct depend long latenc oper remov issu window place wait instruct buffer wib reinsert long latenc oper complet fur thermor sinc instruct depend chain candid reinsert issu window need implement select logic rather full wakeup select requir convent issu window track true depend done wakeup logic handl issu window instruct reinsert paper focu toler data cach miss howev believ techniqu could extend oper latenc difficult determin compil time specif goal explor design microarchitectur larg enough effect window toler dram access leverag exist techniqu provid larg regist file 13 34 assum larg activ list 1 possibl sinc critic path 4 techniqu exist keep activ list 1 activ list refer hardwar unit maintain state inflight instruct often call reorder buffer larg use rel small hardwar structur 31 explor sever aspect wib design includ detect instruct depend long latenc oper insert instruct wib bank vs nonbank organ polici select among elig instruct reinsert issu window total capac 8way processor compar commit instruct per cycl ipc wibbas design 32entri issu window 2048entri bank wib twolevel regist file 128 l12048 l2 convent 32entri issu window singlelevel regist file 128 regist simul show wib speedup convent design 20 spec cint2000 84 spec cfp2000 50 olden speedup signific fraction achiev 2048entri convent issu window 35 140 103 even ignor clock cycl time effect remaind paper organ follow section provid background motiv work design present section 3 evalut perform section 4 section 5 discuss relat work section 6 summar work present futur direct background motiv 21 background superscalar processor maxim serial program perform issu multipl instruct per cycl one import aspect system identifi independ instruct execut parallel identifi exploit instruct level parallel ilp today processor employ dynam schedul branch predict specul execut dynam schedul hardwar techniqu identifi issu multipl independ instruct singl cycl 32 hardwar look ahead fetch instruct buffercal windowfrom select instruct issu function unit instruct issu operand avail independ instruct execut outoford result instruct execut outoford commit architectur state program order word although instruct within window execut outoford window entri manag fifo instruct enter depart program order simplifi design assum instruct window examin select execut note possibl separ fifo manag activ list reorder buffer independ instruct identif issu queue describ gardless conflict increas window issu queue size expos ilp keep clock cycl time low use small structur 1 22 histor ical smaller window domin design result higher clock rate unfortun small window quickli fill long latenc oper particular consid long latenc cach miss servic main memori latenc larg time load reach head window data still arriv memori unfortun significantli degrad perform sinc window contain execut instruct instruct load depend chain stall instruct independ load finish wait commit program order way make progress bring new instruct window accomplish use larger window 22 limit studi remaind section evalu effect window size program perform ignor clock cycl time effect goal determin potenti perform improv could achiev larg instruct window begin descript processor model follow short discuss perform variou instruct window size 221 methodolog studi use modifi version simplescalar version 30b 8 spec cpu2000 17 olden 11 benchmark suit spec cpu2000 benchmark precompil binari obtain simplescalar develop 33 gener compil flag suggest wwwspecorg olden binari gener alpha compil cc use optim flag o2 spec benchmark oper refer data set subset olden benchmark use input em3d 20000 node ariti 10 mst 1024 node perimet 4kx4k imag treeadd level omit sever benchmark either data cach miss ratio 1 ipc unreason low health ammp less base configur processor design loos base alpha 21264 microarchitectur 12 14 19 use seven stage pipelin includ specul load execut loadstor wait predict model cluster design 21264 instead assum singl integ issu queue issu 8 instruct per cycl singl float point issu queue issu 4 instruct per cycl tabl 1 list variou paramet base machin note integ float activ list 128 128 int reg 128 fp reg loadstor queue 64 load 64 store issu queue float point issu width 12 float point decod width 8 commit width 8 instruct fetch queue 8 function unit 8 integ alu 1cycl multipli 7cycl 4 fp adder 4cycl multipli 4cycl divid nonpipelin 12 nonpipelin 24cycl branch predict bimod twolevel adapt combin specul date 2cycl penalti direct jump miss btb 9cycl other storewait tabl 2048 entri bit clear everi cycl l1 data cach inst cach unifi cach 256 kb 4 way memori latenc 250 cycl tlb 128entri 4way associ 4 kb page size 30cycl penalti tabl 1 base configur point regist file larg activ list remaind paper state singl valu activ listregist file size valu appli integ float point regist file simul modifi support specul updat branch histori historybas fixup return addressstack repair pointeranddata fixup mechan 26 27 also modifi simul warm instruct data cach initi fast forward phase spec benchmark skip first four hundr million instruct execut next one hundr million instruct detail perform sim ulat olden benchmark execut 400m instruct complet approach use throughout paper note result qualit similar use differ instruct execut window 24 222 vari window size perform simul vari issu queue size base power 2 4096 issu queue size 32 64 128 keep activ list fix 128 entri remain configur activ list regist file issu queue equal size load store queue alway set one half activ list size limit number outstand request unless otherwis state figur 1 show commit instruct per cycl ipc variou window size normal base 32entri configur new ipc old spec integ float point olden benchmark absolut ipc valu base machin provid section 4 goal examin rel effect larger instruct window simul show initi boost ipc window size increas 2k three set benchmark except mst effect plateau beyond 2k entri ipc increas slightli match intuit sinc 250 cycl memori latenc 2000 instruct fetch 8way proce sor larger instruct window beyond 2k provid minim benefit mani float point benchmark achiev speedup 2 art achiev speedup 5 2k window speedup larger window unrol loop mani time allow overlap mani cach miss similar phenomenon occur mst result motiv desir creat larg instruct window challeng architect accomplish without signific impact clock cycl time next section present propos solut 3 larg window design section present techniqu provid larg instruct window maintain advantag small structur critic path begin overview convey intuit behind design follow detail descript particular de sign conclud section discuss variou design issu altern implement 31 overview base microarchitectur instruct issu queue examin potenti execut activ list larger number entri issu queue 128 vs 32 allow complet yet commit instruct releas issu queue entri sinc activ list critic path 4 assum increas size without affect clock cycl time nonetheless face long latenc oper issu queue could fill instruct wait operand stall execut make observ instruct depend long latenc oper execut long latenc oper complet thu need exam020060100140180bzip2 gcc gzip parser perlbmk vortex vpr averag spec 2000 integer100300500applu art facerec galgel mgrid swim wupwis averag b spec 2000 float point050150250350450em3d mst perimet treeadd averag c olden figur 1 larg window perform ine wakeupselect logic critic path note observ exploit palacharla et al 22 techniqu examin head issu queue howev goal design remov wait instruct issu queue place wait instruct buffer wib long latenc oper complet instruct move back issu queue execut design instruct remain issu queue short time either execut properli remov due depend long latenc oper paper focu specif instruct depend chain load cach miss howev believ techniqu could extend type long latenc oper figur 2 show pipelin wibbas microarchitectur base 21264 twolevel regist file describ later fetch stage includ icach branch predict instruct fetch queue slot stage direct instruct integ float point pipelin base type instruct go regist renam enter issu queue instruct select issu queue either proceed regist read execut memorywriteback stage move wib regist read stage wib instruct wait specif cach miss depend complet occur instruct reinsert issu queue repeat wakeupselect process possibl move back wib depend anoth cach miss remaind section provid detail wib oper organ 32 detect depend instruct import compon design abil identifi instruct depend chain load cach miss achiev leverag exist issu queue wakeupselect logic normal execut wakeupselect logic determin instruct readi execut ie operand avail select subset readi instruct accord issu constraint eg structur hazard age instruct leverag logic add addit signal call wait bitthat indic particular sourc operand ie input regist valu pretend readi signal similar readi bit use synchron true depend differ use indic particular sourc operand avail extend period time instruct consid pretend readi one operand pretend readi operand truli readi pretend readi instruct particip normal issu request truli readi issu instead sent function unit pretend readi instruct place wib issu queue entri subsequ freed issu logic though actual execut note potenti optim scheme would consid instruct pretend readi soon one operand pretend readi would allow instruct move wib earlier thu reduc pressur issu queue resourc implement wait bit physic regist initi set load cach miss depend instruct observ wait bit remov issu queue set wait bit destin regist caus depend instruct remov issu queue set correspond wait bit result queue issu point queue issu integ exec integ exec 32kb 4way cach data slot memori reg file reg file integ regist renam instruct wait instruct buffer fetch renam issu regist read execut float cach 32kb 4way float renam regist point reg file reg file figur 2 wibbas microarchitectur regist therefor instruct directli indirectli depend load identifi remov issu queue load miss signal alreadi gener alpha 21264 sinc load instruct specul assum hit cach allow load depend instruct execut consecut cycl case cach miss alpha depend instruct retain issu queue load complet case instruct move wib instruct might enter issu queue instruct produc operand exit issu queue produc instruct could either execut properli sourc operand avail could wib instruct eventu move wib therefor wait bit must avail wherev convent readi bit avail case regist renam note may possibl steer instruct wib renam stage issu stage plan investig futur work current design implement instead instruct enter issu queue move wib necessari 33 wait instruct buffer wib contain instruct directli indirectli depend load cach miss wib must design satisfi sever import criteria first must contain differenti depend instruct individu outstand load second must allow individu instruct depend multipl outstand load final must permit fast squash branch mispredict except occur satisfi requir design wib oper conjunct activ list everi instruct activ list alloc entri wib although may alloc entri wib never depend load miss simplifi squash mispr dict whenev activ list entri ad remov correspond oper perform wib mean wib entri alloc program order link wib entri load miss use bitvector indic wib locat depend specif load instruct move wib appropri bit set bitvector arrang two dimension array column bitvector load cach miss bitvector alloc load miss detect therefor outstand load miss store pointer correspond bitvector note number bitvector bound number outstand load miss howev possibl fewer bitvector outstand miss link instruct specif load augment operand wait bit index bitvector tabl correspond load cach miss instruct depend case instruct depend multipl outstand load use simpl fix order polici examin sourc operand wait bit store instruct wib first outstand load encount requir propag bitvector index wait bit describ possibl store bitvector index physic regist sinc space avail howev requir instruct move wib consum regist port reduc regist pressur assum bitvector index store separ structur wait bit instruct wib reinsert issu queue correspond load miss resolv reinsert share bandwidth case 8 instruct per cycl newli arriv instruct decod dispatch issu queue dispatch logic modifi give prioriti instruct reinsert wib ensur forward progress note instruct reinsert issu queue complet one load may depend anoth outstand load issu queue logic detect one instruct remain operand unavail abl due load miss way detect first load depend instruct set appropri bit new load bitvector remov issu queue fundament differ wib simpli scale issu queue larger en tri larger queue issu instruct operand avail contrast techniqu could move instruct issu queue wib mani time worst case activ instruct depend singl outstand load requir bitvector cover entir activ list number entri wib determin size activ list analysi section 2 indic 2048 entri good window size achiev signific speedup therefor initi assum 2kentri activ list 1kentri load store queue assum wib entri 8 byte total wib capac 16kb bitvector also consum great deal storag limit number outstand request support section 4 explor impact limit number bitvector load queue size 331 wib organ assum bank wib organ one instruct extract bank everi two cy cle two cycl includ determin appropri instruct read appropri wib entri fix instruct width wib issu queue set number bank equal twice width therefor sustain reinsert full bandwidth read instruct wib even bank one cycl odd bank next cycl enough instruct elig set bank recal wib entri alloc program order conjunct activ list entri perform alloc use roundrobin across bank interleav individu instruct granular therefor entri bank also alloc releas program der partit load bitvector accord bank bit map case 2k entri wib dispatch width issu queue 8 would bank 128 entri bank also store local head tail pointer reflect program order instruct within bank figur 3 show intern organ wib read access bank set even odd oper independ select instruct reinsert issu queue examin appropri 128 bit complet load bank creat singl bitvector logic bitvector complet load result bitvector examin select oldest activ instruct program order mani possibl polici select instruct examin simpl polici later paper leav investig sophist polici eg data flow graph order critic path 15 futur work regardless select polici result one bit 128 set directli enabl output correspond wib entri without need encod decod wib index process repeat updat bitvector clear wib entri access complet may includ new elig instruct anoth load miss complet access polici similar select polici implement issu queue logic highlight import differ wib convent issu queue convent issu queue requir wakeup logic broadcast regist specifi entri wib elimin broadcast use complet load bitvector establish candid instruct select issu queue requir regist specifi broadcast maintain true depend contrast wibbas architectur leverag much smaller issu queue task wib select instruct reinsert order possibl enough issu queue entri avail consum instruct extract wib case one bank stall access wait next access two cycl later attempt reinsert instruct avoid potenti livelock access chang start bank alloc avail issu queue slot furthermor bank remain highest prioriti instruct reinsert abl bank assign lowest prioriti insert instruct instruct rein sert livelock could occur fix prioriti scheme sinc instruct highest prioriti bank could depend instruct lower prioriti bank could produc continu stream instruct move wib issu queue back wib sinc produc instruct yet complet produc instruct never complet sinc lower prioriti bank although scenario seem unlik occur benchmark thu use bit vector wib bank issu queue prioriti even bank head tail bit vector wib bank issu queue queue prioriti odd bank head tail figur 3 wib organ roundrobin prioriti 332 squash wib entri squash instruct requir clear appropri bit bitvector reset bank local tail pointer twodimension bitvector organ simplifi bitvector clear oper sinc appli bit everi bitvector recal column correspond outstand load miss thu clear bit row associ squash instruct 34 regist file consider support mani inflight instruct number renam regist must scale proport sever altern design larg regist file includ multicycl access multilevel 13 34 multipl bank 5 13 queuebas design 6 paper use twolevel regist file 13 34 oper principl similar cach hierarchi simul multibank regist file show similar result detail regist file design perform avail elsewher 20 altern wib design wib organ one sever alterna tive one altern consid larg nonbank multicycl wib although may possibl pipelin wib access would produc fulli pipelin access simul see section 4 indic pipelin may necessari anoth altern consid poolofblock structur implement wib organzi load miss cach obtain free block buffer depend instruct pointer block store load load queue lq use deposit depend instruct wib load complet instruct block reinsert issu queue block contain fix number instruct slot slot hold inform equival issu queue entri import differ approach compar techniqu use instruct store depend chain order block may need link togeth handl load long depend chain complic squash sinc program order associ wib entri although could maintain inform program order list manag load depend chain becom complex time consum squash although bitvector approach requir space simplifi manag poolofblock approach potenti deadlock enough wib entri continu investig techniqu reduc list manag overhead handl deadlock 36 summari wib architectur effect enlarg instruct window remov instruct depend load cach miss issu queue retain wib miss servic achiev leverag exist processor issu logic without affect processor cycl time circuit complex wib archi tectur instruct stay issu queue short period time therefor new instruct brought instruct window much rapidli convent architectur fundament differ wib design design simpli scale issu queue scale issu queue significantli complic wakeup logic turn affect processor cycl time 1 22 howev wib requir simpl form wakeup logic instruct depend chain load miss awaken miss resolv need broadcast instruct monitor result buse evalu section evalu wib architectur begin present overal perform wib design compar convent architectur next explor impact variou design choic wib per formanc includ limit number avail bitvector limit wib capac polici select instruct reinsert issu queue multicycl nonbank wib simul reveal wibbas architectur increas perform term ipc set benchmark averag 20 84 50 spec int spec fp olden respect also find limit number outstand load 64 produc similar improv spec int olden bench mark reduc averag improv spec fp 45 wib capac low 256 entri maximum 64 outstand load still produc averag speedup 9 26 14 respect benchmark set 41 overal perform begin present overal perform improv ipc rel processor 32entri issu queue singl cycl access 128 regist henc 128entri activ list 32iq128 figur 4 show speedup ipc new ipc old variou microarchitec ture although present result 8issu processor overal result qualit similar 4issu pro cessor wib bar correspond 32entri issu queue bank wib organ 2kentri activ list 2k regist use twolevel regist file 128 regist first level 4 read port 4 write port pipelin second level 4cycl latenc assum 32entri issu queue 128 level one regist set clock cycl time wibbas design approxim clock cycl equival base architectur experi number outstand load thu bitvector limit explor paramet tabl 2 show absolut ipc valu base configur bank wib design along branch direct predict rate l1 data cach miss rate l2 unifi cach local miss rate base configur comparison also includ two scale version convent microarchitectur configur use 2kentri activ list singl cycl access 2k regi ter one retain 32entri issu queue 32iq2k benchmark base branch dl1 ul2 local wib ipc dir miss miss ipc pred ratio ratio gzip 225 091 002 004 225 parser 083 095 004 022 095 perlbmk vortex applu 417 098 010 026 428 art 042 096 035 073 164 galgel 192 098 007 026 397 mgrid 258 097 006 042 257 wupwis 338 100 003 025 399 em3d 228 099 002 016 227 mst 096 100 007 049 251 perimet 100 093 004 038 116 treeadd 105 095 003 033 128 tabl 2 benchmark perform statist scale issu queue 2k entri 2kiq2k configur help isol issu queue activ list provid approxim upper bound expect perform result shown figur 4 make follow observ first wib design produc speedup 10 12 benchmark averag speedup 20 84 50 spec int spec fp olden respect harmon mean ipc shown tabl 2 increas 10 124 spec int 142 302 spec fp 117 161 olden program larg speedup larg issu queue wib design abl captur signific fraction avail speedup howev program 2k issu queue produc larg speedup wib mgrid strike exampl wib produc speedup 2k issu queue yield speedup two phenomenon result wib recycl instruct issu queue consum issu bandwidth 2k issu queue use instruct readi execut evid track number time instruct insert wib bank implement averag number time instruct insert bzip2 gcc gzip parser perlbmk vortex vpr averag spec 2000 integ 522 39100140180220260 applu art facerec galgel mgrid swim wupwis averag b spec 2000 float point 438 261100140180220 em3d mst perimet treeadd averag c olden figur 4 wib perform wib four maximum 280 investig insert polici see reduc valu averag insert count one maximum 9 produc speedup 17 also note sever benchmark increas activ list produc notic speedup case even outperform wib indic issu queue bottleneck benchmark howev overal wib significantli outperform increas activ list due size wib larger regist file also evalu altern use space doubl data cach size base configur 64kb simul result reveal less 2 improv perform benchmark except vortex show 9 improv 32kb data cach indicating020060100140180integ fp olden figur 5 perform limit bitvector wib may better use space explor tradeoff later section also perform two sensit studi reduc memori latenc 250 cycl 100 cycl increas unifi l2 cach 1mb result match expect shorter memori latenc reduc wib speedup averag 5 30 17 spec int spec fp olden benchmark respec tive larger l2 cach smaller impact speedup achiev wib averag speedup 5 61 38 spec int spec fp olden benchmark respect larger cach impact integ benchmark show dramat reduc local l2 miss ratio averag 22 6 cach exploit local program refer stream sometim suffici larg captur program entir work set contrast wib expos parallel toler latenc program larg work set lack local remaind paper present averag result benchmark suit detail result benchmark avail elsewher 20 42 limit bitvector number bitvector import sinc bitvector must map entir wib area requir becom excess explor effect limit bitvector outstand load simul 2kentri wib 16 32 64 bitvector figur 5 show averag speedup base machin includ 1024 bitvector configur result show even 16 bitvector wib achiev averag speedup 16 spec int 26 spec fp 38 olden benchmark spec fp program particularli art affect limit bitvector sinc benefit memori level parallel bitvector 16kb wib achiev speedup 19 45 50 three set benchmark respect integ fp olden figur 6 wib capac effect 43 limit wib capac reduc wib area limit number bitvector certainli use optim howev decreas requir area achiev use smaller capac wib section explor perform impact reduc capac wib activ list regist file figur 6 show averag speedup wib size rang 128 2048 bitvector limit 64 result show 1024entri wib achiev averag speedup 20 spec int 44 spec fp 44 olden configur requir 32kb extra space 8kb wib entri 8kb bitvector 8kb 1024entri regist file roughli area equival doubl cach size 64kb state 64kb l1 data cach produc notic speedup benchmark wib better use area 44 wib issu queue instruct select wib design implement specif polici select elig instruct reinsert issu queue current polici choos instruct bank program order sinc bank oper independ altern cycl extract instruct true program order evalu impact instruct select polici use ideal wib singl cycl access time entir structur within design evalu follow instruct select poli cie 1 current bank scheme 2 full program order among elig instruct 3 round robin across complet load load instruct program order 4 instruct oldest complet load program show littl chang perform across select polici mgrid one show signific improv mention mgrid show speedup bank wib 17 17 and020060100140180integ fp olden bank 4cycl 6cycl figur 7 nonbank wib perform 13 three new polici respect speedup due better schedul actual depend graph howev case schedul wors three program show slowdown compar bank wib oldest load polici 4 bzip 11 parser 15 facerec 5 45 nonbank multicycl wib access explor benefit bank organ versu multicycl nonbank wib organ figur 7 show averag speedup bank nonbank organ base architectur except differ wib access latenc 4cycl 6cycl bar assum nonbank wib instruct extract full program order result show longer wib access delay produc slight reduct perform compar bank scheme indic may abl implement sophist select polici pipelin wib access necessari 5 relat work limit studi similar perform skadron et al 28 result show branch mispredict limit benefit larger instruct window better branch predict better instruct cach behavior synergist effect benefit larger instruct window larger data cach trade overlap effect simul assum larg 8mb l2 cach model regist updat unit ruu 29 unifi activ list issu queue renam regist file studi instruct window size 256 examin extens research architectur design support larg instruct window multiscalar 30 trace processor 23 one larg central instruct window distribut smaller window among multipl parallel process element dynam multithread processor 2 deal complex larg window employ hierarchi instruct win dow cluster provid anoth approach collect small window associ function unit use approxim wider deeper instruct window 22 recent research 7 18 investig issu logic design attemp support larg instruct window without imped improv clock rate michaud exploit observ instruct depend long latenc oper unnecessarili occupi issu queue space long time address problem preschedul instruct base data depend dependencebas issu queue design studi 9 10 22 zill et al 35 balasubramonian et al 4 attack problem caus long latenc oper util futur thread use portion issu queue slot physic regist conduct precomputa tion power consumpt becom import consider processor design research also studi low power instruct window design 3 16 6 conclus two import compon overal execut time clock cycl time number instruct commit per cycl ipc high clock rate achiev use small instruct window limit ipc reduc abil identifi independ instruct tension larg instruct window short clock cycl time import aspect modern processor design paper present new techniqu achiev latenc toler larg window maintain high clock rate small window design accomplish remov instruct convent issu queue directli indirectli depend long latenc oper instruct place wait instruct buffer wib reinsert issu queue execut long latenc oper com plete move instruct critic path previous occupi issu queue entri util processor look deep program ilp import differ wib scaledup convent issu queue wib implement simplifi form wakeupselect achiev allow instruct depend chain consid reinsert issu window compar full wakeupselect convent issu queue wib requir select logic instruct reinsert simul 8way processor 32entri issu queue reveal ad 2kentri wib produc speedup 20 84 50 subset spec cint2000 spec cfp2000 olden benchmark spectiv also explor sever wib design paramet show alloc chip area wib produc signifcantli higher speedup use area increas level one data cach capac 32kb 64kb futur work includ investig potenti execut instruct wib separ execut core either convent core perhap grid processor 25 polici space select instruct area current research final regist file design manag eg virtualphys multibank multicycl prefetch twolevel organ requir investig acknowledg work support part nsf career award mip9702547 ccr0092832 nsf grant cda972637 eia9972879 duke univers donat intel ibm compaq microsoft eric son thank anonym review comment suggest work r clock rate versu ipc end road convent microarchitectur dynam multithread processor power energi reduct via pipelin balanc dynam alloc processor resourc nearbi distant ilp reduc complex regist file dynam superscalar processor scalabl regist renam via quack regist file evalu futur microprocessorsth simplescalar tool set reduc complex issu logic earli experi olden compaq comput corpor issu logic 600mhz outoford execut microprocessor focus processor polici via criticalpath predict spec cpu2000 measur cpu perform new millennium circuit widewindow superscalar processor alpha 21264 microprocessor larg trace processor memori behavior spec2000 benchmark suit character remov branch mi predict improv predict procedur return return addressstack repair mechan branch predict instruct issu logic highperform multiscalar processor power4 system microarchitectur effici algorithm exploit multipl arithmet unit understand backward slice perform degrad instruct tr instruct issu logic highperform interrupt multipl function unit pipelin comput multiscalar processor complexityeffect superscalar processor trace processor dynam multithread processor improv predict procedur return returnaddressstack repair mechan branch predict instructionwindow size cach size lowcomplex issu logic understand backward slice perform degrad instruct circuit widewindow superscalar processor clock rate versu ipc multiplebank regist file architectur twolevel hierarch regist file organ vliw processor reduc complex issu logic dynam alloc processor resourc nearbi distant ilp focus processor polici via criticalpath predict power energi reduct via pipelin balanc energyeffect issu logic design space evalu grid processor architectur instruct schedul logic reduc complex regist file dynam superscalar processor alpha 21264 microprocessor earli experi olden dataflow preschedul larg instruct window outoford processor character remov branch mispredict ctr rama sangireddi regist port complex reduct wideissu processor select instruct execut microprocessor microsystem v31 n1 p5162 februari 2007 simha sethumadhavan rajagopalan desikan doug burger charl r moor stephen w keckler scalabl hardwar memori disambigu highilp processor ieee micro v24 n6 p118127 novemb 2004 il park chong liang ooi n vijaykumar reduc design complex loadstor queue proceed 36th annual ieeeacm intern symposium microarchitectur p411 decemb 0305 srikanth srinivasan ravi rajwar haitham akkari amit gandhi michael upton continu flow pipelin achiev resourceeffici latenc toler ieee micro v24 n6 p6273 novemb 2004 yongxiang liu anahita shayesteh gokhan memik glenn reinman scale issu window lookahead latenc predict proceed 18th annual intern confer supercomput june 26juli 01 2004 malo franc edward brekelbaum jeff rupley chri wilkerson bryan black hierarch schedul window proceed 35th annual acmiee intern symposium microarchitectur novemb 1822 2002 istanbul turkey hiroshi sasaki masaaki kondo hiroshi nakamura energyeffici dynam instruct schedul logic instruct group proceed 2006 intern symposium low power electron design octob 0406 2006 tegernse bavaria germani yongxiang liu anahita shayesteh gokhan memik glenn reinman tornado warn peril select replay multithread processor proceed 19th annual intern confer supercomput june 2022 2005 cambridg massachusett dan ernst andrew hamel todd austin cyclon broadcastfre dynam instruct schedul select replay acm sigarch comput architectur news v31 n2 may adrin cristal jo f martnez josep llosa mateo valero case resourceconsci outoford processor toward kiloinstruct inflight processor acm sigarch comput architectur news v32 n3 p310 june 2004 ilhyun kim mikko h lipasti macroop schedul relax schedul loop constraint proceed 36th annual ieeeacm intern symposium microarchitectur p277 decemb 0305 haitham akkari ravi rajwar srikanth srinivasan checkpoint process recoveri toward scalabl larg instruct window processor proceed 36th annual ieeeacm intern symposium microarchitectur p423 decemb 0305 e f torr p ibanez v vinal j llaberia store buffer design firstlevel multibank data cach acm sigarch comput architectur news v33 n2 p469480 may 2005 jo f martnez jose renau michael c huang milo prvulov josep torrella cherri checkpoint earli resourc recycl outoford microprocessor proceed 35th annual acmiee intern symposium microarchitectur novemb 1822 2002 istanbul turkey adrian cristal oliverio j santana francisco cazorla marco galluzzi tanausu ramirez miquel perica mateo valero kiloinstruct processor overcom memori wall ieee micro v25 n3 p4857 may 2005 tali moreshet r iri bahar powerawar issu queue design specul instruct proceed 40th confer design autom june 0206 2003 anaheim ca usa tali moreshet r iri bahar effect specul perform issu queue design ieee transact larg scale integr vlsi system v12 n10 p11231126 octob 2004 mikko h lipasti brian r mestan erika gunadi physic regist inlin acm sigarch comput architectur news v32 n2 p325 march 2004 amit gandhi haitham akkari ravi rajwar srikanth srinivasan konrad lai scalabl load store process latenc toler processor acm sigarch comput architectur news v33 n2 p446457 may 2005 ilhyun kim mikko h lipasti halfpric architectur acm sigarch comput architectur news v31 n2 may han vandierendonck philipp manet thibault delavalle igor loisel jeandidi legat bypass outoford execut pipelin increas energyeffici proceed 4th intern confer comput frontier may 0709 2007 ischia itali srikanth srinivasan ravi rajwar haitham akkari amit gandhi mike upton continu flow pipelin acm sigop oper system review v38 n5 decemb 2004 huiyang zhou thoma cont enhanc memori level parallel via recoveryfre valu predict proceed 17th annual intern confer supercomput june 2326 2003 san francisco ca usa yu bai r iri bahar lowpow inorderoutoford issu queue acm transact architectur code optim taco v1 n2 p152179 june 2004 tanau ramrez alex pajuelo oliverio j santana mateo valero kiloinstruct processor runahead prefetch proceed 3rd confer comput frontier may 0305 2006 ischia itali alex pajuelo antonio gonzlez mateo valero specul execut hide memori latenc acm sigarch comput architectur news v33 n3 june 2005 lui ceze karin strauss jame tuck josep torrella jose renau cava use checkpointassist valu predict hide l2 miss acm transact architectur code optim taco v3 n2 p182208 june 2006 haitham akkari ravi rajwar srikanth srinivasan analysi resourc effici checkpoint architectur acm transact architectur code optim taco v1 n4 p418444 decemb 2004 madhavi g valluri lizi k john kathryn mckinley lowpow lowcomplex instruct issu use compil assist proceed 19th annual intern confer supercomput june 2022 2005 cambridg massachusett huiyang zhou thoma cont enhanc memorylevel parallel via recoveryfre valu predict ieee transact comput v54 n7 p897912 juli 2005 ahm alzawawi vimal k reddi eric rotenberg haitham h akkari transpar control independ tci acm sigarch comput architectur news v35 n2 may 2007 andrew hilton amir roth ginger control independ use tag rewrit acm sigarch comput architectur news v35 n2 may 2007 peter g sasson jeff rupley ii edward brekelbaum gabriel h loh bryan black matrix schedul reload acm sigarch comput architectur news v35 n2 may 2007 francisco j mesamartnez michael c huang jose renau seed scalabl effici enforc depend proceed 15th intern confer parallel architectur compil techniqu septemb 1620 2006 seattl washington usa simha sethumadhavan rajagopalan desikan doug burger charl r moor stephen w keckler scalabl hardwar memori disambigu high ilp processor proceed 36th annual ieeeacm intern symposium microarchitectur p399 decemb 0305 albert meixner daniel j sorin unifi microprocessor core storag proceed 4th intern confer comput frontier may 0709 2007 ischia itali monreal victor vinal jose gonzalez antonio gonzalez mateo valero late alloc earli releas physic regist ieee transact comput v53 n10 p12441259 octob 2004 adrin cristal oliverio j santana mateo valero jo f martnez toward kiloinstruct processor acm transact architectur code optim taco v1 n4 p389417 decemb 2004 joseph j sharkey dmitri v ponomarev kanad ghose oguz ergin instruct pack reduc power delay dynam schedul logic proceed 2005 intern symposium low power electron design august 0810 2005 san diego ca usa joseph j sharkey dmitri v ponomarev kanad ghose oguz ergin instruct pack toward fast energyeffici instruct schedul acm transact architectur code optim taco v3 n2 p156181 june 2006