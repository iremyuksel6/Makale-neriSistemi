dynam reconfigur support concurr applic abstractthi paper describ develop dynam reconfigur system support multipl applic run concurr dynam reconfigur system allow hardwar reconfigur part reconfigur hardwar busi comput fpga resourc manag rm develop alloc dealloc fpga resourc preload fpga configur file individu applic differ task requir fpga resourc repres flow graph made avail rm enabl effici resourc manag preload perform use rm support sever applic summar impact support concurr preload reduc applic execut time demonstr b introduct adapt comput system ac shown outperform generalpurpos system applic abil adapt hardwar resourc applic requirements1 8 9 13 16 technolog demonstr special purpos applic tedious hand code system also tremend promis acceler convent applic domain specif visual develop environ khoro matlab wit web browser netscap internet dynam invok submodul plugin imag data process program devic support possibl submodul applic may invok usual feasibl due larg number submodul finit amount hardwar sourc howev ac may support reconfigur hardwar resourc programm hardwar busi comput system refer dynam reconfigur system dynam reconfigur system configur hardwar demand support requir interact program matlab web browser one way implement dynam reconfigur ac incorpor larg number srambas field programm gate array fpga chip coprocess board use conjunct tradit pro cessor howev system need provid oper system like interfac programm hardwar hide architectur detail coproc sor manag reconfigur hardwar applic execut fairli alloc fpga resourc author depart comput scienc engin wright state univers dayton ohio 45435 usa among multipl process fig 1 dynam reconfigur system paper describ system softwar develop dynam reconfigur system support multipl applic run concurr block diagram illustr system shown fig 1 applic consist program execut host machin flow graph repres portion applic execut fpga resourc host program respons start execut graph node resourc manag rm inform multipl flow graph one applica tion rm alloc dealloc fpga resourc new node may load system node execut addit specul strategi adopt rm preload fpga configur file reduc hide reconfigur overhead improv perform fpga architectur modular sens fpga resourc consist number hardwar unit graph node use integ number hardwar unit note multipl copi applic execut time system follow technic advantag ffl compar static reconfigur scheme reconfigur hardwar execut applic system accommod ap plicat typic requir fpga resourc avail usag fpga resourc satisfi spread time particularli true load fpga implement base execut condit system may also reduc comput time individu applic sinc requir fpga resourc need load larger portion applic comput map fpga ffl compar dynam reconfigur scheme static determin reus fpga resourc 1 2 system alloc fpga resourc run time via rm reliev applic develop manag fpga resourc due use rm specul load polici multipl applic may share fpga resourc effect much analog virtual memori system rage project 3 similar emphas partial reconfigur support preload configur section 2 paper describ develop environ project section 3 show design implement rm sever applic use test rm applic test procedur result summar section 4 section 5 compar system similar softwar oper system section 6 conclud paper ii develop environ hardwar platform fig 2 g900 architectur reconfigur comput platform use project 180 mhz pentiumpro person comput host g900 fpga board pci bu base board manufactur giga oper corpor gigaop board modular design make suitabl resourc share among applic design consist eight comput modul xmod xmod contain two xc4020e fpga chip 2 mb dram fig 2 note maximum sixteen xmod configur one g900 board xmod connect togeth 128 wire call xbu among 128 wire 21 use support custom bu protocol call hbu defin pin time signal use host specif ppga fpga interfac xbu also contain six 16bit buss provid interxmod connect two special purpos onboard fpga part xmod ppga cpga ppga xilinx xc4013e2 control commun host comput xmod fig 2 act pci bu interfac board cpga xilinx xc52105 implement clock gener runtim configur power function fpga run clock rate 66mhz g900 board host interfac current limit 16mhz b design environ g900 board ship develop kit includ xlinko gocolib xlinklib xl 11 17 ffl xlinko permit host program execut hardwar design use standard c function call map variabl exist fpga host program address space memori map variabl fpga reconfigur configur host program requir ffl two softwar librari gocolib xlinklib provid develop kit gocolib provid lowlevel routin interact modul fpga monitor cpu ppga etc xlinklib contain higher level routin interact board xlinklib gocolib need link everi xlinko gener applic ffl xl languag allow specif fpga oper loos base c syntax mani keyword c provid control featur avail xilinx fpga standard c oper plu clock oper use program sequenc xl statement two clock oper execut clock cycl microsoft nt use oper system design process begin three sourc file user must creat 1 sourc code fpga design written either xl vhdl 2 file describ host fpga interfac declar memori map variabl function host call execut fpga design 3 applic program resid execut host comput must call function initi load execut user fpga design xmod first two file input xl compil produc xilinx netlist file netlist use xilinx tool automat map design fpga bit file contain fpga configur addit c header file gener includ host program control execut fpga design g900 board detail descript develop environ given 12 iii design implement provid dynam reconfigur capabl support concurr applic xmod rm set librari function design implement system diagram fig 3 xmod basic resourc unit rm alloc dealloc reconfigur comput resourc ondemand specul set librari function provid applic develop pass inform applic rm without worri detail interprocess commun detail g900 board control section applic scenario system first describ detail design present along implement statu discuss design issu follow fig 3 overview resourc manag applic scenario follow paragraph describ scenario applic execut rm applic develop scenario applic execut scenario propos system given applic develop applic first analyz profil determin comput assign fpga xmod comput map xmod creat designlnk file go develop process describ previou section gener designbit file download xmod remain part applic assign host program also provid data control execut comput xmod comput map xmod repres flow graph pass rm applic start execut applic flow graph weight graph node repres xmod comput weight edg repres control flow host program comput granular graph node may differ greatli node requir either fix number xmod rang number xmod exam ple node either simpl integ addit requir one xmod complic 2dimension discret cosin transform use one eight xmod depend desir perform exampl edg weight shown fig 4 execut graph node next candid node either node b c depend condit evalu host program three weight edg go node weight edg repres estim probabl destin node execut given node execut edg weight use rm preload fpga configur file higher weight lead higher chanc preload zero weight indic need preload edg weight assum constant applic execut paper even though remov assumpt may potenti lead better perform fig 4 flow chart exampl fundament assumpt flow graph comput granular graph node may differ greatli may requir portion avail fpga resourc therefor effici execut graph node fpga system one time instead multipl node necessarili applic execut concurr new node may load system node execut applic execut execut applic rm run background process host machin applic provid flow graph correspond fpga configur file rm rm load preload fpga implement host program execu tion preload implement specul strategi overlap xmod reconfigur comput xmod reconfigur latenc reduc complet hidden edg flow graph use preload fpga configur file edg miss flow graph influenc correct comput howev influenc execut perform assum applic develop way execut one graph node time suffici though necessari guarante complet individu applic applic system abl prevent deadlock set librari function develop simplifi applic develop librari function support pass flow graph demand load request node releas request board releas request xmod io capabl librari function call within applic inform pass retriev rm interprocess socket commun initi applic provid flow graph along complet pathnam fpga configur file use node rm rm specul load configur file free xmod avail reduc hide overhead associ reconfigur fpga runtim applic need comput map fpga request rm load requir bit file xmod wait till rm respond number xmod assign applic bit file specul preload applic wait load configur file get xmod number assign xmod immedi howev node preload avail applic wait xmod becom avail load request xmod alloc load applic pack input data comput array send g900 board input data written xmod applic initi comput complet comput function map fpga design interrupt rm turn inform applic result retriev applic comput complet node repres flow graph xmod releas otherwis input execut result step repeat applic done comput map fpga inform rm longer specul node applic flow graph releas xmod preload applic b resourc manag design rm implement multithread applica tion overview design shown fig 3 main thread rm first thread creat parent thread thread first initi g900 board spawn loader interrupt handler schedul thread also set server socket incom connect request applic wait request new applic servic thread creat request applic interact applic behalf rm main thread loop back listen new request commun among differ thread rm accomplish event mutex share variabl share memori applic servic thread establish stream socket connect client applic servic 4it request receiv applic flow graph put share memori notifi sched uler depend type request sent appli cation applic servic thread respond differ way six type request sent applic ffl load graph node request alloc xmod flow graph node load fpga configur file one xmod xmod assign preload configur file node xmod number return applic immedi howev xmod assign applic servic thread place demand request xmod schedul xmod get assign load requir file return xmod number applic ffl input data receiv input data array applic servic thread write valu memori map input variabl specifi offset within xmod ffl result data applic thread retriev result data memori map variabl xmod return data host program ffl execut function applic servic thread start execut specif function xmod wait till interrupt handler indic occurr interrupt one assign xmod acknowledg interrupt inform client applic interrupt may indic complet comput intermedi stage servic thread wait next request applic might reiniti comput collect result data ffl releas xmod servic thread dealloc xmod associ specif flow graph node ffl releas flow graph servic thread discard applic flow graph inform schedul applic flow graph longer valid termin applic execut fpga function normal block function complet complet fpga function send interrupt xmod interrupt handler thread rm thread check xmod gener interrupt sinc one xmod could interrupt time inform correspond applic servic thread interrupt interrupt acknowledg respect applic servic thread interrupt handler enabl interrupt loop back wait till anoth interrupt occur graph node applic develop need either implement interrupt request circuit fpga let host program wait prespecifi amount time function complet latter approach work function complet time known advanc determin well formul way schedul thread alloc xmod either ondemand specul normal sit idl trig gere three differ type event applic servic thread 1 request demand load 2 dealloc xmod due releas graph node 3 receiv new flow graph depend type event schedul paramet avail resourc schedul either assign xmod loader thread load loop back wait anoth event occur schedul polici accept three paramet specifi argument rm invok paramet determin aggress schedul specul preload graph node defin follow ffl max specul maximum number immedi successor node current execut node flow graph specul load ffl threshold minimum edg weight probabl specul preload successor node ffl free xmod minimum number xmod preload kept asid demand load request schedul polici three section base event trigger schedul section separ explain demand load ffl node request demand load preload preload number assign xmod return request applic servic thread ffl request node current preload free xmod search assign load free xmod avail xmod assign applic servic thread node search assign xmod assign applic servic thread xmod preload specul load preempt assign ffl xmod execut demand request queu demand queue request applic servic thread suspend woken demand request servic xmod assign ffl xmod assign request applic servic thread bit file schedul load xmod number given applic servic thread wait till load complet pass xmod number client applic ffl irrespect type event trigger sched uler demand load request pend demand queue given highest pri oriti new demand request get queu end demand queue preload new exist applic done free xmod avail demand request servic ii arriv new applic flow ffl number free xmod higher free xmod new applic flow graph ar rive node 0 flow graph preload free xmod new flow graph servic specul exist applic flow graph ffl threshold weight probabl preload consid preload node 0 new graph assumpt applic alway start execut flow graph node 0 iii releas xmod ffl number free xmod higher free xmod one immedi successor node current execut node flow graph specul till max specul limit reach current execut node flow graph limit reach flow graph skip ffl node specul load edg weight probabl calcul fraction combin edg weight go edg current node higher threshold ffl node specul detect execut xmod case loop check configur file still load xmod ye simpli mark preload otherwis node load free xmod edg weight probabl higher threshold ffl specul flow graph done circular fashion continu schedul come back applic flow graph start present schedul cycl schedul begin flow graph follow last flow graph schedul previou cycl fig 5 xmod state diagram order effici alloc xmod resourc specul load environ rm maintain state xmod shown fig 5 xmod preload use yet may dealloc anoth request satisfi xmod load ondemand dealloc releas sinc load configur bit file slow need done serial g900 board actual load bit file done loader thread allow schedul provid faster respons demand request schedul event schedul queue bit file load two queue maintain share memori demand queue specul queue loader thread serial load bit file queu schedul assign xmod bit file demand queue given prioriti bit file specul queue complet load applic servic thread wait xmod signal c design issu current design implement rm support multipl concurr applic preload sever design issu complic rm yet address issu describ follow 1 direct xmod data access standard mechan applic load data xmod unload data xmod use librari function requir copi data applic rm applic frequent data access larg quantiti data effici implement allow individu applic access xmod directli without go rm avail 2 intergraphnod constraint resourc g900 board xmod may share differ flow graph node exampl x bu use interxmod commu nicat graph node use multipl xmod wire x bu resourc requir specifi provid rm current none test applic paper use x bu inter xmod commun current rm examin constraint 3 optim resourc alloc applic flow graph node tradeoff result perform number xmod use expect graph node xmod lead linear speedup therefor rang xmod number specifi node correspond perform figur number xmod specifi rm may use inform optim alloc resourc run time iv perform result two main applic use test system op erat mpeg2 encod program applic base npcomplet satisfi problem synthes flow graph four node node exhaust solv satisfi problem differ logic formula two applic briefli describ 1 mpeg2 encod mpeg2 standard digit video audio com pression mpeg2 encod avail mpeg softwar simul group sourc code format profil visual c profil 4 two timeconsum function full search dist1 function handl motion estim mpeg encod algorithm part two function handl forward match backward match map xmod implement result flow graph applic one graph node flow graph node use one eight xmod xmod use exactli fpga design detail descript design found 5 design first test without use rm ie static reconfigur result show even though xmod improv perform last xmod much benefit first xmod although support yet perform figur futur provid resourc manag improv resourc util overal perform 2 satisfi satisfi problem problem decid formula conjunct normal form satisfi truth assign 15 exampl follow 4variabl formula conjunct normal form satisfi x1true x2fals x3fals formula contain three claus and togeth histor satisfi problem first decis problem shown npcomplet satisfi problem conveni test rm differ formula test use fpga design simpli initi design differ valu allow control amount fpga comput time simpl fpga design exhaust solv problem shown fig 6 note fpga design intend acceler even though design faster pentium host fpga design meant acceler satisfi problem found 18 14 fig 6 satisfi fpga design fpga design fig 6 implement determinist solut satisfi problem check everi truth assign work follow formula conjunct normal form contain n1 claus repres two matric binari valu claus repres two binari vector a1 a2 a1 bit indic variabl claus a2 bit indic variabl negat two matric initi host program truth assign repres binari vector h store counter start zero truth assign formula evalu go claus one one host interrupt either formula satisfi truth assign exhaust formula satisfi host read truth assign ie h valu satisfi formula h valu import verif system oper fpga design fit one fpga chip therefor one singl xmod base fpga design applic artifici synthes applic call multipl satisfi contain four graph node flow graph graph node satisfi evalu formula four formula pseudorandomli produc use applic formula fix specif condit use host program determin control flow known node get evalu order comput correct setup purpos made test specul load perform note pretend four graph node use differ fpga configur file better repres real applic even though realiti file use assumpt execut new graph node requir reload configur file simul result satisfi problem differ number node differ node granular mpeg encod use examin system perform read taken averag three independ run first time system oper g900 board initi bit file load done quantifi overhead use develop system found board initi take 234 second load configur file take second test applic first run without use rm use rm find overhead use rm applic use rm need initi g900 board map address space result applic run concurr without use rm rm use board initi start thu board initi time count test applic run use rm note applic use rm flow graph gener interrupt indic end fpga comput roblem high granular node applic four node satisfi problem fpga comput time rang 19 sec 4 sec develop node granular much higher fpga configur time 035 sec one four eight twelv copi applic run sequenti without rm sequenti concurr rm use specul pre load result obtain summar fig 7 fig 7 high granular satisfi execut time singl applic took 141 sec complet without use rm 135 sec run resourc manag ideal sinc board initi time count second case 234 sec less due overhead packingunpack data commun resourc manag 06 sec less thu overhead time use rm 174 sec applic applic run four time sequenti without resourc manag took 5606 sec complet versu 5427 sec resourc manag four copi applic use concurr use rm took 1487 sec complet speed execut factor 38 sequenti execut without rm sinc load bit file need done sequenti even applic run concurr 1487 sec total execut time approxim 56 sec 4 theta 4 theta 035 spent load fpga howev fpga xmod g900 board load fpga xmod execut thu pci bu share fpga load data load ingunload fpga result longer fpga configur time depend dynam condit board overlap load execut fpga concurr execut differ fpga result reduc total time eight copi applic run g900 board concurr rm took 1817 sec complet compar 11126 sec sequenti execut without rm 10887 sec rm sinc one fpga eight xmod g900 board use parallel speedup factor 61 achiev sequenti execut without rm use one fpga xmod time twelv copi applic run concurr use rm speedup factor 82 obtain sinc number applic number fpga resourc applic need wait till fpga becom free demand queue obtain fpga resourc comput roblem low granular node satisfi problem use test1 initi differ formula get four node comput time 8 msec 26 msec much lower 350 msec requir load fpga g900 board bit file mean much applic execut time would spent load fpga rather perform comput fpga time one four eight twelv copi applic obtain test one result shown fig 8 fig 8 low granular satisfi execut time speedup obtain run four copi applic concurr rm 21 8 copi 231 12 copi 26 low speedup factor less parallel applic execut fpga sinc time spent sequenti load fpga configur thu overhead commun g900 board pci bu hardwar constraint g900 result high fpga configur time dictat minimum node granular hide latenc obtain impress speedup applic run concurr test similar test 1 2 done two mpeg encod mpeg encod process 27 frame imag use singl xmod motion estim part mpeg encod perform xmod requir frequent larger amount data transfer satisfi problem imag frame use refer frame whole imag frame sent host xmod frame imag block 16 theta 16 pixel sent previou block process xmod fig 9 mpeg encod time time obtain run encod sequenti concurr shown fig 9 singl encod run without use rm took 4535 sec process 27 frame wherea rm took 4485 sec due save board initi time two encod run parallel use rm ran 14 time faster two encod execut serial without rm requir 9129 sec complet process speed high due larg amount data transfer take place fpga board host concurr use mpeg encod use imag process applic specul p reload verifi effect specul preload fpga base flow graph given rm appli cation four copi satisfi problem use test 1 run concurr reevalu effect vari differ schedul paramet total execut time applic also obtain sinc eight xmod g900 board preload done free xmod number applic use test limit four fig 10 flow graph satisfi high granular node flow graph use satisfi problem test shown fig 10 edg weight arrang node 1 preload node 0 node 2 node 3 actual execut sequenc applic applic execut time obtain function schedul paramet max specul free xmod threshold held constant function threshold max specul free xmod kept constant zero result threshold constant execut time obtain function free xmod max specul shown fig 11 threshold held constant 03 sult meant node flow graph shown fig 10 could get preload conclud fig 11 specul preload fpga configur help hide configur overhead result lower overal execut time lowest execut time obtain number specul node highest howev number free xmod demand load increas overal execut time increas due reduc number specul node fig 11 execut time four satisfi problem wrt result free xmod constant result fig 12 free xmod held constant zero xmod kept asid demand load request threshold valu 05 meant node 1 2 could preload threshold equal 06 node 1 could preload node 2 node 3 demand load differ valu execut time fig 12 confirm reduc number specul node overal execut time increas fig 12 execut time four satisfi problem wrt threshold fig 13 time diagram four high granular satisfi problem max fig 13 show time distribut singl run four copi high granular satisfi problem run concurr figur load bit file execut node four applic overlap expect result reduc execut time summari four high granular satisfi applic aggress preload advantag best perform obtain threshold 03 max specul equal 2 free xmod 0 17 faster without specul load node roblem optim f low graph studi effect flow graph provid applic accur repres execut flow flow graph shown fig 10 modifi flow graph shown fig 14 accord edg weight node 2 get preload node 0 node 1 get preload depend upon threshold max specul valu node 1 node 3 get preload node 2 even though execut complet node 3 execut flow graph indic node 1 node 0 may execut node 3 fig 14 incorrect flow graph satisfi fig 15 time diagram four high granular satisfi problem max incorrect represent applic execut flow graph could also due condit evalu differ usual case result higher number preemption node thu increas overal execut time time valu obtain function max specul shown fig 15 threshold valu kept constant 03 meant successor node could get preload free xmod free xmod zero thu allow much preload possibl seen fig 15 gain obtain specul load reduc consider flow graph represent inaccur howev execut time still lower without specul test ap plicat respons applic develop provid accur flow graph possibl unless dynam condit program predict accur case lower speedup factor use rm accept v comparison type resourc manag way fpga resourc manag paper regard similar virtual memori system use prepag follow two major differ ffl first prepag use process previous swap applic new process preload fpga configur appli new process avail applic flow graph given rel coars granular graph node provid applic flow graph arguabl feasibl applic develop especi sinc fpga design process typic lengthi tediou ffl second page virtual memori system truli modular page treat fpga resourc may realli modular exampl x bu g900 use simultan support sever group interxmod commun long usag x bu pin disjoint among differ group result execut one applic graph node xmod may prevent execut anoth graph node requir share resourc applic graph node indic flow graph sent resourc manag note support current resourc manag anoth exampl fpga chip board may differ io capabl sinc fpga resourc mainli use comput instead data storag rm sens similar processor schedul multiprocess oper system howev assumpt data depend condit applic flow graph determinist schedul techniqu summar 6 appli rm instead techniqu one 7 base avail runtim profil compiletim applic techniqu use help produc applic flow graph alway manual gener paper vi conclus dynam reconfigur system support concurr applic design implement test pc g900 fpga board compar static reconfigur scheme propos system accommod applic potenti reduc comput 9time individu applic compar dynam reconfigur scheme propos system alloc fpga resourc run time via resourc manag rm reliev applic develop manag fpga resourc rm preload fpga configur util knowledg applic flow graph simul result show even though overhead associ use resourc man ager concurr support system drastic speedup applic execut program matlab use librari function improv programm product one advantag propos dynam reconfigur system support librari fpga function say one 2d convolut one histogram equal system need squeez fpga function use program hardwar resourc time environ would allow programm enjoy perform benefit adapt comput technolog without worri fpga design detail would acceler adopt technolog futur research necessari port rm fpga board may modular g900 board case handl asymmetri hardwar resourc unit challeng problem anoth issu dynam reconfigur design similar rm system support partial reconfigur virtual hardwar manag develop rage project 3 probabl integr resourc manag paper concurr applic support also fpga function densiti improv partial reconfigur 10 sever model dpga program execut present one demand usag similar propos system paper pursu model claim although may seem rather futurist scenario good reason believ field multimedia commun databas cryptographi least characterist applic like demand sort highli flexibl execut environ acknowledg research support darpa air forc contract number f336159711148 ohio state invest fund ohio state research challeng grant xilinx inc donat fpga design tool fpga chip xmod r runtim reconfigur method enhanc function densiti srambas fpga design partial reconfigur system dynam reconfigur runtim system mpeg softwar simul group httpwww acceler mpeg2 encod util reconfigur comput determinist processor schedul compiletim schedul dynam construct dataflow program graph realtim signal preprocessor tradeoff studi use morrph industri machin vision system reconfigur processor resourc manag configur comput system configur comput solut automat target recognit dynam circuit gener solv specif problem instanc boolean satisfi languag machin sequenc runtim reconfigur hardwar softwar acceler boolean satisfi configur hardwar tr ctr klau dann distribut arithmet fpga design onlin scalabl size perform proceed 17th symposium integr circuit system design septemb 0711 2004 pernambuco brazil ahm el farag hatem elboghdadi samir shaheen improv util reconfigur resourc use twodimension compact journal supercomput v42 n2 p235250 novemb 2007 jack jean xuejun liang brian drozd karen tomko yan wang automat target recognit dynam reconfigur journal vlsi signal process system v25 n1 p3953 may 2000 christoph steiger herbert walder marco platzner oper system reconfigur embed platform onlin schedul realtim task ieee transact comput v53 n11 p13931407 novemb 2004 klau dann marco platzner edf schedul test period task reconfigur hardwar devic acm sigplan notic v41 n7 juli 2006 david kearney mark jasiuna use simul partial dynam runtim reconfigur share embed fpga comput power resourc across swarm unpilot airborn vehicl eurasip journal embed system v2007 n1 p88 januari 2007 katherin compton scott hauck reconfigur comput survey system softwar acm comput survey csur v34 n2 p171210 june 2002