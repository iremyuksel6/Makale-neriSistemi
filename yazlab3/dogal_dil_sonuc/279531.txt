effici solut cach thrash problem caus true data share abstractwhen parallel program execut multiprocessor privat cach set data may repeatedli use modifi differ thread data share often result cach thrash degrad memori perform paper present evalu loop restructur method reduc even elimin cach thrash caus true data share nest parallel loop method use compil analysi appli linear algebra theori number subscript express array refer due method simplic effici implement parallel compil experiment result show quit signific perform improv exist static dynam schedul method b introduct parallel process system memori hierarchi becom quit common today commonli multiprocessor system local cach processor bridg speed gap processor main memori system use multilevel cach 5 14 often copyback snoopi cach protocol employ maintain cach coher multiprocessor system certain supercomput also use local memori view programcontrol cach program nest parallel loop execut parallel process system import assign parallel loop iter processor way unnecessari data movement differ cach minim conveni paper call iter parallel loop thread follow loop nest exampl i1100 k1100 enddo enddo exampl loop j parallel loop valu fix statement loopcarri depend j vari loop j execut 100 time loop nest creat 10000 iter 10000 thread total thread address 100 element array mani array element repeatedli access thread shown tabl 1 figur 1 ij denot thread correspond loop index valu denot set thread creat index valu shown figur 2 exist list thread 11 12 21 thread modifi reus array element access neighbor thread list thread list assign differ processor data array unnecessarili move back forth differ cach system caus cach thrash problem due true data share 12 nest loop construct shown exampl quit common parallel code use scientif comput j fang lu studi larg number program includ linpack benchmark perfect club benchmark program mechan cae comput chemistri imag signal process petroleum applic 11 report almost timeconsum loop nest contain least three loop level 60 contain least one parallel loop even use loop interchang move parallel loop outward legal still found 94 parallel loop enclos sequenti loop loop nest includ case parallel loop appear outermost loop level subroutin subroutin call callstat contain sequenti loop loop nest perfectli nest ie exist statement right inner loop fang lu propos thread align algorithm solv cach thrash problem may creat multinest loop algorithm howev assign thread processor either solv linear equat run time store precomput numer solut equat processor memori sinc store numer solut requir quit larg memori space sinc exact number thread often determin static due unknown loop bound favor onlin comput approach paper present method reduc runtim overhead fang lu algorithm use thorough compil analysi array refer deriv closedform formula solv thread assign equat thread assign becom highli effici run time previous present preliminari algorithm 22 23 deal simpl case datadepend array refer use linear function subscript experiment data given paper extend work cover multipl linear function clarifi underli theori report experiment result use silicon graphic sgi multiprocessor tabl 1 element access thread method compil analyz data depend thread use inform restructur nest loop perfectli nest otherwis order reduc even elimin true data share caus cach thrash method effici implement parallel compil experiment result show quit signific improv exist static dynam schedul method follow first address relat work introduc basic concept assumpt present solut cach thrash problem due true data share lastli show experiment result conduct sgi multiprocessor system relat work extens research regard effici memori hierarchi report literatur abusufah kuck lawri use loop block improv page perform improv local refer 2 wolf propos iter space tile way improv data reus cach local memori 35 gallivan jalbi gannon defin refer window depend variabl referenc sourc sink depend 15 16 execut sourc depend save associ refer window cach sink also t13 figur 1 element access differ thread execut may increas number cach hit carr callahan kennedi 7 8 discuss option compil control uniprocessor memori hierarchi wolf lam develop algorithm estim tempor spatial reus given loop permut 34 optim attempt maxim reus cach data singl processor also secondari effect improv multiprocessor perform reduc bandwidth requir processor therebi reduc content memori system contrast work consid multiprocessor environ processor local cach local memori differ processor may share data work peir cytron 28 shang fort 30 dholland 9 share common goal partit index set independ execut subset correspond loop iter execut differ processor without interprocessor commun method appli specif type loop nest call uniform recurr uniform depend algorithm loop perfectli nest loop bound constant loopcarri depend constant distanc array subscript form loop index c integ constant hudak abraham 1 18 develop static partit approach call adapt data partit adp reduc interprocessor commun iter dataparallel loop also assum perfectli nest loop loop bodi restrict updat singl data point ai twodimension global matrix subscript express righthand side array refer restrict sum parallel loop index small constant subscript express lefthand array refer restrict contain parallel loop indic tomko abraham t13 t1003 figur 2 list thread access similar array element 32 develop iter partit techniqu dataparallel applic program assum one pair data access function loop index variabl appear one dimens array subscript express agarw kranz natarajan 3 propos framework automat partit parallel loop minim cach coher traffic sharedmemori multiprocessor restrict discuss perfectli nest doall loop assum rectangular iter space unlik previou work work consid nest loop necessarili perfectli nest loop bound variabl array subscript express much gener mani research studi cach fals share problem 10 17 19 33 cach thrash occur differ processor share cach line multipl word although processor share word mani algorithm propos reduc fals share better memori alloc better thread schedul program transform work consid cach thrash due true share data word work close relat research done fang lu 11 12 26 13 work iter space partit set equival class processor use formula determin iter belong equival class execut time processor execut correspond iter reduc elimin cach thrash iter solut vector linear integ system fang lu work vector may either comput run time may precomput later retriev run time loop bound known execut approach requir addit execut time processor fetch next iter unlik fang lu approach solv thrash problem compil time reduc runtim overhead achiev effect reduc cach thrash new method restructur loop compil time base thorough analysi relationship array element access loop indic nest loop perform experi commerci multiprocessor name silicon graphic challeng cluster therebi obtain real data regard cach thrash reduct contrast previou data mainli simul 11 12 26 3 basic concept assumpt data depend statement defin 6 24 4 25 statement 1 use result anoth statement 2 1 flowdepend 2 1 safe store result fetch old data store locat 1 antidepend 2 1 overwrit result 2 1 outputdepend 2 depend within iter loop call loopindepend depend depend across iter loop call loopcarri depend cach thrash due true data share outermost loop parallel data depend cross thread therefor paper consid loop nest whose outermost loop sequenti simplifi discuss make follow assumpt program pattern 1 function repres array subscript express linear 2 loop construct consid consist sequenti loop embrac one sever singlelevel parallel loop exist multilevel parallel loop one level parallel commerci sharedmemori multiprocessor system henc shown loop nest model three level parallel loop immedi enclos sequenti loop immedi enclos sequenti loop enddo enddo figur 3 loop nest model linear map iter space n 1 theta n 2 theta n 3 domain space 1 theta 2 express array k loop exampl necessarili perfectli nest restructur techniqu present later assum arbitrari loop bound although show lower bound 1 simplic notat multipl array variabl multipl linear subscript function may exist nest loop sinc consid cach thrash due true data share ie due data depend thread also write loop nest figur 3 enddo enddo fl array name appear loop bodi h linear map iter space n 1 theta n 2 theta n 3 domain space 1 fl theta 2 fl fl potenti depend refer pair number pair fang lu 11 report array involv nest loop usual twodimension threedimension smallsiz third dimens latter treat small number twodimension array nest loop parallel loop innermost level degener case loop nest figur 3 therefor loop nest model seem quit gener method also appli loop nest contain sever separ parallel loop middl level parallel loop may restructur accord refer pattern thread differ instanc parallel loop align current align thread creat differ parallel inner loop program complic loop nest patternmatch techniqu use identifi loop subnest match nest shown figur 3 outer inner loop part subnest ignor long loop indic appear array subscript compil analysi base simpl multiprocessor model cach memori follow characterist 1 local processor 2 use copyback snoopi coher strategi line size one word transform code howev execut correctli machin multiword cach line multilevel cach furthermor experiment result show perform transform code quit good realist machin analysi also extend incorpor machin paramet cach line size solut section analyz relationship linear function array subscript base analysi restructur given loop nest reduc elimin cach thrash due true data share consid nest loop necessarili perfectli nest may variabl loop bound clariti present section 41 first discuss deal depend refer pair subscript function use refer pair differ pair may use differ subscript function later section 42 discuss deal gener case use simpl affin transform fit model 41 basic model subsect assum pair depend refer subscript function use refer assumpt extract subscript function h fl j k pair depend refer model nest loop pair depend refer illustr follow code segment enddo enddo without loss gener suppos linear subscript function differ assum function h rank 2 form h fl j take follow exampl enddo enddo figur 4 nest loop multipl linear subscript function exampl data depend exist within loop j howev two data depend exist whole loop nest one refer b two linear function consid one depend iter subspac n 1 theta n 2 call reduc iter space omit k loop order find iter reduc iter space may access common memori locat within correspond thread defin set element array fl access within thread use subscript function h fl definit 1 given iter reduc iter space element fl f fl access within thread denot 0 j 0 g definit 2 suppos ij 0 j 0 two thread correspond ji reduc iter space given loop nest ij say depend h fl denot ij definit 3 exist fl 1 fl ij sinc f fl g fl linear term j k follow lemma obviou lemma 1 program pattern describ exist fl 1 fl two iter iter space n 1 theta n 2 theta n 3 j constant n 0 seri iter space satisfi follow equat follow lemma two theorem establish relationship loop index correspond two interdepend thread use index relationship stagger loop iter space interdepend thread assign processor lemma 2 let ij 0 j 0 two thread ij exist k k 0 theorem 1 let b fl1 exist k k 0 b fl1 fl2 gamma fl1 b fl2 fl2 c fl1 gamma fl1 c fl2 b fl1 fl2 gamma fl1 b fl2 proof lemma 2 theorem 1 obviou definit 3 consid case b fl1 fl2 gamma fl1 b assum loop bound n 2 n 3 larg enough satisfi c fl1 assumpt almost alway true practic 31 true parallel loop small import assumpt follow theorem theorem 2 21 let b fl1 fl2 gamma fl1 b fact j loop middl level loop guarante ij 1 fl1 0 2 fl2 0 order find thread data depend relat thread ij make follow definit definit 4 given iter j reduc iter space let ij denot follow set iter space r r l fl1 l fl1 6 0 l fl2 1 fl defin gcd fl equal gcdb fl1 c fl2 gammac fl1 b fl2 fl2 c fl1 gammaa fl1 c fl2 b fl1 fl2 gammaa fl1 b fl2 equal gammagcd b fl1 c fl2 c fl1 b fl2 fl2 c fl1 fl1 c fl2 b fl1 fl2 fl1 b fl2 guarante l fl1 0 2 l gcd fl equal gcda fl1 b fl1 equal gammagcda fl1 b fl1 guarante l fl1 0 l gcd fl equal gcda fl2 b fl2 equal gammagcda fl2 b fl2 guarante l fl1 0 call stagger paramet correspond linear function h fl exist data depend given pair refer defin stagger paramet l fl1 l fl2 0 0 stagger paramet exampl figur 4 calcul l 11 l 12 l 21 l 22 accord definit 41 follow theorem deriv theorem 1 2 definit 4 state use stagger paramet uniqu partit thread independ set theorem 3 ij defin satisfi 1 theorem indic ij includ iter whose correspond thread data depend relat ij call ij equival class reduc iter space order elimin true data share thread equival class assign processor want restructur reduc iter space thread equival class appear column stagger paramet l comput depend refer pair tell us stagger row reduc iter space column right l 2 0 left rel ith thread involv depend pair align column differ stagger paramet may requir stagger iter space differ way howev stagger paramet proport stagger unifi stagger paramet defin satisfi requir simultan definit 5 given stagger paramet l call g l12 unifi stagger paramet lemma 3 21 condit l k1 definit 5 true iter belong two differ equival class b iter belong two differ equival class theorem 4 21 condit l k1 definit 5 true reduc iter space must stagger accord unifi stagger paramet g l12 l11 g order reduc elimin data share among thread ie gth row reduc iter space must stagger j l12 l11 gj column right l 12 0 left l 12 0 rel ith row given loop nest satisfi condit l k1 definit 5 accord theorem 4 reduc iter space transform stagger reduc iter space sri leav first g row unchang stagger remain row use unifi stagger paramet data depend differ column sri howev stagger paramet proport ie exist j k longer obtain uniqu unifi stagger paramet moreov stagger alon longer suffici elimin data depend differ column restructur iter space thread equival class still differ column perform procedur call compact stack column onto discuss stagger first definit given stagger paramet l l 11 l 21 l m1 suppos exist j k 1 accord theori number 27 exist integ 1 2 satisfi fl l fl2 call g g 0 unifi stagger paramet note sinc mtupl 1 2 necessarili uniqu g g 0 may uniqu either definit 6 unifi stagger paramet g g 0 exampl figur 4 found stagger use unifi stagger paramet g g 0 result sri four possibl shape shown figur 5b gamma e figur 5a show detail one shape figur 6a 6b show reduc iter space exampl figur 4 stagger 33 unifi stagger paramet next comput compact paramet use algorithm 1 2 present shortli partit sri n chunk total number column sri devid compact paramet figur 5d gamma e dwide chunk stack onto form compact iter space width shown figur 7 explain later thread differ column compact sri independ moreov product g equal number equival class sri shown figur 6b exampl transform compact form shown figur 8 follow algorithm comput compact paramet algorithm 1 input set stagger paramet l output compact paramet step 1 2element subset fl i1 l j1 g fl 11 l 21 l m1 g comput 2 hl i1 l j1 step 2 jelement subset fl pick element say g0 g1 g0 g1 e g0 g1 figur 5 sri outlin use euclidean algorithm comput integ b appli algorithm 2 find nonzero integ r 2 r j r origin reduc iter space 11 figur reduc iter space rearrang let r step 3 j 3 comput step 4 establish later uniqu regardless choic l 1 1 step 2 calcul compact paramet nonzero integ r need found algorithm 1 integ coeffici b comput euclidean algorithm algorithm 2 therefor invok deriv group nonzero integ coeffici group integ coeffici linear express algorithm 2 input nonzero posit integ output nonzero integ 1 even number zero coeffici 0 2k p among figur 7 compact sri step 2 odd number zero coeffici 1 0 obvious nonzero integ comput algorithm 2 satisfi exampl figur 4 sinc two linear function loop nest step 1 step 4 algorithm 1 use calcul compact paramet next need establish two import fact first compact thread differ column independ second compact paramet comput algorithm 1 figur 8 reduc iter space compact largest number independ column possibl result compact sri constant valu first fact establish theorem 5 theorem 6 corollari 1 introduc follow definit definit 7 given iter j reduc iter space stagger paramet unifi stagger paramet g g 0 integ satisfi set iter 0 ij construct follow 1 integ r iter space belong 0 2 exist integ r zero integ r iter 0 space r r follow three lemma theorem 5 show 0 ij equival class ij process construct 0 ij immedi follow lemma lemma 4 given iter reduc iter space unifi stagger paramet g g 0 exist integ r lemma 5 21 given iter 0 reduc iter space exist integ r zero r fl l fl2 r lemma 6 21 given iter reduc iter space 0 theorem 5 21 given stagger paramet l iter j reduc iter space next establish 0 ij result stagger g g 0 follow compact state corollari 1 lemma 7 21 given stagger paramet l integ satisfi 1 r 2 exist integ r 0 satisfi 1 integ r 00 satisfi r 00 exist integ k 1 r 00 theorem 6 21 compact paramet determin algorithm 1 0 r fl l fl2 integ zero satisfi r exist integ k 0 corollari 1 set 0 ij definit 7 satisfi k r integ g g 0 unifi stagger paramet definit 6 compact paramet comput algorithm 1 result thread differ column compact sri ind pendent next establish theorem 7 two column column apart comput algorithm 1 depend therefor largest possibl number independ column result compact sri constant number theorem 7 given j ij proof accord comput algorithm 1 exist integ r definit 0 simplifi process stagger compact reduc iter space follow theorem use replac multipl stagger paramet proport singl stagger paramet theorem 8 21 given stagger paramet l stagger paramet satisfi exist integ r satisfi estim time need compil comput stagger paramet unifi stagger paramet compact paramet suppos refer pair complex determin stagger paramet om unifi stagger paramet stagger paramet determin om euclidean algorithm let number group stagger paramet paramet group proport 0 small practic accord theorem 8 need consid one repres group complex algorithm 1 2 comput compact paramet c 2 lastli show result restructur origin loop nest base stagger compact note stagger paramet proport compact unnecessari data depend elimin howev improv load balanc compact sri compact factor equal number avail processor restructur code parameter loop bound number avail processor obtain system call runtim need recompil differ number avail processor given loop nest perfectli nest result code stagger compact shown code segment 1 list code segment 1 result restructur perfectli nest loop multipl linear enddo enddo enddo given loop nest perfectli nest result code two variant one g 0 0 show code g 0 list code 0 similar 21 code segment lb 1 lb 2 lower bound j ub 1 ub 2 upper bound two loop g g 0 unifi stagger paramet compact paramet respect determin psi psj local variabl processor use determin first iter j 0 loop j execut variabl j 0 offset also local processor psi psj processor modifi everi g iter loop accord stagger compact paramet valu psi psj initi differ processor lb respect defin function mod x mod code segment 2 restructur code case g 0 6 0 endif endif enddo enddo enddo 42 extend model theori develop previou subsect extend gener case subscript function pair refer necessari suppos follow two linear function belong pair refer order determin iter reduc iter space depend due refer pair consid affin transform linear function h 2 express 21 22 denot order use previou result section 41 let ident impli 11 21 12 22 c 11 c 21 c 22 21 22 appli algorithm section 41 2 yield stagger paramet say given iter 0 iter must depend 00 affin transform iter 0 depend 00 transform denot distanc l 0 2 calcul l 0 constant mean iter align constant stagger paramet common practic sinc loop j doall loop nest model two linear function coffici loop index variabl j impli ff 1 paper consid case ff defin l 0 2 two constant given stagger paramet case equat 1 2 uniqu solut uniqu stagger paramet l 0 hand exist multipl solut follow theorem show certain condit l 0 determin differ proport theorem 9 assum ff 1 stagger paramet l subscript function affin transform solut equat 1 2 l 0 equal fi l proport solut fi equat 1 2 proport prove proport l suppos everi solut equat 1 2 written 0 solut homogen system associ equat 1 2 12 b 11 gamma b 12 11 6 0 22 b 12 b 11 gamma b 12 11 22 b c 12 12 b 11 gamma b 12 11 suppos c 12 accord definit 4 c 12 case 12 b theorem 2 1 11 2 12 therefor accord definit 4 also proport proport 2 proport condit theorem 9 met choos l 0 stagger paramet refer pair tabl show exampl stagger paramet differ subscript function appear depend refer pair loop index variabl list order outermost loop level innermost simultan consid two refer pair ai j bi j thread ij share array element ai thread i3j1 array element bi j thread i1j3 use theorem 9 stagger paramet l 0 two pair 31 13 respect unifi stagger paramet compact paramet calcul g g 0 8 tabl 2 exampl differ function depend refer pair loop nest depend refer pair 5 experiment result thread align techniqu describ paper implement backend optim kdparpro 20 knowledgebas parallel tool perform intra interprocedur data depend analysi larg number parallel transform includ loop interchang loop distribut loop skew strip mine fortran program evalu effect thread align techniqu perform multiprocessor memori hierarchi experi three program linpack benchmark sgi challeng cluster configur contain twenti mip 4400 processor first program parallel optim use kdparpro reduc elimin cach thrash due true data share tool recogn nest loop may caus thrash appli techniqu describ previou section analyz restructur loop nest parallel program compil use sgi f77 compil optim option o2 sequenti version program compil machin use optim option f77 output binari code execut variou configur differ number processor dedic time mip 4400 processor 16kbyte primari data cach 4mbyte secondari cach cach block size 32 byte primari data cach 128 byte secondari cach fast wide split transact bu powerpath2 use coher interconnect cach coher maintain snoopi writeinvalid strategi compar result obtain use algorithm align thread obtain use four differ loop schedul strategi provid sgi system softwar name simpl interleav dynam gss simpl method divid iter number processor assign chunk consecut iter one processor interleav schedul method divid iter chunk size specifi chunk option execut chunk static interleav among process dynam schedul iter also divid chunksiz chunk process finish chunk howev enter critic section grab next avail chunk gss schedul 29 chunk size vari depend number iter remain none sgiprovid method consid task align speedup parallel execut share memori machin like sgi cluster affect mani factor includ program parallel data local schedul overhead load balanc usual gss dynam interleav schedul small chunk size suppos show better load balanc simpl schedul hand tend incur schedul overhead simpl furthermor simpl captur data local case schedul program select linpack sgefa spodi ssifa sgefa factor doubl precis matrix gaussian elimin main loop structur program consist three imperfectli nest loop innermost loop insid subroutin saxpi multipli vector constant add result anoth vector order show array access pattern insid loop bodi inlin saxpi code section given howev kept subroutin call appli techniqu program enddo enddo sri stagger iter reduc iter space k j shown figur 9 program consid linear function j stagger paramet 10 accord definit 44 number processor use determin compact factor figur 9 sri sgefa spodi comput determin invers certain doubl precis symmetr positivedefinit matrix two main loop nest program shown restructur loop nest sgefa innermost loop contain subroutin saxpi first loop nest enddo enddo second loop nest enddo enddo sriss stagger iter reduc iter space k j j k two loop nest respect shown figur 10ab linear function consid j k respect stagger paramet 10 accord definit 44 loop nest 1 b loop nest 2 figur 10 sriss spodi ssifa factor doubl precis symmetr matrix elimin main loop nest program shown view backward goto loop outermost sequenti loop within valu kstep may chang 1 2 differ iter base input matrix depend valu kstep one two parallel loop nest insid outermost sequenti loop execut iter outermost loop index step outermost loop equal ie gamma1 gamma2 array access pattern two kstep valu slightli differ innermost loop insid saxpi subroutin 10 continu k eq enddo enddo enddo 20 continu sriss stagger iter reduc iter space k jj two differ kstep shown figur 11 clariti use c kstep denot valu kstep current k iter use p kstep valu previou k iter thread align well properli align thread creat current k iter previou k iter need consid four possibl case depend one two refer anoth two refer ai third ai k gamma jj ai last ai k gamma case stagger paramet l figur 11 sriss ssifa problem size use experi n100 1000 perform parallel code transform techniqu compar perform achiev schedul method provid sgi shown figur 1215 sgefa ssifa may requir pivot nonpositivedefinit symmetr matric positivedefinit symmetr matric show data sgefa pivot show data without pivot ssifa pivot may potenti destroy task alignment1352 4 8 number processor interleav chunk interleav chunk dynam gss simpl method number processor interleav chunk interleav chunk dynam gss simpl method b n1000 figur 12 gaussian elimin sgefa12345 number processor interleav chunk interleav chunk dynam gss simpl method n10026101418 number processor interleav chunk interleav chunk dynam gss simpl method b n1000 figur 13 determin invers symmetr posit matrix spodi figur show method alway outperform sgi schedul method except program sgefa program method perform almost simpl although method outperform simpl 14 16 processor attribut reduct cach thrash due true data share problem tend sever processor run simpl schedul method tend get better perform dynam gss interleav method result better local less cach thrash case also incur less schedul overhead program number processor interleav chunk interleav chunk dynam gss simpl method n100246810 number processor interleav chunk interleav chunk dynam gss simpl method b n1000 figur 14 factor symmetr matrix ssifa exhibit good load balanc like spodi ssifa program linpack deal symmetr matric simpl perform result degrad substanti method outperform simpl quit significantli case especi spodi figur 13 well ssifa without pivot figur 15 method beat simpl much 105 abl get improv simpl program sgefa pivot much like destroy local tri keep rest program attribut perform gain simpl reduct cach thrash due true data share better load balanc although ssifa pivot believ method benefit load balanc note sgi system softwar pick right schedul method automat fit particular program hand method seem capabl deliv good perform differ loop shape thrash problem becom seriou parallel system processor greater commun overhead method like even effect 6 conclus paper present method reduc iter space rearrang accord stagger compact paramet nest loop either perfectli nest imperfectli nest restructur reduc even elimin cach thrash due true data share method effici implement parallel compil although analysi per se base simpl machin model result code execut correctli complex model experiment result show transform code perform quit well real machin extend techniqu propos paper incorpor addit machin paramet interest futur work r perform enhanc page system program analysi transform automat partit parallel loop data array distribut sharedmemori multiprocessor automat loop interchang multilevel cach hierarchi organ depend analysi supercomput improv regist alloc subscript variabl compil scientif code complex memori hierarchi partit label loop unimodular transform elimin fals share solut cach pingpong problem risc base parallel process system cach local memori thrash compil strategi parallel process system iter partit approach cach local memori thrash parallel process perform optim problem optim data transfer complex memori system strategi cach local memori manag global program transform effect program parallel stripmin transform cach perform multiprocessor compil techniqu data partit sequenti iter parallel loop reduc fals share share memori multiprocessor compiletim data transform design implement knowledgebas parallel tool effici solut cach thrash problem extend version loop restructur techniqu thrash problem loop stagger structur comput comput depend graph compil op timiz solut cach pingpong problem multiprocessor system introduct theori number minimum distanc method partit recurr multiproc sor guid selfschedul practic schedul scheme parallel supercomput time optim linear schedul algorithm uniform depend empir studi fortran program parallel compil iter partit resolv stride conflict cachecoher multiprocessor fals share spatial local multiprocessor cach data local optim algorithm iter space tile tr