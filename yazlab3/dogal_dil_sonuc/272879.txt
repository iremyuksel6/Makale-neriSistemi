circuit retim appli decompos softwar pipelin abstractthi paper elabor new view softwar pipelin call decompos softwar pipelin introduc gasperoni schwiegelshohn wang eisenbei jourdan su approach decoupl problem resourc constraint depend constraint resourc constraint manag amount schedul acycl graph subject resourc constraint effici bound known result bound loop schedul acycl graph obtain cut particular edg cyclic depend graph paper cut edg differ way use circuit retim algorithm minim longest depend path acycl graph number edg acycl graph techniqu improv effici bound given gasperoni schwiegelshohn algorithm reduc constraint remain acycl problem believ framework interest bring new insight softwar problem establish deep link circuit retim problem b introduct oftwar pipelin instructionlevel loop schedul techniqu achiev high perform processor superscalar vliw long instruct word architectur main problem cope data depend resourc constraint make problem npcomplet gener softwar pipelin problem motiv great amount research sinc pioneer work rau glaeser 1 sever author propos variou heurist 2 3 4 5 6 variou framework extend survey softwar pipelin provid 7 recent novel approach softwar pipelin call decompos softwar pipelin propos simultan gasperoni schwiegelshohn 8 wang eisenbei jourdan su 9 idea decompos npcomplet softwar pipelin problem two subproblem loop schedul problem ignor resourc constraint acycl graph schedul prob lem effici techniqu list schedul exampl well known although split problem two subproblem clearli optim strat egi wang eisenbei jourdan su demonstr experiment evalu loop livermor benchmark kernel approach py calland support grant region rhonealp dart robert support cnrsen lyoninria project remap author laboratoir lip ura cnr 1398 ecol normal superieur de lyon f69364 lyon cedex 07 email pierreyvescallandalaindarteyvesrobertenslyonfr promis respect time effici space effici approach techniqu preprocess loop data depend graph may includ cycl cut depend edg preprocess modifi graph becom acycl classic schedul techniqu appli gener pattern kernel softwar pipelin loop howev way edg cut adhoc case gener framework given explain edg could andor cut main contribut paper establish preprocess data depend graph deep link circuit retim problem paper organ follow section ii describ precis softwar pipelin model section iii recal main idea decompos softwar pipelin illustr novel techniqu gasperoni schwiegelshohn algorithm show decompos softwar pipelin reformul term retim algorithm exactli tool need perform desir edg cut demonstr interest framework address two optim problem ffl section iv show cut edg length longest path acycl graph minim techniqu improv perform bound given gasperoni schwiegelshohn algorithm ffl section v show cut maxim number edg minim number constraint remain process acycl graph criteria taken account neither gasperoni schwiegelshohn algorithm wang eisenbei jourdan su algorithm final discuss extens section vi summar result give perspect section vii ii simplifi model softwar pipelin problem first present assumpt discuss motiv problem formul paper consid loop compos sever oper execut larg number time finegrain architectur assum resourc constraint depend constraint compar gener framework make follow simplifi hypothes ieee transact parallel distribut system vol xx month 1996 resourc architectur consist p ident non pipelin resourc constraint cy cle resourc use depend depend oper captur doubli weight graph ffi v set vertic g one vertex per oper loop e set edg g edg e e de nonneg integ call depend distanc vertex u v ffiu nonneg integ call delay ffi model fact edg oper v iter issu least ffiu cycl start oper u iter assum sum depend distanc along cycl posit hypothes given gasperoni schwiegelshohn non pipelin case discuss limit simplifi model let us illustr notion oper iter delay depend distanc follow exampl work exampl throughout paper enddo loop 6 oper b c e f n iter oper execut n time n paramet unknown valu possibl larg associ graph g given figur 1 delay depict squar box exampl delay oper f 10 time greater delay oper depend distanc express fact comput must execut specifi order preserv semant loop exampl oper iter k write ak henc must preced comput b iter read valu constraint captur label equal 2 associ edg b depend graph figur 1 f 121414fig 1 exampl depend graph g softwar pipelin problem find schedul oe assign issu time oeu oper instanc oper u iter k edg graph give rise constraint schedul valid schedul schedul satisfi depend constraint express equat 1 resourc constraint regular structur softwar pipelin problem usual search cyclic modulo schedul oe aim find nonneg integ call initi interv oe constant c u oeu input loop suppos execut mani iter n larg focu asymptot behavior oe initi interv natur perform estim oe 1 measur oe throughput note reduc depend graph g acycl target machin enough processor zero type schedul infinit throughput variant consist search nonneg ration ab let oeu ration constant c u amount unrol input loop factor b come back variant section vi note also ration cyclic schedul domin case unlimit resourc 4 b limit model compar sophist model gener program may handl program condit accur architectur descript given framework simpl may seem unrealist partli agre would like rais follow argument delay mani framework delay defin edg vertic model chose latter two reason first want compar techniqu gasperoni schwiegelshohn algorithm use delay vertic second use graph retim techniqu also commonli defin delay vertic ever point retim gener model possibl technic complex see exampl 10 section 9 resourc architectur model non pipelin ident resourc simpl main reason restrict hypothesi want demonstr theoret point view techniqu allow deriv effici bound gasperoni schwiegelshohn algorithm practic point view techniqu still use even sophist resourc model inde retim techniqu use independ architectur model seen preloop transfor mation resourc constraint taken account second phase algorithm addit featur architectur consid schedul acycl graph obtain retim particular techniqu easili integr regardless architectur detail compil instruct schedul extens model decompos softwar pipelin still recent approach softwar pipelin thu studi first theoret point view restrict model also case paper whole problem yet well understood enough py calland dart robert circuit retim appli decompos softwar pipelin 3 allow gener architectur featur taken account howev believ new view problem particular use retim control structur acycl graph lead futur accur heurist sophist architectur model iii go cyclic schedul acycl schedul go detail gasperoni schwiegelshohn heurist gs short recal properti cyclic schedul main idea decompos softwar pipelin make rest present clearer properti cyclic schedul consid depend graph cyclic schedul oe oeu satisfi depend constraint resourc constraint cyclic schedul period period comput scheme reproduc everi unit time pre cise instanc u assign begin time instanc begin time therefor need studi slice clock cycl know behavior whole cyclic schedul steadi state let us observ slice eg slice sk clock cycl k clock cycl k enough steadi state reach figur 2 depict steadi state schedul graph figur 1 initi interv time resourc ak fk initi interv fig 2 success slice schedul graph g box grey repres oper initi slice sk perform euclidean divis c u c mean one one instanc oper u initi within slice sk instanc issu r u clock cycl begin slice quantiti r u q u similar row column number introduc 9 schedul valid resourc constraint depend constraint satisfi depend constraint separ two type depend either two depend oper instanc initi slice sk type 1 initi two differ slice type 2 cours partial depend graph induc type 1 constraint acycl type 1 depend impos partial order oper accord order appear within slice figur 2 arrow repres pendenc depend depict fig type 2 depend main idea gasperoni schwiegelshohn algorithm gs gener decompos softwar pipelin follow assum valid cyclic schedul period 0 given number p 0 pro cessor want deduc valid schedul smaller number p processor way build new schedul keep slice structur ie keep oper instanc within given slice cours might need increas slice length cope reduct resourc word stretch rectangl size 0 theta p 0 build rectangl size theta p use idea type 2 depend still satisfi choos larg enough type 1 depend taken account intern reorgan slice see figur 3 sinc correspond partial depend graph acycl brought back standard acycl schedul problem mani theoret result known particular simpl list schedul techniqu provid perform bound shorter longest path graph accur perform bound time resourc ak fk time ak fig 3 two differ alloc slice graph g p main principl settl remain sever open question 1 choos initi schedul 0 2 choos refer slice reason priori choos slice begin clock cycl congruent 0 modulu 0 3 decid edg type 1 henc consid acycl problem three question cours link togeth intu itiv seem import tri minim ffl length longest path acycl graph small possibl tightli link perform bound obtain list schedul ffl number edg acycl graph reduc depend constraint acycl schedul problem 4 ieee transact parallel distribut system vol xx month 1996 give precis formul question give solut beforehand review choic gs b heurist gasperoni schwiegelshohn section explain full detail gs heurist 8 main idea outlin previou section choic gs initi schedul consid optim cyclic schedul infinit number processor constraint b1 optim schedul unlimit resourc consid cyclic schedul problem without resourc constraint let nonneg integ defin g edgeweight graph g 0 ffl vertic g 0 v new vertex ffl edg g 0 edg ver tice ffl weight edg g 0 follow wellknown result lemma 1 valid initi interv g 0 cycl posit weight furthermor g 0 cycl posit weight ts u denot length longest path g 0 u oeu valid cyclic schedul lemma 1 two import consequ ffl first given integ easi determin valid initi interv ye build correspond cyclic schedul appli bellmanford algorithm 11 ffl optim initi interv 1 smallest nonneg integ g 0 posit cy cle therefor maxfd c cycl gg otherwis furthermor binari search combin bellmanford algorithm comput 1 polynomi time b2 algorithm gs p resourc said case p ident processor algorithm consist convers depend graph g acycl graph g g obtain delet edg g initi schedul gs take optim schedul unlimit resourc refer slice gs take slice start clock cycl congruent 0 modulu 1 ie slice clock cycl k1 clock cycl k amount decompos ts u word r consid edg refer slice oper instanc oper instanc v perform within refer slice name v start end oper u k gamma q u henc oper instanc one depend upon complet word k gamma q two oper depend edg e initi slice edg e safe consid type 2 edg thu delet g way edg cut gs heurist 1 led follow algorithm algorithm 1 algorithm gs 1 comput optim cyclic schedul oe 1 unlimit resourc 2 let edg g e delet g provid acycl graph g 3 consid acycl graph g vertic weight ffi edg repres task depend perform list schedul oe p processor b let makespan ie total execut time schedul g 4 ts u valid cyclic schedul correct algorithm gs found 8 also deduc correct algorithm cdr see section ivb1 b3 perform algorithm gs gs give upper bound initi interv obtain algorithm 1 let opt optim smallest initi interv p processor follow inequ establish phi length longest path g moreov owe strategi cut edg phi 8 impli lead opt opt gs first guarante algorithm see equat 2 bound directli depend upon phi length longest path g exampl go back exampl assum processor graph g graph figur 1 figur 4a depict graph g 0 12 differ valu ts u given circl figur schedul oe 1 u alreadi repres figur 2 4 processor need 1 howev best way determin type 2 edg see section iiic py calland dart robert circuit retim appli decompos softwar pipelin 5 figur 4b show acycl graph g obtain cut edg r final figur 4c show possibl schedul oper provid list schedul initi interv solut f ak time resourc b c fig 4 graph g 0b acycl graph ga correspond list schedul alloc c cut edg retim let us summar algorithm gs follow first comput valu ts u g 0 1 provid optim schedul without resourc constraint oe 1 take refer slice start clock cycl 0 final delet g edg necessarili correspond depend differ slice edg remov algorithm gs howev edg correspond depend differ slice q u within refer slice schedul comput instanc therefor comput v depend upon perform slice iff wise perform subsequ slice case let us check mathemat arbitrari slice consid valid cyclic schedul oeu 6 0 let c 0 given edg depend constraint satisfi thu r u r final divid get furthermor q v depend constraint directli write r u thu ae therefor condit cut edg correspond depend differ slice ie call furthermor edg cut gs also cut new rule led modifi version gs call mg sinc cut edg mg gs acycl graph mg obtain mg contain subset edg acycl graph g see figur 5 illustr fact ak time resourc b fig 5 acycl graph provid algorithm mg b correspond list schedul alloc actual need neither initi order refer slice longer need determin function defin acycl graph mg follow edg mg iff qv clearli mg acycl assum cycl sum quantiti qv qu cycl get contradict final given mg list schedul dag whose vertic weight initi ffi function function q call retim context synchron vlsi circuit 10 given graph q perform transform g new graph g q q defin follow edg e q transform interpret follow de repres number regist edg e retim q amount suppress qu regist edg leav u add qv regist edg enter v retim said valid edg e e q e 0 least one regist per edg g q see equat 3 edg q edg regist note assum sum de cycl g posit use vlsi terminolog say g synchron readi formul problem recal goal answer follow two question ffl cut edg obtain acycl graph g whose longest path minim length ffl cut mani edg possibl number depend constraint satisfi list schedul g minim 6 ieee transact parallel distribut system vol xx month 1996 use new formul state object precis term retim object 1 find retim q minim longest path mg ie term retim minim clock period phi retim graph object 2 find retim q number edg mg minim ie distribut regist leav edg regist possibl section iv show achiev first object sever possibl solut section v show select best one respect second object state final algorithm improv upon gs two reason first better bound second cut edg henc freedom list schedul iv minim longest path acycl graph wellknown retim algorithm use minim clock period vlsi circuit ie maxim weight term delay path regist first recal algorithm due leiserson sax 10 show appli decompos softwar pipelin retim algorithm first need definit denot u p path p g u v dp e2p de sum depend edg p ffip v2p ffiv sum delay vertic p defin delta follow delta comput solv allpair shortestpath algorithm g edg u e weight pair de gammaffiu final let path g dp phig length longest path null weight g call clock period g vlsi terminolog theorem 1 theorem 7 10 let synchron circuit let arbitrari posit real number let q function v integ q legal retim g phig q 1 everi edg u e 2 deltau v theorem 1 provid basic tool establish follow algorithm algorithm 2 determin retim clock period retim graph minim algorithm 2 algorithm opt1 10 1 comput delta see algorithm wd 10 2 sort element rang delta 3 binari search among element deltau v minimum achiev clock period test whether potenti clock period feasibl appli bellmanford algorithm determin whether condit theorem 1 satisfi 4 minimum achiev clock period found step 3 use valu qv found bellmanford algorithm optim retim algorithm run ojv j 3 log jv j effici algorithm whose complex ojv jjej log jv j signific improv spars graph run previou algorithm except step 3 bellmanford algorithm replac follow algorithm algorithm 3 algorithm fea 10 given synchron desir clock period algorithm produc retim q g g q synchron circuit clock period phi retim exist 1 vertex set qv 0 2 repeat follow comput graph g q exist valu q b vertex v 2 v comput delta 0 v maximum sum ffip vertex delay along zeroweight direct path p g lead v done ojej c vertex v delta 0 v set qv 3 run algorithm use step 2b comput phi phi feasibl retim exist otherwis q desir retim b new schedul algorithm algorithm cdr give new algorithm prove resourc depend constraint met algorithm 4 algorithm cdr let depend graph 1 find retim q minim length phi longest path null weight g q use algorithm 2 improv algorithm step 3 2 delet edg posit weight equival keep edg edg regist way obtain acycl graph g 3 perform list schedul oe g comput 4 defin cyclic schedul oe note complex algorithm cdr determin step 1 whose complex ojv jjej logjv j comparison complex algorithm gs ojv jjej logjv jffi max differ come fact phi opt search among jv j 2 valu deltau v wherea 1 search among valu 0 algorithm similar complex py calland dart robert circuit retim appli decompos softwar pipelin 7 b1 correct algorithm cdr theorem 2 schedul oe obtain algorithm cdr meet depend resourc constraint proof resourc constraint obvious met list schedul definit ensur slice overlap show depend constraint satisfi e need verifi oe u oe one hand suppos e delet ie e 2 g equival say weight e retim equal zero qv sinc oe schedul g oe u thu inequ 4 satisfi hand e delet definit oe u thu inequ 4 satisfi b2 perform algorithm cdr use techniqu 8 order show algorithm also guarante give upper bound initi interv smaller bound given algorithm gs theorem 3 let g depend graph phi opt minimum achiev clock period g initi interv schedul gener algorithm cdr p processor avail opt best possibl initi interv case opt phi opt opt proof construct phi opt length longest path g thu proof techniqu 8 ie list schedul techniqu prove lead desir inequ show bound obtain algorithm cdr theorem 3 alway better bound algorithm gs see equat 2 consequ follow lemma lemma 2 1 phi opt proof let us appli algorithm cdr unlimit resourc defin retim q defin graph g delet g edg e q e 0 defin schedul g unlimit resourc oe p path g lead ug makespan oe phi opt construct final get schedul g defin tion smallest initi interv consid optim cyclic schedul oe unlimit resourc oeu defin section iii b1 let prove section iiic q defin valid retim g ie edg g delet g edg e q e 0 algorithm mg let p path g sum construct phig q length longest path g thu phig q final phi opt phig q henc result theorem 4 perform upper bound given algorithm cdr better perform upper bound given algorithm gs proof easili deriv fact phi opt shown lemma 2 note bound worst case upper bound initi interv prove howev cdr alway better gs exampl appli algorithm cdr key exampl assum avail processor phi 14 retim q achiev clock period obtain two step algorithm 3 q figur 6a 6b 6c show success retim graph figur 6d show correspond acycl graph g final figur 6e show possibl schedul oper provid list schedul techniqu whose initi interv better found algorithm mg see figur 5b algorithm gs see figur 4c b3 link 1 phi opt shown lemma 2 1 phi opt close ever retim deriv schedul initi interv 1 permit defin acycl graph longest path phi opt word look 1 right approach minim period graph section investig deepli fact recal anoth formul retim problem given leiserson sax 10 lemma 3 lemma 9 10 let synchron circuit let c posit real number 8 ieee transact parallel distribut system vol xx month 1996 f f f b c ak bk ck time resourc e fig 6 initi depend graph g b c success step retim use cdr correspond acycl graph correspond list schedul alloc exist retim q g phig q exist assign real valu sv integ valu qv vertex v 2 v follow condit satisfi gammasv gammaffiv everi vertex sv everi vertex qu gamma let everi vertex u inequ 5 equival qu gamma last system permit better understand techniqu develop previous optim schedul unlimit resourc seen lemma 2 schedul oeu system 6 except second inequ rv necessarili rv case proof algorithm cdr unlimit resourc construc tion retim phig q system 6 satisfi smallest valu therefor techniqu lead better cyclic schedul unlimit resourc slice overlap second inequ alway possibl find 1 way algorithm cdr gs p resourc schedul obtain satisfi system 6 makespan oe cdr q retim achiev optim period wherea gs q retim defin 1 1 c cdr fourth inequ satisfi exactli edg howev gs oe requir satisfi fourth inequ edg necessari actual edg ru ffiu rv note algorithm addit condit impos resourc constraint appear system 6 v minim number edg acycl graph purpos section find retim graph minimum number null weight edg among retim graph whose longest path best possibl length phi opt remov edg non null weight give acycl graph match object state end section iiic exampl consid step 1 algorithm cdr use retim algorithm leiserson sax 10 final retim minim length phi longest path null weight necessarili minim number null weight edg see key exampl figur 6 c 14 appli yet anoth retim obtain graph figur 7a 0 f c bk time resourc fig 7 final retim graph b correspond acycl graph correspond list schedul alloc length longest path null weight still 14 total number null weight edg smaller impli correspond acycl graph g see figur contain fewer edg acycl graph figur 6d therefor like produc smaller initi interv 2 case exampl find initi interv equal 19 see figur 7c turn 19 best possibl integ initi list schedul graph subset anoth graph alway produc smaller execut time intuit show practic case fewer constraint freedom py calland dart robert circuit retim appli decompos softwar pipelin 9 interv processor sum oper delay 37 37 recal retim q phig q integr solut follow system see formul theorem 1 deltau v phi opt among retim want select one particular retim q number null weight edg g q minim done follow lemma 4 let synchron circuit retim q phig q number null weight edg g q minim found polynomi time solv follow integ linear program min deltau v phi opt proof consid optim integ solut q v system 8 q defin retim g phig q sinc system 7 satisfi inde qv gamma qudev note constrain one equat 1 two case ffl weight e g q null ie possibl ffl weight e g q posit ie qvgammaqud 1 recal q integ case minim valu v 0 therefor given retim q e2e minim equal number null weight edg g q remain show optim integ solut found polynomi time system 8 matrix form minfcx j ax bg c c transpos jv jthetajejincid matrix g c 0 transpos incid matrix graph whose edg pair u v deltau v phi opt jej theta jej ident matrix incid matrix c total unimodular see 12 page 274 easi see also total unimodular therefor solv ilp problem 8 npcomplet system 8 consid lp problem integr optimum solut corollari 191a 12 integr solut found polynomi time theorem 162 12 let us summar refin incorpor softwar pipelin heurist first comput phi opt minimum achiev clock period g solv system 8 obtain retim q defin g acycl graph whose edg null weight longest path g minim number edg g minim final schedul g algorithm cdr call heurist modifi cdr simpli mcdr remark solv system 8 expens although polynomi optim permit reduc complex precomput strongli connect compon g g solv problem separ compon g retim minim number null weight edg g q built ad suitabl constant retim q edg link differ compon posit weight futur work tri find pure graphtheoret approach resolut system 8 practic complex softwar pipelin heurist decreas vi load balanc restrict far initi interv integ valu mention section ii search ration initi interv might give better result price increas complex search b achiev unrol origin loop nest factor b therebi process extend depend graph mani vertic edg section propos simpl heurist allevi potenti load imbal processor need unrol graph rememb principl four previous describ heurist gs mg cdr mcdr first acycl graph g built g g schedul list schedul techniqu defin schedul oe insid slice length initi interv final slice concaten slice initi complet previou one main weak principl slice overlap sinc schedul slice defin assoonasposs asap list schedul usual happen mani processor idl last time step slice idea remedi problem tri fill hole schedul task next slice instead schedul next slice schedul oe schedul aslat asposs alap hole may appear first time step slice two success slice processor permut comput load nearli equal balanc concaten slice cours depend slice must taken account precis formul heurist found 13 illustr key exampl exampl figur 7c show possibl alloc instanc g provid asap list schedul figur 8a show alloc provid alap list schedul figur 8b concaten two instanc initi interv obtain equal 37 two instanc ie better initi interv obtain algorithm figur 7c improv two processor alway busi 2 time resourc bk b bk ak dk ck fk fig 8 alap schedul b concaten two instanc anoth possibl schedul acycl manner two slice instead one retim chosen equival unrol loop retim perform case first slice process second slice alloc way take account depend constraint come acycl graph plu depend two slice word retim seen preloop transform consist chang structur subgraph induc loop independ edg retim done softwar pipelin algorithm still appli vii conclus paper present new heurist softwar pipelin problem built upon result gasperoni schwiegelshohn made clear link softwar pipelin retim case ident non pipelin resourc new heurist guarante better bound 8 unfortun extend guarante case mani differ resourc list schedul guarante case point cdr heurist reason complex similar classic softwar pipelin algo rithm mcdr work aim deriv algorithm implement requir use integ linear program even though particular instanc ilp invok mcdr polynomi final note edgecut heurist lead cyclic schedul slice overlap construct final loadbalanc techniqu first step overcom limit would interest deriv method sophist loop unrol synthes resourceconstrain schedul slice overlap acknowledg author would like thank anonym refere care read fruit comment r schedul techniqu easili schedul horizont architectur high perform scientif comput softwar pipelin effect schedul techniqu vliw machin perfect pipelin new loop optim techniqu cyclic schedul parallel proce sor overview finegrain schedul resourc con straint framework resourceconstrain rateoptim softwar pipelin softwar pipelin gener close optimum loop schedul parallel processor decompos softwar pipelin retim synchron circuitri introduct algorithm theori linear integ program ming new guarante heurist softwar pipelin problem tr ctr hansaem yun jihong kim soomook moon time optim softwar pipelin loop control flow intern journal parallel program v31 n5 p339391 octob dongm peng mi lu explor interiter parallel within ratebalanc multir multidimension dsp algorithm ieee transact larg scale integr vlsi system v13 n1 p106125 januari 2005 timothi w oneil edwin hm sha combin extend retim unfold rateoptim graph transform journal vlsi signal process system v39 n3 p273293 march 2005 timothi w oneil edwin hm sha combin extend retim unfold rateoptim graph transform journal vlsi signal process system v39 n3 p273293 march 2005 alain dart guillaum huard loop shift loop compact intern journal parallel program v28 n5 p499534 oct 2000 greg snider performanceconstrain pipelin softwar loop onto reconfigur hardwar proceed 2002 acmsigda tenth intern symposium fieldprogramm gate array februari 2426 2002 monterey california usa karam chatha ranga vemuri hardwaresoftwar partit pipelin schedul transform applic ieee transact larg scale integr vlsi system v10 n3 p193208 june 2002 r govindarajan guang r gao palash desai minim buffer requir rateoptim schedul regular dataflow network journal vlsi signal process system v31 n3 p207229 juli 2002