implement failsil node distribut system abstracta failsil node selfcheck node either function correctli stop function intern failur detect node construct number convent processor softwareimpl failsil node nonfaulti processor node need execut messag order comparison protocol keep step check respect paper design implement effici protocol two processor failsil node describ detail perform figur obtain indic wide class applic requir high degre faulttoler softwareimpl failsil node construct simpli util standard offtheshelf compon attract altern hardwareimpl counterpart requir specialpurpos hardwar compon faulttoler clock compar bu interfac circuit b introduct replic process distinct processor wherebi output faulti processor prevent appear applic level employ mean compar vote output produc processor provid practic mean construct system capabl toler byzantin also refer failuncontrol processor failur approach use construct failcontrol node compos number convent processor applic level process replic particular case failcontrol node p1 processor failsil node either work correctli stop function becom silent soon intern failur detect behaviour node guarante long p processor node fail two processor failsil node p1 offer practic econom solut problem construct failcontrol node paper concentr design implement perform evalu twoprocessor node particular describ practic design softwar implement twoprocessor failsil node suitabl use distribut system meet abstract failsil follow sens node produc either correct messag verifi destin node ceas produc new correct messag case destin node detect messag may produc unwant paper structur follow begin review relat work area reliabl node design contrast approach summaris main contribut paper describ basic principl underpin failsil node present term refer implement failsil node implement make use standard synchronis clock base messag order protocol describ perform protocol improv present two new much faster order protocol base logic clock leaderfollow masterslav approach follow describ design comparison protocol make use masterslav approach messag comparison present result obtain experiment work compar perform evalu variou implement failsil node conclus work present final section paper 2 relat work failcontrol node use replic process comparisonvot must incorpor mechan keep replica synchronis avoid state replica diverg asynchron event eg interrupt timeout process nonident messag reason could lead replica state diverg synchronis level processor microinstruct logic straightforward way achiev replica synchron approach processor driven common clock sourc guarante execut step clock puls cours logic individu processor must determinist output evalu comparedvot possibl replic hardwar compon appropri time eg bu access asynchron event must distribut processor node special circuit ensur correct processor perceiv event point instruct stream 12 23 sinc everi correct processor node execut instruct stream program run nonredund version made run without chang node major advantag gain synchronis level micro instruct implement two processor failsil node use stratu 27 sequoia 2 two wellknown exampl system common reliabl clock sourc use drive pair processor execut lockstep access bu control reliabl compar circuit enabl access bu signal gener two processor anoth exampl failcontrol node present 6 design employ tight synchronis redund processor addit use code techniqu detectingcorrect memori bit corrupt howev problem microinstruct level approach synchronis first indic individu processor must built way determinist behaviour clock puls produc ident output dont care transit instanc bit either one zero allow design processor second introduct special circuit reliabl comparatorvot reliabl clock asynchron event handler bu interfac increas complex design extrem lead reduct overal reliabl node third everi new microprocessor architectur requir consider redesign effort fourth tight synchron transient fault like affect processor ident manner thu make node suscept common mode failur approach use processor replic reli instead variou applic specif form check mechan eg watchdog timer detect erron behaviour processor therefor consid eg 17 error detect coverag one node estim better 99 11 howev approach applic specif rather gener purpos complet elimin second third problem refer altern approach seek reduc elimin altogeth hardwar level complex associ approach discuss maintain replica synchron higher level instanc process task level make use appropri softwar implementedprotocol softwareimpl node offer sever advantag hardwareimpl counterpart technolog upgrad appear easi sinc principl behind protocol chang protocol softwar port rel easili type processor includ one expect avail futur ii note employ differ type processor within node possibl measur toler design fault processor obtain without recours specialis hardwar assist iii sinc replic comput execut lockstep node like robust transient failur 11 task synchronis approach pioneer design sift failur mask node 28 sift applic process structur set cooper cyclic task task perform determinist comput execut particular iter task consist input data possibl gener previou iter task process data output result faulttoler achiev vote input data thu task replica must synchronis begin iter start frame achiev sift maintain global timebas use static prioriti base schedul schedul task predefin time frame global timebas implement keep clock correct processor synchronis softwar implement byzantin resili clock synchronis protocol normal oper system allow interrupt clock handl correct processor begin time frame applic depend design sift architectur appli restrict rang applic also case votric system 25 follow design principl sift provid faulttoler differ still specif class applic railway signal system work taken sift approach investig design famili failuremask failsil node call voltan 21 22 24 capabl support quit gener purpos messag pass program voltan node compos offtheshelf processor connect via commun link processor node execut messag agreement order protocol guarante correct replica applic process receiv process input messag ident order output messag produc process replica evalu either compar failsil node voter failuremask node processor howev concern perform softwareimpl node due overhead impos redund manag protocol inde term perform hardwareimpl node alway perform softwar equival hardwareimpl node capabl work nearli speed constitu processor sift instanc redund manag protocol consum much 80 processor throughput 15 hybrid solut propos circumv problem maft 10 ftpap 13 delta4 16 hybrid architectur share basic design architectur structur around microinstruct synchronis hard core top convent processor replic microinstruct synchronis hard core respons execut redund manag function eg messag vote certainli improv perform howev hard core reintroduc problem associ hardwareimpl node paper present design implement softwareimpl twoprocessor failsil node effici term perform capabl execut gener purpos messag pass softwar perform care analysi perform origin implement voltan node refer implement examin sever way improv perform led design two novel messag order protocol consider effici origin protocol properti failsil node exploit design obtain effici requir detect failur rather mask present protocol result perform node perform figur obtain lead us believ wide class applic requir high degre fault toler softwar implement failsil node construct simpli utilis standard offtheshelf compon employ one new order protocol particularli leaderfollow protocol repres attract altern hardwar implement counterpart 3 basic principl 31 system model assumpt assum fail processor therefor process run processor exhibit byzantin behaviour make assumpt nonfaulti processor node abl sign messag send affix messag messag depend unforg signatur nonfaulti processor also assum abl authent sign messag receiv digit signatur base techniqu 18 provid comprehens way meet function assum nonrepl distribut comput compos number process interact via messag exampl function typic server process cycl select input messag one input port process necessari output one messag output port necessari assum comput perform process select messag determinist well known state machin model state machin process precis requir support replic process known 20 basic replic version process multipl input port nonrepl process merg singl port replica select messag head port queue process nonfaulti replica ident initi state ident output messag produc provid queue correct replica guarante contain ident messag ident order thu replic process requir follow two condit met agreement nonfaulti replica process receiv ident input messag order nonfaulti replica process messag ident order practic distribut program often requir addit function use timeout wait messag timeout asynchron event high prioriti messag etc potenti sourc nondetermin input messag select make program difficult replic previou paper 22 26 describ node enhanc provid necessari function deal case paper assum simpl state machin model discuss assum processor failsil node network interfac internod commun possibl redund network addit processor node intern connect commun link intranod commun need execut redund manag protocol eg messag order comparison assum maximum intranod commun delay link known bound nonfaulti process send messag nonfaulti link nonfaulti process neighbour processor messag receiv within time unit simplic assum lower bound actual transmiss delay zero 0d also repres maximum variat messag transmiss delay link link failur categoris processor failur link failur prevent messag sent processor receiv neighbour node consid failur sender processor fig 1 show exampl distribut system three twoprocessor failsil node p q connect dual redund network c1 c2 architectur node level process replic distinct node increas avail node level process compos two process one underli processor behav like failsil process particular system architectur use build highli avail servic construct kresili node process k1 replic node level process k0 toler maximum k replica failur subsequ failur make servic provid becom unavail separ paper shown protocol group commun node level process necessari support servic implement run two processor failsil node 7 fig 1 distribut system architectur employ failsil node 32 basic softwar architectur describ basic softwar architectur twoprocessor failsil node addit applic level comput process processor node execut five system process describ sender process process take messag produc comput process processor sign send via link neighbour processor node comparison compar process process compar authent messag sent neighbour processor counterpart produc local messag comparison succe singli sign authent messag receiv neighbour counter sign consid first signatur part messag doubl sign messag term valid messag hand local transmitt process network deliveri destin node comparison detect disagr indic failur similarli absenc messag comparison node specif timeout interv also indic failur failur detect compar process stop sender process new valid messag produc node transmitt process process respons send doubl sign messag network destin node processor transmitt process node correct processor produc two copi everi output messag subsequ discuss time analysi node node output refer valid copi produc first receiv process process authent messag receiv network link discard unauthent duplic messag authent messag network valid messag sent local order process authent singli sign messag link sent compar order process process execut order protocol counterpart processor node order construct ident queue valid messag process comput process sinc protocol entail order process relay valid messag counterpart suffici messag receiv network one processor node order processor except asymmetr order protocol without feedback discuss later requir messag receiv nomin processor leader order architectur adapt gener case p1 processor failsil node node produc valid messag p1 processor signatur 33 node failur semant assum applic process correctli function node assign monoton increas sequenc number new messag produc properti enabl correctli function destin node discard replica previous receiv messag let applic process run correctli function unrepl node take unit time comput respons input messag correspond correct output failsil node take ttt delay unit time delay delay 0 bound worstcas delay introduc redund manag protocol output failsil node produc later node said suffer perform failur 4 failsil node one three state see fig 2 normal silent fail fig 2 failsil node state normal state state node produc correct output detect intern failur compar process caus node irrevers enter either fail state silent state ii fail state intermedi state node suffer one perform failur state node eventu enter termin silent state iii silent state new valid messag produc node messag produc node invalid copi previous produc valid messag function destin node detect messag unwant reason exist intermedi fail state follow faulti processor contain messag correct processor sent comparison messag sent correct processor stop faulti processor output valid doubl sign messag futur time sender compar process processor must therefor incorpor intranod messag synchronis measur ensur processor node time one messag sent neighbour comparison yet compar local way number perform failur fail state limit one fact failsil node suffer singl perform failur intermedi state need caus concern applic consid system fail crash node without intermedi state client applic time constraint expect respons node would still expect contain timeli check detect absent respons check adequ case failsil node filter late respons applic program time constraint perform failur suffer failsil node fail state caus inconsist thu system softwar implement failsil node regard capabl implement abstract failsil follow sens node produc either correct messag verifi destin failsil node ceas produc new correct messag case destin node detect messag may produc unwant possibl design specialis faulttoler network interfac could prevent messag output node one processor detect failur minim need provid network interfac singl switch unilater irrevers switch control signal sent either processor node softwar solut design node intermedi fail state requir addit redund exampl one could deleg respons messag comparison output separ node fail 2p1 failur mask node capabl mask p processor failur within node could provid servic messag comparison output collect p1 processor node inde failuremask node provid servic record statu failsil node design much resembl system failstop node 19 switch function halt state provid failurestatu indic 34 rational behind experiment work rest paper describ experiment work evalu number design twoprocessor failsil node howev brief discuss rational behind experiment work worth mention note perform failsil node depend quickli messag order compar order achiev sever way basic idea agreement protocol guarante correct replica receiv set messag accomplish order assign monoton increas sequenc number messag also necessari devis method establish messag becom stabl ie guarante valid messag sequenc number less certain valu seq ever receiv messag sequenc number less seq process consist order among replica gener method assign sequenc number messag associ stabil test differ system assumpt discuss 20 use idea appli special case twoprocessor failsil node delay impos comparison protocol mostli made time spent messag exchang plu delay introduc intranod messag synchronis measur necessari ensur processor node time contain one messag neighbour comparison took follow approach quest design minimis order comparison delay first perform refer implement base design rel easi understand reason refer implement use simpl order protocol messag simpl comparison protocol incorpor synchronis measur limit number receiv messag neighbour one potenti node suffer one perform failur fail state investig number way reduc messag order delay investig messag comparison protocol synchronis measur work order protocol prove highli signific come clean effici solut select design comparison protocol undertook compar perform evalu four node design use comparison protocol differ order protocol input messag start one use refer implement care design softwar refer implement modular fashion made rel easi us replac modifi modul incorpor necessari chang 24 4 refer implement 41 softwar architectur overal softwar architectur failsil node depict fig 3 major softwar modul within processor node interact summaris processor maintain sever messag queue list receiv messag queue rmq contain valid messag intend order receiv network b deliv messag queue dmq contain order messag consum applic process servic c process messag queue pmq contain unsign output messag produc local applic process messag must valid compar process transmiss final destin sender process respons transmit messag pmq neighbour processor well local compar process extern candid messag list ecl contain singli sign messag receiv neighbour processor valid intern candid messag list icl contain unsign messag wait match sign messag arriv ecl f compar messag queue cmq contain success compar doubl sign messag valid messag readi transmit network order compar receiv sender transmit icl network link network link network link fig 3 softwar architectur processor node 42 comparison protocol refer implement use simpl comparison protocol refer fig 3 sender process processor transmit messag pmq neighbour get buffer neighbour messag pool ecl compar process maintain applic process servic sequenc number next messag compar recal applic process assign monoton increas sequenc number new messag produc use criterion compar match messag ident sequenc number ecl icl comparison detect disagr indic failur similarli absenc messag comparison node specif timeout interv also indic failur failur detect compar process stop sender process simpl protocol ecl processor permit contain one correct messag neighbour thu potenti faulti processor output one late valid messag latter section describ addit synchronis measur necessari prevent happen 43 order protocol synchronis clock refer implement order protocol describ section make use wellknown approach use synchronis clock messag order clock processor node assum synchronis magnitud measur differ read clock instant bound known constant say e nonfaulti processor stop soon failur detect clock synchronis protocol need faulttoler assum execut faultfre environ shown lower bound e d2 5 faultfre environ e taken d2 provid inter synchronis period kept small enough effect due differ run rate clock ignor order process processor timestamp messag order local clock read copi timestamp messag sent link order process processor node timestamp messag receiv sent order process processor messag becom stabl local clock time td dde messag timestamp becom stabl valid messag timestamp tt receiv order process stabl messag enqueu appropri dmq increas timestamp order action taken discard rather enqueu stabl messag replica alreadi enqueu order process compos three cyclic process relay transfer deliv see fig 4 relay process pick messag rmq timestamp send processor node also insert messag order messag list oml transfer process receiv relay messag link perform timeli check reject messag receiv earli messag timestamp less ce c current read processor clock receiv late messag timestamp greater cd accept messag insert oml deliv process take stabl messag messag timestamp less cd oml remov duplic enqueu messag appropri dmq increas order timestamp deliv relay transfer link oml link order fig 4 order protocol synchronis clock compar order speed variou protocol failurefre situat defin actual stabil delay order protocol term reliabl refer clock clock could correct processor physic clock processor node correct order protocol given messag network defin refer clock time elaps instant copi messag first receiv one processor node instant messag get order enqueu appropri dmq processor node throughout paper assum effect differ runn rate refer clock correct processor clock neglig interv e measur assumpt order protocol present l l 0 magnitud messag recept skew accord refer clock ie differ refer clock time processor node receiv copi messag network e 0e e magnitud actual clock synchronis error time messag first receiv network ahead factor 1 clock processor first receiv messag network ahead processor clock zero either first processor clock ahead l 0 note one processor receiv messag network l messag order processor also defin min max respect lower upper bound actual stabil delay order protocol min max therefor protocol fix overhead least unit time implicit order protocol motiv us seek enhanc begin describ method improv protocol describ new protocol requir clock node kept synchronis 5 improv order protocol 51 improv synchronis clock algorithm arriv relay messag use reduc constant stabil delay impos order protocol shall assum messag sent link receiv sent order given fifo assumpt timestamp receiv relay messag use defin new lower bound actual stabil delay fig 5 use illustr idea case relay messag timestamp receiv local clock read c greater messag receiv order neighbour bear timestamp smaller equal new local messag order get timestamp greater equal c messag sender order oml fig 4 timestamp smaller equal stabl case b show case messag timestamp receiv order neighbour ct case messag order timestamp smaller c stabl note case guarante neighbour clock ahead processor clock also messag could taken d2 time transmiss across link otherwis possibl ct e d2 therefor updat local clock t1 caus magnitud clock differ increas beyond d2 ie beyond e updat relay messag timestamp receiv processor defin new stabilis interv messag timestamp smaller equal stabl case c word messag relay one processor becom stabl receiv processor soon receiv b c stabl timestamp accord synchronis clock protocol stabl timestamp assum fifo channel nonstabl timestamp fig 5 stabil interv deriv modifi protocol let processor first receiv messag network receiv refer clock time r processor receiv relay messag time r 0d actual link transmiss delay immedi order first processor abl order messag time r time r l receiv relay messag processor mind l min 0 max 0 52 order protocol logic clock take idea discuss step elimin requir physic clock processor form node kept synchronis instead use logic clock gener timestamp 14 order protocol processor node maintain two logic clock counter name local logic clock llc remot logic clock rlc initialis 1 0 respect llc use timestamp messag relay neighbour order rlc use store estim neighbour llc clock updat follow way whenev processor relay messag neighbour timestamp messag current valu llc increment llc one whenev messag timestamp receiv neighbour rlc set llc set maximum current valu t1 updat ensur follow properti messag relay neighbour bear increas timestamp ii valu rlc processor smaller llc well neighbour llc properti ii guarante messag order timestamp smaller equal rlc stabl relay messag becom stabl receiv processor soon receiv actual stabil delay l protocol present one shortcom messag processor becom stabl arriv relay messag neighbour rlc updat messag relay neighbour receiv howev processor relay messag receiv network one processor receiv messag network l prevent stabilis messag solv problem discuss scheme base timeout allow processor updat rlc even processor relay messag 20 processor say neighbour say schedul updat rlc valu occur time t2d valu read physic local clock 1 relay time t2d rlc updat valu less 2d timeout interv follow fact receiv 1 timestamp llc p 2 valu least t1 therefor messag timestamp smaller equal relay p 2 p 1 say relay p 2 receiv 1 worst case would done recept 1 1 2 take unit time thu p 1 must wait least 2d unit time advanc rlc order process protocol also compos three cyclic process work fashion similar discuss previou protocol see fig 4 relay process pick messag rmq timestamp valu read llc place messag oml copi timestamp messag sent link neighbour processor final processor llc increment one updat rlc schedul execut 2d unit time transfer process receiv relay messag timestamp link perform timeli check messag consid time timestamp greater current valu rlc time place processor oml llc rlc updat necessari discuss messag oml timestamp less equal rlc stabl thu deduc min2d l min 0 max 2d 0 2d 53 asymmetr order protocol present protocol assign differ role two processor form node term one processor leader neighbour follow respons leader determin order process messag select messag process leader send copi messag follow inspir way build failsil node come leaderfollow replic protocol applic level process use delta4 system 1 16 due simplic order mechan need special order process within processor instead receiv process differ function leader follow compar receiv sender transmit icl network link network link network link compar receiv sender transmit icl network link network link network link time leader follow link fig leaderfollow failsil node node work follow see fig 6 leader maintain counter whose valu use assign uniqu identifi input messag authent doubl sign messag receiv receiv leader tag counter valu counter increment one messag deposit appropri dmq increas order tag valu copi messag also sent follow across link output messag applic process servic follow path discuss tag messag leader reach follow also get deposit appropri dmq messag buffer ecl icl cmq compar process role asymmetri introduc assign differ role two processor node requir us introduc extra mechan follow detect late non arriv messag order leader time process see fig 6 introduc follow follow receiv process deposit authent doubl sign input messag receiv network extern receiv messag list erml associ timeout copi messag receiv leader via link way dmq deposit intern receiv messag list irml time process pick messag irml reset timeout associ counterpart erml timeout expir follow assum leader fail send messag order stop activ process processor unlik previou protocol order calcul actual stabil delay protocol relev identifi processor first receiv copi particular input messag defin l lf differ time leader receiv copi particular input messag time follow receiv copi messag actual stabil delay protocol given f l 0 l lf 0 l lf otherwis l f actual stabil delay leader follow respect protocol embellish deal case correctli function leader receiv messag network follow lead node becom silent follow processor tri prevent shut feed leader miss input messag feedback version leaderfollow protocol timeout expir follow send copi miss input messag leader order properli order simplic path shown fig 6 second timeout t2d associ messag timeout also expir follow may assum leader fail follow ceas activ stabil delay becom f l 0 l lf 0 minl lf td otherwis also sensibl strategi follow set t0 thu soon follow receiv messag network check presenc correspond relay messag leader 2d thu max protocol becom ident logic clock protocol 6 asymmetr comparison protocol compar protocol discuss permit node fail state commit one perform failur one way prevent happen use comparison protocol guarante processor send given messag comparison neighbour previous sent messag success compar local order prevent deadlock also necessari processor first agre order exchang messag comparison architectur logic way achiev agreement would insert order process pmq sender process processor asymmetr order approach discuss previou section provid conveni way integr order comparison accordingli present comparison protocol base around leaderfollow techniqu worth note comparison protocol use within node use order protocol input messag synchronis clock logic clock leaderfollow order input messag independ order output messag descript given concentr messag synchronis aspect protocol aspect remain unchang purpos messag comparison one processor assign role leader follow leader messag pmq follow path see fig 3 howev follow synchronis sender compar introduc sender allow send new messag link comparison permit compar permiss grant compar finish compar current messag compar sender icl link transmit network fig 7 messag comparison follow side messag produc applic process follow slightli differ path shown fig 7 compar compar messag ecl sent leader local produc one icl comparison succe valid messag deposit cmq network deliveri local produc messag deposit pmq deliveri link leader messag arriv ecl leader get compar success compar process leader permit local sender process send next messag comparison 7 perform evalu section present perform figur obtain set experi run main object assess degrad perform suffer node call upon execut redund manag softwar present ordinari processor current simpl checksum use signatur minim impact upon system perform need complex signatur mechan yet assess implement failsil node t800 inmo transput evalu perform four protocol order input messag refer implement base clock synchronis algorithm ii logic clock iii leader iv leaderfollow feedback implement made use asymmetr messag comparison protocol discuss case iii iv processor act leader order also leader comparison two processor node directli connect transput link therebi provid fast intern path intranod commun first experi consist client applic process execut node request simpl servic server applic process execut differ node client process issu request server process wait respons server process receiv request client servic actual comput perform minim send respons back client upon recept respons messag client issu new request measur follow time interv server process input delay id input delay measur time interv messag enter node earliest recept time processor messag last remov dmq one processor delay made actual stabil delay messag plu time taken authent queue manipul within node reflect overhead involv order messag node ii output delay od output delay measur time interv messag becom readi comparison processor ie largest two time messag enter pmq messag output node ie first output one processor reflect time taken messag compar output iii node delay nd final node delay simpli sum input output delay idod reflect earliest respons node given input messag ie overhead associ replic modeldelaysm id od nd av l av synchronis clock 2021 409 2430 347 144 logic clock 764 318 1082 394 150 leaderfollow 434 206 640 232 123 leaderfollow tabl perform figur clientserv system collect data ten run experi run involv client node send 100 request messag 64 byte one time interv discuss averag valu measur request process also measur averag link transmiss delay av averag messag recept skew l av averag delay obtain summaris tabl figur express millisecond unrepl node also execut experi use singl processor node would anticip case ordinari processor overhead small exist still necessari enqueu dequeu messag system measur node delay server amount 1m 07m due input overhead whilst 03m due output overhead ii node synchronis clock order protocol experi worst case circumst determin smallest safe valu 12m refer implement node use simplifi version clock synchronis algorithm present 9 state e set d2 henc fix e6m give stabil delay 18m sinc dde measur indic actual stabil delay almost valu shown tabl id indic overhead due messag authent queue manipul take 221m iii node logic clock order protocol use logic clock actual stabil delay would around av l av assum overhead due messag authent queue manipul result given tabl show expect almost realis practic unlik previou protocol asymmetr protocol perform proport actual valu transmiss delay messag recept skew iv node leaderfollow order protocol asymmetr order protocol necessari examin separ perform leader follow processor sinc execut differ protocol analysi present previou section id correspond follow stabil delay f l plu overhead due messag authent queue manipul experi two node directli connect leadertolead followertofollow transput link therefor follow alway output messag leader time also follow receiv copi particular input messag first thu time l lf 0 consequ l lf valu shown tabl indic messag handl overhead asymmetr protocol 079m leaderfollow 083m leaderfollow close experienc unrepl node function order protocol incorpor receiv process overhead slightli bigger replic node messag must authent perform figur present two leaderfollow protocol see extra messag traffic introduc feedback mechan hardli impact perform node despit fact implement make use comparison protocol figur tabl show node asymmetr order protocol input messag suffer less output delay node symmetr one reason asymmetri introduc input order comparison help follow comparison time time messag becom avail icl see fig 7 leader messag usual avail ecl next experi perform evalu impact size input messag messag need order perform node size messag affect intranod messag transmiss time consequ affect input output delay transput use bytestream protocol linklevel commun system endtoend messag transmiss delay two transput vari 18m messag size 256 byte 33m messag size 2048 byte use clientserv system measur node delay variou order protocol messag size increas 256 2048 byte see fig 8 synchronis clock logic clock leaderfollow leaderfollow 683 731 764 802 872 978 1021 1100 794 86 923 968 1017 1002 1064 11105 synchronis clock logic clock leaderfollow leaderfollow feedback512102415362048 node delay millisecond fig 8 impact messag size impact messag size order protocol uniform increas transmiss delay littl impact perform order protocol base synchronis clock stabil delay base worst case transmiss delay thu node delay synchronis clock protocol suffer moder small increas 124m 2476m 2600m mainli due increas output delay hand would expect protocol would affect strongli valu fig 8 show increas 357m logic clock protocol increas 417m 316m leaderfollow leaderfollow feedback protocol respect last experi measur maximum throughput maximum rate node given order protocol order compar messag compar throughput node configur throughput unrepl node experi use fix messag size 64 byte modifi version client process client process wait respons arriv issu next request rather send continu stream request messag experi simul environ server process alway input messag process measur rate messag per second messag deposit cmq compar processor first output messag see fig 3 output rate use obtain throughput ratio tr unrepl unrepl output rate measur unrepl node figur obtain present tabl ii model unrepl node 329 10000 synchronis clock 66 2006 logic clock 68 2067 leaderfollow leaderfollow tabl ii throughput heavili load node heavi load order protocol perform closer worst case see perform node logic clock protocol almost synchronis clock base node asymmetr protocol still outperform protocol 8 conclud remark describ work build effici failsil node first perform refer implement made use simpl comparison order protocol investig perform order protocol improv led much simpler protocol base pure logic clock obviat need keep intranod clock explicitli synchronis also design implement asymmetr order protocol describ asymmetr order approach also exploit construct effici messag comparison protocol extens experi perform evalu perform node order protocol result obtain indic adopt asymmetr leaderfollow mechan within failsil node messag comparison well order repres best design choic must state possibl design symmetr comparison protocol requir processor decid order exchang messag comparison protocol sender compar process processor ensur given time one messag sent comparison local compar first combin protocol symmetr order protocol discuss earlier could result effici node design perform figur obtain quit care engin messag pass softwar unlik therefor significantli better perform obtain improv messag pass mechan leaderfollow node describ probabl indic limit achiev use standard theshelf processor asymmetr protocol particular implement perform impact use failsil node produc delay respons 6m per messag lightli load system secondli worst case load failsil node achiev 39 throughput rate nonrepl counterpart appreci price perform becom signific distribut applic process interact frequent hand applic process involv comput requir littl interact perform impact ad softwareimpl failsil quit small thu bear mind discuss present start paper advantag softwareimpl failsil node hardwareimpl node anticip rang applic softwareimpl node offer attract altern hardwareimpl counterpart conclud highlight recent work illustr advantag softwareimpl approach softwar approach make possibl appli failsil measur select process deem critic given applic voltan system softwar use asymmetr leaderfollow mechan suffici lean make practic use softwar librari construct selfcheck processpair member processpair contain number thread togeth implement entir voltan messag order selfcheck mechan implement system softwar permit collect distribut process replic transpar give equival collect selfcheck voltan process 3 softwar approach also make possibl extend capabl node rel eas propos simpl signific embellish capabilti failsil node result node term failstabl node 8 addit failsil properti p1 processor failstabl node second properti provid stabl store node maintain log whose content surviv intern failur log access node system use construct recent state process run node node stop state inform provid halt node facilit easi prompt restart stop process node node therfor form attract build block construct avail distribut system acknowledg work support part grant uk engin physic scienc research council brazilian research council cnpq r delta4 extra perform architectur xpa sequoia faulttoler tightli coupl multiprocessor transact process voltan applic program environ failsil process understand faulttoler distribut system possibl imposs achiev clock synchron errorresist interact consist architectur erica distribut system architectur support high avail reliabl build avail distribut system use failstabl node fault toler clock synchron maft architectur distribut fault toler toler transient fault mar byzantin resili fault toler comput nuclear power plant applic hardwar softwar fault toler unifi architectur approach time clock order event distribut system measur sift oper system overhead design failsil process node predict hard realtim system mar method obtain digit signatur publickey cryptosystem byzantin gener action implement failstop processor implement fault toler servic use state machin approach tutori failcontrol comput architectur distribut system princip featur voltan famili reliabl node architectur distribut system fault toler processor concept oper design implement voltan faulttoler node distribut system votric vote tripl modular comput system prevent state diverg replic distribut program stratu architectur sift design analysi fault toler comput aircraft control tr ctr mark w burn alan georg bradley wallac simul perform analysi gossip failur detect scalabl distribut system cluster comput v2 n3 p207217 1999 mark l mckelvin jr gabriel eirea claudio pinello sri kanajan alberto l sangiovannivincentelli formal approach fault tree synthesi analysi distribut fault toler system proceed 5th acm intern confer embed softwar septemb 1822 2005 jersey citi nj usa bruno gaujal nicola navet maxim robust tdma network applic ttpc realtim system v31 n13 p531 decemb 2005 claudio pinello luca p carloni alberto l sangiovannivincentelli faulttoler deploy embed softwar costsensit realtim feedbackcontrol applic proceed confer design autom test europ p21164 februari 1620 2004