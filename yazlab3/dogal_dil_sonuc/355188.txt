interpret stale load inform abstractin paper examin problem balanc load largescal distribut system inform server load may stale wellknown send request machin appar lowest load behav badli system yet techniqu common practic system use roundrobin random select algorithm entir ignor load inform use small subset load inform rather risk extrem bad perform one hand ignor chanc use load inform improv perform develop strategi interpret load inform base age simul examin sever simpl algorithm use load interpret strategi rang workload experi suggest properli interpret load inform system 1 match perform aggress algorithm load inform fresh rel job arriv rate 2 outperform best algorithm examin much percent inform moder old significantli outperform random load distribut inform older still 4 avoid patholog behavior even inform extrem old b introduct balanc load distribut system well known strategi send request leastload machin behav badli load inform old 11 18 21 system herd effect often develop machin appear underutil quickli becom overload everyon send request machin new load inform propag combat problem system work support part nsf cise grant cda9624082 grant novel sun dahlin also support nsf career grant 9733842 adopt random strategi ignor load inform use small subset load inform system may give opportun avoid heavili load machin load balanc stale inform becom increasingli import problem distribut oper system mani recent experiment oper system includ process migrat facil 2 6 9 16 17 23 24 25 26 30 common workstat cluster includ product load share program lsf 31 dq 10 addit mani network dn server router switch includ abil multiplex incom request among equival server 1 5 8 sever runtim system distribut parallel comput cluster metacomput includ modul balanc request among node 12 14 server load may also combin local inform wide area network wan inform system select http server cach 13 22 28 system includ larger number node distanc node increas becom expens distribut uptod load inform thu import system make best use old inform paper attempt systemat develop algorithm use old inform core idea use server last report load inform l also use age inform estim rate new job arriv chang inform exampl period updat model load inform 21 updat server load inform everi second client use algorithm calcul fraction request send server order equal load across server end epoch new request epoch client randomli choos server accord probabl paper devis load interpret li algorithm analyz relev queu system evalu algorithm via simul rang load inform model workload li algorithm load inform fresh eg small algorithm tend send request machin recent report low load algorithm match perform aggress algorithm exceed perform algorithm use random subset load inform pure random algorithm use load inform convers load inform stale li algorithm tend distribut job uniformli across server thu perform well random algorithm dramat better algorithm naiv use load inform final load inform modest age li algorithm outperform current altern much 60 algorithm attempt cope stale load inform propos mitzenmach 21 ad benefit restrict amount load inform client may consid dispatch job may reduc amount load inform must sent across network examin variat li algorithm base decis similarli reduc inform conclud even sever restrict inform algorithm use li outperform furthermor modest amount load inform allow li algorithm achiev nearli full perform thu li decoupl question much load inform use question interpret inform primari disadvantag approach requir client estim told job arriv rate age load inform inform avail abl client misestim valu algorithm poor perform note howev although algorithm make use stale load inform explicitli track factor algorithm implicitli assum paramet fall within rang valu load inform consid fresh paramet fall outsid rang algorithm perform quit badli con vers algorithm explicitli includ paramet grace degrad inform becom rel stale rest paper proce follow section 2 describ relat work particular emphasi mitzenmach recent studi 21 base much methodolog sever system model section 3 introduc model old inform section 4 describ load interpret algorithm use section 5 contain experiment evalu algorithm section 6 summar conclus relat work awerbuch et al 3 examin load balanc limit inform howev model differ consider particular focu task select good server job job place adversari model job place entiti act best interest seek interfer one anoth differ allow us aggress use past inform predict futur number theoret studi 4 7 15 20 27 suggest load balanc algorithm often quit effect even amount inform examin sever restrict explor combin idea li section 56 sever studi examin behavior load balanc old limit inform queu studi eager et al 11 found simpl strategi use limit inform work well mirchandaney et al 18 19 found delay increas random assign perform well strategi use load inform sever system use heurist weigh recent inform heavili old inform exampl smart client prototyp 29 distribut network request across group server use heurist addit common techniqu process migrat facil use exponenti decay averag estim load machin eg load new load old k current 1 unfortun algorithm use system somewhat ad hoc clear circumst use algorithm set constant goal studi construct systemat framework use old load inform studi close resembl mitzenmach work 21 mitzenmach examin system arriv job sent one sever server base stale inform server load goal system minim averag respons time examin famili algorithm make server choic small random subset server avoid herd effect caus system exhibit poor behavior client chase appar least load server mitzenmach algorithm n server instead send request least load n server client randomli select subset size k server send request least load server subset note algorithm equival uniform random select without load inform equival send request appar least load server addit formul ksubset algorithm solut problem mitzenmach use fluid limit approach develop analyt model system case n 1 howev primari result studi come simul queu system follow similar simul methodolog mitzenmach conclud version algorithm good choic situat find seldom perform significantli wors gener perform significantli better aggress algorithm eg even modestli aggress outperform uniform random algorithm wide rang updat frequenc believ howev approach still drawback particular note updat frequenc load informationchang optim valu k also chang exampl mitzenmach period updat model one sampl workload examin quickli becom much better larger valu similarli although outperform workload revers true larger valu exampl algorithm factor 2 better variat also note mitzenmach algorithm result arriv rate server depend server rank sort list server load magnitud differ queue length server furthermor least load server receiv request phase gener server order load lowest load ngamma1 highest given request sent server 1 server 0 igamma1 chosen part random subset k server 2 server chosen part subset probabl server j chosen part kserver subset k probabl condit 1 2 hold fraction request server rank figur 1 distribut request server ksubset algorithm numer number way choos place slot slot denomin number way choos k element n element assum element alway chosen figur 1 illustr result distribut rang ks distribut someth right flavormor heavili load node get fewer request lightli load node howev obviou slope one line gener right figur also illustr larg valu k inappropri larg larg fraction request concentr small number server long period time 3 model old inform sever reason way model delay load inform sampl decis made job consider arriv server differ model appropri differ practic system mitzenmach found signific differ system behavior among model 21 therefor examin perform three model understand result wide rang situat compar result directli literatur take first two model period updat continu updat mitzenmach studi 1 third model updateonaccess abstract addit system practic interest describ model detail 31 period continu updat mitzenmach period updat continu updat model visual variat bulletin board model period updat model imagin everi second bulletin board visibl arriv job updat reflect current load server period bulletin board updat term phase load inform thu accur begin phase may grow increasingli inaccur phase progress continu updat model bulletin board constantli updat load inform averag board state second behind true system state request thu base decis state system averag second earlier mitzenmach find probabl distribut signific impact effect differ algorithm given averag delay distribut high varianc request see newer inform other see older inform outperform distribut less varianc job see data second old note real system abstract model would typic includ central bulletin board period model could repres instanc system period gather load inform server multicast client continu updat model could repres system arriv job probe server load inform choos server delay due network latenc transfer time server send load inform client job arriv destin server 32 updateonaccess final model examin examin mitzenmach updateonaccess model explicitli model separ client send request server differ client may differ view system load particular client send request server assum server repli messag contain system current load snapshot system load may use client next request system averag load updat delay equal client interrequest time thu updateonaccess model assum job sent activ client fresher pictur load job sent inact client mitzenmach found third model individu updat similar behavior period updat model omit analysi model compact consid model may applic problem server select problem internet 13 22 may prohibit expens maintain load inform client activ use servic may possibl client maintain good pictur server load activ use servic furthermor hypothes system exhibit bursti access pattern may abl perform good load balanc even though averag node load inform averag quit stale disadvantag use updateonaccess model complex previou model exampl model result depend aggreg request rate also number client gener given number request mani client gener certain number request load inform averag older one client gener number request 4 algorithm interpret old inform section describ algorithm load balanc work interpret load inform context age first describ basic algorithm period updat model describ aggress algorithm model final describ minor variat algorithm adapt continu updat updateonaccess model gener algorithm interpret load inform follow two principl distinguish previou algorithm first consid magnitud imbal node node rank second modifi interpret inform base age arriv rate request system account expect chang system state time descript use follow notat averag age load inform specif mean depend updat model n number server averag perserv arriv rate report load queue length server arriv number request expect arriv phase probabl arriv request sent server 41 algorithm period updat model phase length arriv arriv system goal basic load interpret basic li algorithm determin fraction request sent server order balanc load repres server queue length sum job server start phase plu job arriv phase equal across server 2 begin l tot job server l job server probabl p send arriv job server arriv 8i l tot arriv see otherwis 1 first term numer number job end server evenli divid incom job plu current job second term numer job alreadi server numer number job sent server phase denomin total number job expect arriv phase thu basic li algorithm send arriv request server probabl p calcul current phase note l tot arriv phase short complet equal load case want place arriv request least load bucket even thing well use follow simpl procedur case start phase pretend place arriv request greedili sequenti least load bucket keep track number request place bucket tmp phase send arriv request server probabl arriv 411 aggress algorithm algorithm seem suboptim follow sens tri equal load across server end phase thu phase long system may spend long time significantli unbalanc server load aggress algorithm might attempt subdivid phase use first part phase bring machin even state distribut request uniformli across server rest phase aggress algorithm work follow without loss gener assum server sort l machin ith least load server set l sentin valu subdivid phase n interv evenli distribut arriv across machin bring 2 notic make simplifi assumpt departur rate server ignor effect depart job rel server queue length assumpt correct server alway busi incorrect server idl time phase assumpt justifi primarili concern algorithm work well system heavili load case queue seldom empti impact simplif lightlyload system overestim queue length lightlyload machin send request case probabl distribut somewhat uniform across server would ideal algorithm aggress could experi suggest simplif littl perform impact load l j1 thu subinterv j length n subinterv j probabl arriv request sent machin 2 42 algorithm updat model adapt basic li algorithm continu updat updateonaccess model simpl use equat 1 calcul probabl p send incom request server differ period updat model calcul base l estim hold entir phase new model may chang request p thought current estim instantan rate request sent server adapt aggress li algorithm problemat use equat 2 calcul valu base current l array howev continu updat model effect alway end phase inform second old although aggress algorithm aggress basic algorithm earli subinterv phase eg j near 0 less aggress later subinterv eg j near n thu aggress algorithm may actual less aggress basic algorithm updat model larg 5 evalu section evalu algorithm rang updat model workload primari methodolog simul queu system model task arriv poisson stream rate n collect n server task arriv send one server queue base algorithm studi server queue follow firstinfirstout disciplin select default system paramet match use mitzenmach studi 21 facilit direct comparison algorithm particular unless otherwis note assum server servic rate 1 servic time task exponenti distribut mean time 1 initi examin basic li aggress li algorithm period updat continu updat updateonaccess model compar perform ksubset algorithm examin mitzenmach explor three key question li algorithm 1 impact bursti arriv pattern 2 impact misestim system arriv rate 3 impact limit amount load inform avail algorithm basic li aggress li figur 2 servic time v updat delay period updat model 51 period updat model figur show system perform period updat model default param eter perform li algorithm good wide rang updat interv larg li algorithm suffer poor perform ksubset algorithm encount k 1 fact li algorithm maintain measur advantag oblivi random algorithm even larg valu exampl outperform oblivi algorithm 9 aggress li outperform oblivi algorithm 22 modest valu advantag larger exampl aggress li 60 faster ksubset algorithm basic li 41 faster ksubset algorithm figur 3 detail perform algorithm small valu aggress li outperform algorithm least percent smallest valu examin basic li gener better alway least good ksubset algorithm rang figur 4 show perform system workload lighter load default load lighter need load balanc less pronounc gain algorithm random modest inform fresh algorithm perform factor two better oblivi algorithm inform stale perform ksubset algorithm nearli bad heavier load although exhibit poor behavior compar oblivi algorithm larg entir rang stale examin 01 200 basic li aggress li algorithm perform well better best ksubset oblivi algorithm basic li aggress li figur 3 detail servic time v updat delay period updat model averag respons time updat interv basic li aggress li figur 4 servic time v updat delay period updat model basic li aggress li figur 5 servic time v updat delay period updat model figur 5 show perform system server rather standard 100 result qualit similar result standard 52 continu updat model figur 6 show perform algorithm continu updat model system behavior depend distribut delay paramet show result four distribut delay averag valu order increas variat constantt uniform tto 3t uniform0 2t exponentialt earlier discuss suggest aggress li algorithm actual less aggress basic li algorithm basic gener outperform aggress model therefor focu basic li algorithm mitzenmach note given ksubset algorithm perform improv distribut contain mix recent older inform relationship seem present less pronounc li algorithm result distribut variabl increas advantag li ksubset algorithm shrink thu basic li seem clear choic constant uniform distribut valu perform good ksubset algorithm given ksubset algorithm rang basic li perform significantli better exponenti distribut howev ksubset algorithm enjoy advantag 16 basic li figur 7 test hypothesi rel poor perform basic li situat algorithm calcul p use expect valu wherea individu request may see significantli differ valu figur still vari accord specifi distribut rather know averag averag respons time updat interv basic li aggress li constant b uniform tto 3t01020 averag respons time updat interv basic li aggress li26100 50 100 150 200 averag respons time updat interv basic li aggress li c uniform 0 2t exponenti mean figur updat delay continu updat model client know averag delay show result differ distribut delay around uniform tto 3t01020 averag respons time updat interv basic li aggress li26100 50 100 150 200 averag respons time updat interv basic li aggress li b uniform 0 2t c exponenti mean figur 7 servic time v updat delay continu updat model client know age inform actual encount request c show result differ figur 8 servic time v updat delay updateonaccess model valu request know valu hold request algorithm calcul p vector use certain inform compar perform figur 6 extra inform improv perform distribut improv becom pronounc distribut variat conclud good estim delay load inform gather request arriv server import get best perform li algorithm 53 updateonaccess model figur 8 show perform updateonaccess model model simul number client client use load inform gather send one request decid send next request thu equal perclient interrequest time vari fix total arriv rate simpli vari number client request issu model algorithm perform reason well appear perclient updat desynchron client enough reduc herd effect basic li algorithm outperform other provid modest speedup wide rang updat interv figur 9 servic time v updat delay updateonaccess model bursti workload 54 bursti arriv figur 9 show perform burstyarriv version updateonaccess model standard updateonaccess model client use server load discov one request rout next one gener burstyarriv workload rather assum client produc exponentiallydistribut arriv assum client whose averag interrequest time produc burst b request separ second burst separ exponentialt b second figur 9 bursti workload significantli increas perform algorithm use server load compar oblivi algorithm although time client pictur server load averag second old averag request see much fresher pictur l vector suggest may often possibl significantli outperform oblivi strategi even challeng workload internet server select 13 22 inform like old averag client request servic bursti basic li algorithm best tie best entir rang examin 01 200 55 impact imprecis inform primari drawback li algorithm requir good estim subsect 52 examin impact uncertainti subsect examin happen estim incorrect believ server support averag respons time updat interv basic li 8load basic li 4load basic li 2load basic li 1load basic li 05load basic li 025load basic li 0125load figur 10 servic time v updat delay period updat model client misestim arriv rate li algorithm would equip inform client current load arriv rate request anticip exampl server might report arriv rate seen recent period time might report maximum request rate anticip encount howev may difficult system accur predict futur request pattern base histori figur show perform period updat model li algorithm use incorrect estim line show perform use calcul p multipli error factor e 1and 8 overestim load algorithm conserv perform suffer bit underestim load algorithm send mani request apparentlyleastload server perform poor conclud system err side caution estim figur note estim 2 actual perform margin wors actual also note experi actual 09 system would unstabl actual 10 word overestim factor two one would predict servic rate 18 time larger could ever sustain system suggest follow strategi estim system maximum achiev throughput known use throughput estim purpos li algo rithm system heavili load estim littl bit higher actual arriv rate lightli load estim far high seen algorithm rel insensit overestim arriv rate overestim arriv rate littl harm system lightli load averag respons time arriv rate lambda basic li actual lambda basic li assum lambda 10 figur 11 servic time v arriv rate period updat model 20 graph compar standard algorithm well variat basic li algorithm overestim maximum achiev system throughput case conserv estim tend make li algorithm distribut request uniformli across server accept strategi load low figur 11 illustr effect assum estim 10 vari actual system two basic li lineson exact conserv estim almost indistinguish point differ two result less 45 07 differ alway less 15 56 impact reduc inform ksubset algorithm addit purpos beyond attempt cope stale load inform restrict amount load inform client may consid dispatch job may reduc amount load inform sent across network number theoret 4 7 15 20 27 empir 11 18 studi suggest load balanc algorithm often quit effect even amount inform sever restrict basic li algorithm also adapt use subset server load inform rather requir vector server load ksubset version basic li algorithm basic lik select random subset k server use algorithm determin bia request among k node particular modifi equat 1 use p 0 array size k rather n comput l 0 tot smaller l 0 array replac n k calcul arriv 0 k note standard ksubset algorithm select differ subset incom request averag respons time updat interv basic li k2 basic li k3 basic li k100 a26100 50 100 150 200 averag respons time updat interv basic li k2 basic li k3 basic li k10 basic li k100 b figur 12 servic time v updat delay ksubset version basic li algorithm updateonaccess model b continu updat fix delay model figur 12 examin impact restrict inform avail basic li al gorithm experi suggest basic lik algorithm achiev good perfor manc updateonaccess model origin ksubset algorithm perform well li2 algorithm perform similar standard algorithm unlik standard ksubset algorithm lik algorithm given inform perform becom better li3 algorithm outperform standard ksubset algorithm notic amount full basic li algorithm widen margin continu updat fix delay model figur 12b perform lik algorithm also good case origin ksubset algorithm behav badli lik version behav nearli ident basic li system experi version li algorithm slightli better version smaller k consist give slightli better perform explan improv behavior reduc inform experi experi conclud li effect techniqu environ wish restrict much load inform distribut system modest amount load inform allow li algorithm achiev nearli full perform thu li decoupl question much load inform use question interpret inform 6 conclus primari contribut paper present simpl strategi interpret stale load inform approach resolv paradox algorithm use addit inform often result wors perform use less inform none load interpret li strategi propos interpret load inform base age system essenti alway better use inform inform fresh algorithm aggress address imbal inform stale algorithm conserv believ approach may open door safe use load inform attempt outperform random request distribut environ difficult maintain fresh inform system design know age inform priori experi suggest interpret load inform system 1 match perform aggress algorithm load inform fresh 2 outperform current algorithm much 60 inform moder old 3 significantli outperform random load distribut inform older still 4 avoid patholog behavior even inform extrem old r next step server load balanc design process migrat facil charlott experi make commit face uncertainti pick winner almost everi time balanc alloc dn support load balanc network task locu distribut unix system toward develop univers dynam map algorithm cisco distribut director transpar process migrat design altern sprite implement research toward heterogen network comput cluster distribut queu system version 30 adapt load share homogen distribut system locat nearbi copi replic internet server load distribut implement mach microkernel analysi effect delay load share adapt load share heterogen distribut system power two choic random load balanc use old inform perform characterist mirror server internet use idl workstat share comput environ process migrat demosmp experi amoeba distribut oper system queu system select shortest two queue asymptot approach squid internet object cach use smart client build scalabl servic attack process migrat bottleneck load share facil larg tr ctr michael rabinovich zhen xiao amit aggarw comput edg platform replic internet applic web content cach distribut proceed 8th intern workshop kluwer academ publish norwel 2004 mauro andreolini michel colajanni riccardo lancellotti francesca mazzoni fine grain perform evalu ecommerc site acm sigmetr perform evalu review v32 n3 decemb 2004 simon fischer berthold vcking adapt rout stale inform proceed twentyfourth annual acm symposium principl distribut comput juli 1720 2005 la vega nv usa request redirect algorithm distribut web system ieee transact parallel distribut system v14 n4 p355368 april giovanni aloisio massimo cafaro euro blasi italo epicoco grid resourc broker ubiquit grid comput framework scientif program v10 n2 p113119 april 2002 mauro andreolini michel colajanni ruggero morselli perform studi dispatch algorithm multiti web architectur acm sigmetr perform evalu review v30 n2 septemb 2002 suman nath phillip b gibbon srinivasan seshan adapt data placement widearea sens servic proceed 4th confer usenix confer file storag technolog p44 decemb 1316 2005 san francisco ca bogumil zieba marten van sinderen maarten wegdam qualityconstrain rout publishsubscrib system proceed 3rd intern workshop middlewar pervas adhoc comput p18 novemb 28decemb 02 2005 grenobl franc mauro andreolini sara casolari load predict model webbas system proceed 1st intern confer perform evalu methodolgi tool octob 1113 2006 pisa itali yu state art local distribut webserv system acm comput survey csur v34 n2 p263311 june 2002