equalitybas flow analysi versu recurs type equalitybas controlflow analysi studi henglein bondorf jrgensen defouw grove chamber other faster subsetbased0cfa also approxim heintz assert 1995 program safeti check equalitybas controlflow analysi type recurs type articl falsifi heintz assert present type system equival equalitybas controlflow analysi new type system contain recurs type unusu notion subtyp unfold regular tree bottomttop function type particular nontrivi subtyp function type b introduct controlflow analysi done determin approxim set function may call call site program paper address instanc question question flow analysi relat type system focu 1 equalitybas controlflow analysi studi henglein 9 bondorf jrgensen 3 defouw grove chamber 5 other 2 recurs type exampl present restrict form java 6 form recurs interfac equal subtyp base name rather structur equalitybas controlflow analysi simplif subsetbas controlflow analysi 16 11 8 use abbrevi subsetbas controlflow analysi equalitybas controlflow analysi 0cfa also known simpli 0cfa illustr differ 0cfa 0cfa consid analyz call site e 1 e 2 function program suppos xe function program want flow analysi express xe becom result evalu e 1 flow relat establish actual argument e 2 formal argument x 2 bodi e call site e 1 e 2 subsetbas analysi flow relat subset inclus model valu flow actual argument formal argument bodi function back call site equalitybas analysi flow relat equat thu flow inform actual formal argument forc flow inform bodi call site also forc intuit equat establish bidirect flow inform 0cfa approxim 0cfa implement mani time variou purpos gener function objectori languag 0cfa execut cubic time program finit type 0cfa execut quadrat time 8 specif flowori question identifi function call one call site answer linear time 8 comparison 0 cfa alway execut almostlinear time 9 one 0cfa 0 cfa better choic practic languag like ml 10 function finit polymorph type data may recurs type experi heintz mcallest 8 indic good choic use 0cfa implement variant quadratictim algorithm 0cfa treat data much simplifi way problem pointer analysi algorithm close cousin 0cfa 0cfa 17 problem condit finit type hold gener shapiro horwitz 15 present experiment comparison two algorithm confirm theoret conclus 0cfa faster approxim 0cfa objectori languag like java condit finit type seldomli satisfi exampl binari method 4 defouw grove chamber 5 experiment compar famili flowanalysi algorithm whose time complex cubic time 0cfa variant well comparison ashley 2 also present flow analysi time complex less cubic time remain open relat 0cfa bondorf jrgensen 3 implement 0cfa 0cfa scheme part partial evalu similix scheme condit finit type hold gener conclud two analys compar precis applic 0cfa much faster summari 0cfa experi prove prefer altern 0cfa mani applic flow analys 0cfa formul use constraint see exampl 11 14 approach proce two step 1 deriv flow constraint program text 2 comput least solut constraint least solut desir flow inform precis analysi stem choic constraint exampl one choic lead 0cfa anoth choic lead 0cfa kind flow constraint use exampl paper 11 alway admit least solut turn flow analysi predic accept reject program extend safeti constraint exampl call site e 1 e 2 function program safeti constraint might express flow inform e 1 denot safeti constraint alway solut deriv program text like flow constraint mean flowbas safeti analysi program two step 1 deriv flow safeti constraint program text 2 decid constraint satisfi safeti analysi perform task akin type infer sens safe like typabl palsberg okeef 12 show program safeti check 0cfa type amadio cardelli type system subtyp recurs type 1 proof connect make explicit close relationship flow subtyp heintz assert 1995 7 program safeti check 0cfa type recurs type assert reason say intuit replac subset inclus equal need subtyp disappear heintz assert also consist observ 0cfa type infer recurs type execut almostlinear time perhap surprisingli heintz assert fals exampl consid term variabl f appli number 0 function xx thu term type type system recurs type subtyp still base safeti analysi accept program assign f g empti flow set see section 2 detail anoth exampl consid term remind bit previou exampl f appli a0 bxx term e 2 type type system recurs type subtyp conserv flow analysi assign empti flow set f flow set least contain y0 still 0cfa base safeti analysi accept program assign flow set contain a0 bxx given heintz assert fals left two question 1 type system correspond 0cfa 2 controlflow analysi correspond recurs type palsberg okeef result 12 impli e 1 e 2 type recurs type amadiocardelli subtyp result also seem indic ad recurs type amadiocardelli subtyp match 0cfa would overkil thu answer first question make sens ask much subtyp necessari suffici match 0cfa answer second question must ask restrict 0cfa must impos match recurs type paper answer first question give partial answer second question show program safeti check 0cfa type recurs type unusu restrict amadiocardelli subtyp unfold regular tree function type particular nontrivi subtyp function type see nontrivi subtyp function type requir match 0cfa consid program xee 0 let hxi flow variabl bind occurr x let xee 0 xe flow variabl occurr xee 0 xe e e 0 respect map flow variabl flow set satisfi 0cfa constraint particular satisfi also use hxi variabl type system simpl type nontrivi subtyp function type get among other follow constraint type correct unif give type must satisfi constraint thu get form relationship type flow set allow nontrivi subtyp function type constraint type correct becom 12 particular open possibl nontrivi relationship henc constraint close relat flow constraint use 0cfa 12 also show program safeti check certain restrict 0cfa type recurs type restrict 0cfa flow set must nonempti consist consist mean two function xe ye 0 occur flow set flow set x equal also flow set e e 0 equal sloganform result read tini drop subtyp recurs type key understand second result empti flow set flow set two inconsist function counterpart type system recurs type restrict version 0cfa fulli match recurs type program may type flow set exist next section present heintz definit 0cfa section 3 present new type system section 4 5 prove result exampl languag calculu defin grammar succ denot successor function integ equalitybas controlflow analysi given term p assum p ffconvert bound variabl distinct differ free variabl let varp set bound variabl p let x p set variabl consist one variabl hxi x 2 varp let p set variabl disjoint x p consist one variabl occurr subterm e p notat ambigu may one occurr e p howev alway clear context occurr meant set absp set occurr subterm xe p set clp flowbas safeti analysi term p phrase term constraint system variabl rang clp ffl everi occurr p subterm form 0 constraint ffl everi occurr p subterm form succ e two constraint ffl everi occurr p subterm form xe constraint ffl everi occurr p subterm form e 1 e 2 constraint ffl everi occurr p variabl x constraint ffl everi occurr p subterm form xe everi occurr p subterm form e 1 e 2 constraint last two constraint creat connect call site e 1 e 2 potenti calle xe notic two constraint equal subset inclus key reason subtyp need match safeti analysi constraint system mix flow constraint safeti constraint safeti constraint ffl succ e succ ffl e 1 rest flow constraint notic int function occur flow set constraint effect fintg denot cp system constraint gener p fashion let cmapp set total function constraint cp say p 0cfa safe cp exampl consid label two occurr f f 1 f 2 notat conveni constraint system ce 1 pointwis least solut next consid label occurr f f 1 f 2 notat conveni constraint system ce 2 pointwis least solut etc 3 type system use v rang type variabl drawn countabl infinit set tv type defin grammar restrict type allow contain anyth form identifi type infinit unfold rule infinit unfold elimin use type follow type class regular tree alphabet subtyp relat type straightforward show partial order notic lower bound upper bound function type int suggest notat might type environ partial function finit domain map variabl type use rang type environ use notat ax denot environ map x map 6 x ay type judgment form e mean type environ express e type formal hold deriv use rule notic subsumpt rule instead subtyp use restrict way rule 2 3 say e rstypabl e deriv rs stand restrict subtyp type system subject reduct properti e deriv e betareduc e 0 e deriv prove straightforward induct structur deriv e follow type deriv two term section 1 first type deriv use abbrevi notic four use subtyp notic also possibl type f second deriv use abbrevi notic possibl common type a0 bxx reason subsumpt rule form want disallow use subsumpt immedi use rule variabl add subsumpt rule term becom typabl exampl consid subsumpt rule give yy type give x0 last occurr f type straightforward complet type deriv e 3 notic fragment type deriv last occurr f form without subsumpt rule type deriv possibl inde type deriv use rule 15 possibl see let 1 type yy let 2 type f yy type x moreov ff u type ff henc ff consid fx0 type x0 form case argument function type ffff ff conclud e 3 rstypabl 4 equival result theorem 41 term p 0cfa safe p rstypabl prove theorem two step lemma 43 show p 0cfa safe p rstypabl prove lemma use techniqu 13 lemma 44 show p rstypabl p 0cfa safe prove lemma use techniqu direct one use show similar result 0cfa 12 flow type first consid map flow type given program p map 2 cmapp absp say consist x 1 given program p 2 cmapp defin equat system gammap ffl 2 rang let v type variabl contain equat contain equat two case either consist gammap contain equat otherwis gammap contain equat everi equat system gammap uniqu solut see notic everi type variabl exactli one equat variabl lefthand side thu intuit obtain solut use equat unfold rule possibl infinit often lemma 42 2 cmapp uniqu solut proof support first w 1 suppos w 1 inconsist w 1 w 2 also suppos final w 1 consist two case w 2 inconsist v w 1 lemma 43 satisfi cp uniqu solut gammap e subterm p deriv e v e proof proceed induct structur e base case consid first deriv x v hxi desir deriv consid e j 0 deriv induct step consid first induct hypothesi deriv e also deriv succ e consid next e j xe 0 fxe 0 g xe 0 lemma 42 get induct hypothesi deriv thu also deriv xe final consid e e 1 absp everi xe 0 2 e 1 e 2 induct hypothesi deriv two case e 1 deriv e 1 use e 1 absp conclud e 1 consist thu v e 1 deriv e 1 exampl consid term recal function 1 section 2 satisfi ce 1 constraint system plug construct proof lemma 43 get type deriv shown section 3 leav reader carri construct lead type deriv shown section 3 type flow next consid map type flow delta type deriv defin f delta map type element clp set occurr xe p delta contain judgment form occurr xe p delta contain judgment form occurr e p delta contain judgment form 0 lemma 44 delta type deriv proof consid turn constraint cp occurr 0 constraint delta contain judgment form 0 fintg occurr succ e constraint delta contain judgment form fintg occurr x constraint delta contain judgment form ax occurr xe constraint fxeg xe delta contain judgment form two case fxeg occurr e 1 e 2 constraint also constraint everi occurr xe absp delta contain judgment form 0 two case constraint vacuous satisfi definit f conclud remark remov section 3 type notion subtyp get tradit system recurs type given program p map 2 cmapp say consist 2 rang consist add section 2 condit contain contain inconsist map get notion flowbas safeti analysi refer restrict 0cfa safeti easi modifi proof lemma 43 show follow result theorem 51 term p restricted0cfa safe p typabl recurs type intuit theorem say want flow analysi weaker recurs type start 0cfa outlaw insist intern consist flow set convers theorem 51 fals exampl attempt modifi proof lemma 44 run troubl case e 1 e 2 guarante type e 1 situat aris program recurs type subtyp one type deriv e 4 use abbrevi straightforward show x 6 fintg x 6 fxsuccx0g e 4 therefor counterexampl convers theorem 51 leav open problem find flow analysi equival recurs type unusu aspect heintz definit 0cfa int function occur flow set allow might defin chang constraint section 2 constraint 0 succ e becom systemat way obtain modifi flow analysi begin constraint 0cfa 12 ffl chang constraint remain type system match modifi flow analysi obtain chang type system section 3 smallest reflex transit relat type type rule 0 succ e becom notic modifi type system least type greatest type r subtyp recurs type practic flexibl flow analysi higherord languag effici analys realist offlin partial evalu binari method fast interprocedur class analysi java languag specif dynam type definit standard ml closur analysi constraint form type system equival flow analysi polyvari flow inform intersect union type fast accur flowinsensit pointsto analysi tr definit standard ml controlflow analysi higherord languag tame lambda dynam type subtyp recurs type objectori type system closur analysi constraint form type system equival flow analysi binari method pointsto analysi almost linear time practic flexibl flow analysi higherord languag lineartim subtransit control flow analysi fast accur flowinsensit pointsto analysi polyvari flow inform intersect union type fast interprocedur class analysi java languag specif controlflow analysi type system ctr jen palsberg mitchel wand cp transform flow inform journal function program v13 n5 p905923 septemb naoki kobayashi typebas useless variabl elimin acm sigplan notic v34 n11 p8493 nov 1999 naoki kobayashi typebas uselessvari elimin higherord symbol comput v14 n23 p221260 septemb 2001 neal glew jen palsberg typesaf method inlin scienc comput program v52 n13 p281306 august 2004 jen palsberg christina pavlopoul polyvari flow inform intersect union type journal function program v11 n3 p263317 may 2001 michael hind pointer analysi havent solv problem yet proceed 2001 acm sigplansigsoft workshop program analysi softwar tool engin p5461 june 2001 snowbird utah unit state