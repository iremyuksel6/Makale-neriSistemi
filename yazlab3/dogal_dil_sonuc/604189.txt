type interfac garbag collect import consider certifi code system interact untrust program runtim system notabl garbag collector certifi code system treat garbag collector part trust comput base dispens issu use collector whose interfac program simpl enough pose certif challeng howev approach rule use mani sophist highperform garbag collector present languag lgc whose type system capabl express interfac modern highperform garbag collector use lgc describ interfac one collector involv substanti amount program type constructor level languag b introduct certifi code system execut program ship produc client accompani certif materi base work support part nsf grant ccr 9984812 ccr0121633 nsf fellowship opinion find conclus recommend public author reflect view agenc permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit commerci advantag copi bear notic full citat first page copi otherwis republish post server redistribut list requir prior specif permiss andor fee tldi03 januari 18 2003 new orlean louisiana usa acm 1581136498030001 500 provid evid safeti valid cer tific mechan verifi client impli associ program safe execut exampl certifi code framework includ type assembl languag 6 proofcarri code 7 8 past research certifi code focus safeti untrust mobil code howev also import consid safeti implic runtim system code link two option deal issu one choic treat runtim system part untrust code certifi safeti choic simpli assum runtim system correcti treat part trust comput base includ certif verifi cours even runtim assum correct interact program runtim must certifi conform appropri interfac import part runtim system mani modern languag garbag collector framework runtim system must certifi must use certif technolog capabl prove garbag collector safe work approach includ wang appel 10 9 monnier et al 4 system take second approach mani assum exist trust conserv garbag collector advantag applic interfac conserv collector simpl almost ignor perform benefit gain use precis collector ever interfac collector subtl issu certifi program conform interfac longer ignor order use better garbag collector certifi code applic interfac collector must describ express type system topic paper specif interfac particular modern garbag collector name cheng blelloch 1 2 implement tiltml runtim system inform describ behavior collector interfac run program present languag whose type system express inter languag call lgc built simpl stack base languag call lgc extens type construct necessari express variou element collector interfac present lgc describ interfac cheng garbag collector precis definit involv substanti amount program languag type constructor final discuss express lgc languag int g g newer frame fs local gs argument gs local fs frame gs frame older frame fs argument return address return address f int f figur 1 frame stack 11 garbag collector interfac first part garbag collector job find root setthos regist global stack locat contain pointer heap task part garbag collect requir compil cooper part make assumpt behavior program section describ simplifi form rootfind algorithm use tiltml ignor complic optim calleesav regist assum root store stack therefor ignor addit work find root among regist global variabl garbag collector assum stack laid sequenc frame belong particular function creat frame contain number data slot includ function argument local variabl temporari well return address section stack illustr figur 1 usual stack shown grow downward figur function f call function g thu return address posit gs frame contain locat somewher insid code f fact return address found gs frame uniqu identifi point program g call therefor also determin layout frame garbag collector use properti pars stack program compil compil emit type inform collect runtim system gc tabl map return address iden tifi function call site inform stack frame function contain call site collector begin look root newest frame stack collector return address frame look gc tabl find descript next frame belong untrust program collector move stack perform follow step frame 1 use return address frame examin find gc tabl entri describ frame 2 use gc tabl entri determin follow inform locat pointer current frame root locat return address within current frame size current frame 3 use inform find start next frame look gc tabl entri step repeat base stack reach clearli correct gc tabl essenti oper garbag collector incorrect valu tabl could lead varieti error singl root pointer ignor derail entir stackpars pro cess put anoth way crucial program structur use stack consist frame descript gc tabl paper present languag stack layout precis control give us abil guarante structur stack collect consist collector expect 2 languag gc interfac main goal paper describ type system shape program stack made fit pattern expect garbag collector must therefor languag stack manipul explicit express enough describ stack precis term section begin describ languag call lgc start simpl core languag call lgc simpl stackbas languag sophist type construct support garbag collect discuss refin necessari enforc complianc gc tabl syntax type rule full lgc given appendix 21 core languag syntax lgc given figur 2 languag essenti polymorph calculu integ boolean tupl sum type plu stack handl much way stackbas type assembl languag stal 5 detail languag directli relat garbag collect particularli import purposesinde mani possibl languag design would work equal welland discuss aspect briefli throughout paper consid express dier name bound variabl ident denot ee1 enx1 result simultan captureavoid substitut e1 en variabl x1 xn e program lgc program consist sequenc mutual recurs code block definit follow ex pression block form spe indic must instanti number kind type constructor argument specifi may invok whenev stack type invok block result evalu e notic data stack pass block mean kind k st constructor c int bool code 0 1 n 1 null valu v x n b vc pack c v express e halt v jump v v e1 els e2 case v inj 1 x1 e1 inj n xn en let e declar block b spe program p letcod type context k context x memori type figur 2 syntax lgc function argument result must pass stack return address function call must also pass stack lead continuationpass style program also code block program appear top level program must undergo closur convers translat lgc express bodi block express express lgc includ halt instruct stop comput jump instruct take code label transfer control correspond block thenels construct case analysi sum form letbind perform one oper possibl bind result variabl continu anoth expr sion bind may occur let simpl valu bind arithmet oper inject sum type alloc tupl project tupl unpack valu existenti type bind new constructor variabl addit variabl x stack oper stack oper read write spi v push valu onto stack push v pop valu stack pop syntact valu languag variabl x numer n boolean constant b code label instanti polymorph valu constructor vc packag contain constructor valu pack c v existenti type type kind type theori two kind st classifi constructor constructor kind call type describ valu constructor kind st call stack type describ stack constructor includ constructor variabl base type int bool code label type code 0 nari product 1 n sum 1 type k empti stack type null nonempti stack type form stal one write nil respect lgc prefer use mllike list notat actual list constructor metavari c use rang constructor also use name intend constructor name type stack type respec tive extend kind constructor level type system later paper order precis describ shape stack static semant type rule simpl languag gener expect one due space considera tion present gener similar full lgc languag whose rule appendix howev discuss type rule turn examin program languag interact garbag collector one simplest type rule express languag one uncondit jump instruct rule state legal jump fullyinstanti code pointer one expect constructor argument provid stack type expect code pointer current stack type jump polymorph code pointer one must first instanti appli appropri number kind type argument rule follow anoth simpl type rule one bind valu variabl read algorithm rule understood follow check express let e valid first find type valu v check e valid assumpt x type 22 requir garbag collect goal certifi interact garbag collec tor lgc unaccept simplist fact syntax type rule discuss far appear ignor collector complet section begin identifi specif shortcom languag done remaind paper devot ad necessari refin languag result full lgc type system alreadi explain program languag work properli garbag collector collector must abl find root whenev invok practic garbag collector usual invok program attempt creat new object heap insuci space avail express languag perform alloc tupl format inject sum type mean garbag collector may need abl find root set evalu express form let let e discuss tupl sinc modif necessari sum exactli analog nave version type rule tupl alloc would follow x1 n sp e two main chang must made rule first must forc root stack found collector second must forc stack structur collector pars first problem stem fact variabl languag stack alloc want assum sake simplic garbag collector scan stack look root free occurr variabl express e could denot pointer pointer could use evalu e copi pointer stack garbag collector may identifi live solut forc program dump content variabl stack whenev collect might occur accomplish requir continu e close except result x alloc rule look like note realist abstract machin would regist instead variabl order support gc tabl certif machin would appli techniqu discuss remaind paper regist file well stack seem straightforward sake simplic limit discuss paper collector find root stack second modif must made alloc rule significantli dicult formul fact rest paper devot ad singl addit premis rule name one stipul stack type parsabl must describ structur stack must order scan collector express structur way enforc type system type system lgc task continu must endow express power meet need 23 enrich constructor languag order abl give type constraint alloc rule precis describ requir structur stack must enrich constructor level lan guag purpos add number construct kind k j k1 k2 k1 k2 k1 jk 1 constructor c kc c1 c2 c1 c2 c unit void c c figur 3 kind constructor lx crari weirich lx type theori 3 addit languag shown figur 3 addit function space product sum kind k1 k2 k1 k2 k1 k2 lx provid induct kind jk j kind variabl may appear posit posit within k type constructor level chang syntax product sum type c c case c constructor kind j1tj repres list type keep notat lgc simpl allow syntax lgc serv shorthand defin follow analog notat use sum final kind 1 whose sole element constructor add type unit void languag type unit sole element type void contain valu introduct form elimin form arrow sum product constructor level usual one induct kind introduc fold construct elimin primit recurs constructor form prj k j k c wellform constructor function kind jk k jkj c bodi function may appear paramet name function use recurs call exampl defin kind sent natur number defin function iter follow constructor iter function take function type type type natur number return result iter function given type specifi number time clearli pr notat somewhat unwieldi read write use mllike notat work lx constructor languag mani purpos combin notion induct sum kind defin datakind akin ml datatyp exampl could write definit n follow datakind function iter would readabl express ml curri function notatin way iter succ iter often write function style care write function express primit recurs notat lx simplifi presenta tion also use familiar ml constructor list option stand analog datakind 24 approach garbag collect languag lx origin design intension type analysi basic methodolog defin datakind analyz constructor call tr type represent function interp tr turn constructor represent suitabl analysi actual type suitabl adorn variabl bind turn constructor type valu repres run time addit explain somewhat mysteri oper runtim type analysi primit term eect isol particular subset type analysi type appear imag interp map could pass analyz run time garbag collect want someth similar want isol set stack type structur collector pars stack use algorithm outlin section 11 add appropri stack structur condit alloc rule assert current stack type lie set remaind paper defin follow lx object 1 datakind sd stack descriptor whose element pass around program place stack type 2 datakind dd data descriptor whose element static represent gc tabl everi program languag design one particular constructor static gc tabl sgct constructor sgct kind dd 3 constructor interp dd sd st turn stack descriptor stack type provid use stack frame whose shape determin particular static gc tabl care write interp constructor sd stack type interp sgct alway parsabl definit ensur stack parsabl garbag collect simpl current stack type need requir exist constructor sd cours want typecheck guess appropri chang syntax slightli make programm respons next version alloc rule modulo definit new lx ex pression one develop rule section 31 order express interfac garbag collector term sgct guarante correct program must sure actual data structur use gc tabl agre static represent lx capabl express type gc tabl guarante chosen simpler approach rather forc program provid gc tabl static constructor form dynam valu form assum typecheck certifi code system transform static gc tabl real gc tabl provid latter runtim system program start thu consid gener gc tabl static represent part trust comput base remain section paper present definit kind sd dd describ behavior interp auxiliari function need defin definit interp nontrivi involv unusu amount program type constructor level languag complet code special kind constructor use gc interfac found appendix b 3 describ stack sinc collector requir stack structur sequenc frame lx represent stack type essenti list frame descriptor repres constructor anoth datakind call fd frame descriptor must allow two major oper 1 sinc list descriptor pass around program instead stack type must possibl interpret descriptor get partial stack type repres 2 sinc structur stack way ensur agreement gc tabl must possibl check descriptor entri tabl individu entri static represent gc tabl constructor kind call ft frame templat also defin shortli 31 label singleton mention key properti stack layout requir garbag collector return address one frame determin via gc tabl expect shape next older frame result order constraint stack type collect guarante proper function collector must ensur valu store return address posit frame correspond via static gc tabl type next frame make happen must abl reason labelsi pointer codeat constructor level languag therefor lift label liter valu level languag constructor level add new primit kind l classifi addit add construct form singleton type label use construct abl forc return address store stack frame precis valu must order correctli predict shape next frame stack syntax type rule label singleton shown figur 4 c label code block type type contain instanc c order make use valu singleton type introduc kind k l constructor c figur 4 syntax type label coercion blur forget ident singleton valu yield valu appropri operand jump instruct sinc valu singleton type code label usual polymorph found necessari add way appli label constructor argument maintain singleton type accomplish write vc sensit garbag collector label found stack rais anoth issu must address type rule alloc order collector begin process scan stack must abl find gc tabl entri caller frame ie newest program frame therefor necessari associ label alloc site requir first frame descriptor stack descriptor correspond label sinc label intend denot return address call garbag collector must assum label program distinct also defin function retlab kind dd sd l extract label newest frame given stack descriptor make one final chang syntax alloc includ label final type rule follow 32 stack descriptor gener structur kind sd given figur 5 along illustr interpret constructor kind stack type interp valid check perform interp discuss next section kind definit show stack descriptor either emptyin case carri label identifi return address top frameor consist frame descriptor descriptor rest stack frame descriptor consist label identifi point program own frame 1 return address current pend function call execut function instanc creat frame kind kind list slot list datakind base l con fd sd figur 5 structur interpret stack descriptor turn type function whose frame two list slot kind slot slot defin address definit next section slot describ singl locat stack constructor kind slot must support 1 interpret type fashion indic arrow illustr 2 examin determin specif slot gc tabl ought first list slot frame descriptor correspond slot come return address second list describ slot return address shown diagram interp build frame stack type interpret slot type construct return address use function return type specifi frame descriptor form singleton label associ next frame code interp appendix b keep usual lx methodolog intent lgc program pass constructor kind sd program gcignor languag would pass stack type exampl code function take two integ return boolean comparison func might type unfortun type quit captur relationship return address type code caller frame hidden insid code block type unabl perform alloc return address singleton type order give return address singleton type must extract label call frame use function retlab mention section 31 use follow accur type place detail exampl use stack descriptor alloc shown figur 6 interest part function shown figur recurs call let return address recurs call factcod factreturn type specifi slot type int defin codeint interp sgct 0 b return address stack pop 2 clear away frame call blurra return els push x push argument push factreturn push return address call int interp sgct consfactfram pop 3 clear away frame push result call blurra return figur use stack frame descriptor observ retlab sgct consfactfram factreturn type address call instruct see stack type code type match current stack call site observ first valu stack return address whose type alreadi seen equal one requir call second valu stack argument recurs call type int final 1 describ function frame preexist stack particular r int0 r stand type origin return address unknown base portion stack check frame valid addit enforc properti stack sequenc frame condit must also guarante frame correctli describ gc tabl accomplish ensur equal hold frame descriptor consist inform contain sgct gc tabl constructorlevel represent sinc actual gc tabl map return address frame layout inform make sens structur sgct map label frame layout well basic structur dd kind sgct given figur 7 static gc tabl structur list pair consist label constructor kind ft stand frame templat frame templat essenti lx constructor represent inform real gc tabl entri consist two list tabl kind kind list tslot list datakind consdd l ft dd figur 7 structur static gc tabl slot constructor kind tslot correspond two list slot frame descriptor check frame descriptor valid therefor consist look label frame descriptor sgct check slot fd tabl slot ft give definit slot tslot discuss consist check shortli first howev must make one final addit lgc order abl write allimport lookupdd function find frame templat given label constructor languag must abl compar label equal syntax semant label equal constructor level given figur 8 constructor definit equal c3 label c1 c2 c4 note reduct rule ifeq appli c1 c2 label liter equat theori remain wellbehav construct place lookupdd easi write use primit recurs 41 monomorph program section give definit slot tslot allow monomorph program written lgc constructor figur 8 label equal datakind knownslot tr datakind trace 1 notrac 1 true 1 fals 1 figur 9 monomorph slot tabl slot monomorph mean program valu function place stack frame type known compil time 2 type everi valu function stack frame nonvari type determin static whether slot frame contain pointer must trace importantli traceabl slot everi instanc function consequ gc tabl need one bit slot need check alloc site whether type slot traceabl specifi tabl definit slot tslot given figur 9 along kind two constructor function use check frame case monomorph code slot simpli type represent usual style lx tabl slot simpli flag indic whether locat traceabl discuss definit tr represent type code lx purpos paper ever assum exist usual interpret represent function usual lx interp turn type represent type repres r turn type represent type valu repres type stack interpret function interp must make use interp translat slot realli type represent type use r next section cover polymorph program function checkfd check frame descriptor valid respect static gc tabl first must look frame descriptor label get correspond frame templat one frame templat label descriptor reject invalid 2 note nontrivi program stackbas languag realli total monomorph sinc everi function must parametr stack type call time con con figur 10 static gc tabl factori exampl function slot2tslot simpli decid whether given type represent traceabl given frame templat checkfd appli slot2tslot slot frame descriptor use eqtslot determin whether result tslot match correspond one frame templat ensur stack pars garbag collector interpret function interp call checkfd frame descriptor see portion code interp essenti follow con fd case checkfd sgct fd true fals void null case frame descriptor valid respect sgct bodi interp reduc void null unsatisfi stack type sinc type void uninhabit stack type interp sgct reachabl program point obvious interp sgct must inhabit therefor reduct definit must taken fals branch follow frame descriptor must valid sens checkfd static gc tabl factori exampl figur 6 shown figur 10 cours bit unrealist sinc shown program one function call site result one entri gc tabl add anyth factori program main program bodi call function factcod gc tabl static represent would augment descript new call site introduc 42 polymorph program littl dicult adapt lgc certifi polymorph program program function may argument local variabl whose type dierent time function call tilt garbag collector handl stack locat requir instanc polymorph frame valu repres type slot avail slot gc tabl correspond locat whose type static un known rather directli give traceabl inform tell collector represent found tilt allow flexibl represent store stack heapalloc record pointer record stack global storag purpos assum simpl flat ar rangment type represent frame store frame new definit slot tslot account polymorph shown figur 11 also slightli modifi definit fd kind frame descriptor frame polymorph program gener parametr number unknown type sinc frame descriptor must interpret give type stack datakind datakind knownslot tr varslot n repslot n kind list slot list tr list datakind trace 1 notrac 1 var n rep n list n tr figur 11 frame tabl polymorph program frame descriptor repres singl instanc polymorph frame therefor version fd polymorph program includ list type represent instan tiat frame descriptor provid represent unknown type valu frame individu slot frame descriptor may take one three form may slot whose type known compil time may slot whose type one unknown type associ frame may slot hold represent one type three possibl reflect new definit slot case unknowntyp represent slot frame descriptor carri natur number indic type paramet give type repres slot similarli four choic slot static gc tabl slot may known traceabl may known un traceabl may contain valu variabl type may contain represent four possibilit correspond arm new tslot datakind interpret slot type bit complic well slot known type oper unchang variabl represent slot interp must look appropri type represent list given frame descriptor represent obtain variabl slot turn type use interp represent slot turn type use r function describ therefor write function interpsl interpret singl slot given list type represent frame descriptor fun interpsl tr knownslot interpsl tr varslot case nth tr n tr interp tr none void interpsl tr repslot case nth tr n tr r tr none void notic slot specifi invalid indic list represent given type void ensur frame describ invalid descriptor occur run time addit possibl bad indic variabl represent slot anoth new way frame descriptor may invalid definit fd allow frame contain varslot contain correspond repslot fortun properti set indic given varslot contain set indic given repslot easi check primit recur sive respons fall polymorph version function checkfd exampl simpl polymorph function lgc shown figur 12 code figur defin function type represent take valu type interp box itthat alloc return onefield tupl type interp contain valu stack descriptor provid alloc site add descriptor current frame preexist stack descriptor new frame descriptor contain two slot correspond two valu return address make function stack frame first repslot zero describ runtim represent type r second varslot zero describ argument function type 5 express order experi express power lgc implement typecheck languag includ prelud constructor kind definit give mean tr sd dd interp also implement translat gcignor sourc languag lgc demonstr lgc express enough form basi target generalpurpos compil syntax sourc languag shown figur 13 design driven sole goal remov explicit gcrelat construct enabl straightforward translat lgc briefli mention issu shape design sourc languag sinc highlight unusu properti languag design garbag collect interfac mind implicit stack oper sinc garbag collector requir stack certain structur would inconveni allow sourc program unrestrict use stack manipul oper therefor chose remov stack almost complet syntax sourc languag sourcelevel function accept argument return result usual manner translat lgc take care turn parameterpass stack nipul addit sinc return address play critic role scan stack allow sourc program manipul either result sourc languag abandon continuationpass style familiar return instruct merg halt instruct sinc semant similar local sinc sourc program manipul stack support store intermedi result must built languag somewhat unfortun consequ decis store stack must made translat lgc design lgc appli compil target type assembl languag would correspond fact regist alloc must complet gener gc tabl begin order use stack space local variabl temporari storag code block sourc program begin lalloc indic block wish alloc mutabl local variabl stack special form declar express level provid access local pop 3 push cell call blurra figur 12 polymorph alloc exampl type int bool ns code 1 n 1 n 1 n express e return v v e1 els e2 let e declar block b xe e 1 n lalloci program p letcod type context context x memori type figur 13 syntax sourc languag closur sinc lgc requir code block close hoist top level translat higherlevel languag function may nest must perform closur convers part translat lgc sinc interfac garbag collector seem littl impact closur convers transform chose keep sourcetolgc translat simpl assum closur convers alreadi perform therefor sourc languag also requir code block top level howev includ existenti type sourc languag provid represent type hidden existenti would add bloat associ translat sinc mani represent turn unnecessari find econom introduc existenti type closur time translat lgc includ sourc languag special type closur 1 n oper creat everi code block expect special argument environ closur code pointer made function use closur oper pack code valu togeth environ 6 conclus present languag whose type system interfac modern highperform garbag collector express demonstr code certif inde compat use sophisti cate accur garbag collect technolog describ interfac one collector languag implement prototyp typepreserv translat gcignor sourc languag target languag alert reader notic absenc oper semant safeti proof paper oper semant complet straightforward except two rule perform heap alloc must addit side condit requir stack parsabl type safeti proof boilerpl base proof lx crari weirich 3 except case inject alloc must shown type condit stack impli parsabl howev clear give formal definit parsabl simpler specif appendix b proof would unenlighten interfac garbag collector subtl express interfac type system requir fair amount program level type constructor typecheck program languag turn involv decid equival lot larg constructor mani reduct step away normal form prototyp typecheck lgc decid equival use straightforward recurs weakheadnorm compar algorithm implement yet seriou enough reach conclus ecienc preliminari result indic amount work involv unreason larg paper examin garbag collector interfac base one use tiltml compil consider simpler howev believ describ sucient handl issu aris real collector instanc appear di cult account regist tilt treat essenti stack slot global variabl whose type fix proofofconcept implement address possibl translat higherord polymorph lgc higherord polymorph aris set compil full ml languag abstract parameter type occur tilt abl use similar gc tabl format one describ even higherord polymorph program perform program transform call reific introduc variabl bind type regist stack locat unknown compil time believ perform someth similar reific translat program higherord polymorph lgc remain topic futur work r scalabl realtim parallel garbag collect symmetr multiprocessor parallel flexibl type anal ysi principl scaveng system f type assembl languag safe untrust agent use proofcarri code manag memori type tr proofcarri code flexibl type analysi system f type assembl languag typepreserv garbag collector principl scaveng parallel realtim garbag collector manag memori type ctr feng zhong shao alexand vaynberg sen xiang zhaozhong ni modular verif assembl code stackbas control abstract acm sigplan notic v41 n6 june 2006 andrew mccreight zhong shao chunxiao lin long li gener framework certifi garbag collector mutat acm sigplan notic v42 n6 june 2007