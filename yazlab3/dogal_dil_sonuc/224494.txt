optim regist assign loop embed code gener abstract one challeng task code gener embed system regist assign live variabl regist exist variabl necessarili access data memori loop typic execut mani time often timecrit good regist assign loop exceedingli import sinc access data memori degrad perform issu find optim regist assign loop one minim number spill regist memori open time paper address issu present optim exponenti algorithm assign regist loop bodi result spill code minim also show heurist modif perform well exponenti approach typic loop scientif code b introduct typic embed system consist embed programm processor interconnect memori special acceler work support part onr grant k000042879921 preliminari version paper appear proceed 8th intern symposium system synthesi isss95 author address dj kolson nicolau n dutt depart inform comput scienc univers california irvin irvin ca 927173425 k kennedi depart comput scienc rice univers houston permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit commerci advantag copyright notic titl public date appear notic given copi permiss acm inc copi otherwis republish post server redistribut list requir prior specif permiss fee acm transact design autom electron system vol 1 2 april 1996 page 251279 applicationspecif compon embed processor realiz either processor core applicationspecif instructionset processor asip architectur embed processor may resembl generalpurpos processor datapath regular may degre irregular datapath effici implement applicationspecif instruct andor featur either case proce sor memori may consolid one memori modul may distribut variou modul size one correspond singl regist exampl embed processor consolid memori mip rc4000 microsparcii wherea texa instrument tm seri motorola 56000 exampl distribut memori current much research focus code gener embed system 1 one challeng task gener code embed processor regist assign assign process program valu map architectur regist valu avail appropri regist comput number simultan live variabl larger number regist avail valu resid data memori ie spill memori requir data transfer memori regist valu updat necessari comput typic embed processor small number regist perhap regist restrict special use limit regist assign exceedingli critic especi innermost loop execut mani time often timecrit thu map variabl regist contain poor choic variabl spill advers affect perform compil domain optim regist assign solut extens studi horwitz et al 1966 hsu et al 1989 kennedi 1972 although approach effect straightlin code address issu optim assign regist loopsinnermost loop probabl place extrem method practic thu adapt extens work problem assign embed processor regist program valu requir overcom fundament difficulti previou techniqu address satisfactorilythat match regist usag entri exit loop iter loop code correct map variabl regist begin iter end iter must equival ie right valu must right place correct iter loop code articl demonstr algorithm regist assign basic block given hsu et al 1989 kennedi 1972 extend assign regist loop incorpor loop unrol tech 1 see lanneer et al 1994 liem et al 1994 marwedel 1993 marwedel goossen 1995 strik et al 1995 252 j kolson et al niqu algorithm also present heurist deriv algorithm practic seem perform well exponenti counterpart section 2 discuss relat work section 3 describ problem address section 4 discuss optim assign regist basic block architectur consolid regist file section 5 extend techniqu loop section 6 discuss converg optim loop algorithm section 7 extend loop algorithm assign regist architectur multipl regist file special purpos regist section 8 give experiment observ result section 9 conclud articl 2 relat work regist assign problem import issu becom pervas mani area compil design typic number regist fix uniform access regist avail highlevel synthesi number interconnect regist synthes code gener embed system embed processor limit number regist perhap partit regist file specialpurpos regist compil domain popular approach regist assign heurist graph color approach brigg 1992 chaitin et al 1991 assign regist graph color graph construct node repres variabl edg node repres overlap respect variabl lifetim task color graph number color equal number physic regist color found variabl spill memori process repeat key good regist assign scheme select particular variabl spill heurist select receiv attent brigg et al 1989 along method color graph chow hennessi 1990 also loop address hendren et al 1992 without regard number registerto regist transfer potenti requir techniqu end iter mani research felt particularli critic code segment innermost loop timesensit applic optim assign necessari horwitz et al 1966 present method obtain optim regist assign index regist minim number load store work either improv upon effici horwitz algorithm luccio 1967 extend basic algorithm deal simpl loop kennedi 1972 lose optim degrad perform recent research hsu et al 1989 extend basic idea horwitz algorithm includ regist assign gener purpos regist highlevel synthesi problem regist assign tradit refer determin number regist necessari save valu optim regist assign 253 timestep kurdahi parker 1987 paulin knight 1989 order reduc interconnect multiplexor cost scatter regist research focus group regist memori mod ule 2 research address assign regist loop variabl whose lifetim cyclic natur park et al 1993 stok 1990 approach arbitrarili break cyclic variabl lifetim loop boundari creat two coupl variabl assign process tri assign regist coupl variabl assign regist regist transfer necessarili insert end loop correctli set next iter techniqu develop regist alloc consid case variabl store within variou level memori hierarchi work code gener embed system extend leftedg algorithm incorpor regist class regist assign liem et al 1994 formul problem regist assign ilp formul wilson et al 1994 howev techniqu introduc registertoregist move loop boundari lanneer 1994 complex search scheme use navig larg search space mani tradeoff one regist assign work done minim number spill accumulatorbas architectur liao et al 1995 howev none previou work address issu find optim assign regist loop ie assign variabl regist requir registertoregist transfer minim cost due ad spill code 3 target architectur problem descript exampl architectur organ target found figur 1 architectur embed processor interconnect program memori typic readonli memori data memori one asic embed processor realiz either processor core asip previous mention embed processor may offer function datapath regular generalpurpos processor gpp compar gpp follow narrow datapath bitwidth smaller instruct set fewer number regist embed processor may offer applicationspecif instruct set degre irregular datapath either case avail regist set may consolid one regist file may distribut multipl regist file exampl former mip rc4000 sun microsystem microsparcii exampl latter texa instrument tm seri motorola 56000 thu task regist assign embed processor correspond ahm chen 1991 balakrishnan et al 1988 kim liu 1993 marwedel 1984 254 j kolson et al either determin map program variabl regist contain within one regist file determin map program variabl regist distribut regist file case honor access ie port restrict regist file addi tion model target instruct set noperand instruct also call naddress instruct aho et al 1986 approach task regist assign follow code select schedul oper time step resourc shortag occur regist assign phase ie live variabl regist exist thu requir multipl variabl share regist spill code explicit data transfer oper regist data memori becom necessari given applic contain loop goal minim number transfer oper due spill regist data memori repeatedli execut within loop 3 regist assign begin analysi intermedi represent algorithm determin variabl access execut thu deriv variabl access stream intermedi represent sequenc finegrain noperand instruct effici map target architectur instanc risc processor target intermedi represent algorithm might sequenc 3operand instruct wherea accumulatorbas pro cessor intermedi instruct might compos 1 2oper instruct exampl 3operand oper 5 b 1 1 variabl access stream b read variabl write denot write variabl denot concurr access parenthes bracket read write perform parallel exampl oper 3 case nest loop oper innermost loop fig 1 target architectur organ optim regist assign 255 execut concurr variabl access stream bdeac variabl b e read concurr variabl c written concurr variabl access stream deriv input assign algorithm 4 optim assign regist basic block use variant algorithm present hsu et al 1989 deriv optim ie spill minim algorithm assign variabl regist basic block algorithm call optassignbb found figur 2 optassignbb take input variabl access stream code segment map variabl regist immedi preced segment could null signifi regist initi free algorithm build assign tree node tree correspond variabl map configur repres content regist found particular point execut root tree given initi map variabl regist path tree root leaf uniqu map variabl regist assign tree built success level tree deriv examin variabl stream current configur determin contain variabl consider fig 2 regist assign algorithm 256 j kolson et al variabl contain within configur node duplic next level tree zerocost edg connect two variabl contain within node variabl access miss occur spill code might necessari configur caus access miss variabl current configur replac turn access fault variabl edg join access miss node newli creat node repres cost spill code go first map second cost compos cost possibl store replac regist live dirti 4 store algorithm andor cost possibl load fault variabl loadcostv algorithm variabl read set load store cost one give total cost equal number memori oper 5 thu r regist fault configur current level gener r configur next level result optim exponenti method heurist use prune search space horwitz et al 1966 hsu et al 1989 kennedi 1972 last variabl access consid leav assign tree examin lowest cost node trace path root lowest cost node yield assign regist variabl result minim cost term memori load store due spill code exhaust gener everi possibl assign figur 3a exampl code segment appear figur 3b contain variabl access stream segment exampl two regist r1 r2 initi assign b respect optassignbb algorithm begin initi map construct assign tree figur 3c first two variabl access variabl b variabl contain current configur therefor spill code necessari howev next access c caus variabl access miss spill code becom necessari two configur gener next level correspond assign c r1 r2 left child assign c r1 displac variabl need store valu consist memori spill code gener load c cost one possibl assign c r2 repres right child displac variabl b b dirti previous written b must store c load cost two process examin next variabl access check whether contain within current configur continu remaind variabl access stream full tree figur 3c everi variabl assum uniqu memori locat may kept spill variabl necessari dirti refer case valu regist inconsist valu store memori locat 5 prioriti given load store simpli chang cost optim regist assign 257 fig 3 build assign tree 258 j kolson et al gener figur 3c node dash outlin node prune tree ident node level gener ident subtre within group ident node one lowest cost need kept break tie arbitrarili 5 extend basic block algorithm loop appli optassignbb algorithm bodi loop get optim assign singl execut code code contain within loop construct necessari regist map begin end code segment match order correctli iter segment gener assign produc optassignbb satisfi criteria ie lowest cost configur leaf assign tree necessarili match root thu basic algorithm adequ optim assign regist loop code remedi one might tri simpli add registertoregist move andor spill code load andor store enforc match howev cost addit spill code may vari greatli conceiv map anoth would vari unrol loop number time optassignbb result ignor effect guarante optim anoth suboptim approach forc match loop top bottom choos exponenti tree deriv optassignbb least cost leaf node ident initi configur leaf configur match root configur necessarili guarante lowest cost 51 algorithm immedi obviou mani iter suffic produc assign result minim amount spill code fact problem open issu process unwind loop appli optassignbb continu cost may decreas iter unrol one loop iter appli optassignbb result code find new loop bodi potenti span sever iter origin loop cost spill per iter loop bodi minim b entri exit configur new loop match algorithm assign regist loop code refer optassignloop found figur 4 gener structur algorithm iter unrol loop one iter appli optassignbb new iter possibl previou iter exit map algorithm analyz result exit map new iter determin match node iter ancestor ie node assign tree lie path root node also lie iter boundari legal regist assign unrol loop optim regist assign 259 found exit map becom one map use initi configur next iter time match found algorithm comput averag cost per iter assign assign may span multipl iter loop fulli unrol assign lowest averag cost per iter would optim assign loop full unrol loop necessarili practic parameter algorithm k number unrol loop bodi perform lowest cost map found cutoff scheme local minimum global number iter unrol far k note algorithm must alway get averag cost less equal optassignbb would get deal strictli cost calcul optassignbb add noth morebeyond unrol 52 heurist prune although algorithm may comput prohibit even moder long loop provid strong start point determin fig 4 loop regist assign algorithm 260 j kolson et al good heurist comput complex algorithm aris replac regist current configur variabl read write miss occur heurist modif simplist prune strategi best configur kept futur expans map particular level gener node current level access miss occur possibl spill consid newli gener node lowest cost node retain consider 6 converg optim loop algorithm previous known whether optim regist assign loop could accomplish regardless effici algorithm difficulti ensur optim overal loop requir match regist top bottom loop bodi impos addit spill optim minim spill loop unwind differ regist assign unwound iter may need known whether finit unwind guarante converg result optim assign answer question introduc notion configur graph node configur graph correspond specif map variabl regist found iter boundari direct edg configur graph correspond cost spill code use sourc node initi map iter appli loop algorithm sink node one result node thu edg repres cost spill code sourc node initi regist assign sink node result iter loop figur 5 illustr method build configur graph use assign tree figur 3 label leaf node partial configur graph shown b construct assign tree travers path root configur label p leaf configur give direct edg configur graph p respect node weight equal cost path instanc path root first leaf node left label q cost three thu edg configur graph p q ad edg weight three similarli edg ad configur graph travers variou path partial configur graph b result construct complet graph requir build assign tree possibl exit configur 61 converg order guarante algorithm converg must shown unrol new exit configur ie map variabl regi ter previous exist gener algorithm exhaust replac regist time variabl access miss occur optim regist assign 261 conceiv map gener state anoth way unrol loop bodi assign iter perform cost associ go initi deriv exit map becom known thu edg configur graph connect initi configur possibl exit configur gener assign algorithm appli node eg unrol loop bodi anoth iter direct edg exit configur one anoth obtain converg algorithm therefor equival find cycl configur graph thu algorithm converg number variabl number regist finit therefor number permut variabl regist finit although exponenti 62 optim optim assign one memori traffic minim loop bodi unrol optim assign assign minim memori traffic spill cost iter fig 5 build configur graph assign tree 262 j kolson et al contain within unrol loop thu optim assign ratio spill cost new unrol loop bodi number iter contain minim configur graph correspond ratio total cost cycl number node cycl therefor optim assign found examin averag cost possibl cycl possibl length configur graph take minimum note necessarili correspond minim cycl length one graph 6 worstcas possibl optim cycl must make complet tour graph 7 extend model distribut memori algorithm present earlier regist assign loop underli assumpt access avail regist equival found instanc generalpurpos processor embed processor regist consolid one regist file variabl map regist uniformli avail oper use variabl howev case architectur avail regist partit disjoint regist file avail regist special purpos assumpt must modifi gener feasibl regist assign previous assumpt enough port regist file exist support read write variabl access particular step howev possibl restrict present number regist concurr access ie number readwrit port regist file constrain number readswrit regist file section discuss extens algorithm loop regist assign target embed processor architectur contain distribut regist file andor specialpurpos regist specif restrict regist access exist start discuss addit regist class model consid separ modif necessari algorithm handl specialpurpos regist distribut regist file 71 ad regist class model extend algorithm introduc notion regist class regist class use compil aho et al 1986 stallman 1992 microcod synthesi feuerhahn 1988 liem et al 1994 denot function equival regist howev combin regist potenti usag one class precis enough regist assign target architectur class see consid simpl case two regist file compos gener purpos regist regist file connect differ alu clearli 6 cycl length one would impli assign loop bodi minim initi configur natur ie without spill move match exit configur optim regist assign 263 oper schedul either alu must operand present respect regist file howev collect regist group one regist class call generalpurpos possibl necessari operand assign way honor regist class invalid execut thu make regist assign invalid main caus problem due regist group equival rather equival establish approach two type regist class defin connect regist class oper regist class connect regist class connrc defin equival regist function architectur connect wherea oper regist class operrc defin equival regist function oper semant motiv deriv class connect architectur defin regist may read written function unit wherea semant particular oper execut particular function unit may preclud use connect regist load oper instanc may requir memori address resid specif regist function unit execut load oper may connect mani regist serv purpos figur 6 contain algorithm deriv regist class given architectur connect regist class deriv input output function unit architectur base upon regist may access input output oper regist class deriv examin oper function unit execut select readabl writabl regist impos oper semant larg number case connrc operrc equival fig 6 algorithm deriv regist class 264 j kolson et al 72 extens specialpurpos regist algorithm optassignbb exhaust gener variabl map place variabl regist either read miss occur requir load variabl variabl written access regist uniform strategi correct howev regist special usag strategi gener map invalid variabl assign regist perform requir special function thu necessari restrict placement variabl regist variabl resid regist perform necessari function notion regist class extend optassignbb algorithm handl regist special usag variabl caus access miss regist perform necessari function consid found intersect oper regist class access oper connect regist class function unit execut oper recal perform regist assign schedul dataflow graph thu perform regist assign oper type access variabl well function unit oper execut knownretriev inform simpl matter figur 7 contain extend version optassignbb algorithm regist assign special regist usag function opof return oper current access variabl v type oper function unit execut oper found via call function operationtyp functionalunit respec tive appropri oper regist class connect regist class found intersect rcintersect intersect class defin feasibl regist variabl v may resid variabl one regist spill code necessari regist contain rcintersect candid replac spill code gener 73 extens multipl regist file extend algorithm assign regist multipl regist file requir notion node assign tree alter assign regist architectur consolid regist file semant node regist uniformli avail instanc eight regist fill variabl h map variabl regist repres abcdefgh signifi map regist one b map regist two model multipl regist file chang inform contain node reflect group regist regist file node assign tree compos number regist set equal number regist file optim regist assign 265 731 assign variabl figur 8 contain extend version optassignbb algorithm assign regist multipl regist file main modif requir multipl regist file exist regist respect regist file examin determin variabl resid variabl contain within necessari regist file rather load memori check first made see variabl contain within one regist file move oper use transfer valu necessari regist file necessari connect exist transfer like lower latenc load slower memori otherwis variabl load memori spill consid 7 access restrict present regist file number regist simultan access consid restrict satisfi assign valid maintain futur assign otherwis map repres assign caus access conflict exist node remov futur consider 7 assign differ cost spill memori fetch memori fetch anoth regist file fig 7 extend optassignbb specialpurpos regist 266 j kolson et al 732 note optim addit regist class extens special purpos regist algorithm deriv optim ie spill minim result howev multipl regist file version algorithm present may possibl suboptim result obtain previous variabl assign regist regist view candid replac extend case regist special purpos mere remov number regist candid thu serv restrict growth assign tree howev case multipl regist file algorithm may longer deriv optim solut one variabl displac anoth regist file displac variabl may need store data memori requir load need futur howev free regist exist regist file might possibl store displac valu temporarili futur use even free regist remot file still possibl remot variabl spill without loss perform thu free regist gener effect cascad effect becom quit complex variabl hop regist file regist file futur use extend algorithm handl would straightforward impract fig 8 extend optassignbb multipl regist file optim regist assign 267 8 experi result examin benefit techniqu conduct two set experi first target architectur consolid regist file second target architectur partit regist file special use regist experi benchmark suit consist six numer code written c compil risclik code typic code execut embed core processor asip code variabl access stream deriv use input algorithm experi deriv regist assign optim basic block algorithm optassignbb optim loop algorithm optassignloop heurist version loop optim algorithm heurist optassignloop count number spill ie load store assign gener assign optassignbb algorithm regist assum empti upon initi assign loop optassignbb guarante produc assign initi exit map match note point regist becam full ie point live variabl regist exist introduc spill code andor move match usag minim leaf node previous note initi node also order creat opportun optassignbb well use enlarg loop bodi construct unwind loop three time thu result optassignbb whole number repres averag singl iter origin loop 81 experiment consolid regist file use microsparcii target code gener architectur consolid regist file microsparcii risc instruct set similar found mani embed core processor use variabl access stream regist assign produc optassignbb optassignloop heurist optassignloop algorithm regist assign number spill code oper count section 811 compar optassignbb optassignloop result next compar heurist version optassignloop graph color approach implement gnu compil 8 section 812 section 813 compar optim heurist loop version section 814 compar number iter span optim heurist loop assign 811 comparison optassignbb optassignloop tabl contain observ result contain number spill per iter optassignbb optassignloop well absolut percentag improv optassignloop optassignbb 8 code produc compil gener accept high qualiti granlund kenner 1992 268 j kolson et al measur spill bb 2 spill loop spill loop gener trend percentag improv increas number regist increas ie dispar loop assign basic block assign increas number regist increas attribut fundament differ optassignbb optassignloop optassignbb assign regist without regard effect iter regist usag wherea optassignloop examin iter effect regist usag natur discov minim assign loop minim assign produc optassignbb guarante match loop entri exit point therefor spill code becom necessari match regist usag two point howev optassignloop explor possibl keep variabl regist found loop end assign regist next iter discov better regist usag place insert spill code essenti optassignloop tabl basic block optim vs loop optim microsparcii optim regist assign 269 produc superior result natur ie without addit load store andor regist move find match loop entri exit configur assign process 812 comparison heurist optassignloop graph color gcc configur produc sparc code regist assign modul modifi gcc would produc code use four six eight regist 9 heurist version optassignloop use prune factor paramet 5 2 best configur 10 tabl ii summar result spill code produc gcc well heurist algorithm percentag improv measur spill gcc 2 spill heur spill heur case heurist produc assign superior gcc graph color approach variabl assign regist entir lifetim segment code variabl assign regist current access keep variabl regist caus high regist pressur load store 9 gcc produc intern compil error real regist count set two recal prune strategi keep best configur consid possibl time variabl miss occur tabl ii graph color vs heurist microsparcii 270 j kolson et al variabl current access gener necessari unaccess variabl previous spill memori segment anoth interest result heurist produc assign better optassignbb optim assign basic block number case compar tabl ii show heurist result better optim basic block assign averag 8 although heurist version loop algorithm abl deriv better result optassignbb abil find match regist assign loop execut optassignbb algorithm 813 comparison optassignloop heurist optassign loop tabl iii contain number spill per iter optassignloop heurist optassignloop algorithm column tabl iii comparison loop assign microsparcii optim regist assign 271 three four respect column five contain heurist result percentag within optim measur spill heur 2 spill opt spill opt measur lower number better ie lower number closer heurist approxim optim half case 12 24 heurist produc result equal optim also 71 case 17 24 within 10 optim 92 22 24 within 20 optim result demonstr although optim may comput prohibit simpl heurist version execut matter second produc result accept close enough optim 814 code size loop regist assign one concern techniqu increas code size result loop unrol method typic produc regist assign span multipl itera tion especi concern context embed code gener program code resid rom thu directli affect tabl iv comparison loop code size microsparcii 272 j kolson et al rom size tabl iv note number iter span assign produc optassignloop heurist optassign loop 11 column three four respect column five tabl iv indic whether heurist version deriv assign amount spill code optim major case 18 24 number iter span version case heurist version deriv assign amount spill code optim nine case 50 case 5 24 heurist span iter optim amount spill code produc three case one case heurist version span fewer number iter optim due natur heurist howev case heurist version produc spill code overal number iter span loop assign rang two five feel within accept limit perform gain result fewer memori access 815 runtim algorithm method propos exponenti natur execut time techniqu concern tabl v note minimum averag maximum execut time cpu second optassignbb optassignloop heurist optassignloop algorithm well regist alloc phase gcc execut sun 430 system run unix although runtim exponenti method optassignbb opta signloop order sever cpu minut reason context embed code gener longer compil time toler obtain highqual code also includ tabl v averag number spill per iter regist configur previous studi result demonstr tradeoff runtim qualiti produc regist assign runtim optassignbb optassignloop order sever cpu minut qualiti assign produc compar graph color approach least 40 better measur heurist 2 optimaloptim increas number regist increas also 11 result tworegist case heurist version appear tabl appear tabl ii mention earlier avail gcc tabl v comparison run time microsparcii optim regist assign 273 heurist version loop algorithm deriv result close optim wherea runtim compar gcc regist alloc phase 82 experiment distribut regist file use tmx320c44 exampl architectur distribut regist file figur 9 show simplifi view architectur section 821 give brief overview purpos code gener use scaleddown version tmx320c44 parameter number regist regist bank tabl regist column denot number ie 2 mean bank contain two registerstwo extend precis two generalpurpos two auxiliari registersfor total six gener assign optassignbb optassignloop heurist version optassignloop section 822 compar result basic block optim loop optim access commerci avail compil tmx320c44 comparison heurist anoth heurist unavail howev section 823 compar result optassignloop heurist optassignloop section 824 compar code size loop assign 821 tmx320c44 overview figur 9 show simplifi view tmx320c44 architectur three regist file extend precis regist 40bit wide use floatingpoint long integ arithmet auxiliari regist 32bit wide use address pointer dedic address gener hardwar autoincr autodecr address valu generalpurpos regist 32bit wide regist file connect reg1 reg2 buse avail multipli alu multipli alu may write extend precis regist fig 9 simplifi view tmx320c44 274 j kolson et al one may write either auxiliari regist gener purpos regist addit operand may suppli multipli alu memori 822 comparison optassignbb optassignloop tabl vi contain observ result contain number spill per iter optassignbb optassignloop well absolut percentag improv optassignloop optassignbb measur spill bb 2 spill loop spill loop gener trend percentag improv increas number regist increas due optassignloop abil natur match regist usag loop top bottom upon inspect assign produc note case assign produc basic block scheme assign address variabl gener purpos regist near end iter variabl heavili use top loop spill code spill address variabl current within auxiliari regist necessari gener accommod variabl 823 comparison optassignloop heurist optassign loop tabl vii present result spill code produc optim heurist algorithm column three four respect column five contain heurist result percentag within optim measur spill heur 2 spill opt spill opt measur lower number better ie lower number closer heurist approxim optim case 3 12 heurist produc result equal optim 58 case 7 12 result produc within 15 optim rest case 5 tabl vi basic block optim vs loop optim tmx320c44 optim regist assign 275 12 percentag within optim higher howev actual differ spill code produc one instruct 824 code size loop regist assign code size directli affect size program rom studi number iter produc loop assign tabl viii contain number iter span loop method given tabl viii comparison loop code size tmx320c44 tabl vii comparison loop assign tmx320c44 276 j kolson et al number regist well indic whether heurist method produc equal amount spill code optim major case 9 12 heurist deriv assign span number iter optim gener amount spill code three case 33 case 3 12 heurist assign span one iter produc amount spill code one case 33 overal rang number iter span assign two four believ within accept limit 825 runtim algorithm note runtim algorithm case tmx320c44 result tabl ix contain minimum averag maximum execut time cpu second optassignbb optassignloop heurist optassignloop algorithm execut sun 430 system run unix includ tabl ix averag number spill per iter regist configur previous examin tmx320c44 although anoth heurist unavail comparison heurist loop algorithm deriv result close optim runtim effici enough practic 826 use full regist set previous experiment use scaleddown model tmx320c44 number regist regist file reduc section present result regist alloc one benchmark number regist use alloc actual number tmx320c44 architecture8 auxiliari regist 12 extend precis regist 14 generalpurpos regist benchmark select partial differenti integr excerpt result experi may found tabl x column two three give number spill basic block loop method respect column four give percentag improv loop method basic block method result demonstr presenc realist resourc constraint techniqu deriv assign variabl regist natur match loop boundari point definit advantag optim basic block method arbitrarili forc regist usag tabl ix comparison run time tmx320c44 optim regist assign 277 9 conclus articl motiv present algorithm optim assign regist loop case optim assign one memori traffic result spill code minim work answer longstand question whether possibl principl achiev optim minim spill code loop demonstr feasibl use techniqu task regist assign embed code gener conduct experi risclik code typic embed core processor also extend algorithm assign regist irregular datapath found mani asip regist special use andor regist partit multipl regist file experiment method demonstr heurist method obtain suitabl perform outperform graph coloringbas approach use gnu c compil gcc r compil principl alloc multiport memori data path synthesi ieee tran regist color via graph color color heurist regist alloc regist alloc via color prioritybas color approach regist alloca tion elimin branch use superoptim gnu c compil regist alloc framework base hierarch cyclic interv graph index regist alloc minim loadsstor local regist alloc spill code result use regist tmx320c44 util multiport memori data path synthesi real program regist alloc data rout paradigm effici datapath synthesi code gener instruct select use binat cover code size optim regist assign resourc classif asip microcod gener comment index regist alloc mimola design system tool design digit processor code gener embed processor regist alloc data flow graph condit branch loop use port gnu cc interconnect optimis data path alloc effici code gener inhous dspcore integr approach retarget code gener revis januari tr real program regist alloc color heurist regist alloc minim loadsstor local regist alloc prioritybas color approach regist alloc util multiport memori data path synthesi regist alloc via graph color regist assign resourc classif asip microcod gener data rout integr approach retarget code gener treebas map algorithm predefin structur index regist alloc regist alloc framework base hierarch cyclic interv graph interconnect optimis data path alloc ctr catherin h geboti low energi memori regist alloc use network flow proceed 34th annual confer design autom p435440 june 0913 1997 anaheim california unit state weikai cheng younlong lin code gener nest loop dsp processor heterogen regist structur pipelin acm transact design autom electron system toda v4 n3 p231256 juli 1999