learn algorithm balanc load time warp present paper algorithm integr flow control dynam load balanc order improv perform stabil time warp algorithm intend use distribut memori environ cluster workstat connect high speed switch flow control algorithm make use stochast learn automata oper fashion leakybucket flow control algorithm use comput network regul flow messag processor continu throughout cours simul dynam load balanc algorithm invok load imbal detect algorithm make use spacetim product metric collect requisit inform via snapshotbas gvt algorithmw compar perform flow control algorithm dynam load balanc algorithm integr algorithm simul without control simul larg shuffl ring network without hot spot pc network sgi origin 2000 systemour result indic flow control scheme alon succe greatli reduc number length rollback well number antimessag therebi increas number nonrol back messag process per second result larg reduct amount memori use outperform dynam load balanc algorithm measur integr scheme produc even better result measur result reduc execut time well b introduct synchron algorithm time warp 9 involv roll simul back previou state event arriv simul object lp logic process timestamp smaller previous process event order accomplish time warp period record checkpoint state simul send antimessag whose function cancel event result arriv straggler outoford messag well known optimist simul consum larg amount memori subject explos growth number rollback cours simul larg demand memori stem checkpoint state send antimessag output messag store input messag might later cancel problem subject much attent research literatur one approach problem tri restrain optim simul 18 via global synchron barrier approach 16 window virtual time defin within permiss simul event lp provid violat causal constraint probabilist algorithm lp determin block period amount time lp spend block state determin estim time next event arriv compar cost roll back block 8 compar frequenc cost rollback 2 differ approach via memori manag ment object memori manag reclam space exist object fossil collect reclaim suffici space simul may allow continu techniqu includ cancelback 10 artifici rollback 11 adapt memori manag 6 attempt prevent simul run memori increas processor util dynam load balanc algorithm transfer lp heavili load processor lightli load one 3 1 4 number metric use evalu load includ virtual time progress number non roll back event per second 1 queue length 7 contain comparison efficaci three metric 14 author use move window fashion comput network queu model use determin initi window size adjust cours simul depend perform share memori environ integr approach adapt memori manag scheme also describ algorithm describ paper combin flow control algorithm dynam load balanc algorithm flow control algorithm execut continu basi regul messag traffic pair commun processor algorithm assign pool token one way messag flow order send messag processor must first acquir token token pool deplet processor block number token pool dynam updat throughout cours simul mean stochast learn algorithm metric use spacetim product processor defin next section dynam load balanc algorithm employ spite use flow control load imbal discov condit load imbal check gvt cycl algorithm target toward use distribut memori architectur use cluster workstat connect highspe switch contrast 14 combin memori manag flow control share memori environ section 2 paper contain descript algorithm well background inform stochast learn automata section 3 describ experi final section contain conclus 2 algorithm make use spacetim product metric flow control dynam load balanc algorithm defin spacetim product processor real time follow st nevent number event nstate number state sizeofev respect size event state lgv minimum lvt processor p object algorithm control differ spacetim product processor involv simul precis requir ffic maximum allow differ two processor p set processor use spacetim product attempt balanc memori use processor keep processor close one anoth virtual time order reduc possibl rollback 21 flow control flow control scheme similar leaki bucket scheme 17 use comput network counter associ channel whenev packet sent counter increas counter increas fix threshold arriv packet discard algorithm processor first assign number token permit order send messag anoth processor processor make use token ie time send messag processor decreas allot token pool one separ pool token assign processor correspond processor number token pool vari dynam throughout cours simul determin number token assign processor mean stochast learn automata 13 sla consist stochast automaton surround environ shown figur 1 environ respons input input x action f pg stochast automaton figur 1 stochast learn automaton order make use sla flow control al gorithm must answer follow question 1 natur control model ie automata interact one anoth 2 reinforc scheme use 3 often reinforc scheme invok provid answer question turn control model control model consist collect automata automaton resid within processor cooper remain automata control flow messag figur 2 contain portray model defin number event arriv interv t1 t1 number depart event interv t1 defin regul factor maximum number messag processor p may transmit processor number token assign processor p next interv t1 l l environ figur 2 feedback respons processor p environ reinforc scheme adopt smodel linear rewardinact scheme sl ri reinforc scheme base 12 smodel take continu valu interv 01 probabl processor p send messag processor p k time denot p ik n1 essenc flow control scheme comput token gener probabl p ij 6 j destin equat updat p id destin processor follow f jd tp jd tg 2 gt defin gain automaton automata involv simul automaton n1 action receiv respons rest proce sor defin regul factor ratio defin f id normal environ respons destin processor p processor f id spacetim product st ii processor p real time express st ii nevent nevent number event nstate number state processor p lgv minimum lvt processor p spacetim product processor piggyback onto messag sent anoth processor st id recent valu processor p spacetim product st dd piggyback messag sent p stmax maximum spacetim product simul system monitor processor p time f id defin manner reflect spacetim differ processor p p valu constrain lie 0 1 environ ment respons sla must 0 1 effect equat 2 assign new valu p id proport differ f id averag f jd j 6 st ii st id f id equal one progress faster p p consum space p would like processor p acquir token case interpret mean p progress faster p requir memori p would like assign fewer token send processor p order reduc number outgo messag thu valu f id less 1 import recal assign token processor p depend f id also depend upon mean f jd j 6 gain gt automaton comput follow manner sl ri model gt processor adjust depend upon spacetim product close averag valu st automaton resid processor spacetim product close averag st gt processor assign valu close 1 automaton st farther away st valu gt assign lower valu control automaton consid ineffect deriv gt modifi chebyshev theorem follow oe jst gamma express 5 st within oe st gt equal 1 st farther away averag valu st gt processor p diminish proport differ jst updat interv action probabl period updat reflect respons environ elaps time number receiv respons may use basi defin interv updat probabl frequent may caus comput overload learn automata spite reflect recent respons environ hand infrequ updat may provid obsolet inform inadequ choos optim action action set model action probabl updat assign token number decreas 0 fix number 500 event receiv processor 22 dynam load balanc number dynam load balanc algorithm appear literatur 3 15 1 4 differ one anoth sever import way among metric employ balanc load way inform pertain valu metric collect number lp chosen migrat manner chosen number metric employ distribut load balanc algorithm exampl metric includ number event input queue rate process event processor virtual time progress effect util make use spacetim product previous defin metric algorithm migrat load heavili load processor lightli load processor reli gvt algorithm 5 provid inform spacetim product processor involv simul particular provid minimum spacetim product st min processor id pid min averag spacetim product valu st standard deviat oe processor actual make use exponenti smooth version spacetim product st n t1 ffst n t1 gamma ff st n order minim fluctuat spacetim product clear mean valu st standard deviat oe given gvt comput follow normal distribut number processor employ simul small eg 6 henc use chebyshev theorem proport observ fall within z standard deviat unit mean st least oe processor st within st sigma zoe 2oe probabl st exist st sigma 2oe 075 1 therefor invok dynam load balanc condit choic lp migrat depend upon granular lp amount traffic neighbor lp connect lp chose migrat group 10 lp transfer base upon experiment result research lp close topolog relat lp resid destin processor pid min one chosen migrat 23 integr scheme flow control dynam load balanc flow control dynam load balanc algorithm intent keep spacetim product processor close one anoth throughout cours simul ie definit balanc workload attempt improv perform stabil system integr scheme complementari fashion integr scheme algorithm execut independ one anoth flow control algorithm exert control continu outgo messag processor determin action probabl action probabl regularli updat describ hand dynam load balanc algorithm execut gvt cycl depend whether suffici larg load imbal detect henc intent integr scheme allow flow control balanc load extent event suffici larg load imbal still detect cours gvt comput load balanc algorithm invok rectifi imbal 24 gvt comput gvt algorithm play import part gather dissemin inform load balanc algorithm extens mattern algorithm 5 reli upon techniqu use build global snapshot consist cut comput gvt approxim proport within sigma 2oe normal distribut 955 5 show superior perform mattern algorithm well bellenot algorithm 3 simul result 31 applic section compar perform flow control distribut load balanc algorithm integr algorithm one anoth simul without form control make use snapshot1 gvt algorithm describ 5 simul simul execut sgi origin 2000 consist 8 64bit r10000 processor 256 mb memori per processor simul shuffl ring network pc network 5 shuffl ring network shown figur 3 obtain modifi shuffl exchang network modifi shuffl exchang network interconnect node first last column substitut one input buffer local sourc one output buffer local sink topolog get name modif 03 figur 3 4x4 shuffl ring network pc wireless commun network provid commun mobil user servic area divid cell transmitt fix number channel regular hexagon use repres cell user make call channel assign user channel alloc call block user move one cell anoth call new channel alloc provid continu call simul lp correspond cell cell 500 channel call static mobil veloc mobil call assum constant direct chosen one six direct east southeast southwest west northwest northeast veloc direct call chosen uniform distribut call complet time determin exponenti distribut mean 300 cell diamet fix 1 km use hexagon mesh topolog wrap hexagon mesh hmesh homogen graph outdegre six shown figur figur 4 wrap hexagon mesh n3 32 comparison order compar algorithm made use follow perform measur 1 simul time 2 memori use 3 number length rollback 4 number antimessag simul follow size network 125x125 srn 57862 lp 200x200 srn 146672 lp pc h80 56884 lp pc h80 network number cell peripher edg mesh equal 80 uniform nonuniform load distribut use simul order creat nonuniform load distribut made use hot spot lp mean servic time equal one third mean servic time lp exponenti servic time use hot spot randomli distribut throughout network 33 experiment result rollback present result number rollback length rollback number antimessag produc cours simul tabl 1 contain number rollback scheme well percentag differ scheme simul without form control result present 125x125 srn without hot spot 200x200 srn hot spot pc 2 link edg cell depict figur tabl 1 rollback number srn network pc network network type tabl 2 antimessag srn network pc network network type see flow control result fewer rollback dynam load balanc network simul except 125x125 srn without hot spot integr scheme exhibit best per formanc reduct number rollback rang 1952 tabl 2 3 number antimessag rollback length record tabl reveal similar result flow control result fewer antimessag dynam load balanc rollback length also shorter result dynam load balanc except case 125x125 srn integr scheme result best perform reduc rollback length 8 59 number antimessag reduc 1591 reason flow control scheme greater success dynam load balanc scheme lie fact cluster lp move processor necessari temporarili halt send messag lp cluster result longer messag delay increas probabl rollback occur increas length rollback occur addit lp formerli commun one anoth processor must make use interprocessor link result larger messag delay flow control algo rithm hand react increment fashion dynam load balanc algorithm caus interrupt process shift lp except observ 125x125 srn without hot spot reduc number rollback much dynam load balanc reduct rollback length close obtain dynam load balanc although rel small reduct reason differ behavior found natur simul 125x125 srn simul exhibit balanc behavior simul two simul hot spot pc simul natur experi shift load group lp reason success integr scheme judici combin flow control dynam load balanc flow control scheme reduc frequenc dynam load balanc algorithm need call well number lp need transfer balanc load sinc base learn algorithm sensit chang load distribut processor goodput defin goodput rate number process non rolledback event simul analog throughput comput network intend measur progress simul make simul time henc measur stabil simul tabl 4 contain comparison goodput three algorithm well uncontrol simu lation tabl contain result simul 125x125 200x200 srn hot spot pc pattern establish examin rollback antimessag assert flow control establish superior dynam load balanc integr algorithm produc better result dynam load balanc flow control srn simul howev produc result intermedi two tabl 3 rollback distanc srn network pc network network type tabl 4 averag goodput srn network pc network network type evtssec evtssec evtssec evtssec srn 200x200 25 242729 245782 13 288159 187 289154 191 method pc simul process load shift cours pc simul dynam load balanc portion integr algorithm suspend send messag transfer lp processor end integr scheme produc goodput 1021 better uncontrol version time warp improv goodput gener flow control integr algorithm result reduct number length rollback consequ decreas number antimessag memori tabl 5 contain result averag amount memori use three scheme well simul oper without control case far see flow control perform better dynam load balanc integr scheme give best perform integr scheme save 1320 memori use uncontrol scheme note simul 200x200 srn use less memori 125x125 srn simul reason smaller gvt use termin condit 200x200 srn simul execut time simul time three scheme uncontrol scheme contain tabl 6 percentag differ uncontrol scheme includ tabl case integr scheme provid best perform 1323 rang improv compar uncontrol scheme examin tabl note flow control produc level improv previous observ flow control also regul send messag necessarili increas delay associ henc save execut time result decreas number length rollback somewhat mit igat integr algorithm dynam load balanc algorithm reduc relianc upon flow control algorithm produc best result result indic flow control scheme succeed reduc number length rollback well number antimessag therebi increas goodput simul short flow control algorithm serv increas stabil time warp combin flow control dynam load balanc pronounc effect flow control dynam load balanc alon suggest algorithm inde act complementari fashion dynam load balanc algorithm transfer load flow control algorithm could manag keep spacetim product suffici close one anoth reduc need invok dynam load balanc flow control algorithm decreas number time lp transfer processor lp tran fer necessari suspend send messag lp involv transfer result increas number length rollback well number antimessag sent order valid use algo rithm necessari test context simul real system hope opportun near futur tabl 5 use memori srn network pc network network type byte byte byte byte tabl simul progress srn network pc network network type sec sec sec sec r dynam load balanc cluster time warp logic simul adapt timewarp concurr control algorithm load balanc strategi time warp multius workstat background execut time warp program effici gvt comput use snapshot adapt memori manag protocol time warp parallel simul dynam load balanc cluster time warp estim rollback overhead optim control time warp virtual time virtual time ii cancelback protocol storag manag time warp reduc state save overhead time warp parallel simul learn automata model adapt flow control packetswitch network learn automata survey adapt flow control time warp dynam load balanc multiclust simul network workstat speed synchron parallel environ emul discret event simul new direct commun way inform age perform evalu bound time warp algorithm behaviour stochast automata variabl structur tr virtual time virtual time ii storag manag conserv optimist system adapt memori manag protocol time warp parallel simul dynam load balanc multiclust simul network workstat background execut time warp program dynam load balanc cluster time warp logic simul adapt flow control time warp estim rollback overhead optim control time warp ctr tapa k som robert g sargent model structur load balanc optimist parallel discret event simul proceed fourteenth workshop parallel distribut simul p147154 may 2831 2000 bologna itali johann lthi steffen gromann resourc share system dynam feder map hlabas distribut simul proceed fifteenth workshop parallel distribut simul p9198 may 1518 2001 lake arrowhead california unit state herv avril carl tropper roll back checkpoint time warp ieee transact parallel distribut system v12 n11 p11051121 novemb 2001 ewa deelman boleslaw k szymanski simul spatial explicit problem high perform architectur journal parallel distribut comput v62 n3 p446467 march 2002 boon ping gan yoke hean low sanjay jain stephen j turner wentong cai wen jing hsu shell ying huang load balanc conserv simul share memori multiprocessor system proceed fourteenth workshop parallel distribut simul p139146 may 2831 2000 bologna itali