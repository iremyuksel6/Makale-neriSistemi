fortran 90 environ research prototyp enclosur algorithm nonlinear equat global optim environ gener research prototyp algorithm reliabl constrain unconstrain global nonlinear optim reliabl enclosur root nonlinear system equat without inequ constraint develop environ portabl easi learn use maintain suffici fast product work motiv design principl use capabl environ outlin environ includ interv data type symbol form automat differenti obtain intern represent function special techniqu allow condit branch oper overload interv comput gener routin give interv noninterv function deriv inform gener routin use special version backward mode automat differenti packag also includ dynam data structur exhaust search algorithm b introduct background motiv numer applic benefit enclosur method numer nonlinear analysi method includ rigor global optim constrain unconstrain rigor locat root nonlinear system equat without side inequ constraint global optim import engin biolog econom model applic see 7 8 furthermor enclosur ie interv method applic provid solut certainti also effici method see 14 37 enclosur method unconstrain constrain solut nonlinear system use robot sensor data analysi collis detect 12 13 gener reliabl comput graphic 29 36 elsewher etc ad hoc algorithm applic sometim effici howev enclosur method contain common subtask comput interv residu interv function valu furthermor substanti theori develop see 32 mani comput tool incorpor method differ way see exampl 14 recent tool 20 22 23 still unclear scope applic tool furthermor effici prototyp tool requir program environ easili access uniform way gener research method proceed within languag fortran 77 exampl element fortran 77 packag int bi 21 investig acceler singular root 19 boundconstrain global optim 24 howev speed investig constrain lack interv data type give task graduat student person observ much higher product interv data type acrithxsc 39 access interv arithmet subroutin call routin much smaller algorithm easili understood read actual routin routin easili maintain 1 univers represent function even tradit approxim nonlinear equat solver optim requir routin evalu fact recogn decad motiv behind 5 41 residu object function gradient jacobian hessian matric newton step etc major burden necess code function deriv even gener investig enclosur method sinc function inform use context exampl may interv enclosur object function gradient hessian matrix requir also float point valu well relationship among intermedi quantiti produc evalu possibl ten separ routin return inform singl mathemat function reason gener interpret function interv function interv gradient etc well global avail intern represent specif function use mean automat gener represent simpl program requir dynam list branch bound techniqu common determinist global optim reliabl root isol nonlinear system techniqu two subregion produc singl parent region one child region place order list kept process howev order list manag differ algorithm algorithm insert list may requir differ separ subroutin experiment new algorithm may demand move place list requir furthermor size list element depend dimens problem maximum requir number element list known priori thu dynam list oper encapsul detail advantag encapsul certain oper besid list oper common oper includ comput precondition variou type comput step interv newton method other encapsul would greatli eas highlevel algorithm research develop encapsul subroutin func tion oper natur interfac particular argument logic requir appear argument array bound workspac vector slow research prototyp comput languag implement environ attribut must ffl userdefin data type oper overload ffl pointer data type ffl dynam memori alloc ffl good facil defin access global data furthermor portabl languag standard wide avail particularli import hardwar rapidli improv chang remot access divers hardwar easili avail obsolet equip rapidli retir similar condit languag also admit style easi mainten modif found fortran 90 necessari attribut know fortran 77 difficulti learn fortran 90 fortran 90 code packag seem particularli natur final necessari non interv auxiliari routin fortran 77 spars linear system solver immedi seamlessli access without necessari modif remaind paper briefli describ key aspect environ develop x2 explain interv data type briefli describ intern represent function gener x3 singl particular aspect represent condit branch x4 outlin gener routin interpret represent x5 key properti listprocess capabl appear x7 mention view special type symbol differenti capabl avail packag x6 assum familiar interv arithmet x2 x4 x5 introduct subject found 1 14 30 32 descript packag oper precondition comput interv gaussseidel step appear elsewher 2 interv data type recent produc intlib 27 portabl fortran 77 librari support basic interv arithmet function interv arithmet evalu elementari function howev direct use intlib requir write subroutin call elementari oper addit multipl mention x1 leav develop maintain substanti disadvantag howev sinc fortran 90 standard contain fortran 77 may directli use intlib support packag defin interv data type creat fortran 90 modul intlib arithmet precis purpos routin test fortran 90 interfac elementari interv arithmet portion intlib use intlibarithmet constant interv constant use elementari function end program testintervalarithmet figur 1 exampl interv arithmet use fortran 90 overload exampl use modul appear figur 1 certain fortran 90 compil dosbas pc program produc output comput access intlib fortran 77 appear figur 2 output exactli previous interv data type avail product augment precompil 5 41 pascalsc 34 fortransc acrithxsc 2 etc see also 25 addit refer howev recent becom possibl provid portabl packag access scientif engin commun w walter develop altern fortran 90 packag interv arithmet 38 packag term fortranxsc certain extent portabl version acrithxsc develop upon portabl accur dot product substanti support linear algebra oper contrast interv arithmet modul intlib support packag accur dot product present common elementari function arithmet rigor optim accur adequ mani situat may somewhat faster arithmet fortranxsc interv arithmet modul also design compat acrithxsc sens name support oper c standard fortran77 routin use intlib directli doubl precis tmp12 tmp22 constant interv constant use elementari function end figur 2 exampl interv arithmet directli fortran 77 elementari function match facilit convers acrith program repres function code list solv system nonlinear equat find optima research practition must repres function deriv computerus form thought given begin first use digit comput problem straightforward method program function requir deriv separ subroutin function howev comput code deriv error prone symbol manipul packag produc program deriv given program function howev result express sometim complex lowest term unus finit differ approxim sometim use usual contain signific amount roundoff trunction error furthermor use illog context interv arithmet appli third altern automat differenti see exampl 9 10 15 33 forward mode 33 arithmet oper elementari function overload data type simultan contain function deriv valu backward mode intermedi quantiti obtain evalu function store later combin produc deriv backward mode produc gradient scalarvalu function time proport number oper necessari evalu function also storag requir proport number oper necessari evalu function also represent branch ifthenels evalu function pose difficulti backward mode use see 15 paper 11 function represent scheme relat backward mode automat differenti particular use oper overload code list data type defin fortran 90 modul overload exampl actual sequenc comput oper addit two code list variabl consist write numer code identifi oper addit well address operand file complet result execut program defin function file contain sequenc oper function inform term linear represent sinc loop construct explicitli appear 2 exampl program gener code list appear figur 3 result run program appear figur 4 first row figur 4 give dimens inform number depend vari abl number independ variabl number intermedi quantiti produc comput number constant two type number condit branch 3 next four row identifi oper operand address result address exampl oper 22 multipl constant oper 5 take squar oper 20 addit oper 23 addit constant row 6 identifi intermedi quantiti 5 depend variabl last two row contain valu constant row code list associ give complet detail definit code list well complet descript syntax capabl code list variabl type separ user guid may think code list defin sequenc relat 2 also term wengert list r e wengert 40 3 see x4 explan condit branch program illustr use modul overload gener list program testfunct use overload typecdllh dimension1 f outputfilenamefunctestcdl end program testfunct figur 3 simpl program gener code list figur 4 code list file function figur 3 nop total number oper evalu function oe repres elementari arithmet oper gamma standard function sin exp power code list differ automat differenti appli cation sinc valu initi store symbol inform sequenc oper defin function thu code list place global storag made avail modul principl use routin requir specif function data routin may includ subroutin comput residu gradient jacobi matric either origin system expand system form assign variabl intermedi quantiti solv one variabl term anoth 4 contrast scheme code list present make attempt identifi activ dead variabl ie restructur code list reduc number row identifi intermedi quantiti longer need cours function evalu context must think code list defin relationship among intermedi quantiti mere prescript obtain final depend variabl valu particular use relationship intermedi quantiti produc evalu function reduc overestim final result see 16 22 28 repres condit branch mention x3 condit branch pose problem gener code list oper overload sinc straightforward execut program contain condit branch result differ code list depend current valu branch variabl sinc think inde nonlinear equat global optim algorithm use intermedi quantiti variabl number variabl system would dynam chang howev condit branch import variou applic involv nonlinear system global optim exampl graphic comput intersect bspline surfac would requir work function specifi condit branch reason design special branch function chi result code list contain intermedi variabl condit branch well inform concern particular branch valid function deriv routin interpret code list appropri depend valu branch variabl also obtain interv inclus function deriv evalu branch necessari decis variabl take interv valu thu desir uniform environ interv standard float point arithmet storag 4 possibl solv one variabl term anoth sinc invers known elementari oper tight bound rang invers without linear invers may consist one point case intersect origin valu intermedi variabl return list result interv end figur 5 ordinari condit branch describ chi figur 6 branch symbol represent wast function return x q x 0 x r x 0 x q x r otherwis 5 exampl suppos wish program condit branch figur 5 repres complet function definit may write simpl program figur 6 code list produc program appear figur 7 oper 27 line 4 code list repres branch function equat 2 note branch condit statement appear code list 6 last row figur 7 give address quantiti x use branch decis interv arithmet devis natur rule evalu different within function describ x5 exampl deriv chi defin follow 5 case result may consist two interv 6 multipl occur second row power occur third row figur 7 simpl test characterist function handl ifthenels use overload typecdllh dimension1 f outputfilenamefchitscdl end program fchit figur simpl illustr branch function figur 7 code list produc program figur 6 basic formula symbol differenti code list contain chi x q x q x r x q x r differenti respect decis variabl problemati cal numer differenti may use x r point els rigor comput actual branchandbound algorithm ever domain subdivid region x constant sign symbol differenti done unless assum x may set xsxq xr xs case occur exampl describ continu spline though arriv structur independ handl condit branch similar treatment logic variabl describ 5 use code list obtain function deriv valu packag includ interpret routin evalu function deriv interv float point data capabl present develop 1 comput depend variabl given independ variabl interv float point data type 2 comput jacobi matrix depend variabl respect independ variabl given independ variabl 3 comput jacobi matrix depend variabl respect independ variabl given intermedi quantiti evalu function 4 comput intermedi quantiti independ variabl forward sweep code list 5 comput jacobi matrix intermedi quantiti respect intermedi quantiti 6 solut one intermedi quantiti term other use specifi relat code list 7 comput hessian matrix tensor depend variabl respect independ variabl given independ variabl code list along dimens inform access routin fortran 90 modul workspac alloc dynam main program devic fortran 90 case state ment case correspond oper defin code list 7 depend compil implement construct interpret code list effici also use intern represent modul allow particularli simpl user interfac exampl interv valu function obtain statement 7 techniqu natur way interpret code list first suggest author privat convers arnold neumaier programm oblig assur independ variabl valu array x array fval enough storag hold depend variabl valu 8 seen equat 1 except branch statement equat 2 elementari oper two operand one result thu think intermedi quantiti depend variabl definit equat independ variabl intermedi variabl new independ variabl jacobi matrix result expand system three nonzero entri row assum matric must store effici store twodimension array whose row bound 3 inform column nonzero element occur given row alreadi avail code list refer jacobi matric store data structur expand jacobi matric 9 use backward substitut process comput jacobi matric origin depend variabl respect origin independ variabl expand jacobi matric techniqu known research automat differenti elimin entri column expand jacobi matrix correspond intermedi variabl row correspond depend variabl jacobi matrix depend respect independ variabl occur column correspond independ variabl experi 16 hint method achiev tighter interv enclosur origin jacobi matrix straightforward evalu particularli true bound intermedi quantiti obtain function evalu tighten use relationship among intermedi quantiti overal complex routin nop number oper requir evalu function neq number compon function ie number depend variabl complex better forward 8 unfortun exampl also illustr minor inflex complic devis routin fortran 90 work effici syntax fval array user data type without preset size due technic aspect standard relat lack automat garbag collect 9 techniqu propos xiaofa shi privat convers mode matrix least mani row column easier use independ tighten interv bound intermedi quantiti backward mode 6 symbol differenti code list sinc elementari relationship elementari oper oe equat 1 deriv respect operand may produc code list deriv tensor given code list origin depend variabl design set oper code list close differenti differenti view symbol sinc input defin represent function independ argument valu output similar represent howev differ tradit symbol differenti manipul sinc algebra express store element relationship defin particular represent function routin output deriv code list exactli form function code list routin mention x5 thu appli deriv code list obtain numer interv float point valu higherord deriv exampl altern use jacobi matrix routin would symbol differenti code list use function routin differenti routin also principl appli indefinit number time output deriv arbitrari order sever issu aris techniqu first higherord deriv tensor function mani independ variabl exhibit everhigh sym metri scheme meant highord deriv thu take account symmetri reduc redund storag oper exampl may possibl improv scheme use idea 31 second mani compon higherord tensor typic zero possibl use idea 6 gener deriv code list contain structur inform storag econom third issu extent applic deriv code list size deriv code list larger origin list much larger depend implement differenti scheme function altern interpret origin function code list routin directli comput numer valu higherord deriv give detail deriv code list elsewher interest relat treatment backward mode automat differenti obtain higherord deriv appear 4 7 box list nonlinear equat optim interv method nonlinear algebra system global optim involv exhaust search domain see algorithm 14 x911 26 30 pp 7778 35 p 111 etc exhaust search algorithm recurs subdivid initi box b produc list l sub box box l process box remov insert l particularli global optim algorithm element list order eg lower bound function valu correspond box recapitul consider introduct softwar employ list 1 inform coordin box b correspond approxim root critic point whether comput exist test proven exist root critic point b bound rang object function case optimiza tion store box inform may chang algorithm 2 possibl insert box list logic separ part algorithm exampl gener bisect may produc two box one insert list later consider see 18 etc altern substitutioniter process first advoc 22 comput branch squar root strictli posit interv would also lead two box furthermor divis zerocontain interv interv gaussseidel step subsequ intersect extend interv origin interv could lead two interv 3 maximum number box l known priori gener softwar even research code abl handl arbitrari dimens effici respect eas use storag comput time 4 easi modifi research code easi maintain product code easi read type code fact lead follow conclus ffl inform associ box b encapsul deriv data type simpl support creation destruct element data type provid ffl storag list l alloc freed dynam list oper encapsul made gener done dynam link list form describ 3 x82 data type b associ node creat two box data type one optim one gener nonlinear equat well list data type integ inter val oper list includ insert remov first element purg oper global optim print check whether list empti creation list oper gener routin name use box type exampl statement insert item b list l l list type b item correspond type storag creat list element element insert reclaim element remov box associ interv vector list routin read dimens interv vector code list alloc precis amount storag necessari oper list make heavi use fortran 90 pointer variabl depend hardwar compil implement oper involv dynam alloc involv larg number machin op erat howev oper list within enclosur method code typic occur infrequ compar comput thu appropri context deal integ list known maximum size eg variabl indic use simpl array may appropri summari conclus futur work use new fortran90 capabl design system develop numer nonlinear equat global optim code featur system includ interv data type special symbol implement automat differenti iter defin special characterist function allow consider condit branch also suppli variou routin obtain numer valu list produc automat differenti final suppli dynam data structur exhaust search algorithm new system elimin much program burden develop test interv noninterv nonlinear equat optim code futur work includ improv storag structur higher deriv mention x6 develop addit function oe allow code list exampl may provid userdefin elementari function may also allow linear form like p np x independ variabl sinc evalu express lead exact rang 9 acknowledg wish acknowledg refere editor john reid quick care read use suggest r introduct interv comput programm guid fortran 90 revers accumul accur round error estim taylor seri coeffici augment precompil automat differenti larg spars system collect test problem constrain global optim algorithm chain rule revisit scientif comput chain rule revisit scientif comput automat differenti al gorithm theori solv larg system nonlinear constraint applic data model global optim use interv analysi method fast automat differenti applic global minim method multidimension case abstract gener bisect cost bound interv newton precondition interv gaussseidel method intbi portabl interv new tonbisect packag algorithm 681 decomposit arithmet express improv behavior interv iter nonlinear system iii review precondition interv gaussseidel method interv branch bound algorithm bound constrain optim problem intlib portabl fortran77 elementari function librari cluster problem multivari global optim intlib reason portabl interv elementari function librari precondition select heurist effici iter decomposit arithmet express nonlinear system rigor comput surfac patch intersect curv method applic interv analysi effici method numer evalu partial deriv arbitrari order interv method system equat automat differenti techniqu applic introduct scientif comput languag pascalsc new comput method global opti mizat interv analysi comput graphic test result global optim algorithm fortranxsc portabl fortran 90 modul librari accur reliabl scientif comput acrithxsc fortranlik languag verifi scientif comput simpl automat deriv evalu program softwar interv arithmet reason portabl packag tr fortransc studi fortran extens engineeringscientif comput access acrith new comput method global optim precondition interv gaussseidel method algorithm 681 intbi portabl interv newtonbisect packag collect test problem constrain global optim algorithm interv newtongener bisect singular near root programm guid fortran 90 decomposit arithmet express improv behavior interv iter nonlinear system interv analysi comput graphic recent advanc global optim effici method numer evalu partial deriv arbitrari order algorithm 737 intlib softwar interv arithmet reason portabl packag simpl automat deriv evalu program express pars rigor comput bound solut practic nonlinear system ctr r baker kearfott algorithm 763 intervalarithmet fortran 90 modul interv data type acm transact mathemat softwar tom v22 n4 p385392 dec 1996 jianwei dian r baker kearfott exist verif singular nonsmooth zero real nonlinear system mathemat comput v72 n242 p757766 1 april mihli csaba markt tibor csend andr erik csallner multisect interv branchandbound method global optim ii numer test journal global optim v16 n3 p219228 march 2000 r b kearfott dawand k du c hu algorithm 737 intliba portabl fortran 77 interv standardfunct librari acm transact mathemat softwar tom v20 n4 p447459 dec 1994 min ho chang young cheol park taiyong lee new global optim method univari constrain twicedifferenti nlp problem journal global optim v39 n1 p79100 septemb 2007