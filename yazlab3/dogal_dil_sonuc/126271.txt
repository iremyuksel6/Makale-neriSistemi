adapt program adapt program one chang behavior base current state environ notion adapt formal logic reason adapt program present logic includ sever composit oper use defin adapt program term given constitu program program result composit retain adapt properti constitu program author begin discuss adapt sequenti program extend discuss adapt distribut program relationship adapt selfstabil discuss case studi construct adapt distribut program token circul ring process present b introduct adapt program one chang behavior accord environ often motiv chang program behavior satisfi perform criteria perform one behavior superior behavior environ case adapt techniqu perform optim dynam environ anoth reason chang program behavior logic correct one behavior correct certain environ case adapt matter program function properli chang environ paper investig particular class adapt program follow exampl motiv investig ffl consid system distribut process commun via share bu instanc process use either one two protocol control access bu ethernetlik protocol 11 tokenr protocol 9 ethernetlik protocol perform well period low content small number process need use bu perform poorli period high con tention hand tokenr protocol work well period high content less effici ethernetlik protocol period low content system dynam switch ethernetlik protocol tokenr protocol base activ bu ideal switch one protocol anoth occur instantan process howev system distribut may short period process switch protocol process ffl resourc alloc program requir minim amort cost resourc alloc two strategi employ resourc alloc pessimist strategi optimist one compar amort cost two strategi happen pessimist strategi lower cost worstcas resourc request signific proport resourc request otherwis optimist strategi lower cost program monitor resourc request time time switch one strategi anoth appropri ffl distribut system traffic control traffic rout chang optim traffic flow given traffic pattern depend time day time measur local clock may drift apart system execut adapt program optim control traffic spite discrep local clock instanc transit morn afternoon may instantan eventu clock agre afternoon system rout traffic optim afternoon pattern three exampl illustr main characterist class adapt program interest 1 chang environ necessarili occur instantli may occur gradual short period time traffic control exampl clock may indic chang environ other may continu second due drift clock clock indic chang environ 2 period chang environ rel short usual follow long period stabil traffic control exampl 24hour day divid say three period morn afternoon night environ remain unchang period chang end period thu chang environ follow long period stabil environ remain unchang hour 3 period chang environ adapt program behav arbi trarili word noth assert program behavior period hand period stabil environ remain unchang adapt program secur behavior consist current environ traffic control exampl control program behav arbitrarili short period eg second environ switch morn afternoon environ settl afternoon period control secur behavior optim afternoon traffic pattern paper environ program defin set input variabl read written program assum program comput environment chang asynchron time program execut valu input variabl chang arbitrarili consequ difficult say case correct adapt instanc respons environment chang adapt program may compens comput choic new time choic effect environ may chang input variabl long scenario repeat adapt program behav appropri current valu input variabl notion adapt program somewhat similar notion selfstabil program 2 3 6 10 selfstabil program properti comput lead maintain legitim state arbitrarili chosen initi state arbitrari state initi state selfstabil program special attribut consequ selfstabil program interest prevail transient fault program state follow transient fault effect new initi state way view environment chang transient phenomenon adapt program converg appropri behavior paper formal definit program adapt present logic properti definit also present oper combin adapt program retain adapt properti begin discuss adapt sequenti program section 2 3 extend discuss adapt distribut program section 4 5 section 6 investig relationship adapt self stabil section 7 outlin case studi construct adapt distribut program token circul ring process section 8 contain discuss applic propos method conclud remark section 9 2 adapt sequenti program section concept program program comput defin characterist properti adapt program call secur also defin although definit restrict sequenti program extend distribut program section 4 let sequenti program defin set variabl set action everi variabl v prescrib domain either input variabl intern variabl action guard assign form p c p predic variabl v c assign statement assign valu intern variabl statespac cartesian product domain variabl v state element statespac thu denot valu variabl v state predic boolean function statespac valu state predic p true state say p hold r state predic p input predic program denot input p simpli input p understood iff p predic whose definit make refer intern variabl transit order pair state r action p c p hold obtain r replac valu intern variabl indic assign statement c r transit p hold say enabl r note definit transit introduc nondetermin one transit may origin state r one action enabl r comput sequenc state everi consecut pair transit empti singlest sequenc therefor comput prefix suffix comput comput restrict scope prefix suffix follow prefix comput finit sequenc suffix comput suffix respect finit prefix suffix nonempti comput nonempti comput comput maxim iff proper prefix comput maxim comput either infinit exist transit origin last state comput sequenti program adapt iff properti interest state term follow secur relat secur q adapt iff p input predic maxim comput p hold state comput exist suffix comput q hold state suffix conveni write p secur q program understood oper interpret p secur q follow p input predic fals possibl environ set valu input variabl program p satisfi p satisfi program converg accord situat q hold continu hold indefinit q satisfi environ chang subsequ program transit effect constitut new comput definit adapt appli new comput exampl 1 consid follow program three input variabl b c one intern variabl z two action input variabl b c intern variabl z action program prove b two proof oblig definit secur first b 0 input predic b input variabl second consid maxim comput b 0 hold state first action enabl state comput thu first transit comput establish b subsequ transit leav state unchang complet proof b similarli shown b 1 secur secur properti program prove appeal definit secur deduc follow infer rule correct rule establish definit secur proof given appendix input p secur true secur q secur q input r r r secur q secur q q p secur r weaken secur q r secur junction properti secur deriv variou combin rule instanc input p secur p stabil deriv truth sharpen rule similarli fals secur r falsehood deriv stabil weaken rule 3 composit sequenti program adapt program compos combin smaller adapt program compos program retain secur properti constitu program section describ two type composit level hierarch level composit combin two program equal role result composit program hierarch composit combin two program one program subordin composit appli repeatedli combin finit number program singl program 31 level composit level composit principl tool construct adapt program prerequisit level composit two program compat secur properti compat syntact restrict variabl program given two sequenti program compat hold iff variabl name type program note type variabl determin whether variabl input intern variabl also determin domain valu variabl note also compat two program difficult achiev renam variabl one program name common program compat assur let two compat sequenti program let e input boolean variabl occur let e denot program w b w union feg variabl variabl b union two set action first set contain action program action second set contain action action e p base definit follow rule prove secur q p secur r compat secur q e secur r e level composit exampl 2 requir design traffic control program morn program direct traffic either right across even direct traffic either left across consequ propos program intern variabl traffic take valu left right across inspir level composit rule start two adapt program morn program even program two program contain assign intern variabl traffic combin two program use input variabl name morn construct requir traffic control program morn morn program defin follow input variabl wait boolean intern variabl traffic left right across action wait traffic across wait traffic right shown wait secur wait secur result reduc junction sharpen rule true secur wait wait even program defin input variabl wait boolean intern variabl traffic left right across action wait traffic across wait traffic left symmetri adapt properti true secur wait wait requir traffic control program morn input variabl wait morn boolean intern variabl traffic left right across action morn wait traffic across morn morn morn follow adapt properti program morn obtain level composit rule simplif result true secur wait wait morn wait morn oper view simpl exampl consid effect chang program environ environment chang enough environ static long enough execut one action morn assur program correctli adapt current environ assign traffic appropri valu environ chang execut action assign traffic may inappropri howev secur specifi behavior environ chang comput soon environ stabil long enough complet execut action program correctli adapt 32 hierarch composit notat hierarch composit program inform mean execut program suspend program termin variabl declar input variabl may intern variabl play role environ prerequisit hierarch composit two program control one sequenti program relat control hold iff variabl name domain program intern variabl variabl restrict input variabl input variabl may intern input variabl follow two definit introduc notat state hierarch composit rule let idlet sequenti program denot conjunct negat guard action ie thu idlet hold state action enabl let two sequenti program control let denot program w b w union variabl variabl variabl thu variabl intern program also input program intern program w b union action two set action first set consist action program second set contain action p c program action base definit follow rule prove secur q secur r control p secur r hierarch composit oper interpret rule follow suppos execut program start state satisfi p q state action enabl execut secur q action form disabl execut action continu q establish ensur idlet state action becom enabl execut secur r note notion hierarch composit less similar notion superposit chandi misra 4 exampl 3 let program defin follow input variabl clock intern variabl morn boolean action clock morn true morn fals straightforward show program suitabl hierarch composit composit program morn exampl 2 proof consist four step first shown secur morn second shown third condit follow level composit rule morn secur wait wait traffic right morn fourth intern variabl traffic morn appear therefor control morn thu hierarch composit rule appli combin two program morn one program morn result wait wait 4 adapt distribut program distribut program defin sequenti program meet addit constraint impos partit variabl set action set therebi definit adapt compat composit section 2 3 straightforward extens distribut program distribut program pair ff sequenti program ff partit variabl v action subject follow constraint ff partit v collect set partit action set everi assign statement c assign valu variabl v note set fv fa g may empti definit distribut program ff may interpret collect sequenti program call process process defin correspond set variabl action defin partit ff w set variabl appear v observ given sequenti program may mani choic ff satisfi definit distribut program partit possibl case ff singl process also notic wherea ff partit v disjoint set process may share variabl provid two process assign variabl thu ff locat variabl exactli one process process may read write variabl locat process input variabl exempt consider sinc process write input variabl locat input variabl arbitrari exampl ff could place input variabl v k let k empti practic locat input variabl signific consider distribut system develop special rule section 5 deal concern comput distribut program ff exactli comput sequenti program model concurr interleav comput ff interleav comput process definit secur distribut program follow secur q ff iff ff distribut program p secur q concurr definit rule reason secur properti sequenti program extend straightforward way reason secur properti distribut program 5 composit distribut program two distribut program combin combin correspond process end extend notion level hierarch composit distribut program 51 distribut level composit start extend notion compat distribut program compat everi variabl x name x assign assign k definit compat intend preserv structur ff fi composit program consist ff fi partit variabl composit program rank ff fi exampl definit assur two process composit program write common variabl note requir made simplic instanc defin ff 0 pad partit variabl given ff empti set satisfi rankff 0 let e vector input boolean variabl two predic all noe follow given two compat distribut program ff fi let e vector boolean input variabl occur neither distribut level composit compat distribut program written ffet fi denot distribut program whose process fs secur q ff p secur r fi secur q ff e fi secur r ff e fi distribut level composit proof rule similar proof level composit rule given appendix 52 distribut hierarch composit let ff fi two distribut program fi control ff iff rankfi control suppos ff control fi distribut hierarch composit ff fi written fi ff denot distribut program whose process order distribut hierarch composit desir adapt properti defin follow properti distribut program comput let ff distribut program ff fairund p hold iff everi comput ff p hold state everi suffix comput contain transit everi rang 0 secur q fi q secur r ff p secur r fi ff distribut hierarch composit proof rule similar proof hierarch rule appendix note may possibl partit comput fi ff transit correspond fi preced transit correspond ff instanc possibl action j execut later action k execut k 6 j possibl composit fi ff guard correspond j action depend idlet j depend idlet k howev within process action prioriti action long action k k enabl eventu execut thank ff fairund p assur continu execut ff depend action k k action prioriti k action thu ff prevent eventu progress fi composit program 6 adapt selfstabil section discuss relationship adapt selfstabil mani case adapt appear gener selfstabil start defin notion selfstabil term model comput sequenti program predic q selfstabil q iff maxim comput partit prefix suffix state prefix satisfi q state suffix satisfi q definit selfstabil predic q stabl close respect comput state satisfi q reach subsequ state also satisfi q literatur selfstabil 3 2 6 predic q typic predic intern variabl program howev definit also permit q refer input variabl q refer input variabl mean legitim state depend environ selfstabil program also adapt environ thu view selfstabil particular type adapt relationship selfstabil adapt state rule selfstabil q true secur q easili proven definit secur selfstabil convers rule hold gener true secur q program impli program selfstabil q program true secur q hold predic q stabl exist transit form r r satisfi q satisfi q section 7 contain exampl usual true secur q hold exist predic r r q program selfstabil r case kind convers relationship adapt selfstabil howev follow exampl demonstr instanc true secur q impli underli selfstabil exampl theoret interest exploit nondetermin model comput let z program intern variabl x domain 012 action straightforward show true secur x 6 2 z everi maxim comput whose initi state suffix everi state also everi maxim comput whose initi state x 1 suffix either everi state x 0 everi state refut possibl r satisfi z selfstabil r r expans r four possibl r fals four case exhibit maxim comput partit satisfi z selfstabil r first z selfstabil fals maxim comput z nonempti second z selfstabil maxim comput consist state third z self stabil maxim comput consist state fourth z selfstabil x 6 2 due follow maxim comput nonempti sequenc follow state follow infinit sequenc state end refut 7 case studi adapt token section appli two distribut composit rule level hierarch construct adapt distribut program token circul ring process construct proce three step first two distribut program present program token circul ring process two program differ polici token circul second two program combin use distribut level composit rule form adapt program whose behavior switch behavior two constitu program third adapt program combin control program use distribut hierarch composit rule control program select base current environ two constitu program execut two constitu program differ polici circul token one program circul token continu busi token program circul token process current holder request token lazi token busi token behavior reason environ token request frequent differ process lazi token behavior reason environ token infrequ need adapt program switch two behavior accord observ frequenc token request 71 busi token busi token program henceforth call busi continu circul one token among set n process busi j fs process defin follow intern variabl x action x program remaind case studi adopt convent subscript modulo n n number process system say process hold token x mod predic homebusi true iff state busi satisfi exactli one process satisfi inform homebusi describ state exactli one process either token token immedi next transit shown true secur homebusi busi proof consist show busi selfstabil l l predic satisfi predic l complic formul proof selfstabil littl common method paper includ proof paper reader find proof 8 case busi selfstabil homebusi exist transit state exactli one token state two token 72 lazi token lazi token program henceforth call lazi circul one token among set n process one process need token lazi j ft process defin follow intern variabl x intern variabl input variabl z action process integ variabl x two boolean variabl z variabl z input variabl indic need token process say process hold token x mod follow predic use guard one action predic hold token i1 token token i1 adapt properti program true secur homelazi lazi homelazi predic hold state exactli one process satisfi 73 adapt token busi lazi token program compat henc compos use distribut level composit rule result composit program busi elazi satisfi all secur homebusi noe secur homelazi program busi e lazi applic environ all noe hold presum all hold environ process frequent requir use token busi program behavior appropri illustr hierarch composit present fulli distribut program obtain consensu all input variabl may arbitrari valu let b array boolean input variabl repres frequenc token requir variabl b true iff process busi e lazi frequent requir token defin program concur j fz j process z defin follow intern variabl intern variabl e input variabl b action ii ii igamma1k function f output boolean valu input nelement boolean array major vote plausibl definit f last line program denot action copi k boolean variabl igamma1k ik shown comput concur finit concur satisfi junction rule follow true secur hold thu process hold imag b vector consequ straightforward show secur all fb secur noe inspect concur control busi e lazi verifi 8 shown concur busi e lazi fairund true hold therefor distribut hierarch composit applic result secur homebusi concur busi e lazi secur homelazi concur busi e lazi 8 applic section address concern relat applic definit composit rule given paper discuss limit methodolog level composit tool construct particular class adapt program domain applic limit definit secur limit abil describ certain aspect program behavior view adapt differ program differ environ tradit mean adapt program typic behavior adapt program seen one program parametr environment input instanc p secur q q specifi constraint input variabl one behavior behavior adapt environ kind adapt behavior call increment adapt instanc adapt behavior better model differ program differ behavior call threshold adapt distinct increment threshold adapt larg methodolog adapt program difficult say view better suit methodolog construct increment adapt program outsid scope paper methodolog contribut limit adapt program threshold adapt appropri signific applic threshold adapt appear 1 present adapt rout protocol problem adapt rout network wellknown 12 optim rout messag destin minimum cost path messag sourc destin network chang cost chang optim rout recomput two distribut protocol selfstabil given 1 calcul minimum cost path network sinc protocol selfstabil increment adapt respond chang network cost one protocol lazi program reach fix point perform comput long network cost chang protocol busi program repetit comput minimum cost path even network cost static turn lazi protocol prefer network chang infrequ wherea busi protocol better rapidli chang network two protocol combin distribut level composit obtain threshold adapt protocol messag rout time switch one protocol comput minimum cost path may incomplet messag could misrout delay lost expect messag retransmiss timeout use toler transient error limit secur relat issu program behavior period environment chang immedi follow chang environ show p secur q enough prove program converg q maintain q converg q program may exhibit undesir behavior exampl adapt program part distribut data base servic transact might lost converg appropri behavior conceiv situat could address prove desir properti hold converg eg prove program behavior converg satisfi safeti properti howev prove properti converg difficult context work definit secur permit specif initi valu program intern variabl instead prove desir properti hold converg recommend applic method paper limit situat unpredict behavior toler data base servic transact lost client servic could resubmit transact question frequent ask adapt distribut system user system know system behav properli distribut system possibl answer question instant user distribut system local view asynchron environment chang possibl inform accumul messag locat could inaccur time inform assembl form global view question pose selfstabil system eg user know system stabil instead attempt answer question directli research typic answer question long take stabi lize adapt program term model correspond question maximum number transit requir correctli adapt current environ question answer adapt program techniqu use calcul cost selfstabil eg see 5 7 although done exampl paper feasibl analyz worstcas scenario bound number transit requir converg calcul upper bound number transit need converg estim given real time taken program transit possibl specifi long period environment stabil must guarante correct adapt program current environ except theoret exampl given section 6 nondetermin maxim comput defi upper bound number transit need converg although claim possibl correctli adapt asynchron chang environ instant chang practic chang environment condit accept often enough approxim adap tiviti order formal notion approxim adapt stronger assumpt environ need synchroni environ program could given domain input variabl may special framework paper address approxim adapt howev tool variabl abstract hierarch composit could use approxim adapt consid instanc scenario environ chang frequent never adequ long period stabil assur proper adapt judici use hierarch composit may possibl buffer chang environ therebi allow subordin adapt program function behavior rather spend effort switch one behavior anoth 9 conclus studi problem adapt distribut system one object studi reason program behavior respect environ use assumpt environ program comput assum comput environment chang asynchron environment chang unpredict model comput simpl depend fair comput control structur therebi result may appeal implement driven interrupt shown even restrict assumpt logic reason adapt behavior possibl restrict assumpt hope result broad applic exampl result appli situat fair comput predict environ second object studi methodolog develop techniqu construct adapt program claim techniqu propos paper constitut possibl solut adapt program even case threshold adapt altern method might resembl follow scenario period environ sampl sampl indic chang behavior effect broadcast quiesc oper initi process acknowledg activ behavior quiesc broadcast start oper initi new behavior method reli distribut synchron start stop behavior even signal start behavior instantan distribut system consequ program individu process deal problem distribut control note behavior explicitli start signal intern variabl initi time start signal detect contrast definit secur assur program eventu behav properli without initi intern variabl desir separ concern adapt concern distribut control led us definit secur depend variabl initi question relat studi merit investig program comput environment chang synchron specif type adapt con sider exampl chang environ sinusoid pattern certain frequenc program adapt chang frequenc anoth question relat composit oper propos roughli speak hierarch composit rule correspond sequenti composit sequenti program languag level composit rule correspond altern construct els sequenti program languag also composit rule correspond iter construct sequenti program languag appendix 101 proof infer rule proof section base definit adapt p secur q form p q definit secur two proof oblig first oblig establish p input predic trivial task verif omit second oblig show everi maxim comput appropri suffix q hold state part proof present case streamlin present observ two case maxim comput either empti nonempti case empti definit secur reduc univers quantif empti rang secur hold trivial therefor maxim comput assum nonempti proof consid maxim comput p hold state observ true tautolog true hold state sharpen anteced maxim comput p hold state exist suffix q hold state therefor p q hold state suffix strengthen consid maxim comput r hold state also hold state anteced p secur q impli q hold state suffix junction conjunct consid maxim comput p r hold state observ p r p p r r anteced applic suffix q hold state suffix hold state therefor suffix q hold state junction disjunct consid maxim comput p r hold state let r transit three case hold hold iii p r hold r predic p r input predic case iiii state case r input variabl valu chang due transit moreov one case iiii hold state case p hold state anteced assert suffix q hold state henc q hold state suffix treatment case ii follow symmetri case iii follow conjunct shown fact 102 proof composit rule proof composit rule defin state project project map state composit program state one constitu program instanc let ffi composit two program let h project state state h exclud variabl appear ffi extend project oper sequenc state elementwis applic observ ae sequenc state ffi p predic variabl p hold state ae iff p hold state hae level composit two part rule conclus symmetr demonstr one part let f project state et state observ maxim comput e e true state f maxim comput complet proof let maxim comput et p e hold state anteced p secur q maxim comput f therefor suffix q hold state therefor suffix q hold state hierarch composit let arbitrari maxim comput proof oblig show p hold state suffix r hold state show two step first partit prefix suffix q hold state suffix second suffix maxim comput turn suffix r hold state remaind proof assum p hold state let f project state state let g project state state first step show exist suffix wherein q hold let maxim prefix action enabl state gffi consid three case case chang miss composit action deriv action enabl idlet hold therefor comput gffi maxim comput anteced secur q suffix gffi q hold state suffix henc q hold state suffix enabl g therefor transit due action deriv program f maxim comput observ first state g constitut maxim comput anteced secur q follow q hold first state g consequ q hold first state also first state f definit q secur r predic q satisfi input q q hold state f henc state case 2 ffi nonempti sinc p hold state action enabl first state g anteced p secur q follow q hold first state g henc q hold first state sinc q input predic program transit deriv action falsifi q therefor idlet q hold state second step show exist suffix wherein r hold let ae suffix q hold state ae assum p hold state ae anteced action enabl gae observ ae maxim comput hold state therefor fae maxim comput anteced q secur r fae suffix r hold state suffix henc ae suffix r hold state r composit rout protocol token system selfstabil uniform selfstabil ring parallel program design foundat cost selfstabil selfstabil system spite distribut control convergencerespons tradeoff concurr sy tem depart comput scienc ieee 8025 token ring access method selfstabil extens messagepass system ethernet distribut packet switch local comput network comput network tr cost selfstabil parallel program design foundat uniform selfstabil ring token system selfstabil selfstabil extens messagepass system ethernet selfstabil system spite distribut control ctr moham g gouda multiphas stabil ieee transact softwar engin v28 n2 p200208 februari 2002 g gouda multiphas stabil ieee transact softwar engin v28 n2 p201208 februari 2002 frdric duclo jacki estubli philipp morat describ use non function aspect compon base applic proceed 1st intern confer aspectori softwar develop april 2226 2002 ensched netherland j beauquier b brard l fribourg f magniett prove converg selfstabil system use firstord rewrit regular languag distribut comput v14 n2 p8395 april 2001 w b prasetya swierstra formal design selfstabil program journal high speed network v14 n1 p5983 januari 2005 marco schneider selfstabil acm comput survey csur v25 n1 p4567 march 1993