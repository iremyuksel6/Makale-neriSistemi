empir evalu performancememori tradeoff time warp abstractth perform time warp mechan experiment evalu limit amount memori avail parallel comput implement cancelback protocol use memori manag share memori architectur viz ksr evalu perform vs memori tradeoff implement cancelback protocol support cancel back one memori object memori exhaust precis number refer salvag paramet incorpor nonworkconserv processor schedul techniqu prevent starvationsever synthet benchmark program use provid interest stress case evalu limit memori behavior experi extens monitor determin extent variou factor may affect perform sever observ made analyz behavior time warp limit memori 1 depend avail memori asymmetri workload cancel back sever memori object one time ie salvag paramet valu one improv perform significantli reduc certain overhead howev perform rel insensit salvag paramet except extrem valu 2 speedup vs memori curv time warp program welldefin knee speedup increas rapidli memori beyond littl perform gain increas memori perform nearli equival larg amount memori achiev modest amount addit memori beyond requir sequenti execut memori manag overhead small compar event granular result indic contrari common belief memori usag time warp control within reason limit without signific loss perform b common belief memori usag time warp control within reason limit without signific loss perform work also suggest limit memori act effect throttl mechan time warp execut tion protocol time warp offer potenti greater exploit parallel perhap importantli greater transpar synchron mechan simul programm time warp demonstr fair amount success speed simul combat model 31 commun network 3 26 queue network 8 digit logic circuit 2 among mani other one major critiqu time warp appar larg ineffici use memori time warp use checkpoint techniqu implement rollback mechan past state process need save enabl rollback addit time warp system may hold larg amount incorrect comput roll back cancel futur thu time warp may ineffici memori usag larg simul may caus sever perform degrad due overhead virtual memori system underli architectur memori util time warp unbound principl even though garbag collect mechan call fossil collect reclaim memori alon may enough complet time warp execut reason amount memori make imper studi techniqu limit memori usag time warp execut perform impact number memori manag scheme propos reduc space usag time warp classifi approach two categori passiv activ passiv scheme reduc averag space util must abort program execut actual run memori infrequ state save 20 increment state save 4 strategi type contrast activ scheme abl run simul within avail memori long minim amount memori avail abl recov memori demand intuit latter scheme attempt retract possibl correct comput andor state ahead virtual time make room recent comput proceed lin 19 18 made comprehens studi space usag memori manag scheme mani approach propos modest amount work investig perform passiv memori manag scheme see exampl 7 even less evalu activ mechan two studi evalu perform activ mechan 1 analyt model specif class homogen synthet simul model develop ii recent work report scheme reclaim state memori demand perform evalu homogen queue network model 25 paper present comprehens empir evalu rollback base activ memori manag protocol call cancelback 15 context also describ effici implement cancelback protocol exist multiprocessor time warp kernel cancelback protocol attract storag optim properti 18 storag optim properti state cancelback protocol abl complet time warp comput within amount memori requir equival sequenti comput howev memori usual give better perform storag optim properti say noth concern perform one expect differ amount memori factor affect perform perform depend heavili implement overhead experiment evalu perform vs memori tradeoff requir one goal studi determin minimum amount memori requir effici execut practic implement remaind paper organ follow section 2 briefli describ time warp protocol defin terminolog use throughout section 3 describ cancelback protocol activ memori manag scheme time warp section 4 discuss specif problem relat effici implement cancelback multiprocessor architectur solut adopt section 5 discuss result synthet simul workload evalu perform cancelback protocol section 6 extend result specif benchmark model section 7 analyz variou factor control limit memori behavior time warp properti applic simul execut system determin factor also indic view limit avail memori way throttl time warp execut conclus present section 8 2 time warp protocol time warp program consist collect logic process lp execut possi bli differ physic processor lp execut timestamp event interact exchang event also call messag use term event messag synonym timestamp indic event virtual time occurr assum specifi applic program discret event simul program virtual time ident simul time event simul event event two timestamp associ timestamp occur call receiv timestamp ii timestamp send lp event schedul call send timestamp shall use term timestamp indic receiv timestamp unless specifi otherwis lp time warp system must process messag schedul timestamp order order guarante correct lp process event timestamp order eg receiv messag call straggler timestamp smaller alreadi process lp roll back correspond event comput process sequenc reexecut includ newli arriv straggler timestamp order rollback entail undo event comput comput event modifi state 1 lp ii send messag possibl lp thu undo event comput entail restor state lp exist prior process event ii unsend messag sent cours process event enabl rollback state lp period save ii neg copi outgo messag save send lp neg copi call antimessag differ sign field origin posit messag event comput undon upon rollback state lp restor past correct copi unsend previous sent messag accomplish send correspond antimessag cancel annihil previous sent posit messag cancel messag alreadi process anoth lp antimessag receiv receiv first roll back possibl gener addit antimessag prior messag cancel order reclaim memori eg process messag snapshot lp state allow oper roll back eg io global virtual time gvt defin 1 note time warp lp share state though extens time warp implement state share proposed9 gvt futur present past send time receiv time send time receiv time receiv time send time fossil collect optimist gener requir figur 1 time warp object gvt lower bound timestamp rollback might later occur guarante progress time warp system alway ensur eventu increas gvt normal gvt defin oper smallest receiv timestamp unprocess partial process messag antimessag system howev memori manag scheme may requir differ oper definit later discuss question gvt defin commit horizon simul event timestamp less gvt refer commit event never roll back irrevoc oper invok commit event perform gener speak storag occupi state reclaim latter oper call fossil collect 3 activ memori manag scheme time warp time warp consum memori store three type object viz copi state vector posit messag neg messag object receiv time 2 earlier gvt call past object object send time earlier equal gvt receiv time later equal gvt call present object object send time therefor receiv time later gvt call futur object see figur 1 appar present messag state one requir correspond sequenti simul simul time equal current valu gvt parallel simul past object commit fossil collect present futur object also call uncommit object 3 2 state vector virtual send time time creat virtual receiv time time use read 3 except present antimessag also commit fossil collect sever techniqu propos reclaim memori remov futur object therebi caus rollback sender correspond object messag sendback propos jefferson origin work time warp 14 flow control scheme messag arriv receiv processs input queue room store receiv process make room send back messag possibl differ one receiv origin sender sender must roll back 4 state sent messag resend messag execut forward natur choic 14 messag sent back one largest send time gafni protocol 11 gener messag sendback remov store object input messag state vector output messag process p run memori discard object input messag return sender messag sendback output messag transmit receiv cancel correspond posit messag p roll back state sent origin posit messag store object state discard p roll back previou state typic store object highest send time select sent back messag sendback gafni protocol storag optim properti may abl complet simul within sequenti amount memori 5 cancelback protocol 15 howev storag optim unlik messag sendback gafni protocol cancelback target share memori architectur singl share pool memori process alloc object share pool return free object pool reclama tion protocol process p need storag object u assum u alway alloc alloc may remain free memori case protocol invok fossil collect fossil collect fail reclaim storag protocol discard store object process exactli gafni protocol free memori discard object may may u object sendtim greater current gvt 6 ie futur object discard lin describ similar protocol call artifici rollback 19 18 process run 4 accommod sendback oper definit gvt must modifi ensur sendback caus rollback beyond gvt messag sendback gvt minimum local clock ii send time messag transit 18 definit also use two 16 implement messag sendback flow control 5 fact shown worst case space usag protocol number processor time sequenti amount memori 25 6 cancelback protocol use origin definit gvt memori fossil collect fail reclaim enough storag process farthest ahead virtual time roll back result cancel free storag rollback distanc consid design paramet effici reason lin recommend roll back process latest local clock second latest local clock process continu certain amount storag reclaim minimum amount storag reclaim paramet lin also suggest integr nonwork conserv processor schedul polici artifici rollback limit number activ processor memori consumpt rate match amount avail memori 18 artifici rollback similar cancelback thu share storag optim properti implement share memori system howev may easier implement mani system exampl need distinguish messag forward revers transit similarli possibl posit messag revers transit neg messag forward transit miss fail annihil howev differ expect creat signific perform differenti thu even though studi investig perform time warp cancelback protocol similar result expect artifici rollback protocol recent preiss louck suggest activ protocol reclaim memori demand involv rollback 25 protocol call pruneback reclaim uncommit state object primarili target distribut memori system pruneback shown outperform artifici rollback certain homogen queue network model 25 effici implement cancelback protocol effici implement cancelback nontrivi practic follow briefli discuss perform issu associ implement cancelback 41 instantan messag deliveri one import problem implement cancelback assumpt zero messag deliveri time 15 real architectur messag send instantan process ask memori rate faster freed cancelback later rate determin speed rollback messag send annihil must fair scheme ensur process ask memori would eventu receiv without provis possibl process furthest behind gvt 7 regul starv forev simul progress starvat easili avoid invok cancelback atom 8 low level synchron protocol record memori request guarante eventu serv serv request firstcomefirstserv order one way ensur although approach avoid starvat may necessarili lead good perform process furthest behind comput gvt regul must wait turn alloc memori comput like critic path may unnecessarili delay implement starvat avoid anoth approach gvt regul given prioriti alloc event buffer reclaim cancelback 9 evid simul alway progress gvt regul starv memori lp may alloc reclaim memori gvt regul success alloc memori make progress scheme also elimin busi cancelback 15 messag repeatedli cancel back regener larg number time 42 n event cancelback invoc cancelback expens global comput involv includ gvt comput fossil collect effici recov one buffer though one buffer suffici buffer equal size implement singl invoc cancelback reduc frequenc time warp system run memori thu global comput cost reduc thu allow one messag buffer reclaim one invoc cancelback protocol call number buffer reclaim salvag paramet paramet similar paramet use lin artifici rollback protocol 18 assum salvag valu n fail fossil collect invok cancelback send back n highest send timestamp futur event entir system note correct standpoint n futur event may 7 cancelback nonzero messag deliveri time new oper definit gvt requir gvt minimum local simul time ii receiv timestamp messag forward transit iii send timestamp messag backward transit ie discard way sender 18 8 perform overhead may excess 9 nonwork conserv processor schedul scheme processor may block even lp map onto may messag process similar scheme also suggest connect artifici rollback protocol 19 18 sent back n highest send timestamp event chosen optimist among futur event thu expect bear greater chanc incorrect other number futur messag less n futur messag sent back shall see later choic salvag paramet significantli affect time warp perform 43 georgia tech time warp system use georgia tech time warp gtwsm sm stand share memori system evalu perform cancelback protocol time warp 5 gtwsm system portabl across share memori multiprocessor port bbn butterfli sequent symmetri sun sparc kendal squar research ksrseri multiprocessor version gtwsm system use studi time warp univers calgari canada univers waikato new zealand saic washington dc experi report paper perform ksr1 process node ksr1 twoway superscalar processor 25 mhz clock process node cach processor cach connect highspe slot ring interconnect interconnect rout data among cach implement data share consist invalid base hardwar cach coher protocol implement share virtual address space amongst process node memori system architectur known allcach tm memori system physic main memori tradit sens architectur effect disk serv main memori thu architectur often refer coma cach memori architectur locat system virtual address space resid possibl one cach cach coher protocol ensur consist respect local refer make machin appear least approxim uniform memori access uma system applic suffici local access certain advantag approxim uma behavior context cancelback protocol protocol requir use singl share pool memori object thu object alloc lp irrespect physic locat object even though object locat remot cach time alloc object automat brought local cach alloc access local object dealloc return free pool one interest design choic gtwsm system use causal pointer implement antimessag messag posit sent pointer left send receiv time send lp receiv lp messag data copi state causal record figur 2 structur memori buffer messag new messag essenti serv antimessag thu messag cancel entail travers pointer annihil appropri rollback necessari messag addit space save save messag copi time match messag antimessag techniqu call direct cancel 8 even though direct cancel possibl share memori system appropri hash techniqu devis distribut memori system emul causal pointer sinc causal structur system repres tree two pointer per event suffici implement causal record use singl logic share free pool fix number memori buffer memori buffer includ storag event messag one copi state vector two pointer use implement causal record see figur 2 state save process event though gtwsm system support differ state size differ lp differ messag size eas experiment analysi shall assum state messag size thu unit memori alloc singl buffer constant size size may vari applic includ necessari data specif kernel eg pointer implement antimessag applic eg messag data state vector lp send messag anoth lp send lp alloc one buffer fill data portion enqueu receiv queue destin processor state causal portion buffer fill messag actual process singl share free list may potenti bottleneck memori alloc dealloc util singl share lock reduc content processor maintain free pool processor fail fossil collect remain free buffer system processor redistribut equal among processor number free buffer less number processor could happen sever memori limit processor request memori alloc buffer free buffer processor cancelback invok note still logic share free pool howev scheme elimin content share pool suffici memori system applic simul program partit sever logic process lp execut event event readwrit lp state send event lp messag send kernel alloc memori buffer share pool applic memori buffer dealloc return share free pool event cancel fossil collect rollback normal nonpreempt 10 howev rollback induc cancelback made preemptiv otherwis system deadlock oper memori constraint evalu global predic gvt comput choos one suitabl event cancelback implement stop processor use barrier synchron lock effici scalabl barrier synchron algorithm call tournament barrier use fast synchron processor resum barrier comput complet global comput within pair barrier optim much possibl comput invok system run memori tri send event synchron barrier processor comput local virtual time lvt parallel take account messag transit gvt comput minimum lvt processor tri fossil collect parallel fossil collect fail reclaim storag one futur event highest send timestamp cancel back accordingli correspond sourc process roll back processor perform barrier synchron complet global comput phase resum normal time warp oper 5 experiment result discuss memori consum sequenti simul form lower bound memori requir time warp 11 thu experi measur memori usag known nonpreempt rollback caus deadlock certain patholog situat eg incorrect event comput may enter infinit loop howev avoid issu system favor simpler implement 11 lower bound achiev practic assum lp state save process pair consecut event follow fossil collect posit messag receiv timestamp less gvt ii neg messag send timestamp less equal gvt iii copi state send timestamp time gener less gvt receiv timestamp less equal gvt thu addit memori beyond seq memori requir sequenti execut addit memori must consum futur object assum past object present antimessag immedi fossil collect thu evalu performancememori tradeoff essenti evalu perform time warp place limit number futur object exist system note experiment testb one type object memori buffer infrequ increment state save use 12 instruct note number futur object depend degre optim ie variat lvt time warp system optim depend sever factor physic parallel execut system homogen behavior lp load balanc amount asynchroni simul system etc construct set experi synthet workload vari degre optim differ way also report experi real simul model two differ commun network corrobor behavior observ synthet workload experi 51 symmetr phold workload phold workload origin describ 10 parameter synthet workload model perform evalu parallel simul system workload constant number messag call messag popul circul among lp timestamp increment select stochast distribut messag equal like forward lp lp map onto distinct processor comput grain per event select exponenti distribut mean 5 millisecond sever experi perform measur speedup messag densiti defin messag popul divid number lp vari speedup measur rel perform sequenti event list simul event set implement splay tree respect time warp simul behavior similar simul symmetr close queue network experi benchmark 8 lp use map onto one ksr1 processor messag popul 256 use gvt regul lp fossil collect state sendtim less gvt lp must copi state sendtim less gvt howev special handl gvt regul lp fossil collect may possibl practic situat lower bound time warp memori usag sequenti amount memori plu space hold one state object per lp addit space constant breviti shall ignor addit space discuss memori buffer unit memori alloc dealloc use techniqu chang total number object use though may reduc size individu object exec time sec addit memori buffer execut time breakdown shown follow order top bottom memori manag overhead tw overhead busi wait memori event comput salvag paramet exec time sec addit memori buffer execut time breakdown shown follow order top bottom memori manag overhead tw overhead busi wait memori event comput b salvag paramet figur 3 execut time profil two differ salvag paramet phold model 8 processor perform time warp monitor obtain detail account execut time processor spend time perform memori manag activ includ gvt comput fossil collect invoc cancelback necessari within barrier synchron lock ii execut code time warp overhead rollback messag cancel messag deliveri etc iii busi wait memori reclaim enabl progress 13 iv comput event perform result follow indic time spent function 511 vari amount memori figur 3a show result first set experi graphic demonstr spacetim tradeoff time warp execut instanc phold workload model amount time spent four activ mention earlier shown figur salvag paramet set 1 set experi categor execut time typic processor see start increas memori minimum amount requir sequenti simul execut time fall rapidli quickli stabil demonstr time warp achiev much speedup four eight buffer per processor unlimit memori execut profil reveal memori manag overhead high low amount memori fall rapidli memori ad low valu system run memori frequent time warp overhead also larg low memori increas number rollback aris invoc cancelback cancel howev declin overhead increas memori less dramat memori manag increas memori system oper optim cancelback rollback replac straggler induc rollback busi wait time memori reduc amount memori increas comput time event almost independ memori also observ distinct knee execut time vs memori curv approxim addit memori equal 60 beyond improv execut time minim increas memori knee import characterist performancememori curv 13 recal gvt regul prioriti alloc memori reclaim cancelback process wait gvt regul make progress 512 effect salvag paramet figur 3b show effect increas valu salvag paramet n figur show execut profil n set 20 modest decreas total execut time increas valu n natur profil respect event comput time busi wait time also differ low amount memori time spent event comput less time spent wait memori comput execut forward roll back via rollback due cancelback rather block wait memori becom avail salvag paramet increas one interest aspect curv increas subsequ reduct event comput time decreas memori seen low valu memori increas due rollback cancelback howev subsequ reduct decreas effect valu salvag paramet turn caus fewer rollback due cancelback effect valu salvag paramet bound number addit buffer avail maximum number futur event system thu addit memori fall specifi valu salvag paramet latter effect valu becom equal memori decreas memori reduc increas valu memori 20 buffer effici still lower high salvag paramet margin improv memori manag overhead reduc execut time small amount effect due less frequent call fossil collectioncancelback figur 4 show variat execut time salvag paramet memori fix near knee execut time vs memori curv 40 memori buffer steadi increas event process time salvag paramet increas number reexecut roll back event howev expect margin drop idl time memori manag overhead increas salvag valu explain shape curv figur 4 curv show exist optim valu salvag paramet maxim perform given amount memori 513 effect messag densiti physic parallel conduct two set experi examin limit memori behavior problem size number processor chang one set experi messag densiti vari keep number processor fix equal 8 number processor vari messag densiti fix equal 32 singl lp per processor salvag paramet valu fix 1 see exec time sec salvag paramet execut time breakdown shown follow order top bottom memori manag overhead tw overhead busi wait memori event comput figur 4 execut time profil vari salvag paramet phold workload memori fix 40 extra buffers1350 20 40 addit memori buffer figur 5 perform phold workload vari memori differ messag densiti 8 processor addit memori buffer figur perform phold workload vari memori differ number processor fix messag densiti 32 figur 5 6 respect performancememori curv speedup shown instead absolut execut time increas messag densiti without chang timestamp increment behavior reduc rollback 14 howev increas messag densiti without chang timestamp increment distribut physic parallel affect rate forward comput event comput per unit real time rate event commit event commit per unit real time thu increas messag densiti increas number futur event turn increas frequenc fossil collectioncancelback invoc henc knee curv occur progress higher memori valu figur 5 behavior also observ figur 6 number processor increas fix messag densiti processor gener larger number futur event fact increas physic parallel contribut pool futur event directli proportion increas increas messag densiti set curv higher overhead per invoc fossil collectioncancelback larger number processor due longer barrier synchron time also respons shift knee toward larger amount memori increas number processor 14 rate progress simul virtual time per unit real time becom slower increas messag densiti messag need process make similar progress virtual time hand timestamp increment chang newli gener messag tend fall increasingli virtual futur destin lp thu reduc rollback addit memori buffer symmetr figur 7 speedup curv vari memori asymmetr phold workload symmetr speedup data shown comparison 52 asymmetr phold workload introduc asymmetri phold workload make process faster chang event granular increas averag number futur event faster process becom overli optimist equival processor differ speed time warp system simul workload otherwis remain ident addit futur messag howev gener overoptimist faster processor would eventu roll back thu knee perform memori curv expect occur posit regardless asymmetri figur 7 show speedup data phold workload symmetr asymmetr case messag popul 256 8 processor two asymmetr case shown half processor 20 slower rest asymmetr 12 ii half processor twice asymmetr 20 slow rest data correspond salvag valu 1 figur 7 demonstr three curv knee approxim memori valu two asymmetr curv knee margin shift toward right higher memori manag overhead cancelback need call frequent overli optimist behavior set curv demonstr number futur event unlimit memori execut sole determin limit memori perform asymmetr model averag number futur event larger mani especi larger virtual timestamp incorrect liabl retract degrad perform limit number cancelback thu symmetr asymmetr phold workload behav similarli compar correspond unlimit memori execut except higher memori manag overhead asymmetr workload observ achiev good perform suffici provid enough extra space sequenti memori requir hold correct futur event futur event may elimin cancelback without affect perform howev reli hypothesi event larger timestamp higher probabl incorrect 53 asymmetri arbitrari flow network model model base simul power distribut grid model sourc node gener event receiv node sink node receiv event send applic node model actual network simul node model lp applic node commun send timestamp messag two type propag nonpropag messag process propag messag result one addit messag sent lp messag sent lp base commun probabl matrix nonpropag messag intend model data transfer result addit commun new messag gener one propag rest nonpropag propag messag process timestamp increment comput base probabl distribut addit granular event comput base anoth probabl distribut number sourc sink applic node commun probabl matrix timestamp increment granular distribut node paramet model model use 22 evalu perform probabilist synchron scheme conjunct time warp chosen instanc model one sourc one sink eight applic node granular event normal distribut mean 10m per event eight applic node six fast rest slow fast node send messag averag timestamp increment 100 slow node send messag averag timestamp increment 1 timestamp increment exponenti distribut fast slow node exec time sec addit memori buffer execut time breakdown shown follow order top bottom memori manag overhead tw overhead busi wait memori event comput salvag paramet 12006001000 exec time sec addit memori buffer execut time breakdown shown follow order top bottom memori manag overhead tw overhead busi wait memori event comput b salvag paramet 202006001000 exec time sec addit memori buffer execut time breakdown shown follow order top bottom memori manag overhead tw overhead busi wait memori event comput c salvag paramet 100 figur 8 execut time profil three differ salvag paramet arbitrari flow network model 10 processor probabl commun group 02 probabl commun group paramet provid signific amount asymmetri simul model 15 number unprocess messag system continu grow progress simul exist unthrottl sourc lp continu gener messag lp never roll back time warp system provid finit amount memori simul cancelback protocol need invok memori manag whenev system run memori cancelback automat reclaim memori undo comput high timestamp thu make room creat memori lower timestamp comput progress vari event set size differ lp simpli vari amount memori measur term number event buffer avail simul arbitrari flow network model provid challeng test case experi limit memori behavior time warp sourc process never roll back quickli consum avail memori even though process remain far behind virtual time 22 observ time warp without throttl simul model real machin memori requir unbound without flow control mechan figur 8 show execut profil workload 10 processor differ valu salvag paramet unthrottl natur sourc process sever asymmetri system model larg number futur event gener need roll back cancelback ensur limit memori execut workload put pressur memori manag system compar previou workload thu knee perform memori curv occur somewhat larger memori valu compar phold salvag paramet valu initi decreas continu memori valu approxim 300 extra buffer reach easi see domin portion execut time goe memori manag overhead especi small memori low salvag paramet one interest aspect set curv larg amount memori modest rise execut time attribut sever loss local program use larg amount memori result cach miss 15 asymmetri control vari number slow fast processor timestamp increment commun probabl chosen paramet data present repres asymmetr behavior exec time sec salvag paramet execut time breakdown shown follow order top bottom memori manag overhead tw overhead busi wait memori event comput figur 9 effect vari salvag paramet constant amount memori arbitrari flow network addit memori 600 buffer frequent need page alloc servic cach miss 16 howev behavior specif ksr architectur reduc use certain buffer manag techniqu improv local refer transpar applic program 24 let us examin execut time vari salvag paramet set figur 8 see execut time improv signific amount salvag paramet increas low valu 1 moder valu 20 larg averag fanout event model larg respons behavior salvag paramet 1 cancelback reclaim memori one buffer time gvt regul need send k event k 1 fossil collect cancelback invok k send hand salvag paramet set valu larger maximum fanout worst case one cancelback invoc per event necessari thu workload see faster improv memori manag overhead littl effect effici increas salvag paramet see figur 9 behavior differ page disk ksr cach protocol valid cach block exist local cach correspond page also exist cach cach block page need valid state page exist cach need alloc less local program cach block miss greater probabl see correspond page miss subsequ page alloc speed eventssec memori homo 14 hot 18 hot figur 10 performancememori curv hypercub network without hotspot 6 experi benchmark simul applic though mani real simul properti exhibit synthet workload describ set benchmark applic studi valid behavior observ synthet workload two benchmark select simul store forward commun network hypercub configur without hotspot traffic ii person commun servic pc network simul mobil commun system benchmark properti observ mani real simul model larg number simul object model lp larg event popul possibl time vari ii small grain comput often 100 per event less ksr1 61 store forward commun network simul network configur hypercub fix size messag popul network messag rout randomli select destin node use ecub rout algorithm 13 messag length select uniform distribut transmiss time proport messag length assum two unidirect link one direct neighbor node hypercub addit transmiss latenc may queue delay link one messag transmit link one time queu fcf infinit buffer capac assum simul model messag reach destin node anoth destin pick random messag reinsert network simul model network queue server associ link servic time server equival messag transmiss latenc simul model servic time precomput messag forward immedi next server suggest 23 improv lookahead henc perform one set experi destin node select use uniform distribut two set experi hot spot introduc node within design subcub 50 probabl destin node introduct hotspot increas rollback load imbal time warp system report set experi 128 lp 128 node hypercub use 8 processor messag popul 2048 see figur 10 salvag paramet valu 100 chosen note messag popul plu one memori requir sequenti simul form lower bound memori requir time warp better local commun subcub hypercub map onto individu processor three differ experi perform first set experi messag destin chosen random use uniform distribut second third 14th 18th node chosen hotspot 50 messag traffic direct toward note sever hotspot load imbal henc rollback also progress simul control hotspot node account loss simul speed concentr hotspot note knee occur approxim memori valu irrespect hotspot though hotspot reduc number correct futur messag simul cancelback forc simul execut smaller amount memori without loss perform increas memori manag overhead due overoptim thu requir memori equival perform balanc effect two opposit forc place knee valu three curv 62 pc network simul pc person commun servic network wireless commun network provid commun servic mobil unit simul model servic area network partit checkerboardlik subarea cell simul model consist cell portabl portabl model mobil unit cell repres cellular 0speed eventssec memori figur performancememori curv pc network differ number processor ceivertransmitt fix number channel alloc portabl repres mobil phone unit resid within cell period time move one four neighbor cell behavior portabl model differ type event portabl move call arriv call complet detail descript applic present 3 pc model view portabl receiv call concern origin call new call arriv cell cell first determin statu destin portabl destin portabl busi anoth call call count busi line portabl busi cell determin channel avail channel busi call count block channel avail alloc destin portabl use call allow connect portabl move anoth cell call progress handoff take place ie channel current use releas new channel must alloc cell enter channel avail call drop cut simul use extens engin pc system call block drop probabl small cell model lp lp also model behavior portabl present grid cell one interest aspect pc simul model selfiniti behavior lp ie lp often send messag advanc simul time pc model portabl gener incom call impart selfiniti behavior lp 3 anoth interest aspect pc model high degre local normal larg number grid cell simul model mani lp sinc neighbor lp map onto singl processor much local commun remot messag selfiniti behavior coupl remot commun make simul extrem asynchron thu possibl overoptimist behavior give rise larg memori usag without form throttl howev rollback thu great major futur event correct figur 11 show performancememori curv pc network model 8 16 processor ksr1 salvag paramet set 100 problem size proport number processor set experi 16 lp model grid cell per processor use note increas problem size proportion increas sequenti amount memori lower bound time warp memori increas number processor scale problem size increas size futur messag set proport proportion increas number addit memori buffer knee littl memori detriment perform primarili two reason high memori manag overhead ii loss physic parallel lack adequ memori forc final execut mani simul event timestamp order rather parallel timestamp order 17 loss parallel repres perform curv larger event execut time cancel correct event rollback follow reexecut correspond sender event b busi wait time memori allow gvt regul progress forc final commit event execut happen timestamp order sequenti execut experiment result give us certain insight limit memori behavior time warp describ 17 note often execut two event outoftimestamp order effici execut timestamp order even though either case process sequenti event may gener outoftimestamp order gener may cpu cycl immedi avail process 71 knee performancememori curv perform data collect studi indic welldefin knee performancememori curv regardless symmetri model system architectur physic model parallel problem size intuit reason follow suppos amount memori increas seq k extra buffer k futur event gener event fanout k allow one event gvt event complet process optimist becom candid commit memori close seq much optim system thu rollback unlik addit k event one event potenti complet execut differ processor commit thu memori increas step k buffer step one addit processor becom busi use work mean parallel ii one event potenti fossil collect fossil collect invoc mean less cancelback less overhead thu perform increas rapidli addit buffer howev soon point reach processor becom busi fossil collect invoc abl collect suffici number fossil system run memori infrequ knee point beyond point perform almost independ amount memori knee performancememori curv good oper point time warp rise perform beyond knee valu margin possibl perform decreas larger valu memori lack local observ arbitrari flow workload experi indic two major factor determin locat knee 1 size futur event pool size futur event pool affect follow rate rate gener new messag ii rate messag cancel iii rate event commit respons growth futur event pool ii iii respons shrinkag given amount memori size determin frequenc fossil collectioncancelback call thu control memori manag overhead event grain small memori manag overhead may domin execut time limit memori push knee toward larg memori valu note experiment data chang locat knee consist chang event granular commun network simul grain size order magnitud smaller synthet workload former knee locat within 150 buffer per processor compar within 15 latter 2 number correct futur event sourc event critic path simul comput salvag storag occupi futur event rollback one sourc uncommit event futur event correct event sourc event recomput regener event sourc event critic path parallel comput recomput critic path slow progress simula tion hand roll back ie incorrect correct critic path uncommit event cancelback littl effect perform thu case logic process systemat ahead virtual time other asymmetri margin affect locat knee seen phold asymmetri processor speed hypercub asymmetri simul model exampl exact locat knee howev predict static without knowledg applic behavior also locat shift dynam chang simul model runtim howev possibl predict approxim locat knee observ behavior time warp runtim rate gener new event rate rollback rate progress gvt monitor predict size futur event pool initi idea regard accomplish found 6 72 effect salvag paramet experiment data suggest optim valu salvag paramet small valu caus cancelback call often caus poor perform due associ overhead larg valu may caus correct comput critic path roll back thu affect perform suggest optim valu somewher explan see profil figur 3a event grain becom smaller lower portion profil event comput time smaller without affect part profil increas fraction chang total execut time per unit chang memori thu fraction chang memori requir 1 amount surplu memori amount avail minu amount need run sequenti simul latter term upper bound salvag paramet larger valu affect perform also observ perform rel insensit actual valu paramet away two extrem indic may crucial determin exact optim valu practic current gener method choos appropri valu salvag paramet given simul applic depend runtim characterist applic predict static howev adapt mechan select salvag valu automat devis studi mani event cancel cancelback actual regener 6 fewer event indic increas salvag valu possibl harmless detail descript adapt mechan beyond scope paper howev sake complet mention ground rule help select reason valu paramet static certain inform applic behavior known optim valu salvag paramet gener increas smaller event grain overhead becom proportion larger ii larger avail memori optim system may critic perform iii overoptim workload may lp oper much higher virtual time other roll back free memori without affect perform ground rule help experiment choos good static valu paramet 73 memori control effect throttl mechan limit memori execut cancelback view throttl scheme artifici limit optim execut time warp program amount throttl depend number futur object gener turn depend amount avail memori throttl scheme suggest literatur differ control eg width time window window base scheme 21 27 28 29 resynchron interv probabilist synchron 22 bound valu bound time warp algorithm among other develop primarili limit amount roll back comput time warp howev control use mechan limit optim indirect relationship amount optim provid system henc may difficult choos appropri valu exampl optim size time window optim bound valu depend densiti event virtual time depend timestamp event simul applic readili clear user particularli intim familiar detail underli simul protocol set control particular applic similarli without elabor experiment knowledg applic imposs set appropri resynchron interv hand amount memori provid time warp system straightforward throttl mechan overoptimist execut studi adapt memori control mechan base principl present elsewher 6 conclud remark cancelback protocol use empir evalu perform time warp program amount memori alloc program limit predetermin valu effici implement cancelback protocol nontrivi real architectur instantan messag send assumpt ii high cost necessari memori manag relat comput gvt comput fossil collect select messag cancel back develop reason effici solut problem summar nonatom messag deliveri may caus starvat addit synchron requir elimin possibl effici synchron scheme alway give prioriti process furthest behind virtual time alloc memori propos implement ii reduc frequenc cancelback call expens cancelback protocol parameter salvag paramet indic number futur event cancel invoc cancelback differ simul model differ degre asymmetri use evalu perform vs memori tradeoff across workload use studi experiment data indic performancememori curv alway welldefin knee perform drop rapidli reduct amount memori beyond signific improv perform increas amount memori perform decreas small amount memori attribut larg memori manag overhead ii loss physic parallel due excess throttl observ larg memori may also lead poor perform due poor local refer virtual memori system thu amount memori beyond knee good oper point time warp program valu salvag paramet also affect perform observ intermedi valu salvag paramet usual best small valu increas memori manag overhead larg valu may caus correct event critic path comput roll back cancelback perform rel insensit salvag valu long set away two extrem valu locat knee appropri valu salvag paramet properti applic program depend event granular physic parallel overoptim time warp system latter depend mani factor includ load balanc behavior simul model larg grain simul least millisecond per event cancelback appropri chosen valu salvag paramet good perform even modest amount memori synthet simul workload consid perform found within 10 maximum possibl perform amount memori 15 fewer addit messag buffer per processor howev mani real simul much less comput within event thu memori manag overhead may domin number addit buffer requir similarli good perform also increas proportion thu conclus possibl deriv good perform time warp execut modest amount addit memori compar amount requir sequenti execut howev requir comput global predic eg gvt select event cancelback take littl time compar averag event granular acknowledg acknowledg encourag professor ian akyildiz initi phase work discuss help christoph caroth develop pc simul program gtw r effect memori capac time warp perform distribut simul larg scale pc network cost state save rollback gtw time warp system share memori multiprocessor adapt memori manag protocol time warp parallel simul compar analysi period state save techniqu time warp simul time warp share memori multiprocessor virtual time machin perform time warp synthet workload rollback mechan optimist distribut simul system advanc comput architectur parallel virtual time virtual time ii cancelback protocol storag manag distribut simul distribut simul time warp oper system time warp mechan databas concurr control memori manag algorithm optimist parallel simul optim memori manag time warp parallel simul select checkpoint interv time warp simul rollback sometim work mimdix oper system parallel simul supercomput parallel discreteev simul fcf stochast queue network buffer manag share memori time warp system memori manag techniqu time warp distribut memori machin benchmark time warp oper system comput network simul limit optim time warp oper system mtw strategi schedul discret simul event concurr execut mtw experiment result constrain optimist schedul paradigm perform evalu bound time warp algorithm tr ctr hironori hibino yoshiyuki yura yoshiro fukuda keiji mitsuyuki kiyoshi kaneda manufactur model architectur manufactur adapt distribut simul system use hla proceed 34th confer winter simul explor new frontier decemb 0811 2002 san diego california francesco quaglia andrea santoro nonblock checkpoint optimist parallel simul descript implement ieee transact parallel distribut system v14 n6 p593610 june francesco quaglia vittorio cortellessa processor schedul problem time warp synchron acm transact model comput simul tomac v12 n3 p143175 juli 2002 kevin jone samir r da combin optim limit scheme time warp base parallel simul proceed 30th confer winter simul p499506 decemb 1316 1998 washington dc unit state samir r da richard fujimoto adapt memori manag optim control time warp acm transact model comput simul tomac v7 n2 p239271 april 1997 yarong tang kalyan perumalla richard fujimoto homa karimabadi jonathan driscol yuri omelchenko optimist parallel discret event simul physic system use revers comput proceed 19th workshop principl advanc distribut simul p2635 june 0103 2005 yarong tang kalyan perumalla richard fujimoto homa karimabadi jonathan driscol yuri omelchenko optimist simul physic system use revers comput simul v82 n1 p6173 januari 2006