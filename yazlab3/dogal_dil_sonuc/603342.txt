highlevel languag support userdefin reduct optim handl reduct parallel supercomput cluster workstat critic high perform reduct common scientif code potenti sourc bottleneck yet mani highlevel languag mechan write effici reduct remain surprisingli absent mechan exist often provid flexibl programm need achiev desir level perform paper present new languag construct arbitrari reduct let programm achiev level perform equal achiev highli flexibl lowlevel combin fortran mpi implement construct zpl languag evalu context initi na mg benchmark show 45 time speedup code written zpl without construct addit perform larg number processor surpass achiev na implement show mechan provid programm need flexibl b introduct reduct requir care compil two reason first abound scientic code exampl use algorithm imag process comput geometri kernel matrix multipl sort test converg iter algorithm often test converg repeat frequent interv throughout program second perform often whole program perform suffer reduct poorli optim left unoptim unoptim reduct sequenti sourc signic unnecessari commun reduct nontrivi parallel depend loop iter violat known oper function associ reduct map array n dimens array less n dimens scalar map collis two array element map part result must occur result necessarili smaller origin array resolv collis element map locat combin oper almost alway binari moreov binari oper usual associ commut oper associ parallelprex method 11 use parallel reduct oper commut comput might optimiz parallel comput essenti take advantag associ compil parallel comput otherwis potenti parallel left unexploit exampl reduct consid follow two full sum reduct array integ oper addit result sum everi integ array partial sum reduct often call histogram reduct 2d array integ oper addit result either column integ sum integ row row integ sum integ column addit summat common reduct includ follow determin minimum maximum valu array nding locat minimum maximum valu array calcul logic bitwis element array paper introduc parallel languag construct let programm explicitli specifi arbitrari reduct compil fail exploit associ parallel reduct report implement construct context zpl languag 18 highlevel parallel languag includ reduct repertoir devic fewer allow specic arbitrari reduct languag like nesl 3 zpl prior introduct mechan suppli number builtin reduct mention let programm dene though languag like c 12 13 sac 16 userden reduct mechan allow reduct written efcient mechan introduc rest paper organ follow section 2 consid tradeoff variou program approach reduct section 3 introduc zpl languag section 4 present mechan efcient support arbitrari userden reduct context zpl section 5 quantit evalu mechan section 6 7 discuss relat work conclud program approach reduct section concern variou approach one take program parallel supercomput cluster workstat particular focu easi write reduct use given approach level perform like achiev approach consid follow use automat parallel reli parallel compil assist programmerinsert direct employ messag pass librari write code highlevel languag 21 automat semiautomat parallel research relat improv stateoftheart program practic regard reduct lie umbrella automat parallel approach program easi write code singl processor programm compil sole respons exploit parallel tradit pattern match idiom recognit use parallel reduct 4 14 sophist techniqu recogn broader class reduct also examin 8 19 commut analysi 15 promis yet anoth effect techniqu howev undecid problem determin whether function associ 10 moreov even function technic associ salient part calcul might exploit associ function sufcient necessari function associ automat parallel invalu techniqu quickli improv perform larg legaci code written sequenti processor one expect achiev consist high perform mani use differ reduct compil ever abl identifi parallel reduct moreov compil might justiabl determin reduct paralleliz even programm abl determin new observ compil need assist parallel code observ lead develop high perform fortran hpf 9 hpf limit risk critic section code left unpar allel reli programm insert direct code programm write sequenti program ordinari fortran add data layout direct therebi creat hpf program programm hpf achiev success still suffer mani problem encount programm reli fulli automat parallel compil suppos recogn reduct parallel accordingli 22 messag pass librari messag pass librari shift respons exploit parallel programm detail commun account larg portion code 6 valuabl time must spent write addit programm must write comput base perprocessor view system neg impact code readabl maintain underestim spite problem approach program parallel comput standard method employ scientist demand high perform reduct difcult write use messag pass librari mpi 17 come rich set builtin reduct occasion reduct programm want write set case mpi mechan allow userden reduct programm must write function use processor combin local result function associ datatyp use standard reduct function call exampl see code appendix assum reduct return minimum element array well locat absent builtin set reduct mpi librari disadvantag use messag pass librari mean program lowlevel perprocessor view system even though simpli need ad support userden reduct overal complex level higher next approach consid 23 highlevel parallel languag highlevel parallel languag like messag pass librari use programm want guarante parallel reduct written high level languag guarante parallel advantag messag pass librari twofold detail commun hidden programm view comput global ie perprocessor level disadvantag certain level control lost languag provid userden reduct like nesl zpl mechan paper implement programm often must write grossli inefci code reli simpl builtin reduct accomplish could easili done complic reduct exampl suppos programm want determin two smallest element larg array ideal processor would comput two smallest element part array own processor reduct could comput pair processor compar four element two smallest element processor determin smallest two element processor associ oper parallel prex method use reduc two smallest element processor parallel highlevel languag suppli builtin reduct includ one singl smallest element array well locat array identi efcient solut unwork instead must nd smallest element array replac element maximum valu nd second smallest valu use reduct final replac smallest valu array left origin state clearli inefci motiv need power languag construct allow arbitrari userden reduct note case zpl mechan implement best reduct could use nd two smallest element reduct determin smallest element array locat even less efcient algorithm nding smallest two element array would use paper improv upon userden reduct mechan previous propos highlevel parallel languag languag construct add zpl languag let programm achiev perform hitherto achiev messag pass librari 3 brief introduct zpl zpl highlevel dataparallel arraybas languag use program parallel comput high perform desir even develop time limit rel simplic pascallik feel make easi read un derstand yet also retain sophist model parallel reason implement userden reduct zpl choos introduc languag construct context zpl note howev construct sufcient gener appli highlevel parallel languag section introduc featur zpl languag relev paper interest reader refer user guid 18 31 region array central zpl region 7 region index set associ data declar two region r bigr bigr set r n n index set refer nonbord portion bigr write follow region region use two context first use declar parallel array array declar region parallel distribut processor manner speciabl runtim declar three integ array b c index set given bigr write nonparallel array also call index array declar use keyword array array replic processor guarante contain data processor declar ten element array integ replic consist processor write note region associ declar index set instead speci array keyword second use region implicitli signal parallel comput exampl sum correspond valu nonbord portion parallel array b store result c write follow line code correspond doubli nest loop nn index set commun sinc interact parallel array distribut way 32 parallel oper commun commun aris certain zpl oper use sinc commun major overhead parallel comput programm avoid oper whenev possibl addit oper correspond less commun use instead oper correspond commun classica tion oper give zpl perform model let programm determin fast slow algorithm 5 basic oper oper oper allow programm refer element offset element array assign import note impli possibl commun particular pointtopoint nearestneighbor commun write comput sum four adjac element array assign element array write follow code note dataparallel comput signal region old valu array valu comput line code occur use updat array expens commun oper reduc oper entail broadcast andor parallel prex commun number builtin reduct zpl languag summat minimum valu maximum valu etc exampl calcul sum everi valu array store rst element array write follow code index array directli index region appli appli instead comput parallel array index sinc would allow arbitrari commun pattern index array index henc name arbitrari index parallel array done bulk use permut oper expens commun oper zpl languag 4 mechan userden reduct ad abil write userden reduct zpl languag overload function overload function correspond differ piec reduct section describ work first present simpl exampl use userden reduct mechan dene one simpl builtin reduct describ two complic reduct implement way illustr everi aspect mechan final discuss miscellan issu relat userden reduct associ commut aggreg 41 basic userden reduct userden reduct zpl easi write overload function reduct oper use ensur perform model remain intact 5 exampl suppos zpl builtin reduct includ sum reduct could realiz comput write code appear figur 1 3 return 0 8 return 9 end sum figur 1 userden sum reduct zpl overload function sum denit sum line 14 figur 1 initi function line 69 reduct function full reduct nding sum everi integ array parallel implement work follow way processor singl variabl type integ use accumul local sum processor variabl initi initi function processor variabl repeatedli assign result reduct function appli everi element array resid local processor accumul variabl final function use combin accumul valu pair processor use parallelprex method last step done number step order logarithm number processor 42 gener userden reduct minten reduct gener three function must use correspond three phase reduct initi local reduct global reduct initi phase local accumul valu initi local phase local function appli local accumul valu valu array resid local processor global phase global function appli accumul valu differ processor mani case sum reduct local global phase describ singl function illustr three distinct function might desir consid minten reduct minten reduct given array valu must nd ten smallest valu zpl write reduct figur 2 note efcienc write procedur result return instead overwrit paramet techniqu also appli sum reduct less import case sinc result type small gener specifi userden reduct take array type element return lower rank array type b element overload function follow type must construct b b b b efcienc function may speci form b ab b b done minten reduct symbol correspond either argument result use denot paramet pass refer advantag allow programm distinguish local global function twofold first greater efcienc achiev requir type translat b type reduct second global oper computeintens local function better use faster local function use often cours reduct assum mani array element resid processor realiz advantag minten code would inefci translat array element array ten element contain array element nine maximum valu global function nding ten 6 1 10 tmpval bestvi 19 bestvi newval newval tmpval 22 end 26 28 1 10 29 mintenbestvec1i bestvec2 minten figur 2 userden minten reduct zpl smallest valu two array ten valu computeintens check see singl element smaller element array ten element replac element 43 extens minloc reduct addit let programm write two function efcienc let programm pass extra paramet local function add potenti efcienc exampl write minloc reduct use mechan userden reduct describ point would need translat array valu new type includ locat altern pass extra inform local function minloc reduct similar basic minimum reduct along minimum valu reduct return locat minimum valu array figur 3 contain efcient minloc reduct zpl note use index1 index2 array array storag associ howev thought readonli array gener variabl indexd contain valu ith posit dth dimens dene current region variabl use local portion reduct pass local function speci user ordinari overload function resolut techniqu still appli nal argument accumul valu appendix contain code implement minloc reduct c mpi zpl allow programm level express three function correspond exactli point lowlevel cmpi code 13 bestd 14 bestd 22 min1d min2d 26 minloc index1 index2 figur 3 userden minloc reduct zpl reason condit work done offer zpl programm enough exibl write efcient code 44 associ commut aggreg userden reduct zpl must associ guarante determin correct answer programm respons verifi case consist languag support userden reduct c sac c sac userden reduct must also commut zpl weaken condit assum instead userden reduct commut decis pend result perform studi wherea associ necessari use parallelprex method exploit parallel commut commut advantag certain parallel comput take advantag valu arriv differ order noncommut reduct common exampl given onedimension array one zero length longest sequenc one determin parallel use associ noncommut reduct aggreg import method limit number messag sent messag pass system presenc mani similar reduct proven vital achiev high perform 14 given parallel array element correspond list k element want nd smallest element resid posit list would write k reduct loop k reduct would aggreg zpl compil aggreg occur zpl case userden reduct builtin reduct code appendix signic differ seen global function cmpi zpl implement cmpi implement global function take array reduct element rather singl one zpl global function pass singl element howev zpl compil transform global function one take array element aggreg done automat applic 5 evalu determin effect perform userden reduct ran three version na mg benchmark 1 2 272 processor t3e900 processor run 450mhz 256 mb ram per pro cessor three version na mg benchmark origin na implement f77 mpi zpl implement use builtin reduct zpl implement use userden reduct mechan describ paper focu initi array na mg benchmark work follow first array lled random number second ten largest ten smallest valu identi third twenti valu replac valu 1 1 respect valu array set zero assum ten largest ten smallest valu uniqu time focu second step process figur 4 contain result experi three larg class note class b ident regard initi array processors3296speedup best 2processor time 0404 second initi linear speedup zpl builtin zpl userdefin processors412speedup best 16processor time 0405 second mg class c initi linear speedup zpl builtin zpl userdefin figur 4 parallel speedup na mg initi graph figur 4 show us addit userden reduct zpl languag critic perform although zpl implement use builtin reduct scale almost linearli respect overhead high implement comput 20 reduct reduct return minimum maximum valu array reduct processor scan portion array nd reduc valu found locat determin inform broadcast processor amount comput overwhelm array travers total 40 time zpl implement userden reduct well f77mpi implement array travers anoth point note graph zpl implement userden reduct slightli slower f77mpi implement small number processor within 10 larg number zpl implement continu scale wherea f77mpi implement continu scale result implement differ reect limit express f77mpi implement f77mpi implement avoid userden reduct take advantag local view com putat singl travers array processor nd ten smallest ten largest valu resid portion array twenti reduct use nd valu largest smallest entir array locat inform need broadcast processor local largest valu global largest processor know replac valu 1 contrast done zpl zpl implement locat inform largest smallest valu entir array must broadcast processor maintain global view comput zpl implement user dene reduct scale better f77mpi reduct use singl larg reduct nd twenti global largest smallest valu array smaller processor zpl implement suffer extra overhead involv commun use locat inform global scale 6 relat work idea construct userden reduct new though remain surprisingli absent mani highlevel languag support often efcient possibl support sac 16 limit form one function speciabl global local part reduct make reduct like minten reduct difcult write efcient manner reason discuss section 42 viswanathan laru 20 develop power mechan userden reduct context c languag close resembl construct describ paper howev provid mechan pass extra paramet local function unclear initi phase done whether anoth overload function addit due languag differ mechan userden reduct lead data race higherlevel global view comput zpl elimin worri 7 conclus optim handl reduct parallel supercomput cluster workstat critic high perform reduct common scientic code potenti sourc bottleneck consequ research work dilig techniqu compil programm use reduct execut efcient great stride made domain automat parallel remain hitandmiss approach high perform semiautomat techniqu reli direct improv hit rate perform still often suffer use languag like fortran 77 coupl messag pass librari like mpi remain popular standard consist high perform crucial scientic programm will expend consider effort necessari program fortran 77 mpi messag pass librari difcult use forc programm write program perprocessor basi tedious engin interprocessor commun lose track problem whole highlevel parallel languag promis altern popular standard even wellstudi idiom reduct perform suffer directli done programm fortran 77 mpi often done given highlevel languag either mechan userden reduct one forc programm sacric amount efcienc paper present new languag construct arbitrari reduct let programm achiev level high perform equal achiev fortran mpi evalu approach context na mg benchmark show perform close resembl achiev lowlevel fortran plu mpi approach construct vital high perform make highlevel languag viabl choic scientist acknowledg rst author support doe highperform comput scienc fellowship complet portion work lo alamo nation laboratori would like thank sungeun choi anonym review mani insight comment earlier draft paper work support part grant hpc resourc arctic region supercomput center r na parallel benchmark 20 nesl nest dataparallel languag version 31 zpl wysiwyg perform model compar studi na mg benchmark across parallel languag architectur region abstract express array comput parallel complex scan reduct high perform fortran forum complex commut analysi parallel pre parallel program c compil optim implicit reduct distribut memori multipro cessor commut analysi new analysi framework parallel compil mpi complet refer program guid zpl detect global optim reduct oper distribut parallel machin tr parallel complex scan reduct commut analysi detect global optim reduct oper distribut parallel machin programm guid zpl region defin applicationspecif highlevel array oper mean shapeinvari program facil compar studi na mg benchmark across parallel languag architectur mpi polari complex commut analysi zpl wysiwyg perform model nesl nest dataparallel languag ctr paul van der mark lex wolter gerard cat use semilagrangian formul automat code gener environment model proceed 2004 acm symposium appli comput march 1417 2004 nicosia cypru steven j deitz david callahan bradford l chamberlain lawrenc snyder globalview abstract userdefin reduct scan proceed eleventh acm sigplan symposium principl practic parallel program march 2931 2006 new york new york usa steven j deitz bradford l chamberlain sungeun choi lawrenc snyder design implement parallel array oper arbitrari remap data acm sigplan notic v38 n10 octob lawrenc snyder design develop zpl proceed third acm sigplan confer histori program languag p81837 june 0910 2007 san diego california