optimist distribut simul base transit depend track tradit optimist distribut simul protocol logic process lp receiv straggler roll back send antimessag receiv antimessag may also roll back send antimessag singl straggler may result larg number antimessag multipl rollback lp author protocol lp receiv straggler broadcast rollback receiv announc lp may roll back announc rollback lp roll back respons straggler antimessag use elimin need output queue result simpl memori manag also elimin problem cascad rollback echo result faster simul achiev scheme maintain transit depend inform cost incur includ tag messag extra depend inform increas process time upon receiv messag also present similar two area distribut simul distribut recoveri show solut one area appli area b introduct modifi time warp algorithm quickli stop spread erron comput scheme requir output queue antimessag result less memori overhead simpl memori manag algorithm also elimin problem cascad rollback echo 15 result faster simul use aggress cancel protocol adapt similar protocol problem distribut recoveri 4 21 support part nsf grant ccr9520540 ecs9414780 trw faculti assistantship award gener motor fellowship ibm grant illustr main concept behind scheme help figur 1 figur horizont arrow show direct simul time messag shown interprocess direct arrow circl repres state state transit caus act messag associ incom arrow exampl state transit p1 s10 happen p1 act m0 time warp scheme logic process lp p2 receiv straggler ie messag schedul event back state s20 send antimessag correspond messag m2 receiv antimessag p1 roll back state s10 send antimessag correspond m1 act next messag messag queue happen m0 receiv antimessag m1 p0 roll back s00 send antimessag m0 receiv antimessag p1 roll back s11 scheme transit depend inform maintain state messag roll back s20 due straggler p2 broadcast s20 roll back receiv announc ment p1 roll back s10 find s10 transit depend s20 p1 also find m0 transit depend s20 discard similarli p0 roll back s00 receiv broadcast see p1 abl discard m0 faster compar previou scheme even p0 would like receiv broadcast faster receiv antimessag m1 sent p1 roll back s10 therefor simul proceed faster explain later use incarn number distinguish two state timestamp one commit roll back need lp receiv straggler broadcast timestamp straggler everi lp determin whether need roll back compar local depend inform broadcast timestamp lp roll back respons rollback announc send announc antimessag henc roll back respons strag gler problem multipl rollback avoid sever scheme propos minim figur 1 distribut simul spread erron comput survey scheme found 7 filter protocol prakash subramanian 17 close relat work maintain list assumpt messag describ class straggler event could caus messag cancel maintain one assumpt per channel wherea protocol view maintain one assumpt per lp worst case filter tag messag 2 integ wherea protocol tag integ n number lp sy tem sinc applic even ontag may accept also describ techniqu reduc overhead subset lp interact mostli time tag size messag bound size subset paper organ follow section 2 describ basic model simul section 3 introduc happen relat state simul vector serv basi optimist simul protocol section 4 describ protocol give correct proof section 5 present optim techniqu reduc overhead protocol section 6 compar distribut simul distribut recoveri 2 model simul consid eventdriven optimist simul execut lp consist sequenc state state transit caus execut event multipl event schedul time execut event arbitrari order addit caus state transi tion execut event may also schedul new event lp local lp send messag lp p1 act messag p 2 p1 becom depend p 2 depend relat transit arriv straggler caus lp roll back state roll back transit depend roll back state call orphan state messag sent orphan state call orphan messag correct simul orphan state must roll back orphan messag must discard exampl distribut simul shown figur 2 number shown parenthes either virtual time state virtual time schedul event carri messag solid line indic use comput dash line indic roll back comput figur 2a s00 schedul event p1 time 5 send messag m0 p1 optimist execut event result state transit s10 s11 schedul event p2 time 7 send messag m1 receiv messag m2 schedul event time 2 detect straggler execut arriv straggler shown figur 2b p1 roll back restor s10 take action need maintain correct simul describ later restart state r10 broadcast rollback announc shown dot arrow act m2 act m0 upon receiv rollback announc p 1 p2 realiz depend roll back state also roll back restor state s20 take action need restart state r20 final orphan messag m1 discard p 2 3 depend track ij refer lp number k refer incarn refer state p refer logic process refer number associ lp belong refer messag e refer event 31 happen relat lamport defin happen relat event rollbackfre distribut comput 12 take rollback account extend relat 4 21 defin state two state u u transit closur relat defin follow three condit 1 immedi preced u 2 state restor rollback u state p taken s12 2 s13 5 m2 2 b figur 2 use simul vector distribut simul prestraggl comput b poststraggl comput action need maintain correct simul despit rollback exampl figur 3 sender messag u ceiver state event schedul execut exampl figur 2a s10 s11 s00 s21 figur 2b s11 6 r10 say happen u equival say u transit depend protocol action need maintain correct simul includ broadcast rollback announc increment incarn number protocol action may dif ferent exampl time warp action includ send antimessag definit happen independ action term rollback announc token use interchang token contribut happen relat u receiv token u becom transit depend due token 32 simul vector vector clock vector size n n number process system 16 vector entri timestamp usual count number send receiv event process context distribut simul modifi extend notion vector clock defin simul vector sv follow maintain depend presenc rollback extend entri contain timestamp incarn number 19 timestamp th entri sv correspond virtual time p timestamp j th entri correspond virtual time latest state p j p depend incarn number th entri equal number time p roll back incarn number j th entri equal highest incarn number p j p depend let entri en tupl incarn v timestamp defin lexicograph order entri follow en simul vector use maintain transit depend inform suppos p schedul event e p j time send messag p attach current sv virtual time mean schedul time event e neither orphan straggler kept incom queue p j event correspond execut p j updat sv ms sv take componentwis lexicograph maximum virtual time denot j th timestamp sv virtual time formal descript sv protocol given figur 3 exampl sv shown figur 2 sv state shown box near sv properti similar vector clock use detect transit depend state follow theorem show relationship virtual time sv theorem 1 timestamp th entri p sv correspond virtual time p incarn timestamp var sv array 0n1 entri time execut send mdata mt msv execut messag mdata mt msv event schedul figur 3 formal descript simul vector protocol proof induct claim true initi state p execut messag virtual time p correctli set rollback virtual time restor state remain unchang let ssv denot sv p sp state defin order two sv c follow p sv j th timestamp denot maximum virtual time p j p depend timestamp greater p virtual time lemma 1 formal notion lemma 1 timestamp th entri sv state p highest valu among timestamp sv proof induct lemma true initi state p assum state p j sent messag p state u p execut result state w induct hypothesi ssvjt usvit highest timestamp sv maximum two timestamp greater timestamp wsv max oper execut messag mt virtual time messag less virtual time state send messag also less virtual time state u act messag otherwis would caus rollback theorem 1 mt less maximum ssvjt usvit henc set wsvit mt preserv properti routin chang timestamp follow two lemma give relationship sv happen relat happen u ssv less equal usv proof induct consid two state u happen u appli one three rule definit happen case rule 1 state chang state u act messag updat sv take maximum routin execut messag maintain properti consid next action usvupt set mt sinc virtual time less virtual time state execut oper also maintain properti case rule 2 routin rollback updat sv increment incarn number preserv properti case rule 3 similar rule 1 let state w chang state u act messag sent state lemma 1 ms sv sp th timestamp less th timestamp also virtual time less sp th timestamp sv henc set th timestamp virtual time take max preserv properti follow lemma show lp acquir timestamp becom depend lp properti later use detect orphan lemma state j th timestamp state ws sv minu one imposs virtual time w must depend state u p j virtual time u wsvjt proof induct initi trivial satisfi properti execut messag let x state send let state chang state w act induct hypothesi x satisfi lemma take maximum let j th entri x se lect j xp x play role u els induct hypothesi xsvjt henc either wsvjt 1 transit u happen w argument also appli case th entri come case rollback let state restor let w state result take action need correct simul induct hypothesi satisfi lemma ssv wsv differ wp th entri state happen also happen w henc w satisfi lemma simul vector set entri incarn end tabl announc receiv els mt svit straggler receiv broadcast roll back block till lp acknowledg broadcast execut messag messag lowest valu mt act event schedul receiv tokenv rollbackj v save iet restor latest state discard state follow restor save iet sviinc figur 4 protocol distribut simul 4 protocol protocol distribut simul shown figur 4 keep present correct proof clear optim techniqu reduc overhead includ protocol describ next section besid simul vector lp p also maintain incarn end tabl iet j th compon iet set entri form k ts ts timestamp straggler caus rollback k th incarn p j state k th incarn p j timestamp greater ts roll back iet allow lp detect orphan messag p readi next event act messag lowest virtual time explain section 3 p updat sv intern state possibl schedul event lp send messag upon receiv messag p orphan case j p iet j th entri ms sv indic depend roll back state p j p detect straggler virtual time broadcast token contain current incarn number k roll back state virtual time greater increment incarn number shown rollback thu token basic indic state incarn k virtual time greater orphan state depend orphan state also orphan lp receiv token contain virtual time p j roll back state j th timestamp greater discard orphan messag input queue increment incarn number broadcast token import properti protocol work transit depend maintain suppos state w p depend roll back state u p j state x depend w must also depend u x detect orphan state token p j arriv p xp without need addit token p argument detect orphan messag similar requir lp block execut broadcast token receiv acknowledg lp ensur token lower incarn p j reach lp becom depend higher incarn greatli simplifi design depend entri overwritten entri higher incarn lexicograph maximum oper guarante futur rollback occur due overwritten entri correspond token must arriv block lp acknowledg receiv broadcast 41 proof correct suppos state u p j roll back due arriv straggler simul correct state depend u also roll back follow theorem prove protocol correctli implement simul theorem 2 state roll back due either straggler token state roll back due token depend state roll back due straggler proof routin rollback call two place receiv messag receiv token state roll back call receiv messag roll back due straggler suppos p j receiv strag gler let u one state p j roll back due straggler call routin receiv token state w satisfi condit c1 roll back sinc virtual time u greater virtual time straggler lemma 2 state w depend u satisfi condit c1 futur state becom depend u messag caus depend discard arriv token discard first test routin receiv messag arriv token discard first test routin receiv token orphan state roll back lemma 3 state w satisfi condit c1 thu roll back exist state u roll back due straggler u w mean state unnecessarili roll back 5 reduc overhead system larg number lp overhead sv delay due block substanti section describ sever optim techniqu reduc overhead block 51 reduc block simplic protocol descript figur 4 increment incarn number upon rollback due token although broadcast anoth token next argu protocol work even incarn number increment modif allow optim reduc block use exampl figur 2b illustr modif suppos p 2 execut event make state transit r20 s22 virtual time 7 shown figur p2 increment incarn number roll back due token p 1 s22 0 7 3rd entri sv s21 3rd entri figur 2a suppos 3rd entri state w anoth lp p3 0 7 p3 decid whether w depend s21 roll back s22 roll back answer w depend s21 also depend s11 therefor orphan statu identifi 2nd entri without reli 3rd entri modif ensur everi new incarn token broadcast everi lp iet entri allow follow optim techniqu reduc block suppos receiv straggler broadcast token instead requir p block receiv acknowl edgement allow p continu execut new incarn one problem need solv depend new incarn may reach lp p j chain messag correspond token p j depend entri roll back state old incarn identifi orphan token arriv overwrit old entri new entri via lexicograph maximum oper result undetect orphan henc incorrect simul solut forc p j block token acquir depend new incarn conjectur block token receiv side would improv origin block token sender side number lp henc acknowledg larg 52 reduc size simul vector global virtual timegvt virtual time given point simul state virtual time less gvt ever roll back minimum virtual time lp messag transit given instant sever algorithm develop comput gvt 2 20 reduc size simul vector entri timestamp less gvt set null null entri need transmit messag affect correct simul 1 virtual time messag must greater equal gvt timestamp less gvt never use detect straggler 2 virtual time contain token must greater equal gvt timestamp less gvt never use detect orphan sinc sv entri initi 1 see figur 3 must less gvt optim allow simul start small vector particularli effect high local messag activ follow 21 also use koptimist pro tocol scheme lp allow act messag result k nonnul entri sv otherwis block ensur lp roll back k lp sens optimist protocol n optimist pessimist protocol 0optimist anoth approach reduc size simul vector divid lp cluster sever design possibl interact insid cluster optimist interclust messag sent conserv 18 independ sv use insid cluster involv lp clu ter intraclust execut sequenti interclust execut optimist 1 sv use interclust messag one entri per cluster similarli one devis scheme interclust intraclust execut optimist employ differ simul vector gener hierarchi cluster simul vector gener howev interclust simul vector introduc fals depend 14 may result unnecessari rollback tradeoff size simul vector unnecessari rollback affect correct simul 6 distribut simul distribut recoveri problem failur recoveri distribut system 6 similar problem distribut simul upon failur process typic restor last checkpoint start execut howev process state lost upon failur may creat orphan caus system state becom inconsist consist system state one send messag must record receiv record 6 pessimist log 6 everi messag log receiv act process fail restor last checkpoint replay log messag origin der ensur prefailur state recreat process need roll back synchron messag log messag process reduc speed comput optimist log 19 messag store volatil memori buffer log asynchron stabl storag sinc content volatil memori lost upon failur messag longer avail replay failur thu process state lost failur state process depend lost state becom orphan state optimist log protocol must roll back orphan state order bring system back consist state mani parallel issu distribut recoveri distribut simul survey differ approach distribut recoveri found 6 tabl 1 list equival term two domain refer omit term wide use equival exact mani case approxim case straggler trigger rollback distribut simula tion failur trigger rollback distribut coveri conserv simul 7 ensur current state never need roll back similarli pessimist log 6 ensur current state alway recover failur word although rollback occur roll back state alway reconstruct time warp optimist approach 10 inspir semin work optimist messag log 19 optimist protocol present paper base optimist recoveri protocol present 4 21 simul scheme dicken reynold 5 result optimist process event sent process becom definit 3 recoveri scheme jalot 11 messag origin unstabl state interv sent process interv becom stabl 6 scheme confin loss comput either due straggler failur local process distribut simul distribut recoveri logic process recoveri unit 19 virtual time state interv index sim vector paper tran dep vector 19 straggler failur antimessag rollback announc fossil collect 10 garbag collect 6 global virtual time 2 global recoveri line 6 conserv scheme pessimist scheme optimist scheme optimist scheme causal error orphan detect cascad rollback 15 domino effect 6 echo 15 livelock 6 condit event 3 unstabl state 6 event 3 stabl state 6 tabl 1 parallel term distribut simul recoveri conserv optimist simul combin 1 18 divid lp cluster differ scheme interclust intraclust execut distribut recoveri paper lowri et al 14 describ idea similar conserv time window simul literatur list main differ two area arriv straggler prevent occurr failur pessimist log cancel effect failur messag log replay arriv straggler optimist simul caus loss inform occurr failur optimist log caus volatil messag log lost recoveri protocol deal lost intransit messag problem 6 present distribut simul protocol incom messag differ channel process arbitrari order event messag distribut simul must execut order increas timestamp due differ protocol present one area may applic area distribut recoveri potenti benefit advanc distribut simul area memori manag 13 analyt model determin checkpoint frequenc 8 checkpoint mechan 22 time constrain system 9 simi larli research work coordin checkpoint optim checkpoint garbag collect depend track 6 potenti appli distribut simul r cluster time warp logic simul global virtual time algorithm condit event approach distribut simul recov effici asynchron optim fail survey rollbackrecoveri protocol messagepass system parallel discret event simul compar analysi period state save techniqu time warp simul time warp simul time constrain system virtual time fault toler process memori manag algorithm optimist parallel simul optimist failur recoveri larg network virtual time global state distribut system effici optimist distribut simul scheme base condit knowledg local time warp approach parallel simul optimist recoveri distribut system algorithm minim latent global virtual time distribut recoveri koptimist log automat increment state save tr optimist recoveri distribut system virtual time rollback sometim worksif filter parallel discret event simul algorithm minim latent global virtual time local time warp approach parallel simul time warp simul time constrain system compar analysi period state save techniqu time warp simul time warp logic simul automat increment state save time clock order event distribut system recov effici asynchron optim fail distribut recoveri koptimist log ctr reuben pasquini vernon rego optimist parallel simul network workstat proceed 31st confer winter simul simulationa bridg futur p16101617 decemb 0508 1999 phoenix arizona unit state om p damani vijay k garg faulttoler distribut simul acm sigsim simul digest v28 n1 p3845 juli 1998