effici interprocedur array dataflow analysi automat program parallel abstractsinc sequenti languag fortran c machineindepend current parallel languag highli desir develop power parallelizationtool gener parallel code automat semiautomat target differ parallel architectur array dataflow analysi known crucial success automat parallel analysi perform interprocedur symbol often need handl predic repres condit unfortun power program analysi extrem timeconsum care design enhanc effici analysi practic level remain issu larg untouch date paper present techniqu effici interprocedur array dataflow analysi document experiment result implement research parallel compil techniqu base guard array region result tool run faster one two order magnitud similarli power tool b introduct program execut speed alway fundament concern computationintens applic exceed execut speed provid stateoftheart uniprocessor machin program need take advantag parallel comput past sever decad much effort invest effici use parallel architectur order exploit parallel inher comput solut progress made area parallel languag parallel librari parallel compil paper address issu automat parallel practic program particularli written imper languag fortran c compar current parallel languag sequenti languag fortran 77 c machineindepend henc highli desir develop power automat parallel tool gener parallel code target differ parallel architectur remain seen far automat parallel go nevertheless much progress made recent understand futur direct one import find mani critic role array dataflow analysi 10 17 20 32 33 37 38 42 aggress program analysi support array privat 29 33 43 remov spuriou data depend therebi enabl loop parallel also support compil techniqu memori perform enhanc effici messagepass deploy exist tool howev capabl interprocedur array dataflow analysi furthermor previou studi paid much attent issu effici analysi quit understand rapid prototyp tool suif 23 polari 4 emphas compil effici tend run slowli hand also believ import demonstr aggress interprocedur analysi perform effici effici import develop larges program especi intens program modif recompil retest conduct take hour longer compil program exampl would highli undesir program task paper present techniqu use panorama parallel compil 35 enhanc effici interprocedur array dataflow analysi without compromis capabl practic focu kind array dataflow analysi use array privat loop parallel import transform benefit program perform variou parallel machin make follow key contribut paper ffl present gener framework summar propag array region access condit enabl array privat loop parallel fortranlik program contain nonrecurs call symbol express array subscript loop bound condit may directli affect array privatiz loop paralleliz ffl show hierarch approach predic handl reduc time complex analyz predic control differ execut path ffl present experiment result show reduc unnecessari setdiffer oper contribut significantli speed array dataflow analysi ffl measur analysi speed panorama appli applic program perfect benchmark suit 3 suit well known difficult parallel automat way show qualiti parallel code also report speedup program parallel panorama execut sgi challeng multiprocessor result show panorama run faster one two order magnitud known tool similar capabl note order achiev program speedup addit program transform often need perform addit array dataflow analysi reductionloop recognit loop permut loop fusion advanc induct variabl substitut techniqu discuss elsewher implement polari 16 recent panorama techniqu alreadi implement consum quit insignific portion total analysi transform time sinc array dataflow analysi timeconsum part henc discuss detail paper rest paper organ follow section 2 present background materi interprocedur array dataflow analysi use array privat loop parallel point main factor analysi potenti slow compil drastic section 3 present framework interprocedur array dataflow analysi base guard array region section 4 discuss sever implement issu also briefli discuss array dataflow analysi perform program recurs procedur dynam array section 5 discuss effect effici analysi experiment result report show parallel capabl panorama high time effici compar relat work section 6 conclud section 7 background section briefli review idea array privat give reason aggress interprocedur array dataflow analysi need import program transform 21 array privat variabl modifi differ iter loop write conflict result iter execut multipl processor quit often array element written one iter loop use iter overwritten next iter kind array usual end figur 1 simpl exampl array privat serv temporari work space within iter array valu differ iter unrel array privat techniqu creat distinct copi array processor storag conflict elimin without violat program semant parallel program increas data access time may also reduc sinc privat variabl alloc local memori figur 1 show simpl exampl doall loop transform execut parallel note valu a1 copi outsid doall loop sinc a1 written within doall loop valu written ak origin loop live end loop nest ie valu use statement loop nest addit statement must insert doall loop last loop iter copi valu ak exampl assum ak dead loop nest henc absenc copyout statement practic case array privat much complex exampl figur 1 benefit transform hand signific earli experi manual perform program transform show without array privat program execut speed alliant fx80 machin 8 vector processor would slow factor 5 program mdg ocean track trfd wellknown perfect benchmark suit 15 recent experi automat transform code run sgi challeng multiprocessor show even strike effect array privat number perfect benchmark program 16 22 data depend analysi vs array dataflow analysi convent data depend analysi predecessor current work array dataflow analysi pioneer work dj kuck defin flow depend anti depend output depend 26 latter two due multiassign variabl imper languag flow depend defin two statement one read valu written thu origin definit flow depend precis reachingdefinit relat nonetheless earli compil techniqu abl comput array reachingdefinit therefor long time flow depend conserv comput assert one statement depend anoth former may execut latter may access memori locat thu analysi three kind data depend reduc problem memori disambigu insuffici array privat array dataflow analysi refer comput flow valu array element purpos array privat loop parallel parallel compil need establish fact case figur 1 array valu written one iter use anoth 23 interprocedur analysi order increas granular parallel task henc benefit parallel execut import parallel loop outer level unfortun outerlevel loop often contain procedur call tradit method deal loop inlin substitut procedur call bodi call procedur illinoi polari 4 exampl use method unfortun mani import compil transform increas consum time storag quadrat even higher rate number oper within individu procedur henc sever limit feasibl scope inlin wide recogn largescal applic often better altern perform interprocedur summari analysi instead inlin interprocedur data depend analysi discuss extens 21 24 31 40 recent year seen increas effort array dataflow analysi 10 17 20 32 33 37 38 42 howev tool capabl interprocedur array dataflow analysi without inlin 10 20 23 24 complic array dataflow analysi realiti parallel compil need analyz effect procedur call may also need analyz relat among symbol express among branch condit exampl figur 2 illustr case three exampl privat array make possibl parallel loop figur 2a show simplifi loop mdg program routin interf 3 difficult exampl requir certain kind infer condit although b privatiz discuss b simpl case suppos condit kcne0 fals result last loop k within loop get execut a6 get use want determin whether a6 may use valu written previou iter loop condit kcne0 fals impli within iter statement execut thu bkgtcut2 fals 9 first loop k fact impli bk 4gtcut2 fals second loop k ensur get written use iter therefor privatiz loop figur 2b illustr simplifi version segment arc2d programroutin filerx3 i1 nmol1 k19 enddo k25 1 enddo k1114 enddo 2 enddo enddo notp enddo enddo call ina call outam enddo xsize return enddo subroutin outb mm xsize return enddo end b c figur 2 complex exampl privatiz array condit notp invari loop result ajmax modifi one iter thu expos use ajmax modifi iter therefor ajmax never use valu written previou iter moreov easi see use ajlow jup upward expos henc privatiz loop parallel loop exampl condit loop invari make sure loopcarri flow depend otherwis whether loopcarri flow depend exist figur 2b depend upon condit figur 2c show simplifi version segment ocean programroutin ocean3 interprocedur analysi need case order privat loop compil must recogn fact call loop use a1 call iter must modifi a1 use aj must take valu defin iter requir check whether condit x size subroutin infer condit x size subroutin three exampl necessari manipul symbol oper previou current work suggest handl condit symbol analysi interprocedur analysi provid power compil array dataflow analysi must perform larg scope deal whole set subroutin program algorithm inform propag symbol manipul must care design otherwis analysi simpli timeconsum practic compil handl issu simultan design framework describ next 3 array dataflow analysi base guard array region tradit framework dataflow analysi meet point control flow graph dataflow inform differ control branch merg meet oper merg inform typic distinguish inform differ branch meet oper therefor said pathinsensit illustr last section pathsensit array dataflow inform critic success array privat henc loop parallel section present pathsensit analysi use condit summari set captur effect condit array access call condit summari set guard array region gar 31 guard array region basic unit array refer represent regular array region definit regular array region array denot ar dimens r rang form l symbol express valu l u step simpli denot l l u array region repres unknown array region repres regular array region defin restrict origin regular section propos callahan kennedi 6 regular array region contain interdimension relationship make set oper simpler howev diagon triangular shape array repres exactli instanc array diagon ai triangular approxim regular array region regular array region cover frequent case real program seem advantag effici deal common case guard gar defin use describ complex array section although primari use describ control condit regular array region access definit guard array region gar tupl p r contain regular array region r guard p p predic specifi condit r access use delta denot guard whose predic written explicitli ie unknown guard say gar p r omega unknown similarli either p f als r say order preserv much precis possibl tri avoid mark whole array region unknown multidimension array region one dimens truli unknown dimens mark unknown also one item rang tupl l say u unknown write tupl l let program segment n piec code uniqu entri point uniqu exit point use result set oper gar summar two essenti piec array refer inform n list ffl uen set array element upwardli expos n element use n take valu defin outsid n ffl modn set array element written within n addit follow set also repres gar use describ array refer loop l bodi denot b set array element use arbitrari iter loop l upwardli expos entri loop bodi b subset array element ue b upwardli expos entri loop l ffl mod b set array element written loop bodi b arbitrari iter loop l confus result may simpli denot mod mod b ffl mod b set array element written iter prior arbitrari iter loop l confus result may simpli denot mod ffl mod l mod b ffl mod b set array element written iter follow arbitrari iter loop l confus result may simpli denot mod ffl mod l mod b take figur 2c exampl loop j subroutin ue j empti mod j equal rue bj therefor mod j 1 mod loop j 1 henc mod subroutin similarli ue j loop j subroutin rue bj ue loop 1 lastli ue subroutin x dataflow analysi requir three kind oper gar union intersect differ oper turn base union intersect differ oper regular array region well logic oper predic next first discuss oper array region gar 32 oper regular array region operand region oper must belong array drop array name array region notat hereaft whenev confus given two regular array region dimens array defin follow oper sake simplic present assum step 1 leav section 4 discuss step valu let r 1 ae note keep max min oper regular array region therefor relationship symbol express determin even demanddriven symbol analysi conduct mark intersect unknown sinc region symbol one care must taken prevent fals region creat union oper exampl know r r 1 r 1 r 2 valid guarante nice impos valid predic guard 20 union two regular region comput without concern valid two region sinc introduc addit predic oper tri avoid usual keep union two region without merg like constant region known valid mdimension array result differ oper gener 2 regular region rang differ result two new rang represent could quit complex larg howev use describ gener formula set differ oper first defin r 1 k r 2 k last k rang within r 1 r 2 respect accord definit r 1 comput r 1 recurs given follow ae follow exampl differ oper order avoid split region due differ oper routin defer solv differ oper use new data structur call garwd temporarili repres differ result shall show later use garwd keep summari comput effici exact garwd defin follow subsect 33 oper gar garwd given two gar follow frequent case union oper two kind union becom p 1 r result p two array region safe combin due unknown symbol term keep two gar list without merg discuss previous r 1 may multipl array region make actual result potenti complex howev shall explain via exampl differ oper often cancel intersect union oper therefor solv differ unless result singl gar last moment actual result must solv order finish data depend test array privatiz test differ yet solv formula repres garwd definit gar differ list garwd set defin two compon sourc gar differ list sourc gar ordinari gar defin differ list list gar garwd set denot member sourc gar gar differ list written f sourc gar differ list g 2 follow exampl show use formula garwd note postpon a1n1 denot 3 denot 2 denot 1 enddo enddo figur 3 exampl garwd solv differ solv garwd oper oper two garwd garwd gar easili deriv exampl consid garwd gwdfg g gar g result subtract g gwd follow 1 fg 3 2 3 g 3 singl gar first formula appli result g exactli singl gar g 3 g 1 g may symbol differ result may singl gar henc third formula similarli intersect gwd g 1 fg 4 2 g gamma 3 unknown otherwis g 4 also singl gar union two garwd usual kept list merg case concret exampl given illustr oper garwd enddo end c i1m figur 4 exampl hsg figur 3 exampl show advantag use garwd righthand side summari result bodi outer loop subscript ue mod indic two set belong arbitrari iter ue repres garwd simplic omit guard whose valu true exampl recogn array privatiz need prove loopcarri data flow exist set mod within iter prior iter denot mod equal mod theori mod nonetheless invalid analysi sinc gar mod list differ list garwd ue obviou intersect mod ue empti therefor array privatiz implement assign gar uniqu region number shown parenthes figur 3 make intersect simpl integ oper shown differ oper use calcul ue set result loss inform help improv effect analysi hand intersect oper may result unknown valu due intersect set contain unknown symbol term demanddriven symbol evalu invok determin symbol valu relationship symbol term intersect result determin evalu mark unknown array dataflow framework base gar intersect oper perform last step analyz tri conduct depend test array privat test point conserv assumpt must made intersect result mark unknown intersect oper howev involv propag mod ue set therefor affect accuraci set 34 comput ue mod set ue mod inform propag backward end begin routin program segment routin two set summar one pass result b u paddmods2 u modinout p figur 5 comput summari set basic control flow compon save summari algorithm invok demand particular routin summar routin unless necessari paramet map array reshap done propag cross routin boundari facilit interprocedur propag summari inform adopt hierarch supergraph hsg repres control flow entir program hsg augment supergraph propos myer 36 introduc hierarchi among nest loop procedur call hsg contain three kind node basic block node loop node call node loop repres loop node compound node whose intern flow subgraph describ control flow loop bodi procedur call site repres call node outgo edg point entri node flow subgraph call procedur incom edg uniqu exit node call procedur due nest structur loop routin hierarchi control flow deriv among hsg node flow subgraph highest level repres main program hsg resembl hscg use pip project parallel task schedul 25 figur 4 show exampl hsg note flow subgraph routin never duplic differ call routin unless multipl version call routin creat compil enhanc potenti parallel detail hsg implement found refer 20 18 propag array dataflow inform use mod n repres array element modifi node forwardli reachabl n lower hsg level n use ue n repres array element whose valu import n use node forwardli reachabl n suppos loop l bodi denot b repres loop node n flow subgraph b entri node n ue b equal ue n ue n equal expans ue b see similarli mod b ilu loop figur expans loop summari equal mod n modn equal expans mod b mod mod set repres list gar ue ue set list garwd figur 5 b show mod ue set propag direct opposit control flow basic block flow subgraph statement thenbranch s1 elsebranch s2 respect propag variabl appear certain summari set may modifi assign statement therefor righthand side express substitut variabl simplic variabl substitut shown figur 5 figur 5 b show summari set propag branch condit put guard branch indic function padd figur whole summari process quit straightforward except comput ue set loop need analysi support summari expans illustr figur 6 given loop index 2 l u suppos ue mod alreadi comput arbitrari iter want calcul ue mod set entir loop follow formula mod sigma summat also call expans project denot proj figur 6 use elimin summari set ue calcul given take two step first step comput ue repres set array element use iter expos outsid whole loop second step project result step 1 domain ie rang l remov expans list gar list garwd consist expans gar garwd list sinc detail discuss expans would tediou provid guidelin paper see appendix i11100 i21100 enddo enddo end i11n11 enddo end b figur 7 exampl symbol express guard array region implement consider extens 41 symbol analysi symbol analysi handl express involv unknown symbol term wide use symbol evalu abstract interpret discov program properti valu express relationship symbol express etc symbol analysi requir abil repres manipul unknown symbol term among sever express represent normal form often use 7 9 22 advantag normal form give represent congruent express addit symbol express encount array dataflow analysi depend analysi mostli integ polynomi oper integ polynomi comparison two polynomi straightforward therefor adopt integ polynomi represent express normal form essenti sum product given index variabl term given equat 2 p j product c j integ constant possibl integ fraction x j k integ variabl index variabl n nest number loop contain e number product l j number variabl p j take program segment figur 7 exampl subroutin sub1 mod set statement contain singl gar true an1 i2 mod set loop i2 contain true 100 mod set loop i1 contain true lastli mod set whole subroutin contain true an2 delta subroutin sub2 mod set statement s2 contain singl gar true ai1 mod set loop i1 contain n1 1 1 mod set statement contain n1 n6 lastli mod set whole subroutin contain n2 express e p j sort accord uniqu integ key assign variabl sinc l j control complex polynomi chosen design paramet exampl use l j control complex express e linear express affin limit 1 l j zero control complex express represent properli control time complex manipul symbol express symbol oper addit subtract multipl divis integ constant provid librari function addit simpl demanddriven symbol evalu scheme implement propag express upward along control flow graph valu express known predefin propag limit reach 42 rang oper subsect give detail discuss rang oper step valu 1 describ rang oper use function follow howev function solv otherwis unknown usual return result given two rang r 1 r 2 r 1 assum r 2 r 1 otherwis use r ffl union oper l 2 combin one rang otherwis assum r 1 r 2 valid unknown moment whether valid combin 2 known constant valu follow l divis c use formula case 1 comput intersect differ union otherwis r 1 r union r 1 r 2 usual combin one rang must maintain list rang special case jl 1 gammal 3 may symbol express use formula case 1 perform intersect differ union 4 1 divis 2 check see r 2 cover r 1 r 5 case result intersect mark unknown differ kept differ list level garwd union remain list two rang 43 extens recurs call dynam array program languag fortran 90 c permit recurs procedur call dynam alloc data structur subsect briefli discuss array dataflow analysi perform presenc recurs call dynam array recurs call treat array dataflow analysi essenti way array data depend analysi 30 recurs procedur call either directli indirectli form cycl call graph whole program proper order must establish travers call graph first maximum stronglyconnect compon msc must identifi call graph msc reduc singl condens node call graph reduc acycl graph array data flow analyz travers reduc graph revers topolog order condens node ie msc visit proper order establish among member msc iter travers member procedur set modifi use array region guard visibl caller must summar respect iter call cycl msc simpl cycl common case practic program compil determin whether visibl array region member procedur grow recurs analyz procedur twice region grow certain array dimens recurs call conserv estim made dimens worst case exampl rang modif use array dimens mark unknown complex msc requir complex travers order 30 dynam alloc array summar essenti way static array main differ backward propag array region guard control flow graph ie hsg paper current node contain statement alloc dynam array ue set mod set array kill beyond node discuss base assumpt true alias exist procedur ie refer differ variabl name must access differ memori locat either refer write assumpt true fortran 90 fortran 77 program may fals c program perform array dataflow analysi c program alia analysi must first perform alia analysi studi extens recent literatur 8 11 14 27 28 39 44 45 5 effect effici section first discuss gar use array privat loop parallel present experiment result show effect effici array dataflow analysi 51 array privat loop parallel array privat candid loop l element overwritten differ iter l see 29 candidaci establish examin summari array mod set intersect mod modi nonempti candid privat candid privatiz exist loopcarri flow depend l array loop l index mod ue exist flow depend carri loop l let us look figur 2c ue privatiz within loop anoth exampl let us look figur 2b sinc mod loopvari mod empti array privat candid furthermor last differ oper easili done gar differ list therefor ue mod empti guarante array privatiz explain section 21 copyin copyout statement sometim need insert order preserv program correct gener rule 1 upwardli expos array element must copi 2 live array element must copiedout alreadi discuss determin upwardli expos array element current perform conserv live analysi propos 29 essenc loop parallel prove absenc loopcarri depend given loop l index exist differ type loopcarri depend detect follow order ffl loopcarri flow depend exist ue loopcarri output depend exist mod loopcarri anti depend suppos alreadi determin exist loopcarri output depend loopcarri antidepend exist ue mod 6 loopcarri antidepend consid separ ue formula replac de de stand downwardli expos use set iter take output depend exampl figur 7a mod loop i2 contain singl gar contain loopcarri output depend exist loop i2 mod contrast loop i1 mod contain true loopcarri output depend exist loop i1 mod mod 6 note array privat loopcarri output depend exist write refer privat copi array 52 experiment result implement array dataflow analysi prototyp parallel compil panorama multipl pass sourcetosourc fortran program analyz 35 roughli consist phase pars build hierarch supergraph hsg interprocedur scalar uddu chain 1 perform convent data depend test array dataflow analysi advanc analys parallel code gener tabl 1 show fortran loop perfect benchmark suit paralleliz array privat necessari transform induct variabl substitut parallel reduct event synchron placement tabl also mark loop requir symbol analysi predic analysi interprocedur analysi respect detail privatiz array loop found 18 column 4 5 mark loop parallel polari version 15 panorama respect one loop interf1000 parallel polari panorama one privatiz array recogn privat array requir implement special pattern match done panorama hand panorama parallel sever loop parallel polari tabl 2 compar speedup program select tabl 1 parallel polari panorama respect program paralleliz either tool select speedup number comput divid real execut time sequenti code divid real execut time parallel code run sgi challeng multiprocessor four 196mhz r10000 cpu 1024 mb memori averag speedup compar polarisparallel code panoramaparallel code note speedup number may tabl 1 paralleliz loop perfect benchmark suit requir privat techniqu program routin sa pa ia parallel ocean total 80 32 80 7 sa symbol analysi pa predic analysi ia interprocedur analysi improv number recent discov memoryeffici enhanc techniqu techniqu implement version polari panorama use experi tabl 3 show wallclock time spent main part panorama tabl 3 pars time time pars program although panorama current pars program three time first time construct call graph rearrang pars order sourc file second time interprocedur analysi last time code gener column hsg doall check time taken build hsg uddu chain convent doall check column array summari refer array dataflow analysi appli loop whose paralleliz determin convent doall test figur 8 show percentag time spent array dataflow analysi rest panorama even though time percentag array dataflow analysi high 38 averag total execut time small 31 second maximum get perspect overhead tabl 2 speedup comparison polari panorama 4 r10000 cpu program speedup polari speedup panorama adm 11 15 mdg 20 15 bdna 12 12 ocean 12 17 arc2d 21 22 trfd 22 21 interprocedur analysi last column mark f77 show time spent f77 compil option compil correspond fortran program sequenti machin code tabl 4 list analysi time polari alongsid panorama includ three time pars instead one tabl 3 difficult provid absolut fair comparison two set number list togeth provid perspect time polari version 15 measur without pass array privat depend test list time result suif suif current public version perform array dataflow analysi time result public avail panorama polari compil gnu gccg compil optim level time measur gettimeofday elaps wallclock time use sgi challeng machin larg memori time gap polari panorama reduc probabl polari written c huge execut imag size execut imag 14mb panorama written c execut imag 11mb even memori size larg 1gb panorama still faster polari one two order magnitud 53 summari vs inlin believ sever design choic contribut effici panorama next subsect present choic made panorama foremost reason seem panorama comput interprocedur summari without inlin routin bodi polari subroutin call sever place program inlin caus subroutin bodi analyz sever time panorama need summar subroutin summari result later map differ call site moreov data depend test involv call statement panorama use summar array region inform polari perform data depend everi pair array refer loop bodi inlin sinc time complex data depend test 2 n number individu refer test inlin significantli increas time depend test experi polari limit number inlin execut statement 50 default tabl 3 analysi time second distribut 1 program pars hsg tradi array code total f77 analysi summari gener adm 363 1268 1176 353 3160 541 qcd 104 371 304 122 901 203 mdg 082 258 211 077 628 123 bdna 241 741 380 245 1606 452 ocean 137 849 331 135 1453 393 dyfesm 377 604 226 248 1456 202 mg3d 167 746 1487 170 2571 340 arc2d 246 624 1014 196 2081 377 trfd 054 070 048 018 190 72 total 2456 721 7031 2037 18738 3498 1 time measur sgi indi workstat 134mhz mip r4600 cpu 64 mb memori tabl 4 elaps analysi time second program line excl sgi challeng sgi indi 2 comment panorama polari panorama polari adm 4296 1703 435 3880 2601 mdg 935 302 123 790 551 ocean 1917 870 333 182 1801 trfd 417 105 62 298 290 1 sgi challeng 1024mb memori 196mhz r10000 cpu 2 sgi indi 134mhz mip r4600 cpu 64 mb memori 3 mean polari take longer four hour adm qcd mdg track bdna ocean dyfesm mg3d arc2d flo52 trfd spec77 total rest summari figur 8 time percentag array dataflow summari valu use polari modest number data depend test still account 30 total time believ anoth import reason panorama effici effici comput propag summari set two design issu particularli noteworthi name handl predic differ set oper next discuss issu detail 54 effici handl predic gener predic oper expens compil often perform fact major predicatehandl requir array dataflow analysi involv simpl oper check see two predic ident loopindepend contain indic affect shape size array region implement rather effici canon normal form use repres predic patternmatch normal form easier arbitrari form conjunct normal form cnf disjunct normal form dnf wide use program analysi 7 9 cite work show negat oper expens cnf dnf fact also confirm previou experi use cnf 20 negat oper occur due els branch also due gar garwd oper elsewher henc design new normal form negat oper often avoid use hierarch approach predic handl predic repres high level predic tree pt v e r v set node e set edg r root pt intern node v nand oper except root oper leaf node divid regular leaf node neg leaf node regular leaf node repres neg leaf oper regular leaf figur 9 high level represent predic predic condit neg leaf node repres negat predic theoret represent normal form two ident predic may differ predic tree may render patternmatch unsuccess howev believ case rare happen program extrem complic figur 9 show pt leaf regular neg token repres basic predic condit condit program level keep basic predic unit split predic oper base token check detail within basic predic negat predic tree simpl way nand oper shown figur 10 may either increas decreas one level predic tree accord shape predic tree one regular leaf node one neg leaf node tree regular leaf node simpli chang neg leaf node vice versa oper also easili handl shown figur 10 use uniqu token basic predic simpl common case easili handl without check content predic content predic repres cnf examin necessari tabl 5 list sever key paramet total number array summar averag length mod set column ave gar averag length ue set column ave garwd data concern differ predic oper total number array summar given tabl sum number array summar loop nest array appear two disjoint loop nest count twice sinc time set oper proport squar length mod ue list import list short encourag see inde short benchmark applic program column 7 8 mark high low tabl 5 show 95 total predic oper high level one negat binari predic oper two basic predic count one oper number depend strategi use handl predic current defer check predic content last step result low level negat increas 1 negat decreas 1 b c figur 10 predic oper tabl 5 measur key paramet program array ave ave differ op predic op summar gar garwd total reduc high low qcd 414 141 127 512 41 4803 41 bdna 285 127 143 267 3 3805 4 ocean 96 172 153 246 19 458 36 mg3d 385 279 262 135 total 4011 155 149 3675 314 42391 618 predic oper need result show strategi work well array privat sinc almost privatiz array test program recogn case need handl guard contain loop indic need low level predic oper hierarch represent scheme serv well reduc unnecessari differ oper solv differ use gener formula present section 2 unless result singl gar differ simplifi singl gar differ repres garwd instead union gar impli formula strategi postpon expens complex differ oper absolut necessari avoid propag rel complex list gar exampl let garwd g 1 g 2 oe two differ oper repres g 1 reduc ie need perform tabl 5 total number differ oper total number reduc differ oper illustr column 5 6 respect although differ oper reduc 9 averag reduct dramat program one third mdg half mg3d let us use exampl figur 2b illustr signific delay differ oper simplifi control flow graph bodi outer loop shown figur 11 suppos 1st j p branch 2nd j figur 11 hsg bodi outer loop figur node summar summari result list follow descript given section 34 propag summari set node follow step get summari set bodi outer loop 1 mod 2 mod differ oper kept garwd reduc step 4 3 mod p insert guard gar propag true edg p insert guard propag fals edg 4 mod step comput ue p1 remov one differ oper fp jlow equal word need perform differ oper repres garwd g advantag garwd represent differ postpon rather alway perform use garwd differ oper step 2 alway perform necessari thu increas execut time therefor summari set bodi outer loop determin array privatiz need prove exist loopcarri flow depend first calcul mod set array element written iter prior iter give us mod intersect mod ue conduct two intersect form one mod compon mod ue respect first mod appear differ list ue thu result obvious empti similarli intersect p jmax second mod p jmax empti guard contradictori intersect mod ue empti array privatiz intersect avoid perform differ oper ue therefor improv effici 6 relat work exist number approach array dataflow analysi far know work particularli address effici issu present effici data one school thought attempt gather flow inform array element acquir exact array dataflow analysi usual done solv system equal inequ feautrier 17 calcul sourc function indic detail flow inform maydan et al 33 34 simplifi feautrier method use last writetreelwt duesterwald et al 12 comput depend distanc reach definit within loop pugh wonnacott 37 use set constraint describ array dataflow problem solv basic fouriermotzkin variabl elimin maslov 32 well pugh wonnacott 37 also extend previou work categori handl certain condit gener approach intraprocedur seem easili extend interprocedur group analyz set array element instead individu array element earli work use regular section 6 24 convex region 40 41 data access descriptor 2 etc summar modus set array access array dataflow analys recent array dataflow analys base set propos gross steenkist 19 rosen 38 li 29 tu padua 43 creusillet irigoin 10 hall et al 21 one use condit region gar even though handl condit use approach although second group provid mani detail reachingdefinit first group handl complex program construct better easili perform interprocedur array dataflow summari part second group mention focu parallel compil area essenti inform array dataflow summari upwardli expos use set summari approach compar two aspect set represent path sensit set represent convex region highest precis also expens complex represent bound regular section regular section simplest represent thu inexpens earli work tri use singl regular section singl convex region summar one array obvious singl set potenti lose inform may ineffect case tu padua 43 creusillet irigoin 10 seem use singl regular section singl convex region respect hall et al 21 use list convex region summar refer array unclear represent precis list regular section upon approach base regard path sensit common previou method distinguish summari set differ control flow path therefor method call pathinsensit shown inadequ real program approach far know pathsensit array dataflow summari approach parallel compil area distinguish summari inform differ path put condit guard approach handl condit context array dataflow summari 7 conclus paper present array dataflow analysi handl interprocedur symbol predic analys togeth analysi shown via experi quit effect program parallel import design decis made analysi perform effici hierarch predic handl scheme turn serv well mani predic oper perform high level avoid expens lowlevel oper new data structur garwd ie guard array region differ list reduc expens setdiffer oper 50 program although reduct unimpress program anoth import find mod list ue list kept rather short thu reduc set oper time far know first time effici issu address data present power analysi believ import continu explor effici issu unless interprocedur array dataflow analysi perform reason fast adopt real program world would unlik continu advanc parallel compil techniqu hope fulli partial automat parallel provid viabl methodolog machineindepend parallel program r mechan keep use intern inform parallel program tool data access descriptor perfect club benchmark effect perform evalu supercomput parallel program polari symbol analysi techniqu need effect parallel perfect benchmark analysi interprocedur side effect parallel program environ effici flowsensit interprocedur comput pointerinduc alias side effect applic symbol evalu interprocedur array region analys interprocedur mayalia analysi pointer beyond klimit practic dataflow framework array refer analysi use optim automat parallel perfect benchmark experi automat parallel four perfect benchmark program automat parallel perfect benchmark dataflow analysi array scalar refer structur dataflow analysi array use optim compil symbol array dataflow analysi array privat program parallel interprocedur analysi parallel symbol depend analysi parallel compil maxim multiprocessor perform suif compil implement interprocedur bound regular section analysi semant interprocedur parallel overview pip project structur comput comput safe approxim algorithm interprocedur pointer alias interprocedur modif side effect analysi pointer alias array privat parallel execut loop interprocedur analysi parallel comput program parallel interprocedur analysi lazi array dataflow depend analysi array dataflow analysi use array privat accur analysi array refer interprocedur parallel compil support memori hierarchi research precis interprocedur dataflow algorithm exact method analysi valuebas array data depend increment depend analysi direct parallel call statement interprocedur analysi program restructur parafras gate ssabas demanddriven symbol analysi parallel compil automat array privat effici contextsensit pointer analysi c program program decomposit pointer alias step toward practic analys tr ctr array resiz scientif code debug mainten reus proceed 2001 acm sigplansigsoft workshop program analysi softwar tool engin p3237 june 2001 snowbird utah unit state thi viet nga nguyen franoi irigoin effici effect array bound check acm transact program languag system topla v27 n3 p527570 may 2005