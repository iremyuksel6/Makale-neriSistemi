implement atom action ada 95 abstractatom action import dynam structur techniqu aid construct faulttoler concurr system although develop year ago none wellknown commerciallyavail program languag directli support use paper summar softwar fault toler techniqu concurr system evalu ada 95 program languag perspect support softwar fault toler show ada 95 use implement softwar fault toler techniqu particular show packag protect object requeu except asynchron transfer control tag type control type use build block construct atom action forward backward error recoveri resili desert task task abort b introduct softwar fault toler often classifi accord whether static mask ing dynam static redund sever version softwar compon written version execut respons request vote perform output determin result use static version softwar fix relationship everi version voter oper whether fault occur dynam redund redund compon come oper error detect dynam fault toler four constitu phase anderson lee 1990 1 detect fault signific eventu manifest form error fault toler scheme utilis error detect 2 damag confin assess error detect decis must made extent system corrupt delay fault occur manifest associ error mean erron inform could spread throughout system 3 recoveri error recoveri techniqu aim transform corrupt system state continu normal oper perhap degrad function 4 fault treatment continu servic error symptom fault although damag may repair fault may still exist therefor error may recur unless form mainten undertaken paper primarili concern dynam redund techniqu particular damag confin error recoveri sequenti system damag confin well understood techniqu modular program objectori encapsul within context stronglytyp program languag enabl fault confin judici placement accept test assert allow error detect damag propag similarli techniqu except handlinggoodenough 1975 forward error recoveri recoveri blockshorn et al 1974 backward error recov allow error recoveri perform accord whether fault anticip concurr system posit clear cut although techniqu conversationscampbel randel 1986 atom actionslomet develop time ago mainstream languag oper system provid direct support burn well 1990 stead languag concurr pascal use basi experimentationkim 1982 set procedur extens object extens produc arjuna use latter approach provid transactionbas toolkit cshrivastava et al 1991 arguabl highlevel support need requir function program lowerlevel primit exampl attempt made program convers ada 83burn well 1989clemati gianuzzi 1993 romanovski strigini 1995 howev sever hamper lack suitabl languag support stanc romanovski strigini 1995 allow parallel exist insid convers approach appropri collect preexist task wish particip collect convers none approach address structur atom action forward backward error recov ada 95 goal paper show atom action program ada 95intermetr 1995 section 2 review requir atom action section 3 briefli describ backward forward error recoveri undertaken section 4 describ new featur ada 95 requir implement atom action section 5 show featur use program simpl action action backward error recov eri action forward error recoveri nest action action resili desert section 6 give simpl exampl section 7 consid distribut system issu final conclus present section 8 atom action one main motiv introduc concurr process system enabl parallel real world reflect applic program enabl program express natur way lead product reliabl maintain system howev concurr process creat mani new problem exist pure sequenti program particular consider given way group cooper concurr process structur order coordin activ exampl withdraw bank account may involv ledger process payment process sequenc commun authent drawer check balanc pay money furthermor may necessari two process interact way perform requir action situat imper process involv see consist system state concurr process easi group process interfer one atom action propos dynam mechan control joint execut group process combin oper appear indivis action sever almost equival way express properti atom action lomet 1977 randel et al 1978 1 action atom process perform awar exist activ process activ process awar activ process time process perform action 2 action atom process perform commun process action perform 3 action atom process perform detect state chang except perform reveal state chang action complet 4 action atom consid far process concern indivis instantan effect system interleav oppos concurr although atom action view indivis intern structur allow modular decomposit atom action notion nest atom action introduc process involv nest action must subset involv outer level action case nest action could smuggl inform concern outer level action extern process outerlevel action would longer indivis 21 requir atom action program languag capabl support atom action must possibl express requir necessari implement requir independ notion process form interprocess commun provid languag jalot 1985 1 welldefin boundari atom action start end side boundari start boundari locat process involv atom action action deem start end boundari locat process involv atom action action deem end side boundari separ process involv atom action rest system 2 indivis atom action must allow exchang inform process activ insid action outsid resourc manag exclud two atom action share data valu data atom action determin strict sequenc two action order impli synchronis start atom action process enter differ time howev impli synchronis end atom action process allow leav atom action process will abl leav 3 nest atom action may nest long overlap atom action consequ gener strict nest allow 4 concurr possibl execut differ atom action concurr one way enforc indivis run atom action sequenti howev could serious impair perform overal system therefor avoid nevertheless overal effect run collect atom action concurr must would obtain serialis execut 5 recoveri intent atom action form basi damag confin must allow recoveri procedur program execut atom action requir particip process coordin activ impos synchronis action follow process enter action block process block insid action wait resourc alloc attempt commun anoth process insid action process either activ action posit accept commun yet activ action may leav action process activ action wish leav henc possibl subset name process enter action subsequ leav without recours interact miss process facil deem essenti realtim system deadlin import solv desert problem process held action one process arriv consid along error recoveri next two section 3 recover atom action section consid atom action forward backward error recoveri 31 atom action backward error recoveri backward error recoveri appli group commun pro cess possibl process roll back start execut call domino effect problem occur consist set recoveri point recoveri line atom action provid recoveri line automat error occur insid atom action process involv roll back start action altern algorithm execut atom action ensur process pass erron valu commun process outsid action atom action use way call convers randel 1975 convers action statement contain recoveri block exampl action ensur accept test primari modul els altern modul els altern modul els error process involv convers declar part action similarli basic semant convers summaris follow ffl entri convers state process save set entri point form recoveri line whilst insid convers process allow commun process activ convers gener resourc man ager convers built atom action properti inherit ffl order leav convers process activ convers must pass accept test case convers finish recoveri point discard ffl process fail accept test process state restor save start convers execut altern modul therefor assum error recoveri perform insid convers must perform process take part convers ffl convers nest strict nest allow ffl altern convers fail recoveri must perform higher level note convers defin randel 1975 process take part convers must enter convers process leav differ semant describ process enter convers either tardi fail long process activ convers wish commun convers complet success process attempt commun miss process either block wait process arriv continu adopt approach two benefit gregori knight 1985 1 allow convers specifi particip compulsori 2 allow process deadlin leav convers continu necessari take altern action convers discuss kim 1982 context extens concurr pascal tyrrel hold 1986 jalot campbel 1984 1986 context csp although convers allow group process coordin recov eri criticis one import point convers fail process restor enter altern modul forc process commun achiev desir effect process break convers may quir gregori knight 1985 point practic one process fail achiev goal primari modul commun one group process may wish commun complet new group process secondari modul furthermor accept test secondari modul may quit differ way express requir use convers overcom problem associ convers gregori knight 1985 propos altern approach backward error recoveri concurr process 32 atom action forward error recoveri although backward error recoveri enabl recoveri unanticip error difficult undo oper may perform environ system oper consequ forward error recoveri except handl must also consid section except handl concurr process involv atom action discuss backward error recoveri error occur process involv atom action particip recoveri true except handl forward error recoveri except occur one process activ atom action except rais process activ action except said asynchron origin anoth process follow possibl adalik syntax atom action support except handl action action except exceptioni sequenc statement exceptionz sequenc statement other rais atomicactionfailur termin model except handl process activ action handler handl except without rais except atom action complet normal resumpt model use except handl process activ atom action resum execut point except rais either model except handler one process activ action one handler fail atom action fail standard except atom action failur except rais involv process two issu must consid except handl ad atom action resolut concurr rais except except nest actionscampbel randel 1986 briefli review resolut concurr rais except possibl one process activ atom action rais differ except time campbel randel 1986 point event like error result fault uniqu identifi error detect facil provid compon atom action two except simultan rais atom action may two separ except handler process may difficult decid one chosen furthermor two except conjunct constitut third except except indic two except condit occur order resolv concurr rais except campbel randel propos use except tree sever except rais concurr except use identifi handler root smallest subtre contain except although clear combin paramet associ except atom action compon declar except tree differ process involv atom action may well differ except tree except intern atom action atom action nest possibl one process activ action rais except process action involv nest action figur 1 illustr problem except rais process involv must particip recoveri action unfortun intern action definit indivis except rais action nest action b im figur 1 except nest atom action rais except action would potenti compromis indivi ibil furthermor intern action may knowledg possibl except rais campbel randel 1986 discuss two possibl solut problem first solut hold back rais except intern action finish reject ffl realtim system except rais may associ miss deadlin hold back recoveri procedur may serious place jeopardi action time respons ffl error condit detect may indic intern action may never termin deadlock condit arisen reason campbel randel allow intern action predefin abort except except rais indic action except rais surround action precondit action invok longer valid except rais intern action invok faulttoler measur abort action abort contain action handl origin except intern action abort must signal atom action failur except may combin outstand except affect choic recoveri perform surround action abort except defin surround action must wait intern action complet altern default handler could provid would rais atom action failur except ada 83 along concurr program languag unabl support full function atom actionsburn well 1989 ada 95 support atom action directli provid rich suppli languag primit potenti use implement function particular packag provid encapsul inform hide except provid basic termin model except handl protect object provid monitorlik commun mechan asynchron transfer control atc provid mechan one task asynchron obtain attent anoth tag type provid framework within objectori program perform control type provid mechan finalis code associ object packag except avail ada 83 therefor discuss howev protect object atc tag type control type new briefli describ full discuss aspect ada 95 see burn well 1995 41 protect object protect object ada 95 similar concept condit critic regionhoar 1972brinchhansen 1972 monitorhoar 1974brinch hansen 1973 data access mutual exclus encapsul protect object data access procedur entri also declar protect object execut procedur entri requir mutual exclus access object task ada protect object may declar instanc protect record type singl oneoff protect object anonym type exampl follow protect object singl instanc anonym protect record type allow mutual exclus access share data protect shareddata oper share data procedur procedur readd privat thedata data someinitialvalu encapsul data protect bodi shareddata procedur begin thedata procedur readd data begin differ procedur entri protect object follow procedur simpli provid mutual exclus access data task activ protect object call procedur gain immedi access data entri associ guard call barrier call guard entri allow guard evalu true task activ protect object follow show readerwrit exampl write must initialis data read protect shareddata procedur entri readd privat thedata protect bodi shareddata procedur begin thedata dataavail true indic data avail dataavail begin insid protect entri call requeu back onto entri anoth entri differ protect object 42 atc ada 83 select entri call facil extend ada 95 allow task execut section code whilst wait entri timeout occur code finish entri call accept timeout expir call timeout cancel call accept timeout expir section code finish execut code abort follow illustr syntax select triggerev trigger protect object option sequenc statement execut event receiv abort abort sequenc statement 43 tag type objectori program ada support objectori program two complimentari mechan provid type extens dynam polymorph tag type classwid type ada new type creat old type properti type chang use deriv type exampl follow declar new type subtyp call set properti integ type restrict rang set integ distinct interchang type set new integ rang 1 100 new oper manipul set defin howev new compon ad tag type remov restrict allow extra compon ad type type might potenti extend way must declar tag type extend type inevit lead type becom record record type privat type implement record tag tag type provid mechan type extend crement result programm creat hierarchi relat type part program may wish manipul hierarchi purpos without concern member hierarchi process one time ada stronglytyp languag therefor mechan need object member hierarchi pass paramet classwid program techniqu enabl program written manipul famili type associ tag type type tclass compris type famili type start oper call paramet whose type classwid runtim dispatch occur appropri oper associ actual type object typic repres packag contain tag type primit oper packag object type objtyp tag limit privat procedur op1o objtyp procedur op2o objtyp procedur classwideopo objtypeclass privat type objtyp tag limit record object extend usual child librari packag allow access privat part parent declar packag objectextend type extendedtyp new objtyp privat procedur op1o extendedtyp procedur op2o extendedtyp privat type extendedtyp new objtyp record 44 control type support objectori program provid control type type possibl defin subprogram call automat ical object type ffl creat initi ffl ceas exist final ffl assign new valu adjust gain access featur type must deriv control predefin type declar librari packag adafin must part control class hierarchi packag adafin defin procedur initi final adjust type deriv control procedur may overridden object typic ceas exist go scope exit block may involv number call final repres recover atom action ada 95 section 21 requir atom action defin briefli review illustr gener approach implement ada 95 1 welldefin boundari atom action encapsul one ada packag henc side boundari action well defin subprogram procedur function packag interfac use provid start end point task 2 indivis protect object provid mechan indivis properti action implement protect entri use provid requir synchronis exit action 3 nest nest action support implement action abstract data type 4 concurr concurr execut atom action provid concurr task group task share action automat execut concurr 5 recoveri backward forward recoveri program use combin protect object atc except 51 simpl action illustr atom action program ada consid first simpl nonnest action recoveri say three task action encapsul packag three visibl procedur call appropri task assum task abort desert task packag simpleact procedur t1param param call task 1 procedur t2param param call task 2 procedur t3param param call task 3 bodi packag automat provid welldefin boundari requir provid indivis protect object action control use purpos provid similar function coordin atom action manag introduc randel et al 1995xu et al 1995 packag visibl procedur call appropri entri protect object four entri suffici compon action call individu entri indic arriv finish compon call finish entri packag bodi simpleact protect actioncontrol entri first call entri second call t2 entri third call t3 entri finish call task privat firsther thirdher releas definit local protect object control resourc protect bodi actioncontrol separ procedur t1param begin acquir resourc action commun task execut t3 via resourc releas resourc similar second third task begin initialis local resourc implement action control given protect bodi actioncontrol entri first firsther begin firsther true first entri second secondher begin secondher true entri third thirdher begin thirdher true entri finish releas finishedcount 3 begin releas fals firsther fals secondher fals thirdher fals els releas true barrier entri first second third ensur three task activ action one time three task call finish entri barrier lower task releas boolean releas use program requir releas condit finish first two call finish block part barrier express fals third call come count attribut becom three barrier come one task execut entri bodi releas variabl ensur two task releas last task exit must ensur barrier rais note ada task identifi use necessari valid ident task perform action compon follow section assum task particip action use packag implement action task call associ oper 52 backward error recoveri section ada atc facil except handl use implement backward error recoveri scheme base backward error recoveri requir use form recoveri cach section assum exist follow gener packag save restor task variabl assum strong type provid ada ensur ada program remain viabl type data privat packag recoverycach procedur procedur consid three ada task wish enter recover atom action call appropri procedur packag given packag convers procedur t1param param call task 1 procedur t2param param call task 2 procedur t3param param call task 3 bodi packag encapsul action ensur commun three task allow control protect object respons propag error condit notic one task task save restor persist data recoveri cach ensur task leav action time contain two protect entri protect procedur ffl wait abort entri repres asynchron event task wait whilst perform part action first call indic new action control save persist data recov cach requeu facil use place first task back queue ffl task call done finish three task call done allow leav ffl task recognis error condit either rais except failur accept test call signal abort restor persist data defin within packag bodi set flag kill true indic task must recov note backward error recoveri perform task concern actual caus error kill becom true task action receiv asynchron event event handl task must wait done entri termin convers modul togeth recoverycach packag bodi convers primaryfailur secondaryfailur tertiaryfailur except type modul primari secondari packag persistentcach new recoverycach persist data retain convers protect control entri waitabort entri done procedur signalabort privat kill releas inform newconvers local protect object commun action protect bodi control entri waitabort kill newconvers begin newconvers save persist data recoveri cach requeu waitabort abort return execut kill inform kill fals inform 0 procedur signalabort begin restor persist data kill true entri done donecount 3 releas begin donecount 0 releas true els releas fals newconvers true procedur t1param param separ procedur t2param param separ procedur t3param param separ code task contain within singl procedur t1 etc within procedur three attempt made perform action attempt fail except atom action failur rais attempt surround call save state restor state attempt fail attempt encapsul separ local procedur t1 primari etc contain singl select abort statement perform requir protocol control recoveri cach use task save local data procedur t1param param procedur t1primari begin select trigger event finish rais primaryfailur abort begin code implement atom action accept test might rais except fail controllersignalabort els controllerdon signal complet except other controllersignalabort procedur t1secondari procedur t1tertiari packag mycach new recoverycach local data begin tri modul loop begin case tri primari t1primari exit secondari t1secondari exit tertiari t1tertiari except primaryfailur secondaryfailur tertiaryfailur rais atomicactionfailur other rais atomicactionfailur similarli t2 t3 53 forward error recoveri ada atc facil use except implement atom action forward error recoveri concurr execut task consid follow packag implement atom action three task packag action procedur t1param param call task 1 procedur t2param param call task 2 procedur t3param param call task 3 bodi packag encapsul action ensur commun three task allow control protect object respons propag except rais one task task ensur leav action time adaexcept use adaexcept packag bodi action type votet commit abort protect control entri waitabort exceptionid entri done vote votet procedur signalabort exceptionid privat entri waitvot votet kill releas inform local protect object commun action protect bodi control entri waitabort exceptionid kill begin inform kill fals inform 0 entri done vote votet result votet true begin abort finalresult abort requeu wait abort procedur signalabort exceptionid begin kill true reason e entri wait vote votet result votet releas begin waitcount 0 releas true els releas fals finalresult commit reason nulloccurr procedur t1param param begin select trigger event except abort begin code implement atom action controllerdonecommit decis signal complet except e other except except rais action task must particip recoveri e other exceptionidentity rais task handl except handledok controllerdonecommit decis els controllerdoneabort decis abort rais atomicactionfailur procedur t2param param procedur t3param param compon action t1 t2 t3 ident structur compon execut select statement abort part trigger event signal control protect object compon indic except rais handl local one compon ent abort part contain actual code compon code execut without incid control inform compon readi commit action except rais abort part control inform identifi except pass note unlik backward error recoveri given previou section caus error must commun control receiv notif unhandl except releas task wait wait abort trigger event task late arriv receiv event immedi tri enter select statement task abort part abort start except rais task statement entri call control except success handl compon task indic prepar commit action indic action must abort task indic action abort task rais except atom action failur exampl illustr possibl program atom action forward error recoveri ada howev first except pass control rais task possibl get concurr rais except except rais abort part lost abort 54 nest action implement nest action ada 95 requir extens al gorithm first convert basic approach atom action type therefor one instanc creat easili achiev introduc notion action identifi exampl consid implement action forward error recoveri given previou section packag specif becom packag action type actionid privat function newact return actionid procedur procedur procedur privat type actiont type actionid access actiont action id privat assign comparison avail implement action type record contain instanc control becom protect type instanc persist data control access protocol type actiont record interfac procedur use action id gener call correct control exampl acwaitabort action type introduc nest action call within bodi action produc follow ada structur nest action packag contain action nest action id nestedact packag bodi action procedur t1a actionid otherparam param begin select abort begin code implement atom action includ nest action call acdonecommit decis complet outer action except e other except e other exceptionidentity rais task handl except handledok acdonecommit decis els acdoneabort decis abort rais atomicactionfailur code expand remov explicit procedur nest actiont1 follow equival structur obtain select abort begin code implement atom action includ select abort begin code implement inner atom action ncdonecommit decis signal complet except e other acdonecommit decis signal complet except e other outer action except signal outer abort sequenc code abort turn caus inner action abort without recoveri action facilit recoveri inner action necessari use anoth ada 95 facil call controll type object control type amongst thing finalis routin defin henc action procedur follow extra compon nestedactionid new finalizationlimitedcontrol null record procedur finalizear abortrecoveri finalis action signal action control action abort procedur finalizear abortrecoveri begin action arncdoneabort procedur t1n nestedactionid nestedact begin inner action repres nest t1 abort ar control variabl goe scope howev happen finalis procedur call note small modif control task requir final routin call everi time variabl goe scope irrespect whether action abort 55 desert problem task abort far assum expect task arriv leav action task fail arriv task block tri leav solv desert problem necessari know mani task enter action task enter readi leav action complet simpl modif action control protect object allow protect type control entri waitabort exceptionid entri done vote votet procedur signalabort exceptionid privat entri entered exceptionid entri waitvot votet kill releas inform activ new privat entri provid call enter count activ number task activ action task call wait abort entri part atc statement call immedi accept count increment call requeu enter entri entri waitabort exceptionid true begin activ requeu enter abort entri entered exceptionid kill begin inform activ kill fals inform 0 guard wait entri simpli chang includ activ count reset zero task final finish action entri wait vote votet result votet activ releas begin waitcount 0 releas true els releas fals finalresult commit reason nulloccurr activ 0 requir action contain timeout synchron commun might block cooper task absent commun essenti action except rais timeout expir one final problem address happen task execut atom action abort anoth task outsid action similar nest action situat recoveri approach 56 objectori program reusabl action system develop far easili rewritten make ex tensibl exampl consid basic packag provid action control support forward error recoveri action control protect type place privat part packag child packag written implement atom action particular system code therefor reus adaexcept use adaexcept packag atomicactionsupport abstract tag limit privat privat type votet commit abort protect type actioncontrolleratleast posit entri waitabort exceptionid entri done vote votet procedur signalabort exceptionid privat entri entered exceptionid entri waitvot votet kill releas activ actiontatleast posit tag limit record notic exampl action parameteris tag type allow type extend child packag paramet indic control minimum number task must activ action action termin bodi packag simpli contain bodi action control one given section 55 except barrier wait entri entri wait vote votet result votet activ activ atleast releas action creat extend action type exampl given next section 6 exampl action system consid exampl control posit three axi robot softwar consist sever task includ coordin control three task control robot one axi coordin control task inform three task new posit requir act move one posit anoth atom action rest system see robot one posit anoth atom action support robot simpli child packag atom action support given previou section action extend includ protect type use commun synchronis four task coordin control task written new posit task acquir routin ad task packag atomicactionsupportrobot type myactiont new actiont privat subtyp coordin integ rang 0 180 type coordin record procedur procedur procedur procedur privat protect type sharedcoord procedur writecoordsnewpo coordin privat type myactiont new actiont record note ada 95 access paramet use avoid alloc action data dynam allow runtim dispatch oper use action extend bodi packag given structur interfac procedur similar given previou section packag bodi atomicactionsupportrobot protect bodi sharedcoord separ procedur access myactiont begin select abort begin code implement atom action includ move new posit acdonecommit decis signal complet except e other except e other move back origin acdoneabort decis similarli ycoord zcoord procedur begin select abort begin code implement atom action includ acdonecommit decis signal complet except e other except e other acdoneabort decis rais atomicactionfailur bodi share coord protect object protect bodi sharedcoord procedur writecoordsnewpo coordin begin nextpo newpo newvalu true newvalu begin xgot true ygot zgot xgot fals ygot fals zgot fals newvalu fals similarli readi readz final code four task given atomicactionsupportrobot use atomicactionsupportrobot procedur main robotact alias myactiontatleast 4 action four task must enter leav type dimens x z task control three axi control task task bodi control begin coordcontrollerrobotactionaccess start loop determin next posit coordcontrollerrobotactionaccess next loop task bodi axi begin loop x xcoordrobotactionaccess ycoordrobotactionaccess z zcoordrobotactionaccess perform requir oper new posit begin 7 distribut system ada defin distribut system interconnect one process node system resourc comput storag cap abil zero storag node system resourc storag capabl storag address one process node ada model program distribut system specifi partit unit distribut partit firstclass languag entiti sens declar type instanc creat instead compris aggreg librari unit separ compil librari packag subprogram collect may execut distribut target execut environ inabl declar partit type main limit ada model exampl array partit express within languageburn well 1995 partit resid singl execut site librari unit occupi logic address space one partit may howev resid execut site partit may either activ passiv librari unit compris activ partit resid execut upon process element contrast librari unit compris passiv partit resid storag element directli access node differ activ partit refer model ensur activ partit directli access variabl activ partit variabl share directli activ partit encapsul passiv partit commun activ partit defin languag via remot subprogram call howev implement may provid commun mechan help construct distribut program ada distinguish differ categori librari unit impos restrict categori maintain type consist across distribut program two categori design follow pragma ffl pure pure packag packag restrict enabl freeli replic differ activ passiv partit without introduc type inconsist restrict concern declar object type particular variabl name access type allow unless within subprogram gener subprogram task unit protect unit type declar pure packag consid singl declar irrespect mani time packag replic distribut system packag replic partit refer henc pure packag enabl type declar subsequ use commun partit ffl remot call interfac remot call interfac packag defin interfac activ par tition bodi exist within singl partit occurr stub alloc use standard rpc implement techniquesbirrel nelson 1984 specif remot call interfac variou restrict exampl prohibit definit variabl ensur remot data access packag categoris call normal librari packag includ one partit replic type object view distinct 71 program distribut action mani way distribut program construct ada see burn well 1995 clientserv model use robot arm problem given previou section use exampl follow assumpt made ffl control axi task distribut machin fail silentschlicht schneider 1983 ffl replic avail requir achiev transpar program ffl commun reliabl common distribut program languag possibl take arbitrari ada program distribut therefor necessari restructur one given section 6 figur 2 illustr logic partit applic box repres partit arrow show control flow sever restrict impos interfac partit distribut ada system particular influenc implement distribut action ffl protect object call directli remot partit instead necessari provid rpc interfac ffl except identifi pass one partit anoth consequ necessari pass enumer type instead convert distribut ada runtim support system instead collect commun runtim support system propos solut consid first pure packag construct provid type use throughout system coordin share data local action local action coordin coordin coordin subact axe control z axi task subact axi task subact axi task subact coordin distribut action coordin figur 2 partion robot arm problem packag commontyp pragma pure subtyp coordin integ rang 0 180 type coordin record type votet commit abort type type dimens x z next necessari construct server act control share data distribut action section 6 data commun action new x z coordin encapsul protect object directli call across distribut system necessari encapsul packag provid rpc interfac commontyp use commontyp packag shareddata pragma remotecallinterfac procedur writecoordsnewpo coordin procedur readddimensionc coordin packag bodi simpli declar protect object ident one given section 6 procedur write coord read call appropri procedur entri distribut action control similar translat origin centralis control implement protect type encapsul packag given remot call interfac except identifi replac error id commontyp use commontyp packag globalactionsupport pragma remotecallinterfac procedur abortactiona procedur doneavot votet procedur signalaborta procedur donecleanupavot votet howev one chang need made origin control call asynchron select atc statement possibl call protect object across network atc statement trigger event must entri call delay henc possibl replac call code simpl rpc help solv problem necessari distinguish task wait action finish normal wait finish follow except previous entri done use occas new routin done cleanup use indic latter done use former bodi packag packag bodi globalactionsupport protect type globalactioncontrolleratleast integ entri waitabort entri done vote votet procedur signalabort entri donecleanup vote votet privat entri entered entri waitvot votet entri waitcleanup vote votet kill releas inform activ globalactioncontrolleratleast 4 protect bodi globalactioncontrol entri waitabort errorid entri entered errorid entri done vote votet result votet entri donecleanup vote votet result votet true begin abort finalresult abort requeu waitcleanup abort procedur signalabort begin possibl get multipl except rais approach rais first error particip kill true reason e first reason entri wait vote votet result votet activ activ atleast releas begin waitcount 0 releas true els releas fals finalresult commit reason nullid activ 0 kill true flush remot call entri waitcleanup activ activ atleast releasing2 begin waitcleanupcount 0 els activ 0 releas true flush orphan procedur waitaborta errorid begin similar donea signalaborta donecleanupa essenti note task call global action control task creat local implement remot procedur call therefor guarante remot task wait atc event entri distribut action complet one call immedi cancel accept consequ necessari global control flush task wait also note multipl errorsexcept possibl first error one return particip howev would possibl implement except tree next local action control consid atc necessari local task forward trigger event wait occur commontyp use commontyp packag localactionsupport task type localactioncontrol entri waitabort privat entri aborttaken bodi globalactionsupport packag bodi localactionsupport task bodi localactioncontrol begin loop accept waitabort errorid requeu aborttaken abort forward request select accept aborttaken errorid els task accept trigger event requeu pass event global action control rpc return error may signal call may flush error return condit accept issu possibl client gone away time execut individu particip action program local action axe consid instanti gener packag commontyp use commontyp local devic paramet move packag axesact procedur move commontyp use commontyp localactionsupport use localactionsupport globalactionsupport use globalactionsupport adaexcept use adaexcept shareddata use shareddata packag bodi axesact procedur move begin select local call convert x ex abort begin code implement atom action includ shareddatareadd c remot call move c doneacommit decis remot call except e other convert x ex except e other donecleanupacommit decis remot call abort rais atomicactionfailur note ident structur given previous paper howev trigger event call local action control task call rpc call remot action control share data control return signal abort remot call trigger event might still occur therefor necessari rais except instead task call done return trigger event occur rpc call therefor cancel cancel occur global action control finish clean control view call orphan automat flush code robot control action similar structur necessari creat axe task done follow commontyp use commontyp packag axe axesact commontyp use commontyp packag bodi axe task bodi axi packag mylocalact new axesactiona appropri param begin loop perform oper except atomicactionfailur final partit defin use main procedur exampl axe use axe commontyp use commontyp procedur main begin configur program use group togeth librari packag partit alloc node distribut system 8 conclus atom action power dynam structur techniqu allow softwar faulttoler system implement howev clear program languag oper system support applic program languag oper system provid direct sup port ada 95 program languag howev provid rich set mechan aid program concurr realtim system paper shown facil use implement aspect atom action lack truli distribut runtim support system ada mean possibl call protect object across partit pass except identifi caus difficulti program distribut action ada facil impress defin support particular ffl encapsul ffl commun synchronis ffl except asynchron transfer control ffl objectori program ffl finalis fundament build block allow resuabl atom action construct abil program atom action ada lead increas use engin high integr applic r fault toler principl practic implement remot procedur call structur multiprogram oper system principl program atom action ada concurr ada recoveri asynchron system structur convers oper ationprocedur orient program languag except handl issu propos notat toward theori parallel program program structur error detect recoveri fault toler use commun sequenti process atom action faulttoler use csp approach mechan convers scheme base monitor process structur system structur softwar fault toler recoveri block concurr atom action reliabl issu comput system design backward error recoveri via convers ada design reliabl softwar distribut system use convers scheme fault toler concurr objectori softwar coordin error recoveri tr ctr jrg kienzl alexand romanovski implement except open multithread transact base ada 95 except acm sigada ada letter vxxi n3 septemb 2001 lu miguel pinho francisco vasqu multi ada 95 base architectur fault toler support realtim system acm sigada ada letter vxviii n6 p5260 novdec 1998 marta patiomartnez ricardo jimnezperi sergio arvalo synchron group transact rendezv distribut ada environ proceed 1998 acm symposium appli comput p29 februari 27march 01 1998 atlanta georgia unit state alexand romanovski bo sandn except except handl acm sigada ada letter vxxi n3 septemb 2001 patiomartnez r jimnezperi arvalo implement transact use ada except featur miss acm sigada ada letter vxxi n3 septemb 2001 alexand romanovski jrg kienzl actionori except handl cooper competit concurr objectori system advanc except handl techniqu springerverlag new york inc new york ny 2001 durgesh pant k c joshi softwar fault toler comput need prospect ubiqu v8 n16 p11 april 24 2007 april 30 2007