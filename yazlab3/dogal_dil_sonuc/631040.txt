new approach version control method control version softwar hierarch structur entiti present use variant structur principl particular version entir system form combin relev exist version variou compon system algebra version languag allow histori number seri subvers variant join describ shown join oper simpli lattic least upper bound togeth variant structur principl provid systemat framework recombin diverg variant util approach demonstr use lemur program environ modular c program develop use way notion version relat possibl world semant intension logic discuss b introduct softwar system undergo constant evolut specif chang improv made bug fix differ version creat suit differ need chang made famili system aris similar yet differ handl chang larg system nontrivi task differ compon evolv differ exist version control softwar configur system succeed solv problem deal evolut pure version control system scc 22 rc 28 30 use delta techniqu save storag space keep track chang made differ programm file space save techniqu also develop 8 16 18 29 softwar configur system make 7 allow automat reconfigur system chang made compon also detail analysi chang compon reduc much useless compil 24 31 integr system attempt combin idea among better known system model 11 23 tichi work cmu 26 27 gandalf 4 9 17 adel 1 2 5 6 dsee 12 jasmin 15 shape 13 14 odin 3 system greater lesser degre allow develop larg project develop mani differ programm use softwar databas version control file sometim also modul well allow restrict certain task certain individu integr version file right oper system despit advanc integr hierarchicallystructur entiti version control still satisfactori use system rc scc file tree revis trunk consid main version branch correspond variant often number chang made variant chang merg sometim textual back trunk tree structur show merg took place integr environ adel use modul famili variant specif specif variant implement implement rcslike structur develop implement case tree structur use version yet tree structur appropri softwar develop constant merg differ chang system direct acycl graph dag would appropri exampl suppos program written work standard screen english two peopl independ modifi program first add graphic interfac chang error messag french someon ask version graphic french messag new version inherit two ancestor class inherit sever ancestor objectori program concept variant fulli develop parna 19 describ need famili softwar show variant good idea howev concept still formalis discuss variant 32 one could give definit variant 14 read suspect still unsolv problem softwar engin produc portabl softwar design sens predict plan possibl certain modul system sprout variant branch still fact variant happen perhap problem variant must plan instead allow happen furthermor one abl refer version complet system languag one version compon paper address concept variant variant complet system relat version individu compon section 2 present need version complet system inform present version compon complet system interact section 3 formal present algebra version allow subvers join version along refin relat version version space therefor creat lattic section 4 formal present relationship version complet system compon use variant substructur principl section 5 illustr version languag use alreadi exist c program environ final section 6 discuss idea present possibl extens well show could integr exist configur manag system global version main weak exist tool differ version compon local signific might case exampl third version compon also third version compon b priori reason expect relationship third version separ compon except concept variant integr environ adel variant repres differ interfac modul local signific compon implement interfac complet separ therebi creat situat code duplic juggl softwar configur lack correspond version differ compon make difficult automat build complet system instead user allow mix match differ version differ compon arbitrarili tool give user freedom build desir combin also burden respons decid huge number possibl combin yield consist work instanc system approach howev version label necessarili number intend global uniform signific thu fast version compon meant combin fast version compon b programm expect ensur correspond version compat one advantag approach possibl talk version complet systemform simplest case uniformli choos correspond version compon suppos exampl creat fast version everi compon say compil build fast version compil combin fast version compon cours gener unrealist requir distinct fast version everi compon may possibl speed compil alter compon compon fast version extend configur rule follow build fast compil take fast version compon exist otherwis take ordinari vanilla version gener approach defin partial order algebra version label partial order refin relat v v w read v refin w v relev w mean inform w result develop version v basic principl configur version w system use version v particular compon compon exist relev version use version v compon long compon exist version use refin order autom build complet system user specifi version complet system desir variant structur principl defin result combin relev version compon 3 version space section introduc version algebra give rule practic applic version oper simplest possibl algebra would allow one version call version vanilla version written ffl empti string 31 project histori simplest version correspond success stage develop process version 1 version 2 version 3 etc obviou extens allow subsequ 11 12 231 version control system would facilit mainten would also aid recoveri error physic accident destruct file logic introduct flaw algorithm furthermor would allow recuper previous reject idea uncommon idea conceiv partial thought reject need six month later solv kind problem program scc rc design fact notion numer string keep track success stage quit suitabl howev rc two differ mean version 1234 actual mean subvers 34 version 12 trunk version tree version 1234 13 therefor incompar even though would appear figur 13 succe 1234 version space numer version build one branch subvers must use creat fork initi set possibl version describ follow n nonneg integ refin order describ earlier indic one version deriv other order written v must wellfound transit current set version use intuit dictionari order n prefix exampl 1234 v 13 v 245 numer version would use would depend environ use one exampl would keep complet record chang file could done sixnumb version name correspond date 19920618111829 anoth approach would use number edit file take place fewer number real version mean version 121 122 123 could correspond success edit version 12 ultim yield version 13 32 differ requir piec softwar go use peopl differ environ like requir user differ one import differ would level user interfac aspect matter person tast one prefer use graphic menu one prefer text other necess syrian would want read write arab japanes use katakana hiragana kanji canadian would want abl choos english french even essenti function differ user interfac would signific differ function also appear exampl lisp system brobdingnagian 1 everyth includ kitchen sink includ yet typic lisp user need mani packag offer rather forc take mini maxi version user abl pick choos among packag need particular exampl autoload featur use case system differ implement may also aris one port system one machin anoth version machin x may ident differ machin z handl problem need introduc concept subvers call variant mani system problem partial address scc rc introduct branch unfortun reli numer string identifi branch becom unwieldi choos path name subvers new space possibl version becom brobdingnag imaginari countri giant jonathan swift gulliv travel x alphanumer string exampl graphicsmous version user interfac would mous subvers graphic version user interfac parenthes insert reduc ambigu unlik rc name variabl constant repres anyth except refin relat incompar need one axiom subvers consid oper ffl ident associ subvers power exampl consid task simultan maintain separ releas common exampl normal work version current version develop yet difficult handl properli suppos two current releas 234 356 wish make repair 234 subvers requir creat version 2341 fix bug version would still consid anterior 356 correspond realiti rather would want 234bugfix reader might wonder grammar allow v v rather v x consid task maria keir work separ subsystem set version subvers work merg prevent ambigu maria version could preced maria similarli keir 33 join version subvers allow differ function uncommon differ subver sion compat exampl easili imagin want japanes lisp system infinit precis arithmet graphic machin x handl sort thing need abl join version lisp version would japanesegraphicsinfinitex final space version becom make order complet add two axiom oper idempot commut associ leftdistribut oper defin least upper bound oper induc v relat consid version v 1 least upper bound v 1 v v 1 hold consid least upper bound variant substructur principl present x4 call use relev compon particular configur built oper defin least upper bound oper term relev would mean fact version languag allow join independ version necessarili mean arbitrari join actual make sens howev merg made make sens join perfectli address need describ merg note merg text code 10 take place merg take place version name configur manag must ensur compon make sens togeth check take place syntact level version name see x4 34 canon form equal axiom allow canon form version express fact except commut associ rule equat simpli becom rewrit rule join version must introduc total order subvers correspond form dictionari x alphabet preced x dictionari order get canon form join well exampl last first gamma first last assum rightassoci 4 version structur refer indiscrimin version complet system version compon question aris interact alreadi explain requir everi compon exist everi version instead consid absenc particular version mean gener version adequ simplest case mean vanilla version appropri mean exampl configur french version use french version compon exist otherwis use standard one gener howev vanilla version alway best altern suppos exampl need keirapplefast version understood fast version keir appl version certain compon avail exactli version would hardli justifi assum vanilla one appropri keirappl version certainli use fail keir version exist plain one indic none specif version avail gener rule construct version v system choos version compon close approxim v accord order version introduc earlier could call relev version precis select appropri version compon c let v set version c avail set relev version fv vg relev version maximum element setif one maximum element error conditionand version v given system gener principl follow suppos object compon version relev v form join version c 1 c 2 case v version c relev v furthermor version v construct principl call variant structur principl describ exactli way subvers system inherit compon supervers also accord well motiv given variou version form oper describ earlier section exampl specifi construct version 32 object take version 282 object exist version 34 282 279 18 156 ffl specifi build version keirapplefast select keirappl version compon exist version keir keirappl keirfast applefast mariaappl fast ffl final principl also explain solv problem combin version exampl combin maria orang keir appl version see x3 desir version system would mariaorangekeirappl accord rule compon select version relev mariaorang keir version avail version relev keirappl maria version avail thu version compon c avail keirpear fredappl keir appl ffl take version keir hand version avail keirappl maria ffl best choic system exist desir version notic possibl construct version mariaorangekeirappl even compon exist version howev also make sens individu compon exist version allow otherwis incompat project merg consid exampl situat describ keir maria seen fit alter compon c exist keirappl maria version accord principl form mariaorangekeirappl version system appropri version compon question solut keir maria get togeth produc mutual accept compromis version compat keirappl maria variant system label compromis compon mariakeirappl version compon done principl say mariaorangekeirappl version whole system compromis version relev recal version order maria keirappl lie mariakeirappl turn lie mariaorangekeirappl 5 lemur test notion version ad sloth exist softwar engin environ c program develop author result evolv program lemur complet present sloth well comparison relat work see 20 51 sloth sloth set tool design facilit reusabl c program system modul devis sophist method tradit use c program modul unix directori two interfac file externi extern visibl variabl definei manifest constant two implement file vari local variabl proci local routin well bodyi contain initi code import file state modul need modul run correctli sloth three command vm command use view file mm modifi lkm command origin sloth build modul uselist file contain list modul depend comput transit closur import depend build progc file compon file compil result progo file link progo file modul make complet system sloth shown remark use intend goal reusabl met popshop sever compil written consist 100 differ modul build 10 differ applic reader ask refer 20 detail 52 lemur sloth version lemur evolv form sloth lemur allow user creat label differ version individu file make modul label element version space describ repres simpl linear syntax use extens file name exampl keir need separ version procedur definit file modul would creat insid modul new file proc keirapplei appl version fast version fast subvers requir chang modul procedur definit would creat addit file proc keirapplefasti note new file replac old one differ version coexist note also everi file exist everi version exampl fast subvers keirappl may requir chang result file full keirapplefast label lemur basic compon file explicit usermaintain version user directli creat separ version whole modul applic instead lemur use principl previou section creat automat desir version applic suppos exampl maria would like compil run mariaorang version project call comp invok lemur configur command comp argument mariaorang paramet v option lemur proce much v option absent use import list form uselist modul requir check file date recompil necessari link togeth execut would normal call comp differ though individu file look first mariaorang version instead vanilla one link complet execut name comp mariaorang everi file need mariaorang version procedur straight forward said earlier howev requir everi file exist version request desir version avail lemur follow principl x4 select relev version avail instanc mean mariaorang version lemur look maria version even unavail settl vanilla version file question form inherit implicit variant structur principl allow sourc code share version subvers lemur also follow principl x4 creat label file individu modul suppos mariaorang version request relev file fred modul must produc lemur automat use case relev version intern fred file requir declar import modul compil complet lemur automat label result file fred mariaorangeo one file involv actual full mariaorang label otherwis label file fred mariao assum least one maria version involv file involv fact vanilla file produc given vanilla name fredo gener label file least upper bound version file involv produc result label may much gener version request mean file use build version system inherit principl therefor allow us share object code version subvers high granular modul sloth allow one sort interest thing exampl one could write test version modul interfac would allow tester look valu inner variabl advantag code implement would chang would file even touch import file separ one one version modul depend one set modul anoth version depend anoth set modul word hierarch structur shape system chang one version anoth sens lemur actual goe beyond principl previou section assum structur system invari howev easili reformul gener principl stipul everi structur object explicit subcompon list one subcompon allow subcompon list exist variou version configur object first select relev version compon list assembl relev version compon appear list lemur gener sloth import list possibl use make rc version modul differ version consist complet differ modul case differ makefil written version lot inform repeat global makefil written ensur right version makefil use creat configur whole process quit complex lemur makefil need written everyth done automat extens lemur marmoset 21 allow differ languag use use simpl configur file much simpler standard makefil 53 bootstrap lemur test notion version lemur bootstrap use lemur creat version origin sloth written monolith manner handl version rewritten use origin version modular form much suitabl mainten extens version basic lemur function sloth work use creat system allow file exist multipl version true lemur true lemur use creat subvers lemur allow lemur use basic version also subvers ie version xy xz xya subvers subvers lemur creat accept numer version numer lemur new subvers creat accept join version join lemur addit variant also creat allow differ option subsequ join togeth 54 implement lkm build modul one time start depend modul make gener version possibl modul goe complex modul still build gener version possibl version cours depend version modul depend final build gener possibl version object file situat gener version exampl one could ask xy version one file x version version xy version vm lkm program error condit hand mm ask user wish creat new file version file taken initi copi new version file 6 discuss problem variant softwar system difficult one claim languag propos paper step right direct differ made version revis variant subsystem level variant evolv point becom complet differ product fine noth special done cours paper way address variant version manag sens control access compon system programm user made idea paper put question need softwar databas restrict access certain part system modifi uncontrol manner languag sinc use lattic describ version space one might ask meet two version mean fact ab would version refin b ab exampl one could conceiv common transliter russian bulgarian exampl one write dzhon john result would scheme defin russianbulgarian one ask russian version russianbulgarian file could use russian one current system possibl horrend long version name repeat use might difficult figur happen one solut allow version variabl introduc new version defin term exist one exampl suppos francophon belgian user want french languag mous graphic version infinit precis arithmet correspond version algebra express frenchgraphicsmouseinfinit clear enough rather unwieldi version variabl user could introduc definit thereaft request belgian version even use express like belgianfast fact effect achiev elegantli allow inequ rather equal exampl definit given increment three inequ belgian french belgian graphicsmous belgian infinit sometim complex would come mani modul name version within modul differ case use local version name defin inequ would allow hide softwar develop one key goal modul propos real version languag constant variabl differ scope defin use inequ next step would obvious add type fact surpris sinc sever configur manag system allow type version name languag compon version name exampl could one lucid lustr relat work said introduct approach version control origin work directli relat howev reason idea develop paper could appli exist system softwar configur system see sens consid two system appear flexibl enough chang easili made odin shape odin 3 system allow one formal softwar configur process object atom object tool manipul object axiom given declar object one use pre postcondit defin action tool reason version ad entir system atom object could version rule defin program would pass version exampl mm vm lkm oper could defin odin shape 13 14 system attempt integr better featur adel make dsee attribut file system interfac either standard file system databas make access version transpar user version languag disjunct normal form or and version languag chang allow variant substructur principl appli shape would generalis significantli specul remark close connect notion version discuss logi calphilosoph notion possibl world see exampl 25 possibl world aris branch logic call intension logic deal assert express whose mean vari accord implicit context usual context involv space time mean previou presid vari accord statement refer eg us franc refer 1989 1889 statement eg brother former employ requir extens inform obvious notion possibl world liter form rais mindboggl philosoph question taken formal indic sort context time place speaker orient prove extrem use formal hitherto mysteri paradox aspect natur languag semant montagu pioneer area interpret element version space possibl world possibl world instanc softwar question instanc differ instanc possibl world exampl world error messag english wherea neighbor world french principl describ earlier tell us compound object vari one world next provid know part vari lemur small way allow us visit one world construct instanc softwar without worri softwar look like world lemur result intension one tool name sloth sure imagin tool even ambiti unix montagunix would specifi say command world would like visit say frenchgraphicsmous world done would give us illus appropri instanc one exist word examin sourc would find one copi one copi file test file well file could scatter directori structur could move around cours behind scene montagunix would monitor activ automat choos relev version everi file request version would hidden us creat file would attach appropri version tag montagunix could give develop illus privat copi project way time share gave user impress privat comput result sophist refin relat version howev know would implic differ user network conflict softwar acknowledg mani thank gordon brown code lemur qualiti code except pleas announc lemur avail first author r experi databas program protect cooper softwar engin environ odin system object manag extens softwar environ represent famili softwar system configur manag adel data base program structur larg version softwar product revis control automat delet obsolet inform integr noninterf version program organ softwar distribut envi ronment integr toolset engin softwar configur softwar system model facil effici applic data type gandalf project techniqu stringtostr correct design softwar eas extens contract unix tool manag reusabl softwar com ponent reduc complex softwar configur sourc code control system control larg softwar develop distribut en viron live inconsist larg system formal philosophi select paper richard montagu softwar develop base modul interconnect softwar develop control base system structur descript stringtostr correct problem block move smart recompil report first intern workshop softwar version configur control tr rcsmyampersandmdasha system version control smart recompil odin system object manag extens softwar environ editor revis control experi data base program jasmin softwar system model facil techniqu stringtostr correct workshop softwar version configur control integr toolset engin softwar configur integr noninterf version program unix tool manag reusabl softwar compon adel configur manag stringtostr correct problem block move protect cooper softwar engin environ effici applic data type softwar develop control base modul interconnect design softwar eas extens contract organ softwar distribut environ design implement evalu revis control system computeraid softwar engin distribut workstat environ represent famili softwar system softwar develop control base system structur descript control larg softwar develop distribut environ ctr john plaic blanca mancilla collabor intension hypertext proceed fifteenth acm confer hypertext hypermedia august 0913 2004 santa cruz ca usa nikolao papaspyr ioanni kassio glu embed c marriag multidimension objectori program softwarepractic experi v34 n7 p609630 june 2004