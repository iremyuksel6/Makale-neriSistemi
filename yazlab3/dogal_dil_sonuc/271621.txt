spectral decomposit nonsymmetr matric distribut memori parallel comput implement perform class divideandconqu algorithm comput spectral decomposit nonsymmetr matric distribut memori parallel comput studi paper present gener framework focu spectral divideandconqu sdc algorithm newton iter although algorithm requir sever time mani float point oper best serial qr algorithm simpli construct small set highli paralleliz matrix build block within level 3 basic linear algebra subroutin bla effici implement build block avail wide rang machin illcondit case algorithm may lose numer stabil easili detect compens forth algorithm reach 31 effici respect underli pumma matrix multipl 82 effici respect underli scalapack matrix invers 256 processor intel touchston delta system 41 effici respect matrix multipl cmssl think machin cm5 vector unit perform model predict perform reason accuratelyto take advantag geometr natur sdc algorithm design graphic user interfac let user choos spectral decomposit accord specifi region complex plane b introduct standard techniqu parallel comput build new algorithm exist high perform build block exampl lapack linear algebra librari 1 writ depart mathemat univers kentucki lexington ky 40506 comput scienc divis mathemat depart univers california berkeley ca 94720 z depart comput scienc univers tennesse knoxvil tn 37996 mathemat scienc section oak ridg nation laboratori oak ridg tn 37831 x depart comput scienc univers tennesse knoxvil tn 37996 depart mathemat univers california berkeley ca 94720 comput scienc divis univers california berkeley ca 94720 ten term basic linear algebra subroutin blas38 23 22 effici implement avail mani workstat vector processor share memori parallel machin recent releas scalapack 10beta linear algebra librari 26 written term parallel block bla pbbla 15 basic linear algebra commun subroutin blac 25 bla lapack scalapack includ routin lu qr choleski factor matrix invers port intel gamma delta paragon think machin cm5 pvm cluster connect machin scientif softwar librari cmssl54 provid analog function high perform cm5 work use high perform kernel build two new algorithm find eigenvalu invari subspac nonsymmetr matric distribut memori parallel comput algorithm perform spectral divid conquer ie recurs divid matrix smaller submatric subset origin eigenvalu one algorithm use matrix sign function evalu newton iter 8 42 6 4 algorithm avoid matrix invers requir newton iter call invers free algorithm 30 10 44 7 algorithm simpli construct small set highli paralleliz build block includ matrix multipl qr decomposit matrix invers describ section 2 use exist high perform kernel scalapack cmssl achiev high effici 256 processor intel touchston delta system sign function algorithm reach 31 effici respect underli matrix multipl pumma 16 4000by4000 matric 82 effici respect underli scalapack 10 matrix invers think machin cm5 vector unit hybrid newtonschultz sign function algorithm obtain 41 effici respect matrix multipl cmssl 32 2048by2048 matric nonsymmetr spectral decomposit problem recent resist attempt parallel convent method use hessenberg qr algorithm one first reduc matrix schur form swap desir eigenvalu along diagon group togeth order form desir invari subspac 1 algorithm appear requir fine grain parallel difficult parallel 5 27 57 recent henri van de geijn32 shown hessenburg qr algorithm phase effect parallel distribut memori parallel comput 100 processor although parallel qr appear scalabl algorithm present paper may faster wide rang distribut memori parallel comput algorithm perform sever time mani float point oper qr nearli within level 3 bla wherea implement qr perform fewest float point oper use less effici level 1 2 bla thorough comparison algorithm subject futur paper parallel eigenproblem algorithm develop includ earlier par allel qr algorithm 29 50 56 55 hessenberg divid conquer algorithm use either newton method 24 homotopi 17 39 40 jacobi method 28 47 48 49 method suffer use finegrain parallel instabl slow misconverg presenc cluster eigenvalu origin problem construct subproblem 20 three method paper may less stabl qr algorithm may fail converg number circumst fortun easi detect compens loss stabil choos divid spectrum slightli differ locat compar approach mention believ algorithm discuss paper offer effect tradeoff paralleliz stabil algorithm close relat approach use may found 3 9 36 symmetr matric gener matric real spectra treat anoth advantag algorithm describ paper comput eigenvalu correspond invari subspac userspecifi region complex plane help user specifi region describ graphic user interfac algorithm rest paper organ follow section 2 present two algorithm spectral divid conquer singl framework show divid spectrum along arbitrari circl line complex plane discuss implement detail section 3 discuss perform algorithm intel delta cm5 section 4 present model perform algorithm demonstr predict execut time reason accur section 5 describ design xwindow user interfac section 6 draw conclus outlin futur work parallel spectral divid conquer algorithm spectral divid conquer sdc algorithm discuss paper present follow framework let jordan canon form eigenvalu l theta l submatrix j eigenvalu insid select region complex plane eigenvalu eigenvalu outsid assum eigenvalu boundari otherwis reselect move region slightli invari subspac matrix correspond eigenvalu insid span first l column x matrix 0 correspond spectral projector let qrpi rank reveal qr decomposit matrix p q unitari r upper triangular pi permut matrix chosen lead l column q span rang space p q yield desir spectral decomposit 11 12 eigenvalu 11 eigenvalu insid eigenvalu 22 eigenvalu outsid substitut complementari projector gamma p p 22 11 eigenvalu outsid 22 eigenvalu insid crux parallel sdc algorithm effici comput desir spectral projector p without comput jordan canon form 21 sdc algorithm newton iter first sdc algorithm use matrix sign function introduc robert 46 solv algebra riccati equat howev soon extend solv spectral decomposit problem 8 recent studi may found 11 42 6 matrix sign function signa matrix eigenvalu imaginari axi defin via jordan canon form 21 eigenvalu j open right half plane eigenvalu j gamma open left half plane signa 0 easi see matrix spectral projector onto invari subspac correspond eigenvalu l number eigenvalu gamma spectral projector correspond eigenvalu let qrpi rank reveal qr decomposit projector p q yield desir spectral decomposit 23 eigenvalu 11 eigenvalu eigenvalu 22 eigenvalu sinc matrix sign function signa satisfi matrix equat use newton method solv matrix equat obtain follow simpl iter iter global ultim quadrat converg lim j1 provid pure imaginari eigenvalu 46 35 iter fail otherwis finit precis iter could converg slowli close pure imaginari eigenvalu mani way improv accuraci converg rate basic iter 12 33 37 exampl may use call newtonschulz iter avoid use matrix invers although requir twice mani flop effici whenev matrix multipli least twice effici matrix invers newtonschulz iter also quadrat converg provid hybrid iter might begin newton iter ka 2 switch newtonschulz iter discuss perform one hybrid later henc follow algorithm divid spectrum along pure imaginari axi algorithm 1 sdc algorithm newton iter let converg j j max end comput comput 11 12 comput stop criterion newton iter say machin precis j max limit maximum number iter say j return gener nonzero quantiti measur backward stabil comput decomposit sinc set e 21 zero decoupl problem 11 22 backward error simplic use qr decomposit column pivot reveal rank although sophist rankrev scheme exist 14 31 34 51 variat newton iter global converg still need comput invers matrix explicitli one form anoth deal illcondit matric instabl newton iter comput matrix sign function subsequ spectral decomposit discuss 11 6 4 refer therein 22 sdc algorithm invers free iter algorithm need explicit matrix invers could caus numer instabl matrix illcondit follow algorithm origin due godunov bulgakov malyshev 30 10 44 modifi bai demmel gu 7 elimin need matrix invers divid spectrum along unit circl instead imaginari axi first describ algorithm briefli explain work algorithm 2 sdc algorithm invers free iter let converg j j max r j end comput comput 11 12 comput algorithm 1 need choos stop criterion inner loop well limit j max maximum number iter converg eigenvalu 11 eigenvalu insid unit disk eigenvalu 22 eigenvalu outsid assum eigenvalu unit circl algorithm 1 quantiti measur backward stabil illustr algorithm work assum matric want invert invert inner loop algorithm see 22 j r j 22 j b j gamma1 22 therefor algorithm simpli repeatedli squar eigenvalu drive one insid unit circl 0 outsid 1 repeat squar yield quadrat converg analog sign function iter comput aa gamma1 2 equival take cayley transform take invers cayley transform explan algorithm work found 7 attract algorithm equal well deal gener nonsymmetr eigenproblem gamma b provid problem regular ie ident zero one simpli start algorithm b regard qr decomposit inner loop need form entir 2n theta 2n unitari matrix q order get submatric q 12 q 22 instead comput qr decomposit 2n theta n matrix b h implicitli household vector lower triangular part matrix anoth n dimension array appli q without comput 2n theta n matrix 0 obtain desir matric q 12 q 22 show comput q rank reveal qr decomposit comput explicit invers subsequ product yield ultim invers free algorithm recal purpos need unitari factor q rank turn use gener qr decomposit techniqu develop 45 2 get desir inform without comput fact order comput qr decomposit pivot first comput qr decomposit pivot matrix comput rq factor matrix q h 27 28 r q desir unitari factor rank r 1 also rank matrix 23 spectral transform techniqu although algorithm 1 2 divid spectrum along pure imaginari axi unit circl respect use mobiu simpl transform input matrix divid along gener curv result comput eigenvalu correspond invari subspac insid region defin intersect region defin curv major attract kind algorithm let us show use mobiu transform divid spectrum along arbitrari line circl transform eigenproblem az z appli algorithm 1 fii split spectrum respect region 0 appli algorithm 2 split along curv exampl comput matrix sign function algorithm 1 split spectrum along circl center radiu r real choos real arithmet real split spectrum along circl center radiu r real choos real arithmet algorithm real x figur 1 differ geometr region spectral decomposit gener region obtain take 0 polynomi function exampl comput matrix sign function divid spectrum within bowti shape region center ff figur 1 illustr region algorithm deal assum real algorithm use real arithmet 24 tradeoff algorithm 1 comput explicit invers could caus numer instabl matrix illcondit provid altern approach achiev better numer stabil difficult problem algorithm 2 give accur answer algorithm 1 numer exampl found 7 howev neither algorithm avoid accuraci converg difficulti associ eigenvalu close boundari select region stabil advantag invers free approach obtain cost storag arithmet algorithm 2 need 4n 2 storag space algorithm 1 certainli limit problem size abl solv furthermor one step algorithm 2 6 7 time arithmet one step algorithm 1 qr decomposit major compon algorithm 2 matrix invers main compon algorithm 1 requir compar amount commun per flop see tabl 4 detail therefor algorithm 2 expect run significantli slower algorithm 1 algorithm 1 faster somewhat less stabl algorithm 2 sinc test stabil easi comput use follow 3 step algorithm 1 tri use algorithm 1 split spectrum succe stop 2 otherwis tri split spectrum use algorithm 2 succe stop 3 otherwis use qr algorithm 3step approach work tri fastest least stabl method first fall back slower stabl method necessari paradigm also use parallel algorithm 19 fast parallel version qr algorithm32 becom avail would probabl faster invers free algorithm henc would obviat need second step list algorithm 2 would still interest subset spectrum desir qr algorithm necessarili comput entir spectrum gener eigenproblem matrix pencil gamma b 3 implement perform start fortran 77 implement algorithm 1 code built use bla lapack basic matrix oper lu decomposit triangular invers qr decomposit initi test softwar sun ibm rs6000 workstat cray preliminari perform data matrix sign function base algorithm report 6 report focu implement perform evalu algorithm distribut memori parallel machin name intel delta cm5 implement algorithm 1 collect larg set data perform primit matrix oper subroutin target machin perform evalu comparison two algorithm applic progress 31 implement perform intel touchston intel touchston delta comput system 16 theta 32 mesh i860 processor wormhol rout interconnect network 41 locat california institut technolog behalf concurr supercomput consortium delta commun characterist describ 43 order implement algorithm 1 natur reli scalapack 10 librari beta version 26 choic requir us exploit two key design featur packag first scalapack librari reli parallel block bla pbblas15 hide much interprocessor commun hide commun make possibl express algorithm use pbbla thu avoid explicit call commun routin pbbla implement top call bla basic linear algebra commun subroutin blacs25 second scalapack assum data distribut accord squar block cyclic decomposit scheme allow routin achiev well balanc comput minim commun cost scalapack includ subroutin lu qr choleski factor use build block implement pumma routin 16 provid requir matrix multipl matrix order time scalapack 256 pe intel touchston delta time second gemm inv qrp 1000 2000 3000 4000 5000 6000 7000 800051525matrix order mflop per node scalapack 256 pe intel touchston delta mflop per node gemm inv qrp figur 2 perform scalapack 10 beta version subroutin 256 16 theta 16 pe intel touchston delta system matrix invers done two step lu factor comput upper triangular u matrix invert gamma1 obtain substitut l use block oper lead perform compar obtain lu factor implement qr factor without column pivot base parallel algorithm present coleman plassmann 18 qr factor column pivot much larger sequenti compon process one column time need updat norm column vector step make use block oper imposs induc high synchron overhead howev see cost step remain neglig comparison time spent newton iter unlik qr factor pivot qr factor without pivot post premultipl orthogon matrix use block oper figur 2 plot time result obtain pumma packag use blac gener matrix multipl scalapack 10 beta version subroutin matrix invers qr decomposit without column pivot correspond tabular data found appendix measur effici algorithm 1 gener random matric differ size whose entri normal distribut mean 0 varianc 1 comput perform real doubl precis arithmet tabl 1 list measur result backward error number newton iter total cpu time megaflop rate particular second column tabl contain backward error number newton iter parenthes note converg rate problemdata depend tabl 1 see 4000by4000 matrix algorithm reach 719231231 effici respect pumma matrix multiplica tion 71987082 effici respect underli scalapack 10 beta matrix invers subroutin perform model show tabl 9 10 11 12 14 confirm effici continu improv matrix size n increas tabl 1 backward accuraci time second megaflop algorithm 1 256 node intel touchston delta system time mflop mflop gemmmflop invmflop iter second total per node per node per node 1000 2000 3000 4000 5000 6000 7000 8000 9000135matrix size gflop newton iter base algorithm intel delta system gflop figur 3 perform algorithm 1 intel delta system function matrix size differ number processor perform model explain section 4 figur 3 show perform algorithm 1 intel delta system function matrix size differ number processor tabl give detail total cpu time newton iter base algorithm summar tabl 1 clear newton iter sign function expens take 90 total run time compar standard sequenti algorithm also ran lapack driver routin dgee comput schur decomposit reorder eigenvalu one i860 processor took 592 second matrix order 600 91 megaflopssecond assum time scale like n 3 predict matrix order 4000 matrix abl fit singl node dgee would take 175000 second 48 hour comput desir spectral decomposit contrast algorithm 1 would take 1436 second 24 minut 120 time faster howev note dgee actual comput complet schur decomposit necessari reorder spectrum algorithm 1 decompos spectrum along pure imaginari axi applic may user want decomposit along finer region complet schur decomposit desir cost newton iter base algorithm increas though like first step describ tabl 2 perform profil 256 processor intel touchston delta system time second 1000 1230691 6875 4275 13422 2000 4139592 18604 16134 44869 3000 7170490 36765 38375 79218 take time 13 32 implement perform cm5 think machin cm5 introduc 1991 test section run processor cm5 univers california berkeley cm5 node contain fpu 64 kb cach four vector float point unit memori front end 33 hmz sparc 32 mb memori vector unit peak 64bit float point perform 128 megaflop per node 32 megaflop per vector unit see 53 detail algorithm 1 implement cm fortran cmf version 21 implement fortran 77 supplement arrayprocess extens ansi iso draft standard fortran 90 53 cmf array come two flavor distribut across cm processor memori user defin layout alloc normal column major fashion front end alon front end comput execut cm fortran pro gram perform serial oper scalar data store memori send instruct array oper cm receiv instruct node execut data necessari cm processor access other memori three commun mechan transpar cmf programm 52 also use cmssl version 32 54 tmc librari numer linear algebra rou tine cmssl provid data parallel implement mani standard linear algebra routin design use cmf exploit vector unit cmssl qr factor avail without pivot use standard household transform column block perform user discret improv load balanc increas parallel scale avail avoid situat column norm close underflow overflow expens insur polici scale use current cm5 code perhap made avail toolbox inform user qr pivot qrp factor routin shall use reveal rank half fast qr without pivot due part elimin block techniqu pivot column must process sequenti gaussian elimin without partial pivot avail comput lu factor perform back substitut solv system equat matrix invers matrix order time cmssl 32 32 pe vu cm5 time second gemm inv qrp matrix order mflop per node cmssl 32 32 pe vu cm5 mflop per node gemm inv qrp figur 4 perform cmssl 32 subroutin 32 pe vu cm5 perform solv system lu factor obtain separ support balzer byer scale scheme acceler converg newton requir determin comput routin estim ka lu factor detect illcondit intermedi matric newton iter ation factor invers routin balanc load permut matrix block specifi user use improv perform lu qr matrix multipl routin outofcor counterpart support matricessystem larg fit main memori current cm5 implement sdc algorithm use outofcor routin principl algorithm permit outofcor solut use figur 4 summar perform cmssl routin underli implement algorithm 1 test newtonschulz iter base algorithm comput spectral decomposit along pure imaginari axi sinc matrix multipl twice fast matrix invers see figur 4 entri random test matric uniformli distribut gamma1 1 use inequ ka n switch criterion newton iter 25 newtonschulz iter 26 ie relax converg condit newtonschulz iter optim perform test case ran tabl 3 show measur result backward accuraci total cpu time megaflop rate second column tabl backward error number newton iter number newtonschulz iter respect tabl see compar cmssl 32 matrix multipl perform obtain 32 45 effici matric size 512 2048 even faster cmssl 32 matrix invers subroutin profil total cpu time phase algorithm found 83 total time spent newton iter 9 qr decomposit pivot 4actual predict gemm invers iter1 iter2 second second total per node per node per node tabl 3 backward accuraci time second megaflop sdc algorithm newtonschulz iter 32 pe vu cm5 ing 75 matrix multipl newtonschulz iter orthogon transform perform model model base actual oper count scalapack implement follow problem paramet measur machin paramet matrix size p number processor b block size 2d block cyclic matrix data layout 20 lat time requir send zero length messag one processor anoth band time requir send one doubl word one processor anoth dgemm time requir per blas3 float point oper model build block given tabl 4 model creat count actual oper critic path load imbal cost repres discrep amount work busiest processor must perform amount work processor must perform model build block valid perform data shown appendix load imbal increas block size increas base oper count predict perform also estim import variou suggest modif either algorithm implement hardwar gener predict perform riski mani factor control actual perform includ compil variou librari routin howev sinc major time spent algorithm 1 spent either blac level 3 pbblas15 turn implement call blacs25 blas38 23 22 long perform blac bla comput commun cost load imbal cost task cost latenc bandwidth gamma1 comput bandwidth gamma1 tri 4n 3 matrix multipli p lat 1 lg p household applic tabl 4 model build block invers applic comput cost theta n 3 latenc cost thetan lat 16020 lg p 3 lg p 16023lg p bandwidth cost theta n 2 imbalanc comput cost theta bn 2 imbalanc bandwidth cost thetabn band 2035 lg p 2035 lg p tabl 5 model algorithm 1 well understood input matrix small predict perform algorithm 1 distribut memori parallel comput tabl 5 predict run time step algorithm 1 display sum time tabl 5 yield use measur machin paramet given tabl 8 equat 49 yield predict time tabl 7 tabl 3 get tabl 4 tabl 5 henc equat 49 made number simplifi assumpt base empir result assum 20 newton iter requir assum time requir send singl messag doubl word lat regardless mani messag sent system although mani pattern commun scalapack implement major commun time spent collect communica tion ie broadcast reduct row column therefor choos lat band base program measur perform collect commun assum perfectli squar p pbi processor grid assumpt allow us keep model simpl understand limit accuraci somewhat tabl perform newton iter base algorithm algorithm 1 spectral decomposit along pure imaginari axi backward error sec total sec total sec total 2000 3000 tabl 7 predict perform newton iter base algorithm algorithm 1 spectral decomposit along pure imaginari axi actual predict actual predict actual predict time 2000 50257 4443 44869 3623 33634 3108 3000 103703 9947 79218 7568 57668 6104 tabl 6 7 show model underestim actual time delta 20 machin problem size time tabl 3 show model match perform cm5 within 25 problem size except smallest ie main sourc error model 1 uncount oper small blas1 blas2 call data copi norm comput 2 nonsquar processor configur 3 differ number newton iter requir 4 commun cost fit linear model 5 matrix multipli cost fit constant costflop model 6 higher cost qr decomposit pivot believ uncount oper account main error model small n actual number newton iter vari exactli 20 newton iter need nonsquar processor configur slightli less effici squar one actual commun cost fit linear model depend upon detail mani processor send data simultan processor send actual matrix multipli cost depend upon matrix model perform measur valu paramet descript limit cm5 dgemm blas3 peak flop rate 190 134 lat messag latenc comm softwar 150 157 tabl 8 machin paramet size involv lead dimens actual start locat matric cost individu call blac bla may differ model 20 howev differ tend averag entir execut data layout ie number processor row processor column block size critic perform algorithm assum effici data layout specif mean roughli squar processor configur fairli larg block size say 16 32 cost redistribut data input routin would tini 2 p band compar total cost algorithm optim data layout lu decomposit differ optim data layout comput u former prefer slightli processor row column latter prefer slightli processor column row addit lu decomposit work best small block size 6 delta exampl wherea comput u best done larg block size 30 delta exampl differ signific enough believ slight overal perform gain mayb 5 10 could achiev redistribut data two phase even though redistribut would done twice newton step tabl 3 show except n 512 model estim perform algorithm 1 base cmssl reason well note tabl newtonshultz iter scheme slightli effici cm5 newton base iter introduc anoth small error fact model match perform cmssl base routin whose intern examin indic us implement matrix invers cm5 probabl requir roughli oper count scalapack implement perform figur tabl 8 measur independ program except cm5 blas3 perform commun perform figur delta tabl 8 report littlefield 1 43 commun perform figur cm5 measur whaley 2 58 comput perform delta linpack benchmark21 1 processor delta entri 1 processor cm5 linpack benchmark dgemm tabl 8 chosen experi graphic user interfac sdc take advantag graphic natur spectral decomposit process graphic user interfac gui implement sdc written c base x11r5 1 blac use protocol 2 commun pattern close resembl shift time lat tabl 8 in58 band tabl 5 code xi code user parallel execut interfac 7 routin figur 5 x11 interfac xi sdc standard xlib librari xt toolkit mit athena widget set nicknam xi x11 interfac xi pair code implement sdc call union xsdc programm interfac xi consist seven subroutin design independ specif sdc implement thu xi attach sdc code present use cm5 cmfcmssl implement fortran 77 version algorithm use real arithmet figur 1 show coupl sdc code xi librari subroutin basic sdc code call xi routin handl interact user return next request parallel comput sdc code process request parallel engin necessari call anoth xi routin inform user comput result user select split spectrum point size highlight region error bound comput along perform inform report user given choic confirm refus split appropri action taken depend choic process repeat user decid termin program data structur pertain matrix decomposit process manag xi binari tree record size statu solvednot solv diagon block correspond spectral region error bound split inform x11 interfac manag decomposit data free sdc programm respons encapsul decomposit process sdc programm obtain use inform via interfac subroutin figur 6 pictur sampl session xsdc cm5 500 theta 500 matrix larg central window call spectrum window repres region complex plane indic axe titl xsdc eigenvalu schur vector indic task comput eigenvalu schur vector matrix analysi figur sampl xsdc session line spectrum window axe result spectral divid conquer shade indic bowti region complex plane current select analysi window raisedlow user request show detail process describ later button top control io appear spectrum window algorithm choic ffl file let one save matrix one work start new matrix quit ffl zoom let one navig around complex plane zoom part spectrum window toggl turn featur spectrum window exampl axe gershgorin disk eigenvalu ffl function let one modifi algorithm display less detail progress made button bottom use split spectrum exampl click right halfplan click point spectrum window split spectrum two halfplan point right halfplan select divis would signal sdc code decompos matrix k 11 12 k eigenvalu 11 eigenvalu right halfplan eigenvalu 22 eigenvalu left halfplan button left halfplan work similarli except left halfplan would select process role 11 22 would revers manner insid circl outsid circl divid complex plane boundari circl eastwest crosslin northsouth crosslin split spectrum line 45 degre real axi describ split inform window lower right corner figur 2 keep track matrix split process report two split perform arriv current shade spectral region first eastwest crosslin split point 15 real axi divid entir complex plane four sector draw two line sigma 45 degre point 15 real axi sdc decompos start matrix 260 11 12 east west sector correspond 11 block north south sector correspond 22 block continu eastwest sector indic previou split region divid two subregion separ boundari circl radiu 4 center origin circl drawn make sure boundari intersect east west sector matrix reduc tob 106 154 240 106 11 12 13 shade indic bowti region correspond interior circl 11 block current select analysi upper right corner figur 2 matrix inform window display statu matrix decomposit process three entri correspond spectral region squar diagon block 3 theta 3 block upper triangular matrix inform us block size whether eigenvalu eigenvector schur vector comput maximum error bound encount along path decomposit process highlight entri correspond shade region report 11 block contain 106 eigenvalu solv error 144 theta 10 gamma13 eigenvalu list window overlap matrix inform window plot spectrum user request user may select region complex plane henc submatrix diagon decomposit click pointer desir region click point 10 imaginari axi exampl would unhighlight current region shade north south sector sinc region correspond 33 block third entri matrixinform window would highlight splitinform window would also updat detail singl split perform arriv region spectrum block small enough user may choos solv via function button top spectrum window case eigenvalu schur vector block would comput use qr per user request eigenvalu plot spectrum current xi code support real sdc extend handl complex case implement complex sdc becom avail 6 conclus futur work written code solv one hardest problem numer linear algebra spectral decomposit nonsymmetr matric implement use highli effici matrix comput kernel avail public domain distribut memori parallel comput vendor perform attain encourag approach merit consider numer algorithm object orient user interfac xi develop paper provid paradigm us futur design user friendli interfac massiv parallel comput environ note approach discuss extend comput right left deflat subspac regular matrix pencil gamma b see 4 7 detail spectrum repeatedli partit divideandconqu fashion obvious task parallel avail independ submatric aris well data parallellik matrix oper consid paper analysi 13 indic task parallel contribut small constant factor speedup sinc work root divideandconqu tree simplifi implement futur work includ implement perform evalu base algorithm comparison parallel qr extens algorithm gener spectral decomposit problem integr 3step approach see section 23 object orient user interfac acknowledg bai demmel support part arpa grant dm28e04120 via subcontract argonn nation laboratori demmel petitet support part nsf grant asc9005933 demmel dongarra robinson support part arpa contact daal0391c0047 administ armi research offic ken stanley support nsf graduat student fellowship dongarra also support part offic scientif comput us depart energi contract deac05 84or21400 work perform part use intel touchston delta system oper california institut technolog behalf concurr supercomput consortium access facil provid center research parallel comput r gener qr factor applict paralleliz eigensolv design parallel nonsymmetr eigenroutin toolbox block implement hessenberg multishift qr erat design parallel nonsymmetr eigenroutin toolbox invers free parallel spectral divid conquer algorithm nonsymmetr eigenproblem comput method eigenvalu eigenvector matrix real eigenvalu divid conquer method tridiagon symmetr matric repeat eigenvalu circular dichotomi spectrum matrix numer stabil instabl matrix sign function base algorithm solv algebra riccati equat matrix sign function benefit mix parallel rank reveal qr factor pbbla set parallel block basic linear algebra subprogram pumma parallel univers matrix multipl algorithm distribut memori concurr comput note homotopi method linear algebra eigenvalu problem parallel nonlinear leastsquar solver theoret analysi numer result trade parallel numer stabil parallel numer linear algebra perform variou comput use standard linear equat soft ware set level 3 basic linear algebra subprogram extend set fortran basic linear algebra subroutin parallel algorithm nonsymmetr eigenvalu problem user guid blac design linear algebra librari high perform comput multishift qr algorithm worth troubl schur decomposit matrix parallel comput find eigenvalu eigenvector unsymmetr matric use distribut memori multiprocessor problem dichotomi spectrum matrix effici algorithm comput rankrev qr de composit parallel qr algorithm unsymmetr algebra eigenvalu problem myth realiti comput polar decomposit applic rank reveal qr svd sign matrix separ matrix eigenvalu parallel implement invari subspac decomposit algorithm dens symmetr matric ration iter method matrix sign function basic linear algebra subprogram fortran usag solv eigenvalu problem nonsymmetr matric real homotopi touchston parallel algorithm comput eigenvalu unsymmetr matrix simd mesh processor character tune commun perform touchston delta ipsc860 parallel algorithm solv spectral problem linear algebra aspect gener qr factor linear model reduct solut algebra riccati equat jacobi jacobilik algorithm parallel comput parallel algorithm eigenvalu eigenvector gener complex matrix jacobilik algorithm comput schur decomposit nonhermitian matrix parallel implement qr algorithm updat rankrev ulv decomposit cm fortran refer manual connect machin cm5 technic summari cmssl cm fortran cm5 edit implement qr algorithm array processor effici parallel implement nonsymmetr qr algorithm shift strategi parallel qr algorithm basic linear algebra commun subroutin analysi implement across multipl parallel architectur tr ctr peter benner enriqu quintanaort gregorio quintanaort statespac truncat method parallel model reduct largescal system parallel comput v29 n1112 p17011722 novemberdecemb peter benner ralph byer rafael mayo enriqu quintanaort vicent hernndez parallel algorithm lq optim control discretetim period linear system journal parallel distribut comput v62 n2 p306325 februari 2002 leo chin sim graham leedham leo chin jian heiko schroder fast solut larg n n matrix equat mimdsimd hybrid system parallel comput v29 n1112 p16691684 novemberdecemb peter benner maribel castillo enriqu quintanaort vicent hernndez parallel partial stabil algorithm larg linear control system journal supercomput v15 n2 p193206 feb12000