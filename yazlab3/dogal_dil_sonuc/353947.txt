loop shift loop compact idea decompos softwar pipelin decoupl softwar pipelin problem cyclic schedul problem without resourc constraint acycl schedul problem resourc constraint term loop transform code motion techniqu formul combin loop shift loop compact loop shift amount move statement iter therebi chang loop independ depend loop carri depend vice versa loop compact schedul bodi loop consid loop independ depend take account detail target architectur paper show loop shift optim minim length critic path number depend loop compact first problem wellknown solv algorithm due leiserson sax show second optim combin first one also polynomi solvabl fast graph algorithm variant minimumcost flow algorithm final analyz improv obtain loop compact experi random graph b introduct modern comput exploit parallel instruct level microprocessor sequenti microprocessor anymor simpl unit process instruct follow uniqu stream processor may multipl independ function unit pipelin possibl nonpipelin take advantag parallel function processor sucient exploit instructionlevel parallel insid basic block feed function unit may necessari consid schedul instruct one basic block find way extract instructionlevel parallel ilp led larg amount research hardwar softwar perspect see exampl 12 chap 4 overview hardwar solut problem provid support specul execut control done superscalar architectur andor support predic execut exampl ia64 architectur 8 softwar solut schedul statement across condit branch whose behavior fairli predict loop unrol trace schedul eect also softwar pipelin techniqu loop branch loop schedul iter softwarepipelin code made instruct belong dierent iter origin loop softwar pipelin nphard problem resourc limit reason huge number heurist algorithm propos follow variou strategi comprehens survey avail paper allan et al 2 classifi algorithm roughli three dierent categori modulo schedul 16 24 variat 23 13 18 quot kernel recognit algorithm 1 21 movethenschedul algorithm 14 19 5 briey speak idea dierent type algorithm follow modulo schedul algorithm look solut cyclic alloc resourc everi clock cycl resourc usag repeat algorithm thu look schedul compat alloc modulo given call initi interv valu increment solut found kernel recognit algorithm simul loop unrol schedul pattern appear mean point schedul would cyclic pattern form kernel softwarepipelin code movethenschedul algorithm use iter scheme altern schedul bodi loop loop compact move instruct across backedg loop long improv schedul goal paper explor deepli concept movethenschedul algorithm particular see move instruct help loop compact explain b rau 22 although code motion yield improv schedul alway clear oper move around back edg direct mani time get best result close get practic optim studi fact approach even notion optim dene follow idea develop decompos softwar pipelin 9 27 4 show nd directli one preprocess step good 1 loop shift ie move statement across iter loop compact like improv gener idea twostep heurist decompos softwar pipelin decoupl softwar pipelin problem cyclic schedul problem without resourc constraint nding loop shift acycl schedul problem resourc constraint loop compact rest paper organ follow section 2 recal softwar pipelin problem wellknown result problem complex lower bound initi interv etc section 3 explain combin loop shift loop compact give better perform loop compact alon loop shift chang loop independ depend loop carri depend vice versa loop compact schedul bodi loop consid loop independ depend take account detail target architectur rst optim shift statement minim critic path loop compact done 4 use algorithm due leiserson sax second optim minim number constraint loop compact ie shift statement remain loop independ edg possibl optim main contribut paper present full detail section 4 section 5 discuss limit techniqu think could overcom futur 2 softwar pipelin problem mention section 1 goal determin context movethenschedul softwar pipelin algorithm move statement make loop compact ecient thu need abl discuss optim perform rel optimum need model loop consid model architectur target simpl enough optim discuss simpli model present section 21 summar theoret point view assum simpl loop ie condit branch 2 constant depend distanc nite number put good quotat mark techniqu remain cours heurist loop compact npcomplet case resourc constraint optim arbitrari loop gener easi discuss shown schwiegelshohn et al 25 non pipelin homogen function unit despit simpli model algorithm still use practic sophist resourc model even theoret guarante give longer true inde loop shift techniqu develop rst phase process depend architectur model depend constraint shift statement critic path number constraint loop compact minim resourc constraint taken account second phase algorithm compact loop specic aggress instruct schedul use task handl condit branch howev consid yet although movethenschedul algorithm usual capabl 19 27 thu explor futur featur integr shift techniqu could also reli predic execut modulo schedul algorithm 21 problem formul consid problem schedul loop possibl larg number iter loop repres nite vertexweight edgeweight direct multigraph w vertic v model statement loop bodi v 2 v repres set oper one iter loop statement v delay latenc direct edg e model depend constraint edg weight 2 n depend distanc express fact oper u instanc statement u iter k must complet execut oper instanc statement v iter k term loop edg e correspond loop independ depend loop carri depend otherwis loop independ depend alway direct statement u statement v textual loop bodi thu g correspond loop circuit c zero weight wc 6 0 goal determin schedul oper v k ie function respect depend constraint resourc constraint p non pipelin homogen resourc avail p oper process clock cycl perform schedul measur averag cycl time dene among schedul schedul exhibit cyclic pattern particularli interest cyclic schedul schedul v n schedul period pattern comput occur everi unit time within period one one instanc statement initi reason call initi interv literatur also equal averag cycl time schedul 22 lower bound averag cycl time complex result averag cycl time schedul cyclic limit resourc depend constraint denot 1 resp p minim averag cycl time achiev schedul cyclic innit mani resourc resp p resourc cours p 1 circuit c denot c durat distanc ratio wc let follow wellknown lower bound depend constraint 1 max resourc constraint p resourc constraint schedul problem polynomi solvabl inde max optim cyclic schedul possibl fraction initi interv 1 integr schedul found standard minimum ratio algorithm 10 pp 636 641 complex ojv jjej logjv j look max look max e karp minimum meanweight cycl algorithm 15 use complex ojv jjej resourc constraint howev decis problem associ problem determin schedul minim averag cycl time nphard open whether belong np restrict cyclic schedul problem npcomplet see 11 overview cyclic schedul problem 3 loop shift loop compact section explain loop shift use improv perform loop compact rst formal loop compact studi perform cyclic schedul obtain loop compact alon 31 perform loop compact alon loop compact consist schedul bodi loop without tri mix iter gener principl follow consid direct graph ag captur depend lie within loop bodi word loop independ depend correspond edg e graph ag acycl sinc g circuit c thu schedul use techniqu direct acycl graph exampl list schedul new pattern built loop bodi repeat dene cyclic schedul whole loop resourc constraint depend constraint respect insid bodi list schedul resourc constraint depend constraint dierent iter respect fact pattern overlap algorithm follow algorithm 1 loop compact w depend graph 1 dene 0g 2 perform list schedul ag 3 comput makespan 4 dene cyclic schedul 8v 2 v 8k 2 n v depend constraint loop compact limit critic path ie path p maxim delay dp denot g maxim delay path ag whatev schedul chosen loop compact cyclic schedul satis g furthermor list schedul use coman techniqu 6 show path p ag relat optim initi interv 1 p know acycl schedul problem g lower bound makespan schedul thu list schedul heurist worstcas perform ratio 2 1p unfortun g priori noth minim averag cycl time p reason loop compact alon arbitrarili bad goal mix iter loop shift see follow section result acycl graph ag subgraph loop independ depend like optim loop compact 32 loop shift rst dene loop shift formal loop shift consist follow transform dene statement v shift rv mean delay oper v rv iter word instead consid vertex graph g repres oper form v k consid repres oper form v k rv new depend distanc w r e edg sinc depend u k ru v k dene transform graph g w r note shift chang weight circuit circuit c two oper depend comput dierent iter transform code w r e 0 two oper comput origin order depend loop carri depend w r oper comput iter place statement correspond u textual statement correspond v preserv depend loop independ depend reorder alway possibl sinc transform graph g circuit g g r circuit weight w r e 0 loop shift legal note g r g two represent problem inde onetoon correspond schedul g schedul g r r schedul g r function dene v rv schedul g word reason g r chang represent prevent us nd schedul dierenc origin code shift code due loop bound shift code typic standard loop plu prologu epilogu see exampl section 43 function r call legal retim context synchron vlsi circuit 17 vertex v repres oper delay dv weight edg e interpret number regist retim amount suppress ru regist weight edg leav u add rv regist edg enter v constraint mean neg number regist allow legal retim graph ag use loop compact algorithm 1 graph edg without regist call g largest delay path without regist call clock period circuit link loop shift circuit retim new use sever algorithm loop transform see exampl 5 3 4 7 includ softwar pipelin 33 select loop shift loop compact select good shift loop compact let us rst consid strategi follow dierent movethenschedul algorithm enhanc softwar pipelin extens 19 circular softwar pipelin 14 rotat softwar pipelin 5 use similar approach loop compact shift backward forward vertic appear begin resp end loop bodi schedul word candid backward shift ie sourc ag candid forward shift ie sink ag rotat perform long benet schedul guarante given techniqu decompos softwar pipelin principl slightli dierent algorithm iter process use loop shift loop compact altern loop shift chosen follow mathemat wellden object loop schedul two intuit object may shift statement minim maxim delay g path ag sinc tightli link guarante bound list schedul shown section 31 lower bound perform loop compact reduc g reduc perform upper bound list schedul use number edg acycl graph ag reduc number depend constraint loop compact intuit fewer constraint freedom exploit resourc eort put rst object 9 27 loop rst softwar pipelin assum unlimit resourc cyclic schedul obtain correspond particular retim r use compact loop shown techniqu maxim critic path ag r less 4 shift chosen critic path loop compact minim use retim algorithm due leiserson sax 17 clockperiod minim see algorithm 2 deriv retim r g r opt minimum achiev clock period g also shown techniqu lead similar guarante perform non pipelin resourc inde perform loop compact see equat 2 becom unlik loop compact alon critic path ag r relat p perform arbitrarili bad loop compact alon techniqu howev limit fact optim retim critic part graph exampl situat see section 41 reason address second object tri retim graph depend possibl loop independ 4 integ linear program formul propos solv problem show next section pure graphtheoret approach possibl calland et al suspect let us recal algorithm leiserson sax techniqu use binari search determin minim achiev clock period opt test whether potenti clock period feasibl follow ojv jjej algorithm use produc legal retim r g g r synchron circuit clock period g r retim exist overal complex ojv jjej log jv j algorithm 2 feasibl clock period 1 vertex set rv 0 2 repeat follow time comput graph g r exist valu r b vertex v 2 v comput v maximum sum dp vertex delay along zeroweight direct path p g r lead v c vertex v v set rv rv 1 3 run algorithm use step 2b comput g r g r feasibl retim exist otherwis r desir retim 4 minim number depend constraint loop com paction deal problem nding loop shift number depend constraint loop compact minim rst consid particular case depend constraint remov section 41 give algorithm either nd retim prove retim exist section 42 heart paper give algorithm minim retim number zeroweight edg graph section 43 run complet exampl illustr techniqu final section 44 extend algorithm minim number zeroweight edg without increas clock period given constant instanc minim clock period allow us combin object propos section 33 appli loop shift minim number constraint critic path loop compact 41 particular case fulli parallel loop bodi rst give exampl illustr minim number constraint loop compact may use exampl also case constraint remov exampl 1 i1n depend graph exampl repres figur 1a assum execut time two cycl load one cycl addit three cycl multipl multipl minim clock period less 3 figur 1b depict retim graph clock period 3 retim valu found run leiserson sax algorithm algorithm 2 figur 1c repres graph obtain minim number zeroweight edg still clock period 3 load load d3a load load b load load 11c figur 1 depend graph exampl 1 b clock period minim c loopcarri depend minim b c ls alu ls alu ls alu cycl load load load load load load figur 2 loop compact exampl 1 b clock period minim c loopcarri depend minim follow principl decompos softwar pipelin retim shift found schedul subgraph gener zeroweight edg compact order nd pattern loop bodi assum limit resourc schedul given one loadstor unit two alu see figur 2a simpl compact without shift give bad result initi interv 8 sinc constraint impos sequenti execut oper clock period minim figur 2b multipl longer execut addit signic improv found still limit singl loadstor resourc associ two loop independ depend constrain addit wait serial execut two load initi interv 5 final minim loopcarri depend figur 2c constraint loop compact except resourc constraint get optim result initi interv equal 4 improv two load singl loadstor resourc exampl resourc kept busi time note assum pipelin resourc fetch one instruct cycl delay latenc get similar result see figur 3 correspond initi interv respect 7 5 3 tri initi next iter complet end previou one 3 4 3 overlap pattern see section 5 mean overlap b c ls alu ls alu ls alu load load load cycl load load load figur 3 loop compact exampl 1 pipelin resourc b clock period minim c loopcarri depend minim exampl 1 easi case solv possibl remov constraint loop compact retim loop bodi fulli parallel case compact phase reduc problem schedul task without preced constraint though np complet easier guarante heurist better perform ratio list schedul exist formal say bodi loop fulli parallel possibl shift loop depend becom loop carri let lc length number edg circuit c graph g follow proposit give simpl ecient way nd retim make bodi fulli parallel proposit 1 shift loop depend graph g loop fulli parallel bodi possibl wc lc circuit c g proof assum rst g retim loop fulli parallel bodi exist retim r 8e 2 e w r e 1 sum inequ circuit c g get w r c lc sinc weight circuit unchang retim get convers assum circuit c g wc lc graph g dene 8e 2 e w circuit neg weight thu dene vertex u u minim weight path lead u construct weight path lead v word desir retim proposit 1 deduc algorithm nd retim g loop bodi fulli parallel answer retim found algorithm 3 fulli parallel bodi ad new sourc g set appli bellmanford algorithm g 0 nd shortest path vertex v two case occur bellmanford algorithm nd circuit neg weight case return fals bellmanford algorithm nd valu u vertex u g 0 case set return true complex algorithm domin complex bellmanford algorithm ojv jjej also notic graph acycl direct graph alway retim loop fulli parallel bodi sinc contain circuit consequ circuit neg weight g 0 case algorithm simpli simpl graph travers instead complet bellmanford algorithm lead 42 zeroweight edg minim gener case sinc alway make loop bodi fulli parallel must nd anoth solut minim constraint loop compact give pure graph algorithm nd retim edg possibl edg regist ie mani depend possibl loopcarri loop shift algorithm adapt minim cost ow algorithm known outofkilt method 10 pp 178185 propos fulkerson 1961 421 problem analysi given depend graph retim r g dene previou section retim graph g edg want count number edg e w r dene cost v r e edg e follow dene cost retim r number zeroweight edg retim graph say r optim r e minim ie r minim number zeroweight edg g rst give lower bound cost retim show nd retim achiev bound use ow g dene function f nonneg ow ow 8e 2 e fe 0 ow f correspond union cycl multicycl c f travers fe time edg e fe 0 edg use forward fe 0 edg backward ow nonneg ow correspond union circuit multicircuit 10 p 163 given legal retim r given nonneg ow f dene edg e 2 e kilter index kie easi check kilter index alway nonneg sinc v r sinc ow nonneg show proposit 4 kilter indic zero found optim retim need independ properti relat ow retim dene cost ow f graph g r cours cost ow depend edg c f ie edg e fe 6 0 follow proposit show cost ow depend retim ie cost f g g r equal proposit 2 proof fea sinc f ow readi give lower bound cost retim proposit 3 legal retim r nonneg ow g proof 1 few sinc 8e 2 e v r e 0 v r prop 2 0 sinc 8e 2 e kie 0 proposit 4 let r legal retim ow f 8e 2 e optim proof edg g v r proposit 3 proposit 4 alon show lower bound achiev remain show nd retim ow kilter indic zero studi happen character edg term kilter index 422 character edg us repres edg e pair fe w r e get diagram figur 4 call kilter diagram edg e correspond black angl line line kie 0 call conform edg non conform edg kie 0 assign type edg e depend valu w r e fe follow type 1 w r e 1 type 3 w r type 4 w r type type 7 w r conform edg type 2 w r e 0 fe 1 w r e 1 fe 0 type 5 w r non conform edg everi edg conform edg e optim reach furthermor notic conform edg e possibl modifi one unit either w r e fe keep conform non conform edg possibl decreas strictli kilter index chang either w r e fe one unit precis follow case fe increas edg type 3 6 7 becom respect type 4 7 7 remain conform edg type 5 becom conform type 6 kilter index edg increas strictli fe decreas edg type 4 7 becom respect type 3 6 7 remain conform edg type 2 becom conform type 4 1 kilter index decreas strictli kilter index edg type 6 increas strictli increas edg type 1 3 6 becom respect type 1 1 4 remain conform edg type 5 becom conform type 3 kilter index edg increas strictli decreas edg type 1 4 becom respect type 1 3 6 remain conform edg type 2 becom conform type 4 7 kilter index decreas strictli kilter index edg type 3 increas strictli go exploit possibl order converg toward optim solut success modic retim ow type 7 type 6 fe1r figur 4 kilter diagram edg type black black black red green uncolour green figur 5 color dierent type edg 423 algorithm algorithm start feasibl initi solut make evolv toward optim solut null retim null ow respect legal retim feasibl ow edg e 2 e mean kilter index equal 1 zeroweight edg 0 edg notic solut edg type 1 3 5 edg type 5 non conform problem make kilter index type 5 edg decreas without increas kilter index edg realiz assign type edg color see figur 5 express degre freedom allow black edg type 3 5 6 fe w r e increas green edg type 2 4 fe w r e decreas red edg type 7 fe increas decreas w r e kept constant uncolour edg type 1 fe chang w r e increas decreas note actual algorithm take account green edg longer inde start solut involv edg make kilter index black edg type 5 decreas without increas kilter index edg never creat non conform edg particular edg type 2 creat use paint lemma due minti 1966 see 10 pp 163165 standard outofkilt algorithm paint lemma let e graph whose edg arbitrarili color black green red edg may uncolour assum exist least one black edg e 0 one one two follow proposit true cycl contain e 0 without uncolour edg black edg orient direct e 0 green edg orient opposit direct b cocycl contain e 0 without red edg black edg orient direct e 0 green edg orient opposit direct r r g g uncolour g figur two case minti lemma proof proof construct proof base label process see 10 end follow algorithm algorithm 4 minim number zeroweight edg 1 start color edg explain 2 8e 2 e return r optim retim b els choos non conform edg e 0 black appli paint lemma cycl found add one respect subtract one ow edg orient cycl direct e 0 resp opposit direct ii cocycl found cocycl determin partit vertic two set add one retim vertex belong set termin vertex e 0 c updat color edg go back step 2 proof denit edg color express ow retim chang possibl easi check step algorithm edg whose retim ow valu chang becom conform remain conform otherwis furthermor retim remain legal w r e 0 ow nonneg fe 0 applic paint lemma least one non conform edg becom conform repeat oper color variat ow retim edg becom conform end optim retim 424 complex look cycl cocycl paint lemma done mark procedur complex ojej see 10 pp 164165 step least one non conform edg becom conform total number step less equal number zeroweight edg initi graph less total number edg graph thu complex algorithm 4 ojej 2 note implement algorithm optim rst consid strongli connect compon independ inde strongli connect compon retim dene mention section 41 retim valu strongli connect compon edg dierent strongli connect compon posit weight done simpl travers direct acycl graph dene strongli connect compon 43 appli algorithm run complet exampl minim number zeroweight edg give benet exampl toy exampl comput oat point number n given recurs straight calcul power expens improv possibl make calcul follow initi rst exampl 2 assum sake illustr time multipli twice time add one cycl depend graph depict figur 7 clock period alreadi minim equal due circuit length 3 correspond loop compact given assum two multipurpos unit restrict resourc impos execut three multipl least 4 cycl loop independ depend second addit wait last multipl start get pattern 5 cycl long dierent step algorithm follow see also figur 8 choos exampl non conform edg nd circuit b c chang ow accordingli choos non conform edg nd cocycl dene set fag chang retim accordingli choos c non conform edg nd circuit c chang ow accordingli figur 7 depend graph associ schedul two resourc choos b non conform edg nd cocycl dene two set ftg v n ftg chang retim accordingli edg conform retim optim equal note step choos non conform edg choos dierent one result dierent number step possibl dierent solut result still optim note also exampl clock period remain unchang minim need use techniqu present section 44 g g g g g r u g green red uncolour flow unit distanc regist unit g g c g g g c c c c non conform black figur 8 dierent step zeroweight edg minim minim figur 9 remain two instead four loop independ depend form singl path second resourc remain task result 4 cycl pattern optim resourc constraint figur 9 depend graph associ schedul two resourc transform result shift code given sinc dierent retim valu 1 0 extra prelud postlud ad compar origin code i4n comput clock cycl comput clock cycl 1 comput clock cycl 2 comput clock cycl comput clock cycl 2 44 take clock period account show algorithm given section 423 extend minim number zeroweight edg subject constraint clock period retim word given depend graph want retim g graph g r whose clock period g r less equal given constant must feasibl clock period zeroweight edg possibl recal clock period g dene largest delay zeroweight path gg 441 clock edg follow leiserson sax techniqu 17 add new constraint pair vertic link path whose delay greater desir clock period sinc path contain least one regist equat w u v denot minim number regist path u v du v denot maxim delay path u v w u v regist see 17 detail discuss clock period minim problem redund constraint remov correspond ad new edg weight w u v 1 pair vertic u v du v denot e clock set new edg let notic although new edg call clock edg must eect retim cost sinc part origin graph taken account count number zeroweight edg may inuenc ow cost sinc constrain regist move 442 chang algorithm show incorpor new edg algorithm dene color compat previous dene color problem follow given depend graph w goal nd retim r z r legal cours minim number zeroweight edg e summar previou observ chang denit kilter index follow way kilter index still nonneg lead us chang also proof proposit 3 4 take account new edg denot c f resp c fclock set edg e resp e clock fe 0 c 0 multicircuit g 0 dene f proposit 5 f few proof f f v r f r e proposit 2 v r kie denit kilter index proposit 5 give new optim condit take clock edg account proposit 6 8e r optim furthermor g r proof proof similar proof proposit 4 v r clock r e r e f f thu f few proposit 5 furthermor sinc retim legal inequ 4 satis construct e clock word g r remain draw kilter diagram e clock assign type color type type 1 w r e 0 type 3 w r type 4 w r conform edg type 2 w r e 0 fe 0 non conform edg color chosen follow black type 3 edg red type 4 edg green type 2 edg uncolour type 1 edg see figur 10 black fe red r w e r uncolour green figur 10 kilter diagram color clock edg note need start legal retim ie retim g r less edg weight nonneg includ weight clock edg retim comput use algorithm 2 initi edg e clock conform algorithm never creat non conform edg green edg e clock never appear nal algorithm similar algorithm 4 reach optim retim keep clock period less given constant number step still bound jej sinc clock edg conform remain conform number edg g 0 ojv sinc g 0 complet graph worst case new clock edg mark procedur thu ojv overal complex algorithm ojejjv j 2 5 conclus limit futur work heurist shiftthencompact algorithm propos fall trap even reli optim exponenti algorithm loop compact word given problem instanc shift select may best one loop compact nevertheless separ two phase cyclic problem without resourc constraint acycl problem resourc constraint allow us convert worst case perform result acycl schedul problem worst case perform result softwar pipelin problem see equat 3 import idea due gasperoni schwiegelshohn 9 one interest decompos softwar pipelin method includ moduloschedul properti close get optim prove separ two phase sever advantag rst advantag alreadi mention need take resourc model account loop compact phase thu design use aggress even exponenti loop compact algorithm specic architectur second advantag fairli easi control statement move simpli incorpor addit edg enforc critic path loop compact smaller given constant constant could opt choos larger valu give freedom second object minim loop independ edg long valu less hold anoth exampl want limit constant le maxim valu w r e edg link number regist need store valu creat u simpli add edg v u weight le take addit edg account done clock edg third advantag still need explor rst phase loop shift mayb use alon precompil step even architectur dynam schedul minim number depend insid loop bodi exampl reduc number mispredict data specul 20 despit advantag mention techniqu still one import weak come fact never tri overlap pattern obtain loop compact practic cours instead wait complet pattern initi follow one choos initi interv equal makespan loop compact see algorithm 1 could choos smaller initi interv long resourc constraint depend constraint satis resourc p dene endp last clock cycl p use acycl schedul given choos initi interv smallest satis depend larger p exampl found initi interv equal 3 4 3 exampl 2 pipelin resourc end section 43 overlap approach may work well practic improv gener worst case perform bound equat 3 still nd improv direct especi deal pipelin resourc point gasperoni schwiegelshohn approach 9 weak least worst case perform bound consid shift schedul innit resourc whole use loop compact algorithm releas date task schedul soon possibl ensur good overlap result worst case perform bound max replac 1 case pipelin resourc problem howev seem dicult incorpor object zeroweight edg minim describ paper gasperoni schwiegelshohn approach sinc real separ shift schedul problem nevertheless loop compact releas date look promis plan explor possibl deal pipelin resourc chang graph cut oper sever node rst real node correspond eectiv resourc util sever virtual node one unit latenc virtual node schedul innit virtual resourc approach nd shorter clock period delay node cut sever part equal 1 e situat actual equival case unit delay unpipelin resourc thu bound equat 3 max replac 1 problem howev algorithm pseudopolynomi number vertic graph depend linearli max unaccept pipelin latenc larg anoth strategi reli sever heurist loop unrol hide preponder max worst case bound overlap unrol loop sucient number time p larg compar max sinc resourc limit unrol loop increas lower bound due resourc thu minim initi interv also complet satisfi thu work better optim choic initi shift improv compact phase overcom problem current algorithm implement sourc level use sourcetosourc transform librari nestor 26 mainli check correct strategi found dicult complet control compil backend particular lot work remain done better understand link loop shift lowlevel optim regist alloc regist renam strength reduct even way code translat consid exampl 2 write instead simpl modic reduc 1 opt 3 minim number zeroweight edg still lead best solut loop compact clock period equal 4 except simultan want keep clock period less 3 program equival softwar pipelin problem chang control lead gener question level softwar pipelin perform r perfect pipelin softwar pipelin circuit retim appli decompos softwar pipelin rotat schedul loop pipelin algorithm combin retim schedul techniqu loop parallel loop tile gener close optimum loop schedul parallel processor graph algorithm cyclic schedul parallel processor overview comput architectur quantit approach 2nd edit circular schedul character minimum cycl mean digraph softwar pipelin retim synchron circuitri swing modulo schedul lifetimesensit approach dynam specul synchron data depend iter modulo schedul algorithm softwar pipelin iter modulo schedul schedul techniqu easili schedul horizont architectur high perform scienti nestor librari tool implement fortran sourc sourc transform decompos softwar pipelin tr graph algorithm softwar pipelin effect schedul techniqu vliw machin optim parallel arbitrari loop circular schedul effici resourceconstrain global schedul techniqu superscalar vliw processor lifetimesensit modulo schedul rotat schedul minimum regist requir modulo schedul specif softwar pipelin use petri net decompos softwar pipelin softwar pipelin circuit retim appli decompos softwar pipelin comput architectur 2nd ed ia64 architectur work perfect pipelin schedul techniqu easili schedul horizont architectur high perform scientif comput swing modulo schedul ctr pemysl cha zdenk hanzlek antonn hemnek jan schier schedul iter algorithm matrix oper effici fpga designimplement finit interv constant modulu algorithm journal vlsi signal process system v46 n1 p3553 januari 2007