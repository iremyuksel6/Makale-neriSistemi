use redund find error paper explor idea redund oper like type error commonli flag correct error experiment test idea write appli four redund checker linux oper system find mani error use error demonstr redund even harmless strongli correl presenc tradit hard error eg null pointer derefer unreleas lock final show flag redund oper give way make specif fail stop bydetect danger omiss b introduct program languag long use fact mani highlevel conceptu error map lowlevel type error paper demonstr map diver direct mani highlevel conceptu error also map lowlevel redund oper except styliz case programm gener attempt perform use work perform action believ serv purpos spuriou oper violat belief like error exampl imposs boolean condit signal mistaken express critic section without share state signal use wrong variabl written read signal unintent lost result least condit signal conceptu confus would also expect correl hard error deadlock null pointer derefer etc even harmless redund use redund find error three way 1 write checker automat flag redund 2 use error predict nonredund error null pointer derefer 3 use redund find incomplet program specif discuss wrote four checker flag potenti danger redund 1 idempot oper 2 assign permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit commerci advantag copi bear notic full citat first page copi otherwis republish post server redistribut list requir prior specif permiss andor fee sigsoft 2002fse10 novemb 1822 2002 charleston sc usa never read 3 dead code 4 condit branch never taken error found would larg miss tradit type system checker exampl section 2 show assign variabl signal mistak yet assign type check languag know cours legitim action caus redund defens program may introduc unnecessari oper robust debug code assert check imposs condit abstract boundari may forc duplic calcul thu evect find error checker must separ redund induc error wrote redund checker xgcc extens compil system 16 make easi build systemspecif static analys analys depend extens compil make easier prototyp perform focus suppress fals posit class evalu evect flag redund oper find danger error appli four checker linux oper system good test sinc linux larg widelyus sourc code base check roughli 16 million line serv known experiment base also written mani peopl repres mani diver code style abil expect redund even harmless strongli correl hard error rel uncontroversi hypothesi confus incompet programm tend make mistak experiment test hypothesi take larg databas hard linux error found prior work 8 measur well redund predict error compar chanc test file redund error roughli 45 100 like hard error compar file drawn chanc diver hold across diver type redund final discuss tradit check approach base annot specif use redund check safeti net find miss annot incomplet specif specif mistak commonli map redund oper exampl assum specif bind share variabl lock miss bind like lead redund critic section share state lock protect variabl flag omiss know everi lock protect share variabl everi critic section contain share state paper make four contribut 1 idea redund oper like type error commonli flag correct error 2 experiment valid idea write appli four redund checker real code error found often surpris us 3 demonstr redund even harmless strongli correl presenc tradit hard error 4 show redund give way make specif fail stop detect danger omiss main caveat approach error count might error sinc examin code write counter diagnos error reason sure close two year experi linux bug reason confid fals posit rate bug diagnos nonzero probabl less 5 section 2 section 5 present four checker section 6 correl error found tradit hard error section 7 discuss check complet use redund section 8 discuss relat work final section 9 conclud 2 idempot oper system bug minor fals tabl 1 bug found idempot checker linux version 245ac8 checker section flag idempot oper variabl 1 assign x x 3 bitwis ord x x 4 bitwis andd x x checker simplest paper requir 10 line code system even found sever interest case redund signal highlevel error four appar typo variabl assign clearest exampl follow code programm make mistak copi structur sa structur da 241netappletalkaarpcaarprcv els need make copi entri good exampl redund error catch case type system miss code assign variabl type check languag know yet clearli contain error two error caus integ overflow ore 8bit variabl constant bit set upper 16 bit final one caus appar miss convers routin code seem test machin convers unnecessari prevent tester notic miss routin minor error oper seem follow nonsens consist code pattern ad 0 variabl typograph symmetri nonzero addit curious three fals posit annot comment explain redund oper done give evid belief programm regard redund oper somewhat unusu macro main sourc potenti fals posit repres logic action may map concret action exampl network code contain mani call form use reorder byte variabl x canon network order machin receiv data unpack appropri howev machin data alreadi network order macro expand noth result code simpli assign x suppress fals posit modifi preprocessor note line contain macro simpli ignor error line 3 redund assign system bug fals uninspect linux 245ac8 129 26 1840 tabl 2 bug found redund assign checker linux version 245ac8 xgcc system use paper 1840 uninspect error variabl assign never use linux expect larg number actual error given low number fals posit inspect result checker section flag case valu assign variabl subsequ use checker track lifetim variabl use simpl global anali si assign follow variabl forward path emit error messag variabl read path either exit scope assign anoth valu show mani case lost valu signal real error control flow follow unexpect path result comput return etc checker find thousand redund assign system size linux sinc evect minim chanc fals posit radic restrict variabl would follow nonglob variabl alias way checker code deal diverenti error three class rank follow order 1 variabl assign valu read empir error tend seriou sinc flag unintent lost result 2 variabl assign nonconst overwritten without read also commonli er ror tend less sever fals posit class tend come assign return valu function call dummi variabl ignor 3 variabl assign constant reassign valu without read frequent due defens program programm alway initi variabl safe valu com monli null 0 0xffffffff 1 read use track valu emit report error messag use common defens valu easili suppress suppress fals posit mani redund checker macro defens program caus fals posit minim impact macro checker track variabl kill produc macro main remain vulner valu assign pass debug macro turn ov typic small number macro manual turn back use rank minim impact defens pro gram redund oper error done within span line robust program practic separ 20 thu rank error base 1 line distanc assign reassign 2 number condit path close error like farther error becom arguabl defens program error checker found error checker written combin two interest error pattern show redund signment 1 variabl whose valu unintent discard 2 variabl whose valu use surpris control flow eg unexpect return figur 1 show repres exampl first pat tern function signal pend return true signal pend current process error code set code break enclos loop valu err must pass back call applic retri system call howev code alway return 0 caller matter happen insid loop lead insidi error code usual work occasion abort return success code caus client assum oper happen numer similar error caller side result function assign variabl ignor rather check case fact logic code contain error readili flag look variabl assign use second class error come calcul abort unexpect control flow figur 2 give one ex ampl path loop end return wrongli abort loop singl iter error caught fact assign use walk link list never read loop iter would dead code figur 3 give variat theme unexpect control flow statement extran statement termin end make subsequ return alway taken case code mistak caus dangl assign use fact allow 241netdecnetafdecnetcdnwaitrun lost valu break scpstate dnrun return 0 figur 1 lost return valu caught flag redund assign err 241netatmlecclecaddrdelet entri null bug never reach lecarpremoveprivlecarpt return 0 figur 2 singleiter loop caught flag redund assign entrynext assign appear read loop iter statement entri next dead code sinc loop alway exit singl iter logic result entri loop tri delet first one list delet us flag bogu structur even know control flow code presenc error led us write deadcod checker next section reassign valu typic harmless signal fairli confus programm exampl 245ac8driversnetwansdlax25c allocandinitskbbuf struct skbuff new skb assign valu skb immedi reassign anoth alloc valu diver case show potenti confus cs iter work 241driversscsiscs scpnt scpnt scnext variabl scnext assign immedi reassign loop logic behind decis remain unclear deviou error valu reassign use suspici lost valu one worst interest commerci system equival follow code 245ac8fsntfsunistrcntfscollatenam ic c1 upcaselen c2 upcaselen meta stray termin return errval c1 c2 return 1 figur 3 catastroph return caught redund assign c2 last condit accident termin stray statement termin end line caus routin alway return err val 241netipv6rawcrawv6getsockopt switch optnam case ipv6checksum optchecksum els bug alway fall default return enoprotoopt figur 4 unintent switch fall caus code alway return error map lowlevel redund valu assign val never use system bug fals linux 245ac8 66 26 tabl 3 bug found dead code checker linux version 245ac8 first glanc seem like obviou copyandpast error turn redund flag much deviou error array buf actual point memori map region kernel memori unlik normal memori read write memori caus cpu issu io command hardwar devic thu read idempot two row rather one caus diver result happen howev code real silent error variant c code written pointer memori map io must declar volatil otherwis compil free optim duplic read away especi sinc case pointer store could chang valu danger case buf declar normal pointer rather volatil one allow compil optim wish fortun error trigger gnu c compil use weak optim conserv optim express mani level indirect howev use aggress compil later version gcc could caus extrem diycult track bug surfac 4 dead code checker section flag dead code sinc programm gener write code run dead code catch logic error signal fals belief imposs path execut core dead code checker straightforward markandsweep algorithm routin 1 mark block reachabl routin entri node 2 travers block routin flag mark three modif basic algorithm first truncat path reach function would return exampl includ panic abort bug use linux signal termin kernel error reboot system code domin call run second suppress error messag dead code caus constant condit printfin foo sinc frequent signal code comment use fals condit also annot error messag code flag singl statement contain break return commonli result defens pro gram final suppress dead code caus macro despit simplic dead code analysi found high number clearli seriou error three error caught redund assign checker also caught dead code extens 1 singl iter loop figur 2 2 mistaken statement termin figur 3 3 unintent fall figur 4 figur 5 give frequent copyandpast error macro pseterr return caller realiz thu seven call site use macro dead code macro client intend execut 241driverscharriorioparamcrioparam retval riofail riospinunlockirqrestoreportpportsem flag return return riofail figur 5 unexpect return call pseterr macro return argument valu error unfortun programm realiz insert subsequ op erat flag dead code checker mani similar mistaken use macro figur 6 give anoth common error singleiter loop alway termin contain ifels statement break loop path hard believ code ever test figur 7 give variat one branch statement break loop use cs continu statement skip rest loop bodi thu none code end bodi execut 241driversscsi53c78xxc returnoutstandingcommand struct ncr53c7x0cmd cnext ccmdscpbuffer printk break els printk duh break bug reach struct scatterlist list list free figur broken loop first ifels statement loop contain break path caus loop alway abort without ever execut subsequ code contain 5 redund condit checker section flag redund branch condit branch statement etc nonconst condit alway evalu either 245ac8netdecnetdntablec dnfibtablelookup dnkeyleqk ffnkey break els bug reach ffnstate dnsaccess ffnstatednszombi ffnscope keyscop figur 7 useless loop bodi similarli figur 6 loop broken ifels statement one branch abort loop use cs continu statement skip bodi begin anoth iter 241driversnetarcnetarcrim arcrimifound reserv irq requestirqdevirq arcnetinterrupt bugmsgdnorm cant get irq dn devirq return enodev figur 8 unexpect return misplac brace insert debug statement caus control alway return true fals 2 switch statement imposs case case result logic inconsist program therefor like error checker base falsepath prune fpp featur xgcc system fpp origin design prune away fals posit aris infeas path symbol evalu variabl assign comparison either constant eg variabl eg use simpl congruenc closur algorithm 11 stop checker check current execut path soon detect logic conflict fpp checker implement use simpl markandsweep algorithm routin explor feasibl execut path mark branch oppos basic block section visit along way take set unmark branch flag condit associ redund checker abl find hundr redund condit linux 241 main sourc fals posit aris follow two form macro 1 embed condit 2 constant macro use condit statement eg debug debug defin 0 suppress left three major class 200 problemat case describ first class error least seriou three character overli cautiou program style includ case programm check condit multipl time within short program distanc believ could indic novic programm conjectur support statist analysi describ section 6 figur 9 show redund check type linux 241 although almost certainli harmless show programm poor grasp code one might will bet presenc surround bug 241driversmediavideocpiaccpiammap cam camop return enodev make realli smpsafe downinterruptiblecambusylock return eintr cam camop redund return enodev figur 9 overli cautiou program style second check cam camop redund figur show problemat case one see els branch second statement never taken first condit weaker negat second interestingli function return diver error code essenti error indic possibl confus programm 241driversnetwansbnicsbniioctl ifslav slaveflag iffup devflag iffup print error messag back return einval slave bug slave imposs els print error messag return enoent figur 10 overli cautiou program style check slave guarante true also notic diver return valu second class error catch seemingli harmless examin care find seriou error around guesswork cross referenc assum loop figur 11 tri recov hardwar error encount read network packet sinc variabl err never updat loop bodi condit err success alway true loop bodi never execut nonsens could signal possibl bug author forget updat err larg chunk recoveri code loop bug confirm could diycult detect dynam error recoveri code easi miss test third class error clearli seriou bug figur 12 show exampl detect redund condi 241driversnettokenringsmctrc smctrrxframe larg chunk appar recoveri code updat err err success break figur redund condit suggest seriou program error tional checker one see second third statement carri entir diver action ident condi tion appar programm cutandpast condit without chang one two node log fourth possibl node present 241driversfciph5526c rscnhandler loginst nodeloggedin loginst nodeprocessloggedin els loginst nodeloggedout txadiscfi elsadisc nodeid els bug redund condit loginst nodeloggedout txlogifi elsplog nodeid figur 12 redund condit signal error condit express place els branch anoth ident one figur 13 show anoth seriou error one see author intend insert element point sp doublylink list head qq first loop realli noth set srb p null nonsens checker detect error infer exit condit loop conflict true branch ensu statement obviou fix replac condit srb p srb p srb pnext bug danger hard detect quietli discard everyth origin list construct new one sp element matter fact bug still present latest 2419 releas linux kernel sourc write 6 predictingharderrorswithr dundanc section show correl redund error hard bug crash system redund error come previou four section hard 241driversscsiqla1280c qla1280putqt srbp srbp bug branch never taken srbpsprev els qqfirst els qqlast figur 13 seriou error link list insert impl mentat srb p alway null loop appear check wrong boolean condit bug collect linux 241 checker describ 8 bug includ use freed memori derefer null pointer potenti deadlock unreleas lock secur violat eg use untrust valu array index show strong correl two error popul use statist techniqu call conting tabl method 6 show file contain redund error roughli 45 100 like hard error file select random result indic 1 file redund error good audit candid 2 redund correl confus programm probabl make seri mistak 61 methodolog subsect describ statist method use measur associ program redund hard error analysi base 2 2 conting tabl 6 method standard statist tool studi associ two diver attribut popula tion case popul set file check two attribut whether file contain redund b whether contain hard error conting tabl approach sampl popul crossclassifi four categori base two attribut say b popul obtain count ij categori tabular result follow true fals total true fals total valu margin n 1 n 2 n row column total n grand total null hypothesi h 0 test b mutual independ ie know give us addit inform b precis h 0 hold expect 1 comput expect valu four cell tabl follow use chisquar test statist 15 measur far observ valu ij deviat expect valu e ij use statist deriv probabl observ null hypothesi h 0 true call pvalu 2 smaller pvalu stronger evid h 0 thu stronger correl attribut b 62 data acquisit test result previou work 8 use xgcc system check 2055 file linux 241 kernel focus seriou system crash hard bug abl collect 1800 seriou hard bug 551 file type bug check includ null pointer derefer deadlock miss secur check use bug repres class seriou hard error deriv correl program redund crossclassifi program file linux kernel follow four categori obtain count 1 number file redund hard error 2 number file redund hard error 3 number file hard error redund 4 number file neither redund hard error carri test describ section 61 follow three redund checker redund assign checker dead code checker redund condit checker idempot oper exclud small sampl size result test given tabl 4 5 6 7 see correl redund hard see true consid 100 white ball urn first randomli draw 40 put red mark put back urn randomli draw put blue mark obvious expect roughli 80 40 ball red mark blue mark expect roughli 80 remain red mark blue mark 2 technic h 0 2 distribut one degre freedom pvalu look cumul distribut tabl 2 1 distribut exampl larger 4 pvalu go 5 redund hard bug assign total 551 1504 2055 tabl 4 conting tabl redund assign vs hard bug 345 file error type 435 file assign error hard bug 206 file hard bug assign error 1069 file bug either type tstatist valu four give pvalu less 05 strongli suggest two event independ observ valu 19437 give pvalu essenti 0 notic better standard threshold intuit correl error type seen ratio 345435 consider larger ratio event independ expect two ratio close hard bug dead code ye total total 551 1504 2055 tabl 5 conting tabl dead code vs hard bug error extrem high pvalu approxim 0 four case strongli suggest redund often signal confus programm therefor good predictor hard seriou error 63 predict hard error addit correl want know much like find hard error file one redund oper precis let e event given sourc file contain one hard error r event contain one form redund oper comput confid interv measur much like find hard error file given program redund prior probabl hard error comput follow number file hard error total number file check tabular condit probabl valu tabl 8 exclud idempot oper checker small bug sampl shown ta ble given form redund oper roughli like find error file otherwis furthermor redund even predict hard error across time carri test redund hard bug total 551 1504 2055 tabl conting tabl redund condit vs hard bug hard bug aggreg total 551 1504 2055 tabl 7 conting tabl program redund aggr gate vs hard bug dundanc found linux 245ac8 hard error 241 roughli year older found similar result 7 failstop specif section describ use redund code action find sever type specif error omiss often program specif give extra inform allow code check whether return valu routin must check null share variabl protect lock permiss check guard sensit oper etc vulner approach code featur annot includ specif check catch omiss flag redund oper case mani other least one specifi action make littl sens isol critic section without share state pointless permiss check guard known sensit action thu code intend useless oper redund happen exactli checkabl action miss least caught someth pointless delet sketch four exampl close checker use redund find miss checkabl action detect omit null annot tool lclint 12 let programm annot function return null pointer null annot tool emit error uncheck use pointer return null routin real system mani function return make easi forget annot catch omiss use redund know return valu null function check thu check nonannot function mean either function 1 annot null 2 function return null programm misunderstood interfac find miss lockvari bind data race detect tool warlock 20 let user explicitli bind lock confid interv assign 353 889 03971 01289 00191 4811 1395 dead code condit aggreg 372 945 03937 01255 00187 4683 1365 tabl 8 program file redund roughli 50 like contain hard error variabl protect tool flag annot variabl access without lock held howev lock variabl bind easili forgotten caus variabl silent uncheck use redund catch mistak critic section must protect share state flag find either 1 useless lock delet good perform 2 place share variabl annot miss volatil annot describ section 4 c variabl unusu readwrit semant must annot volatil type qualifi prevent compil optim safe normal variabl incorrect volatil one elimin duplic read write miss volatil annot silent error softwar usual work occasion give incorrect error shown omiss detect flag redund oper read write make sens nonvolatil variabl miss permiss check secur system must guard sensit oper modifi file kill pro cess permiss check tool automat catch mistak given specif check protect oper larg number sensit oper make easi forget bind use redund find omiss assum programm redund permiss check find permiss check guard known sensit oper signal incomplet specif 71 case studi find miss secur hole separ paper 3 describ checker found oper system secur hole caus integ read untrust sourc network packet system call param eter pass trust sink array indic memori copi length without check safe upper lower bound singl violat let malici attack take control entir system unfortun checker vulner omiss omit sourc mean checker track data produc omit sink mean checker flag unsanit data reach sink implement checker use idea section detect omiss given list known sourc sink normal check sequenc 1 code read data unsaf sourc 2 check 3 pass trust sink assum programm gratuit sanit miss sink detect flag code step 1 2 3 read valu known sourc sanit impli code believ valu reach danger oper valu reach known sink like miss one similarli could infer miss sourc convers analysi flag os sanit data think taint pass trust sink analysi found roughli 10 common use sanit input linux 246 3 nine use harmless howev one secur hole unexpectedli specif omiss rather sink known interprocedur analysi overli simplist caus us miss path fact redund flag error specif tool nice surpris 8 relat work two exist type analysi focus redund oper optim compil anomoli detect work optim compil commonli deadcod elimin commonsubexpress elimin 1 remov redund improv perform one contribut work realiz analys silent find error sinc invent analys close mirror algorithm core sever refin first oper higherlevel represent typic optim sinc larg number redund oper introduc due compil sourc construct intermedi represent second order preserv semant program compil optim conserv analysi contrast sinc goal find possibl error perfectli reason flag redund even 95 sure legitimaci fact report suspici case sort order confid heurist eg distanc redund etc report final analysi tradeov make diver exampl use pathsensit algorithm suppress fals path optim omit path sensit analys time complex outweigh benefit second type redund analysi includ check tool fosdick osterweil first appli data flow anomali detect techniqu context softwar reliabl dave system 18 use depth first search algorithm detect fix set variabl defus type anomali uniniti read doubl definit etc static approach like 13 14 18 often pathinsensit therefor could report bogu error infeas path dynam techniqu 17 7 instrument program detect anomali aris execut howev dynam approach weaker find error execut path runtim overhead diy culti instrument oper system limit usag approach dynam system similar work huang 17 discuss checker similar assign checker section 3 track lifetim variabl use simpl global analysi assign follow variabl forward path give error variabl read path either exit scope assign anoth valu howev experiment result given dynam seem predispos report larg number fals posit case valu read current execut path would use nonexecut path tool lint lclint 12 gnu c compil wall option warn unus variabl routin ignor return valu long found redund real code use daili redund commonli view harmless stylist issu evid percept best knowledg mani recent error check project focu sole hard error null pointer derefer fail lock releas rather redund check 4 10 5 9 2 19 21 main contribut paper show redund signal real error experiment measur well hold 9 conclus paper explor hypothesi redund like type error flag higherlevel correct mistak evalu approach use four checker appli linux oper system simpl analys found mani surpris us error type correl well known hard error redund seem flag confus poor programm prone error type indic could use decid audit system 10 acknowledg would like thank anonym review help comment work support nf award 0086160 darpa contract mda90498ca933 11 r detect race relay ladder logic program use programmerwritten compil extens catch secur hole automat valid tempor safeti properti interfac static analyz find dynam program error statist infer empir studi oper system error enforc highlevel protocol lowlevel softwar overview extend static check system variat common subexpress problem tool use specif check code algebra data flow anomali detect data flow analysi softwar reliabl system languag build systemspecif detect data flow anomali program instrument dynam data race detector multithread program first step toward autom detect buver overrun vulner tr compil principl techniqu tool aidamyampersandmdasha dynam data flow anomali detect system pascal program lclint variat common subexpress problem static analyz find dynam program error data flow analysi softwar reliabl enforc highlevel protocol lowlevel softwar automat valid tempor safeti properti interfac empir studi oper system error system languag build systemspecif static analys detect race relay ladder logic program algebra data flow anomali detect use programmerwritten compil extens catch secur hole ctr david hovemey jaim spacco william pugh evalu tune static analysi find null pointer bug acm sigsoft softwar engin note v31 n1 januari 2006 zhang neelam gupta rajiv gupta locat fault autom predic switch proceed 28th intern confer softwar engin may 2028 2006 shanghai china zhang neelam gupta rajiv gupta prune dynam slice confid acm sigplan notic v41 n6 june 2006 neelam gupta haifeng xiangyu zhang rajiv gupta locat faulti code use failureinduc chop proceed 20th ieeeacm intern confer autom softwar engin novemb 0711 2005 long beach ca usa yuriy brun michael ernst find latent code error via machin learn program execut proceed 26th intern confer softwar engin p480490 may 2328 2004 david hovemey william pugh find bug easi acm sigplan notic v39 n12 decemb 2004 sudarshan srinivasan srikanth kandula christoph r andrew yuanyuan zhou flashback lightweight extens rollback determinist replay softwar debug proceed usenix annual technic confer 2004 usenix annual technic confer p33 june 27juli 02 2004 boston