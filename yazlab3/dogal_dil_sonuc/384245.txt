improv memori perform sort algorithm memori hierarchi consider sort algorithm design implement play import role significantli improv execut perform exist algorithm mainli attempt reduc capac miss directmap cach reduc type cach miss occur common setassoci cach tlb restructur mergesort quicksort algorithm integr tile pad buffer techniqu repartit data set studi show substanti perform improv obtain use new method b introduct sort oper fundament mani larg scale scientif commerci applic sort algorithm highli sensit memori hierarchi comput architectur algorithm execut well sensit type data set restructur standard algorithm effici sort algorithm mergesort quicksort exploit cach local effect approach improv perform highend system ex work support part nation scienc foundat grant ccr9400719 ccr9812187 eia9977030 air forc offic scientif research grant afosr9510215 sun microsystem grant eduenafo980405 permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit direct commerci advantag copi show notic first page initi screen display along full citat copyright compon work own other acm must honor abstract credit permit copi otherwis republish post server redistribut list use compon work work requir prior specif permiss andor fee permiss may request public dept acm inc 1515 broadway new york ny 10036 usa fax 1 212 8690481 permissionsacmorg xiaodong zhang stefan kubricht ist restructur algorithm eg 4 mainli attempt reduc capac miss directmap cach paper report substanti perform improv obtain exploit memori local reduc type cach miss conflict miss tlb miss present sever restructur mergesort quicksort algorithm implement fulli use exist processor hardwar facil cach associ tlb integr tile pad techniqu properli partit data set cach optim sort fundament subroutin often repeatedli use mani applic program thu order gain best perform cacheeffect algorithm implement done care precis algorithm design program level focu restructur mergesort quicksort algorithm cach opti mizat result contribut summar follow appli pad techniqu abl effect reduc cach conflict miss tlb miss fulli consid algorithm design tile mergesort multimergesort 4 two mergesort alter nativ optim improv cach overal perform experi differ highend workstat show algorithm achiev 70 execut time reduct compar base mergesort 54 reduct versu fastest tile multimergesort algorithm partit data set base data rang abl exploit cach local quicksort unbalanc data set two quicksort altern significantli outperform memorytun quicksort 4 flashsort 6 unbalanc data set cacheeffect sort algorithm design architectur data set depen dent algorithm design includ paramet data cach size associ tlb size associ ratio data set size cach size well other measur simul demonstr interact algorithm machin essenti issu consid sort algorithm design tradeoff reduct cach miss increas instruct count give execut time model quantit predict tradeoff also give analyt predict number cach miss sort algorithm cach optim show increas instruct count due effect cach optim much cheaper cycl lost differ type cach miss 2 data set consist number element one element may 4byte integ 8byte integ 4byte float point number 8byte doubl float point number use unit element specifi cach capac size cach cach line alway multipl element practic ident unit practic meaning architect applic program mer make discuss straightforward algorithm architectur paramet use describ cacheeffect sort algorithm size data set c data cach size l size cach line k improv memori perform sort algorithm delta 3 cach associ number set entri tlb cach k associ p memori page size besid algorithm analysi perform measur differ highend workstat also conduct simul provid perform insight simplescalar tool set 1 famili simul studi interact applic program comput architectur simul tool take applic program binari compil simplescalar instruct set architectur close deriv mip instruct set gener statist concern program relat simul architectur statist gener includ mani detail execut trace avail measur comput cach miss l1 l2 tlb run sort algorithm differ simul architectur memori hierarchi similar highend workstat observ follow perform factor l1 l2 cach miss per element compar data cach miss tlb miss per element compar tlb miss instruct count per element compar algorithm complex reduct rate total execut cycl compar cycl save percentag base mergesort memorytun quicksort algorithm compar evalu experiment analyt test sort algorithm varieti data set use 8byte integ element 9 data set use probabl densiti function number gener describ 7 1 random data set obtain call random number gener random c librari return integ rang 0 2 2 equilik function equilikelyab return integ rang b 3 bernoulli function bernoullip return integ 0 1 return integ 0 1 2 5 pascal function pascalnp return integ 0 1 2 return integ 0 1 2 n return integ 0 1 2 data set unbalanc function return integ rang 0 2 call rand c librari n data set size return integ max100 3 cacheeffect mergesort algorithm section first briefli overview two exist mergesort algorithm cach local well merit limit present two new mergesort altern address limit experiment perform evalu measur present section 5 xiaodong zhang stefan kubricht 31 tile mergesort multimergesort lamarca ladner 4 present two mergesort algorithm effect use cach first one call tile mergesort basic idea partit data set subarray sort individu mainli two purpos avoid capac miss fulli use data load cach replac algorithm divid two phase first phase subarray length c2 half cach size sort base mergesort algorithm exploit tempor local algorithm return base mergesort without consid cach local second phase complet sort entir data set second mergesort call multimergesort address limit tile mergesort algorithm first phase first phase tile mergesort second phase multiway merg method use merg sort subarray togeth singl pass prioriti queue use hold head list merg algorithm exploit cach local well number subarray second phase less c2 howev instruct count significantli increas algorithm conduct experi analysi two mergesort algorithm show sort perform improv two reason first algorithm significantli reduc capac miss suffici reduc conflict miss mergesort basic oper merg two sort subarray destin array cach low associ conflict map occur frequent among element three subarray second reduc tlb miss consid algorithm even data set moder larg tlb miss may sever degrad execut perform addit effect normal data cach miss experi show perform improv multimerg algorithm sever machin modest although decreas data cach miss heap structur significantli increas tlb miss 32 new mergesort altern aim reduc conflict miss tlb miss minim instruct count increas present two new altern restructur mergesort cach local tile mergesort pad multimergesort tlb pad 321 tile mergesort pad pad techniqu modifi data layout program conflict miss reduc elimin data layout modif done runtim system softwar 2 10 compiletim compil optim 8 pad algorithm level full understand data structur expect significantli outperform optim system method 11 second phase tile mergesort pair sort subarray sort merg destin array one element time two subarray select sort comparison sequenc data element two differ subarray destin array potenti conflict cach block may map block directmap cach 2way associ cach improv memori perform sort algorithm delta 5 directmap cach total number conflict miss tile mergesort worst case approxim log 2 number pass second phase sort repres 1 conflict miss per comparison 1 conflict miss per element placement destin array comparison respect order chang base address potenti conflict cach block insert l element cach line space separ everi section c element data set second phase tile mergesort pad element significantli reduc cach conflict second phase mergesort compar data size number pad element insignific addit instruct count increment result move element subarray new posit pad also trivial call method tile mergesort pad directmap cach total number conflict miss tile mergesort pad most4 ndlog 2 log 2 c number pass second phase sort 3repres number conflict miss per element pad ad one conflict miss per comparison reduc 3 1 conflict miss placement 1 elimin compar two approxim 1 2 see tile mergesort pad reduc conflict miss tile mergesort 25 experiment result show execut time tile mergesort sun ultra 5 workstat directmap cach reduc 23 68 tile mergesort pad execut time reduct mainli come reduct conflict miss figur 1 show exampl data layout two subarray second phase tile mergesort modifi pad conflict miss reduc exampl directmap cach hold 4 element figur type line repres pair comparison action store select element destin array letter figur repres cach miss without pad 8 conflict miss merg two sort subarray destin array 4 pad ad figur 2 show l1 left figur l2 right figur miss base mergesort tile mergesort tile mergesort pad simul sun ultra 5 machin simplescalar machin l1 directmap cach 16 kbyte l2 2way associ cach 256 kbyte experi show pad reduc l1 cach miss 23 compar base mergesort tile mergesort miss conflict reduc tile l2 cach miss reduct tile mergesort pad almost tile mergesort mean pad effect reduc conflict miss l2 machin conflict miss significantli reduc l2 2way associ cach 6 delta li xiao xiaodong zhang stefan kubricht x2 x3 x4 x5 x6 x7 x8 x9 pad pad destin array cach two sort subarray conflict conflict fig 1 data layout subarray modifi pad reduc conflict misses5151k 4k 16k 64k 256k 1m 4m per element data set size element l1 miss per element base mergesort tile mergesort tile mergesort padding13571k 4k 16k 64k 256k 1m 4m per element data set size element l2 miss per element base mergesort tile mergesort tile mergesort pad fig 2 simul comparison l1 cach miss left figur l2 miss right figur mergesort algorithm random data set simul sun ultra 5 l1 cach miss curv left figur base mergesort tiledmergesort overlap capac miss second phase tile mergesort unavoid without complex data structur size work set two subarray destin array normal larger cach size shown potenti conflict miss could reduc pad phase howev pad may complet elimin conflict miss due random order data set despit experiment result present improv memori perform sort algorithm delta 7 section 5 appendix use 9 differ data set consist show effect pad sun ultra 5 322 multimergesort tlb pad second phase multimergesort algorithm multipl subarray use complet sort entir data set effect use cach singl pass make use heap hold head multipl list howev sinc head come list multimerg practic work set much larger base mergesort three subarray involv time larg work set caus tlb miss degrad perform explain tlb structur follow paragraph experi indic multimergesort significantli decreas number data cach miss howev also increas tlb miss offset perform gain although rise instruct count lead addit cpu cycl multimergesort perform degrad algorithm come mainli high number tlb miss sinc memori access much expens cpu cycl tlb translationlookasid buffer special cach store recent use virtualphys page translat memori access tlb gener small fulli associ setassoci cach entri point memori page 4k 64kbyte tlb cach miss forc system retriev miss translat page tabl memori select tlb entri replac data access larger amount data memori page tlb hold tlb miss occur exampl tlb cach sun ultrasparciii processor hold 64 fulli associ entri point page 8 kbyte p 64 page tlb sun ultrasparciii processor hold 64 theta element repres moderatelys data set sort practic one data array oper time thu tlb hold limit amount data sort processor tlb fulli associ setassoci exampl tlb pentium ii pentium iii processor 4way associ k 4 simpl block base number tlb entri work well multipl page within tlb space rang may map tlb set entri caus tlb cach conflict miss second phase multimergesort insert p element page space separ everi sort subarray data set order reduc elimin tlb cach conflict miss pad chang base address list page unit avoid potenti tlb conflict miss figur 3 give exampl pad tlb tlb directmap cach 8 entri number element list multipl 8 page element pad list data set map tlb entri pad list map differ tlb entri multimergesort oper larg data set size list multipl number tlb miss per element close 1 tlb pad averag tlb miss per element multimergesort algorithm xiaodong zhang stefan kubricht0000011111000000111111000000111111000000111111000000111111 pad tlb data array tlb ps ps ps pad data array fig 3 pad tlb data layout modifi insert page space multipl locat k becom approxim k tlb ts number averag miss tlb set entri approxim deriv figur 4 show l2 miss tlb miss 5 mergesort algorithm simul pentium ii simplescalar l1 4way set associ cach kbyte l2 4way associ cach 256 kbyte tlb 4way set associ cach 64 entri simul show multimergesort multimergesort tlb pad lowest l2 cach miss see left figur figur 4 multimergesort highest tlb miss significantli reduc tlb pad see right figur figur 4 exampl verifi approxim 4 tlb miss multimergesort substitut paramet pentium ii approxim per element multimergesort tlb pad close experiment result 047 right figur figur 4 show section 5 multi mergesort tlb pad significantli reduc tlb miss improv overal execut perform 33 tradeoff instruct count increas perform gain figur 5 show instruct count total cycl save percentag 5 mergesort algorithm compar base mergesort simul pentium ii simul show multimergesort highest instruct count tile mergesort lowest instruct count take advantag low l2 miss multimergesort significantli reduc tlb miss pad multimergesort tlb pad save cycl 40 larg data set compar base mergesort even though rel high instruct count also show tiledmergesort pad gain perform improv pentium ii machin 4way set associ cach conflict miss major concern improv memori perform sort algorithm delta 926101k 4k 16k 64k 256k 1m 4m 8m per element data set size element l2 miss per element base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb padding02061 per element data set size element tlb miss per element base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb pad fig 4 simul comparison l2 cach miss left figur tlb miss right figur mergesort algorithm random data set simul pentium ii1003005007001k 4k 16k 64k 256k 1m 4m 8m instruct per element data set size element instruct per element base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb pad cycl save data set size element cycl save vs base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb pad fig 5 simul comparison instruct count left figur save cycl percentag right figur mergesort algorithm random data set simul pentium ii 4 cacheeffect quicksort first briefli evalu two exist quicksort algorithm concern merit limit includ cach local present two new quicksort altern memori perform improv experiment result report next section xiaodong zhang stefan kubricht 41 memorytun quicksort multiquicksort lamarca ladner paper 4 present two quicksort algorithm cach optim first one call memorytun quicksort modif base quicksort 9 instead save small subarray sort end memorytun quicksort sort subarray first encount order reus data element cach second algorithm call multiquicksort algorithm appli singl pass divid full data set multipl subarray hope smaller cach capac perform gain two algorithm experi report 4 modest implement two algorithm simul machin variou highend workstat obtain consist perform also found quicksort altern cach optim highli sensit type data set algorithm work well unbalanc data set 42 new quicksort altern practic quicksort algorithm exploit cach local well balanc data challeng make quicksort perform well unbalanc data set present two quicksort altern cach optim work well balanc unbalanc data set 421 flash quicksort flashsort 6 extrem fast sort balanc data set maximum minimum valu first identifi data set identifi data rang data rang evenli divid class form subarray algorithm consist three step classif determin size class permut move element class use singl temporari variabl hold replac element straight insert sort element class use sedgewick insert sort 9 reason algorithm work well balanc data set number element store subarray first two step quit similar suffici small fit cach capac make flashsort highli effect howev data set balanc unbalanc amount element among subarray gener caus ineffect cach usag make flashsort slow insert sort 2 worst case compar pivot process quicksort classif step flashsort like gener balanc subarray favor cach optim hand quicksort outperform insert sort unbalanc subarray take advantag flashsort quicksort present new quicksort altern call flash quicksort first two step one flashsort last step use quicksort sort element class 422 inplac flash quicksort employ anoth cach optim improv tempor local flash quicksort hope improv overal perform altern call inplac flash quicksort algorithm first third step one flash quicksort second step addit array use hold permut element improv memori perform sort algorithm delta 11 origin flashsort singl temporari variabl use hold replac element cach line normal hold one element data structur singl variabl minim chanc data reusag use addit array attempt reus element cach line replac reduc instruct count copi data element although approach increas requir memori space improv cach overal perform 43 simul result figur 6 show instruct count left figur l1 miss right figur memorytun quicksort flashsort flash quicksort inplac flash quicksort unbalanc data set simul pentium iii faster processor 500 mhz larger l2 cach 512 kbyte pentium ii instruct count curv flashsort high present left figur figur 6 figur show instruct count memorytun quicksort also began increas rapidli data set size grew contrast instruct count flash quicksort inplac flash quicksort littl chang data set size increas simul also show l1 miss memorytun quicksort flashsort increas much rapidli flashsort inplac flashsort algorithm simul result consist algorithm analysi show effect new quicksort altern unbalanc data sets2006001000 instruct per element data set size element instruct per element unbalanc data set memorytun quicksort flashsort flash quicksort inplac flash quicksort13571k 4k 16k 64k 256k 1m 4m per element data set size element l1 miss per element unbalanc data set memorytun quicksort flashsort flash quicksort inplac flash quicksort fig 6 simul comparison instruct count left figur l1 miss right figur quicksort algorithm unbalanc data set simul pentium iii instruct count curv flashsort high present left figur 5 measur result perform evalu implement test sort algorithm discuss previou section data set describ section 2 sgi o2 workstat sun ultra5 workstat pentium ii pc pentium iii pc data size xiaodong zhang stefan kubricht workstat sgi o2 sun ultra 5 pentium pentium processor type r10000 ultrasparciii pentium ii 400 pentium iii xeon 500 clock rate mhz 150 270 400 500 l2 cach kbyte 64 256 256 512 memori latenc cycl 208 76 68 67 tabl 1 architectur paramet 4 machin use experi use experi limit memori size focu cach effect method use lmbench 5 measur latenc memori hierarchi differ level machin architectur paramet 4 machin list tabl 5 specif l1 cach refer l1 data cach l2 uniform hit time l1 l2 main memori measur lmbench 5 unit convert nanosecond ns cpu cycl compar algorithm algorithm 4 6 execut time collect gettimeofday standard unix time function report time unit cycl per element cpe execut time theta clock rate execut time measur time second clock rate cpu speed cyclessecond machin program run n number element data set perform result data set quit consist analysi sinc perform sort algorithm use differ data set differ machin consist principl present perform result mergesort algorithm use random data set 4 machin plu perform result data set ultra 5 show effect tile mergesort pad perform result quicksort algorithm use random unbalanc data set 4 machin 51 mergesort perform comparison compar 5 mergesort algorithm base mergesort tile mergesort multimergesort tile mergesort pad multimergesort tlb pad proport machin memori capac scale mergesort algorithm n1k n16m element algorithm show effect larg data set figur 7 show comparison cycl per element among 5 algorithm sgi o2 sun ultra 5 improv memori perform sort algorithm delta 13 measur o2 show multimergesort tlb pad perform best execut time reduc 55 compar base compar tile mergesort 31 compar multi mergesort 2m element hand tile mergesort pad perform best ultra 5 reduc execut time 45 compar multimergesort 26 compar base mergesort 23 compar tile mergesort 4m element multimergesort tlb pad ultra 5 also well 35 improv multimergesort 13 base mergesort 9 tile mergesort 4m element reason super perform improv o2 come long memori latenc 208 cycl make cach miss reduct techniqu highli effect improv overal perform sort algorithm l2 cach size sgi rel small 64 kbyte tlb frequent use memori access thu tlb pad effect addit l1 l2 cach 2way associ data cach pad effect pad directmap cach contrast ultra 5s l1 cach direct map l2 4 time larger o2 thu data cach pad effect tlb pad order show effect tiledmergesort pad lowassoci cach system sun ultra 5 plot perform curv 5 mergesort algorithm use 8 data set ultra 5 appendix experi show tiledmergesort pad consist significantli outperform mergesort algorithm ultra 5 exampl tile mergesort pad achiev 70 68 54 execut time reduct zero data set compar base mergesort tile mergesort multimergesort respect use data set also show tile mergesort pad achiev 24 53 execut time reduct compar base mergesort 23 52 reduct compar tile mergesort 23 44 reduct compar multimergesort figur 8 show comparison cycl per element among 5 mergesort algorithm pentium ii 400 pentium iii 500 measur machin show multimergesort tlb pad perform best reduc execut time 41 compar multimergesort 40 compar base mergesort 26 compar tile sort 16m element l1 l2 cach machin 4way set associ thu issu data cach conflict miss concern discuss section 31 sinc tlb miss degrad perform multimergesort algorithm pad tlb becom effect improv perform summari tile mergesort pad machin directmap cach highli effect reduc conflict miss multimergesort pad perform well machin 52 quicksort perform comparison use random data set unbalanc data set test quicksort algorithm 4 machin 4 quicksort algorithm memorytun quicksort flashsort flash quicksort inplac flash quicksort 14 delta li xiao xiaodong zhang stefan kubricht200600100014001k 4k 16k 64k 256k 1m cycl per element data set size element mergesort o2 random data set base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb padding50015001k 4k 16k 64k 256k 1m 4m cycl per element data set size element mergesort ultra 5 random data set base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb pad fig 7 execut comparison mergesort algorithm sgi o2 sun ultra 5200600100014001k 4k 16k 64k 256k 1m 4m 16m cycl per element data set size element mergesort pentium ii 400 random data set base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb padding200600100014001k 4k 16k 64k 256k 1m 4m 16m cycl per element data set size element mergesort pentium iii 500 random data set base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb pad fig 8 execut comparison mergesort algorithm pentium ii pentium iii figur 9 show comparison cycl per element among 4 mergesort algorithm random data set left figur unbalanc data set right figur sgi o2 machin perform result 4 mergesort algorithm use random data set compar memorytun algorithm slightli outperform other contrast perform result use unbalanc data set significantli differ expect execut time flash quicksort inplac flash quicksort stabl memorytun quicksort flashsort perform much wors data set size increas time curv flashsort even high present right figur figur 9 figur show comparison cycl per element among 4 mergesort improv memori perform sort algorithm delta 1520060010001400 cycl per element data set size element quicksort o2 random data set memorytun quicksort flash quicksort inplac flash quicksort20060010001400 cycl per element data set size element quicksort o2 unbalanc data set memorytun quicksort flash quicksort inplac flash quicksort fig 9 execut comparison quicksort algorithm random data set left figur unbalanc data set right figur sgi o2 time curv flashsort high present right figur algorithm random data set left figur unbalanc data set right figur sun ultra 5 machin ultra 5 4 algorithm show littl differ execut time flash quicksort inplac flash quicksort show strong effect unbalanc data set exampl data set increas 128k element execut time flashsort 10 time higher three algorithm curv high plot figur data set increas 4m element execut time memorytun quicksort 3 time higher flash quicksort inplac flash quicksort execut time flashsort 100 time higher other figur 11 figur 12 show comparison cycl per element among 4 mergesort algorithm random data set left figur unbalanc data set right figur pentium ii pentium iii machin respec tive measur pentium random data set show flashsort flash quicksort inplac flashsort similar execut perform reduc execut time around 20 compar memori tune quicksort flash quicksort inplac flash quicksort significantli outperform memoryturn quicksort algorithm unbalanc data set two pentium machin 6 predict model perform tradeoff essenti issu consid sort algorithm design algorithm design memori optim tradeoff optim achievementth reduct cach miss optim effortth increment instruct count optim object improv overal performanceto reduc execut time base algorithm tradeoff object quantit predict execut time model xiaodong zhang stefan kubricht20060010001400 cycl per element data set size element quicksort ultra 5 random data set memorytun quicksort flash quicksort inplac flash quicksort20060010001400 cycl per element data set size element quicksort ultra 5 unbalanc data set memorytun quicksort flash quicksort inplac flash quicksort fig 10 execut comparison quicksort algorithm random data set left figur unbalanc data set right figur ultra 5 time curv flashsort high present right figure20060010001400 cycl per element data set size element quicksort pentium ii 400 random data set memorytun quicksort flash quicksort inplac flash quicksort20060010001400 cycl per element data set size element quicksort pentium ii 400 unbalanc data set memorytun quicksort flash quicksort inplac flash quicksort fig 11 execut comparison quicksort algorithm random data set left figur unbalanc data set pentium ii time curv flashsort high present right figur execut time algorithm comput system base amdahl law 3 express ca theta mr theta mp 5 ic instruct count algorithm cp number cycl per instruct cpu algorithm ca number cach access algorithm execut mr cach miss rate algorithm improv memori perform sort algorithm delta 1720060010001400 cycl per element data set size element quicksort pentium iii 500 random data set memorytun quicksort flash quicksort inplac flash quicksort20060010001400 cycl per element data set size element quicksort pentium iii 500 unbalanc data set memorytun quicksort flash quicksort inplac flash quicksort fig 12 execut comparison quicksort algorithm random data set left figur unbalanc data set pentium iii time curv flashsort high present right figur execut mp miss penalti cycl system execut time base algorithm base express base theta cp base theta mr base theta mp 6 execut time optim algorithm opt express ic base ic opt instruct count base algorithm optim algorithm ca base ca opt number cach access base algorithm optim algorithm mr base mr opt cach miss rate base algorithm optim algorithm respect optim algorithm tile mergesort tile mergesort pad number cach access kept almost base algorithm type algorithm combin equat 6 7 predict execut time reduct rate optim algorithm follow base base theta cp base theta mr base theta mp deltam repres miss rate reduct deltai base repres instruct count increment order obtain posit execut time reduct rate must model describ quantit tradeoff instruct count increas miss rate reduct give condit optim algo xiaodong zhang stefan kubricht rithm improv perform base algorithm follow deltai c deltam r ca theta mp multiphas optim algorithm differ cach access pattern phase multimergesort multimergesort tlb pad combin equat 6 7 ca base 6 ca opt obtain condit optim algorithm improv perform base algorithm follow deltai c deltam r theta ca mp deltam r theta base theta ca base gamma mr opt theta ca opt architectur relat algorithm relat paramet predict model architectur relat paramet cp mp machin depend easili obtain algorithm relat paramet ic ca mr either predict algorithm analysi obtain run program simul architectur simplescalar algorithm relat paramet also predict run algorithm rel small data set overs cach capac target machin use predict model paramet simplescalar simul abl predict execut time reduct rate optim algorithm studi show predict result use model close measur result 68 error rate 7 conclus examin develop cacheeffect algorithm mergesort quicksort algorithm test 4 repres processor product date 1995 1999 show effect simul provid insight perform evalu show mergesort algorithm architectur depend quicksort algorithm data set depend techniqu pad partit also use algorithm cach optim machin depend architectur paramet implement 4 method present paper cach size c cach line size l cach associ k number entri tlb cach memori page size p paramet becom commonli known user paramet also defin variabl program adapt chang user machin machin therefor program easili portabl among differ workstat acknowledg mani student advanc comput architectur class offer spring 1999 particip discuss cacheeffect sort algorithm impl mentat particularli arun mangalam made initi suggest combin quicksort flashsort also appreci alma riska zhao zhang zhichun zhu comment work help simul improv memori perform sort algorithm delta 19 8 cycl per element data set size element mergesort ultra 5 equilik data set base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb padding50015001k 4k 16k 64k 256k 1m 4m cycl per element data set size element mergesort ultra 5 bernoulli data set base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb pad fig 13 execut comparison mergesort algorithm sun ultra 5 use equilik data set left figur bernoulli data set right set50015001k 4k 16k 64k 256k 1m 4m cycl per element data set size element mergesort ultra 5 geometr data set base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb padding50015001k 4k 16k 64k 256k 1m 4m cycl per element data set size element mergesort ultra 5 pascal data set base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb pad fig 14 execut comparison mergesort algorithm sun ultra 5 use geometr data set left figur pascal data set right set xiaodong zhang stefan kubricht50015001k 4k 16k 64k 256k 1m 4m cycl per element data set size element mergesort ultra 5 binomi data set base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb padding50015001k 4k 16k 64k 256k 1m 4m cycl per element data set size element mergesort ultra 5 poisson data set base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb pad fig 15 execut comparison mergesort algorithm sun ultra 5 use binomi data set left figur poisson data set right set50015001k 4k 16k 64k 256k 1m 4m cycl per element data set size element mergesort ultra 5 unbalanc data set base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb padding500150025001k 4k 16k 64k 256k 1m 4m cycl per element data set size element mergesort ultra 5 zero data set base mergesort tile mergesort tile mergesort pad multimergesort multimergesort tlb pad fig 16 execut comparison mergesort algorithm sun ultra 5 use unbalanc data set left figur zero data set right set r simplescalar tool set avoid conflict miss dynam larg directmap cach comput architectur quantit approach influenc cach perform sort portabl tool perform analysi flashsort1 algorithm first cours data transform elimin conflict miss implement quicksort program cachemin runtim approach exploit cach local smp cacheoptim method bitrevers tr atom avoid conflict miss dynam larg directmap cach influenc cach perform sort cacheoptim method bitrevers cachemin implement quicksort program ctr chen ding yutao zhong compilerdirect runtim monitor program data access acm sigplan notic v38 n2 supplement p112 februari ranjan sinha justin zobel use random sampl build approxim tri effici string sort journal experiment algorithm jea 10 2005 ranjan sinha justin zobel cacheconsci sort larg set string dynam tri journal experiment algorithm jea v9 ne 2004 protect rfid commun suppli chain proceed 2nd acm symposium inform comput commun secur march 2022 2007 singapor ranjan sinha justin zobel david ring cacheeffici string sort use copi journal experiment algorithm jea 11 2006 gayathri venkataraman sartaj sahni srabani mukhopadhyaya block allpair shortestpath algorithm journal experiment algorithm jea 8 song jiang xiaodong zhang tokenord lru effect page replac polici implement linux system perform evalu v60 n14 p529 may 2005 alloc job known unknown memori demand ieee transact parallel distribut system v13 n3 p223240 march 2002 jame fix setassoci cach perform search tree proceed fourteenth annual acmsiam symposium discret algorithm januari 1214 2003 baltimor maryland bernard e moret tandi warnow reconstruct optim phylogenet tree challeng experiment algorithm experiment algorithm algorithm design robust effici softwar springerverlag new york inc new york ny 2002 bernard e moret david bader tandi warnow highperform algorithm engin comput phylogenet journal supercomput v22 n1 p99111 may 2002 gerth stlting brodal rolf fagerberg kristoff vinther engin cacheoblivi sort algorithm journal experiment algorithm jea 12 2007