webconsci storag manag web proxi mani proxi server limit file io need even proxi configur suffici io hardwar file system softwar often fail provid avail bandwidth proxi process although special file system may offer signific improv overcom limit believ userlevel disk manag top industrystandard file system offer similar perform advantag paper studi overhead associ file io web proxi investig underli caus propos webconsci storag manag set techniqu exploit uniqu refer characterist webpag access order allow web proxi overcom file io limit use realist tracedriven simul show techniqu improv proxi secondari storag io throughput factor 15 tradit opensourc proxi enabl singl disk serv 400 urlget oper per second demonstr approach implement foxi web proxi incorpor techniqu experiment evalu suggest foxi outperform tradit proxi squid factor four throughput without sacrif respons latenc b introduct world wide web proxi increasingli use provid internet access user behind firewal reduc widearea network traffic cach frequent use url given web traffic still increas exponenti web proxi one major mechan reduc overal traffic core internet protect network server traffic surg improv end user experi today typic web proxi usual run unixlik oper system associ file system unixlik file system wide avail highli reliabl often result poor perform web proxi instanc rousskov soloviev 35 observ disk delay web proxi contribut 30 toward total hit respons time mogul 28 observ disk io overhead cach turn much higher latenc improv cach hit web proxi digit palo alto firewal thu save disk io overhead proxi typic run noncach mode observ surpris unixlik filesystem optim generalpurpos workload 27 30 21 web proxi exhibit distinctli differ workload exampl read oper outnumb write oper tradit unixlik file system 3 web access induc write domin workload 25 moreov sever common file frequent updat url rare ever updat short tradit unixlik file access pattern differ web access pattern therefor file system optim unixlik workload necessarili perform well webinduc workload articl studi overhead associ disk io web proxi propos webconsci storag manag webcosm set techniqu design specif high perform show singl import sourc overhead associ store url separ file propos method aggreg sever url per file reduc file manag overhead show next largest sourc overhead associ disk head movement due file write request wide scatter disk sector improv write throughput propos file space alloc algorithm inspir logstructur file system 34 write oper proceed maximum speed url read oper emerg a3 cach client url respons request web server url request lookup cach web server proxi server respons 300111100110000011111 figur 1 typic web proxi action sequenc next largest sourc overhead reduc disk read overhead identifi exploit local exist url access pattern propos algorithm cluster sever read oper togeth reorgan layout url file url access togeth store nearbi file locat demonstr applic approach implement foxi web proxi incorpor webcosm techniqu success remov disk bottleneck proxi critic path evalu perform approach use combin tracedriven simul experiment evalu use simul driven real trace show file io throughput improv factor 18 enabl singl disk proxi serv around 500 urlget oper per second final show implement outperform tradit proxi squid factor 7 heavi load begin investig workload characterist web proxi implic file system perform section 2 motiv describ webcosm techniqu section 3 present comprehens perform result show superior perform potenti techniqu verifi valid webcosm approach section 4 outlin implement proofofconcept proxi server evalu perform experi compar find paper relat research result section 5 discuss issu regard webcosm section 6 summar find section 7 webconsci storag manag techniqu tradit web proxi frequent requir signific number oper serv url request consid web proxi serv stream request origin client request receiv proxi lookup cach particular url proxi local copi url cach miss request url actual server save copi data local storag deliv data request client hand proxi local copi url cach hit read content local storag deliv client action sequenc illustr figur 1 simplifi storag manag tradit proxi 42 8 store url separ file induc sever file system oper order serv request inde least three file oper need serv url miss old file usual need delet order make space new url ii new file need creat order store content url iii new file need fill url content similarli url hit costli oper even though chang file data metadata invok one file read oper tradit expens due disk head movement thu url request oper regardless hit miss file system face intens stream file oper file oper usual time consum easili becom bottleneck busi web proxi instanc take 20 millisecond creat even empti file seen figur 2 1 make matter wors take anoth 10 millisecond delet empti file file creation delet cost approach millisecond larg file 10 kbyte given urlmiss proxi creat delet file proxi abl serv one url miss everi 60 millisecond equival less quantifi perform limit file system oper experi hbencho file system benchmark 6 hbencho evalu file creationdelet cost creat 64 file given size directori delet revers ofcreat order run hbencho ultrasparc1 run solari 56 file size 0 10 kbyte result plot figur 2 suggest time requir creat delet file high file size kbytes1030tim per oper file creat file delet figur 2 file manag overhead figur plot cost file creation file delet oper measur hbencho latf benchmark creat 64 file delet order creation process repeat file vari size see time creat file 20 msec time delet file 10 20 msec per second provid client 100200 kbyte data throughput two order magnitud smaller modern magnet disk provid throughput even smaller internet connect consequ file system webproxi abl keep proxi internet request dispar file system perform proxi need due mismatch storag requir need web proxi storag guarante provid file system address semant mismatch two way metadata overhead reduct dataloc exploit 21 metadata overhead reduct metadata overhead crippl web proxi perform trace storag url separ file elimin perform bottleneck propos novel urlgroup method call buddi store url small number file simplifi space manag within file use url size group criterion url need one block disk space 512 byte store file url need two block disk space 1024 byte store anoth file forth way file compos fixeds slot larg enough contain url new url store first avail slot appropri file detail behavior buddi follow initi buddi creat one file store url smaller one block anoth file store url larger block smaller two url larger predefin threshold store separ file one url per file ffl urlwrit request given size buddi find first free slot appropri file store content new url size content url threshold 128 kbyte experi buddi creat new file store url ffl url need replac buddi mark correspond slot appropri file free slot reus later time store anoth url ffl urlread request buddi find slot appropri file read content request url main advantag buddi practic elimin overhead file creationdelet oper store potenti thousand url per file url occupi whole file larg enough repres tini percentag total number url file creationdelet overhead notic overal 22 dataloc exploit although buddi reduc file manag overhead make special effort layout data intellig disk way improv write read perform howev experi suggest signific amount local exist url refer stream identifi exploit local result larg perform improv 221 optim write throughput tradit proxi propos buddi techniqu write new url data sever differ file scatter disk possibl requir head movement oper url write number head movement significantli reduc write data disk logstructur fashion thu instead write new data free space disk continu append data reach end disk case continu begin approach wide use logstructur file system 5 17 29 38 howev unlik previou implement logstructur file system use userlevel logstructur file manag achiev effect logstructur file system top commerci oper system toward end develop filespac manag algorithm call stream muchlik logstructur file system stream write oper disk web proxi store url singl file organ slot 512 byte long url occupi integ number usual contigu slot url read oper read appropri portion file correspond given url urlwrit oper continu append data file end file case new urlwrit oper continu begin file write free slot urldelet oper mark space current occupi url free later reus futur urlwrit oper 222 improv read request stream improv perform write oper urlread oper still suffer disk seek rotat overhead disk head must move point write data disk point read data make matter wors read oper complet head must move back point read oper continu write data onto disk reason read oper within stream write induc two head movement first move head read posit second restor head previou write posit result pingpong effect reduc overhead develop lazyread techniqu extend stream batch read oper urlread oper issu servic immedi instead sent intermedi buffer buffer fill read request timeout period expir pend read request forward file system sort accord posit file data want read use lazyread batch n urlread request serv n movement figur 3 illustr movement head lazyread although lazyread appear increas latenc urlread oper subsecond timeout period guarante unnotic latenc increas read oper 223 preserv local url stream url request arriv web proxi exhibit signific amount spatial local exampl consid case html page contain sever embed imag time client request html page probabl request embed imag well page embed imag usual access togeth singl object indic relationship request sent proxi server sequenti within short time interv unfortun request arriv head posit time read oper 6 head movement stream write oper without lazyread head posit time read oper 4 head movement stream write oper b lazyread figur 3 disk head distanc use stream techniqu disk receiv stream write request contigu block interrupt read request caus pingpong effect part three read request respons six long head movement part b lazyread techniqu servic three read request togeth four disk head movement sequenti proxi server instead arriv interleav request sever client therefor web object request contigu singl client may servic store proxi disk subsystem interleav web object request total unrel client interleav disk layout may result signific perform degrad futur access one relat web object may requir separ disk head movement make matter wors interleav may result seriou disk fragment relat object evict disk leav behind set small noncontigu portion recov lost local augment stream lazyread techniqu extra level buffer call local buffer proxi server file system local buffer associ web server accumul object origin web server instead immedi write web object next avail disk block proxi server place object local buffer associ origin server local buffer found proxi empti one local buffer flush disk creat new associ newli freed local buffer object web server buffer fillsup evict content sent disk probabl written contigu disk locat figur 4 outlin oper proxi server augment local buffer figur show three client request differ stream web object a1a3 b1b2 c1c2 request arriv interleav proxi server forward internet appropri web server without local buffer respons servic store disk interleav fashion introduct local buffer group request web object accord origin web server store group disk contigu possibl reduc fragment interleav futur read oper benefit reduc interleav use prefetch techniqu read multipl relat url singl disk io even futur write oper benefit reduc fragment sinc abl write data disk contigu fashion 3 simulationbas evalu evalu disk io perform web proxi use combin simul experiment evalu simul studi model web proxi storag system organ two level cach mainmemori disk cach use trace obtain busi web proxi drive twolevel cach simul turn gener necessari secondari storag request request translat file system oper sent solari uf file system actual magnet disk therefor methodolog use simul identifi cach read write delet oper sent real storag system order accur measur execut time thu methodolog combin eas a3 a2 a1 a3 a2 c1 proxi server a3 client request a3 local buffer magnetic2 figur 4 stream local buffer sequenc client request arriv interleav proxi server proxi server group request object stream avail local buffer write rearrang stream disk sake simplic omit forward client request internet appropri web server web server respons urldelet file space simul simul disk cach simul main memori trace disk magnet urlwrit disk cach urlread main memori file access proxi trace file access call mmapwrit lseek read simul figur 5 evalu methodolog trace dec web proxi fed 512mbyte main memori lru cach simul url miss main memori cach fed 2gbyte disk lru cach simul url miss secondlevel cach assum fetch internet miss gener urlwrit request fetch url internet save disk secondlevel url hit gener urlread request sinc read content url disk make space newli arriv url lru replac polici delet nonrec access url result urldelet request urlwrit urlread urldelet request fed file space simul map url file block within file send appropri call file system request type number request percentag urlread 42085 4 urlwrit 678040 64 main memori hit 336081 32 total 1058206 100 tabl 1 trace statist tracedriven simul accuraci experiment evalu 31 trace come busi web proxi locat digit equip corpor ftpftpdigitalcompubdectracesproxywebtraceshtml feed trace 512 mbytelarg firstlevel main memori cach simul use lru replac polici 2 url request hit main memori cach need access secondlevel disk cach remain url request fed secondlevel cach simul whose purpos gener trace urllevel disk request urlread urlwrit urldelet urlread request gener result secondlevel cach hit miss secondlevel cach assum contact appropri web server internet save server respons disk gener urlwrit request final urldelet request gener secondari storag run space lru replac algorithm invok delet unus url gener trace urlread urldelet urlwrit request sent filespac manag simul forward solari uf file system read delet write content url request filespac manag simul implement sever secondari storag manag polici rang simpl one url per file squidlik stream lazyread localitybuff solari uf system run top ultra1 workstat run solari 56 equip seagat st15150wc 4gbyte disk 9 millisecond averag latenc 7200 rotat per minut measur maximum write throughput 47 mbyte per second figur 5 summar methodolog experi feed simul pipelin trace one million url read write delet request gener 1058206 urlget request tabl 1 summar trace statist perform metric use total complet time need serv one million request time invers proport system throughput oper per second thu direct measur exampl complet time report 2000 second throughput system urlget request per second anoth commonli use perform metric web proxi especi import end user servic latenc url request howev latenc mislead perform metric work signific rel differ latenc unnotic end user amount small fraction second exampl proxi achiev request latenc may appear twice good proxi achiev 60 millisecond averag request latenc end user perceiv differ advoc long latenc remain within unperceiv time rang proxi throughput accur measur system perform 32 evalu start experi investig perform cost previou approach store one url per file compar propos buddi store sever url per file group accord size consid three approach singledirectori squid multipledir ffl singledirectori name impli use singl directori store url file ffl squid use squid proxi server use twolevel directori structur first level contain directori name 0f contain 256 subdirectori name 00ff file store second level directori round robin manner although sophist polici lru propos influenc result notic number url request 10000 20000 30000 50000 complet time squid multipledir figur file manag overhead web proxi figur plot overhead perform 300000 urlreadurlwriteurldelet oper gener 398034 urlget request 1gbyte larg disk clear buddi improv perform consider compar approach ffl multipledir creat one directori per server url correspond server store directori experiment result confirm buddi improv perform order magnitud compar previou approach inde figur 6 show buddi take forti minut serv 300000 url request approach requir six ten time time serv stream url request buddi abl achiev impress perform improv creat delet file url smaller predefin threshold choos appropri threshold valu import perform buddi small threshold result frequent file creat delet oper larg threshold requir larg number buddi file may increas complex manag figur 7 plot complet time function threshold buddi manag polici see threshold increas complet time buddi improv quickli increas number url store file elimin signific number file creat delet oper threshold reach 256 block ie 128 kbyte get almost best perform increas improv perform notic url larger 128 kbyte given file url rare larg file creationdelet overhead notic 33 optim write throughput although buddi improv perform order magnitud compar tradit squidlik approach still suffer signific overhead write data sever differ file requir potenti long disk seek oper inde snapshot disk head movement shown figur 8 taken taztool 9 reveal disk head travers larg distanc serv proxi write request easili see head move frequent within region span begin disk upper portion figur end disk lower portion figur despit cluster seem appear lower quarter disk could possibl indic local access lower portion graph plot averag maximum disk head distanc indic frequent long head movement elimin long head movement incur write oper distant locat stream store url singl file write data file contigu possibl much like logstructur file system threshold kbytes50015002500complet time minut figur 7 perform buddi function threshold figur plot complet time function buddi threshold paramet result suggest url smaller 64128 kbyte buddi togeth url larger limit given file one url per file without notic perform penalti inde snapshot disk head movement figur show stream access data disk mostli sequenti scatter access dot appear snapshot frequent enough undermin sequenti natur access although stream obvious achiev minim disk head movement usual come cost extra disk space actual facilit long sequenti write oper logstructur file system stream never oper nearli full disk surpris logstructur file system oper disk util factor 60 even less 34 low disk util increas cluster free space allow effici sequenti write oper 3 fortun experi shown figur 10 suggest stream oper effici even 70 disk util outperform buddi factor two expect disk util high 9095 perform buddi stream compar howev disk util decreas perform stream improv rapidli first evalu perform stream notic even alway free disk space avail even absenc read oper stream write disk maximum throughput trace problem found experienc smallwrit perform problem write small amount data file system usual result diskread diskwrit oper reason peculiar behavior follow process write small amount data file oper system read correspond page disk alreadi main memori perform write main memori page later time write entir updat page disk reduc unnecessari read oper incur small write develop packet version stream streampacket work like stream follow differ urlwrit oper forward directli file system instead accumul pageboundaryalign onepagelong packet buffer long store contigu previou urlwrit request packet fill current request contigu previou one packet sent file system written disk 3 fortun recent measur suggest file system halfful averag 11 thu logstructur approach file manag may attract ever especi embarrassingli decreas cost disk space 10 time distanc disk head rang figur 8 disk access pattern buddi snapshot taken taztool disk head posit plot time distanc disk head rang figur 9 disk access pattern stream snapshot taken taztool disk head posit plot figur 10 perform buddi stream function disk space util figur plot complet time serv 1000000 url oper function disk util expect perform buddi unaffect disk util perform stream improv disk util decreas disk util around 70 stream outperform buddi factor two streampacket figur 11 perform stream streampacket function disk space util figur plot complet time serv 1000000 url oper function disk util stream consist outperform streampacket much 20 low disk util way streampacket instead send larg number small sequenti write oper file system like stream send fewer larger page size long write oper file system figur 11 plot perform stream streampacket function disk util streampacket perform consist better stream much 20 disk util low serv one million request less three thousand second achiev servic rate close 350 urlget oper per second 34 improv read request stream improv perform urlwrit oper urlread oper still suffer seek rotat latenc overhead first step toward improv perform read oper lazi read reduc overhead cluster sever read oper send disk togeth group read request reduc disk head pingpong effect also present system better opportun disk head schedul figur 12 show lazyread consist improv perform streampacket 10 4 although 10 perform improv may seem impress first glanc believ import lazyread increas near futur experiment environ read request repres small percentag littl 6 total disk oper therefor 4 care reader notic howev lazyread may increas oper latenc howev advoc increas unnotic endus trace measur show streampacket augment lazyread abl serv 1020 read request per second addit write request thu lazyread delay averag read oper fraction second given averag web server latenc may sever second long 2 lazyread impos unnotic overhead make sure user ever wait unbound amount time read url disk even unload system lazyread also augment time period time elaps outstand read oper sent disk streampacket lazyread figur 12 perform lazyread figur plot complet time serv 1000000 url oper function 2gbyte disk util lazyread gather read request tenatatim issu time disk reduc disk head movement write stream data read figur show lazyread improv perform streampacket 10 even signific improv perform read request necessarili yield signific overal perform gain increas size web cach expect hit rate probabl increas percentag disk read oper becom compar higher percentag disk write oper case optim disk read perform lazyread similar techniqu increasingli import 35 preserv local url stream 351 effect local buffer disk access pattern improv perform disk io even local buffer polici lazyreadsloc stream improv disk layout group request accord origin web server store disk without local buffer avail disk space tend fragment spread disk local buffer avail disk space tend cluster one larg empti portion disk inde twodimension disk block map figur 13b show avail free space long white stripe contrari absenc local buffer free space tend litter use block shown black dot figur 13a even magnifi mostli alloc portion disk figur 13 b right small white flake begin appear within mostli black area correspond small amount free disk space within larg portion alloc space see local buffer abl cluster white free space effect sizabl squar white patch absenc local buffer free space cluster small narrow white band figur 14 confirm local buffer result better cluster free space plot averag size algorithm perform urlget oper per second tabl 2 perform tradit webconsci storag manag techniqu urlget oper per second chunk contigu free space function time warmup period 300 thousand request local buffer manag sustain averag free chunk size 145 kbyte contrari absenc local buffer stream exhibit fluctuat behavior averag free chunk size kbyte local buffer cluster free space effect also popul alloc space cluster relat document gather url origin web server local buffer probabl contigu disk block thu futur read request relat web document probabl access nearbi disk locat quantifi effect relat object cluster measur distanc file block success disk read request measur suggest use local buffer larger fraction read request access nearbi disk locat actual mani l885 read request refer immedi next disk block previou read request compar 611 read request absenc local buffer seen figur 15 furthermor local buffer improv cluster disk read request significantli mani 8400 17 total read request fall within ten block previou read request compar 3200 6 total read request fall within rang streampacket expect improv cluster read request observ eventu lead perform improv possibl use prefetch 352 perform evalu local buffer given improv disk layout local buffer expect perform lazyreadsloc superior lazyread streampacket experi vari number local buffer 8 128 local buffer 64kbyte larg figur 16 show eight local buffer lazyreadsloc8 suffici improv perform lazyread 5 20 depend disk util howev number local buffer increas perform advantag lazyreadsloc increas even actual 76 disk util lazyreadsloc 128 local buffer perform 25 time better lazyread streampacket summar perform result tabl 2 present best achiev perform measur urlget oper per second studi techniqu see webconsci storag manag techniqu improv perform order magnitud serv close 500 urlget oper per second singledisk system actual experiment environ littl room improv lazyreadsloc128 transfer 76 gbyte data secondari storag 2020 second correspond sustain throughput 37 mbyte per second given disk use experi sustain maximum write throughput 47 mbyte per second see webcosm techniqu achiev 78 maximum practic unreach upper limit perform therefor addit sophist techniqu expect result signific perform improv least experiment environ b figur 13 disk fragment map figur plot twodimension disk block alloc map end simul stream local buffer b plot alloc block black dot free block white dot begin disk plot lower left corner rest disk plot follow columnmajor order final end disk plot top right corner averag size hole kbyte time thousand url request local buffer figur 14 averag size free disk block figur plot averag size chunk contigu free space function time20060010001400180030 20 number read oper distanc previou read request file block local buffer figur 15 distribut distanc read request figur plot histogram block distanc success read oper streampacket streamloc use 128 local buffer disk space util 1000300050007000 complet time streampacket lazyread figur perform lazyreadsloc figur plot complet time serv 1000000 url oper function disk util lazyreadsloc attempt put url server nearbi disk locat cluster local buffer send disk implement valid webconsci storag manag approach implement lightweight userlevel web proxi server call foxi goal develop foxi show webcosm manag techniqu easili implement ii provid signific perform improv iii requir neither extens tune user involv foxi consist 6000 line c code implement basic function http web proxi simplic rapid prototyp foxi implement http protocol notsofrequ use protocol like ftp icp etc foxi first foremost cach proxi use two level cach approach proxi main memori hold frequent access document rest resid local disk provid effect transpar main memori cach foxi capit exist file buffer cach oper system secondarystorag system manag foxi store url singl file accord stream packet polici url contigu append disk disk util reach high watermark cach replac daemon invok reduc util low watermark replac polici use lruth 1 replac least recent use document cach order prevent larg document fillingup cach lruth cach document larger prespecifi threshold foxi develop top solari 57 also test top linux 22 41 design foxi web proxi design architectur foxi web cach follow sequenc oper proxi must perform order serv user request mention also proxi request proxi connect user request decompos sequenc synchron state form finit state machin fsm shown figur 17 base fsm diagram foxi function pipelin schedul infinit loop everi step loop schedul select readi proxi request perform necessari oper advanc request next state rectangl figur 17 repres variou state compris process request cloud repres import asynchron action take place two state final line repres transit state annot indic oper must complet order transit incomplet transfer incomplet transfer new client connect object cach lookup object index connect fail retri receiv www object pars http respons object cach send object client read object cach establish http respons receiv connect close tcp connect connect dn store object cach http tcp finish transfer object read cach read final sent client object receiv messag client except request open tcp connect remot web server object client request figur 17 foxi process finit state machin diagram number client 100 number server 4 server respons time 1 second document hit rate 40 request distribut zipf06 document size distribut exp5 kbyte cacheabl object 100 tabl 3 webpolygraph paramet use experi occur everi request begin state 1 http request read pars foxi search index request object index contain metadata object store foxi cach eg name size object storag locat object retriev time etc search request object success foxi issu read request cach object read cach transit state 5 made object return client success transfer client tcpip connect close state 6 process http request complet search request object unsuccess foxi state 2 perform dn lookup ip address remot web server open tcpip connect tcpip connect establish foxi state 3 send http request origin web server server respons pars state 4 foxi receiv object content possibl slow internet connect foxi pass object request client receiv remot server object content transfer foxi use cach admiss polici lruth decid whether object cach object content store disk cach use streampacket algorithm correspond metadata store index final tcp connect close state 6 process http request complet 42 experi measur perform foxi compar squid use web polygraph proxi perform benchmark version 229 de facto industri standard benchmark proxi server 33 configur web polygraph 100 client four web server respond simul respons time one second tabl 3 summar web polygraph configur use experi run web polygraph sun ultra 4500 machin four ultrasparc2 processor 400mhz machin run solari 57 equip seagat st318203fsun18g 18gbyte disk secondari storag size squid foxi use 8 gbyte use 22stable4 version squid configur accord set use second polygraph bakeoff 36 reduc effect possibl slow network run process comput result experi present figur 18 19 20 figur plot throughput squid foxi function client demand input load rang 40 350 request per second see small input load less 80 request per second throughput proxi increas linearli howev throughput squid quickli levelsoff decreas 90 request per second foxi sustain linear increas 340 request per second give factor four improv squid defici squid even pronounc figur 19 plot averag respons time achiev two proxi function input load easili see squid latenc increas exponenti input load higher 50 request per second thu although figur suggest squid achiev throughput 90 request per second throughput come steep increas request latenc seen end user almost 8 second maximum throughput squid sustain without introduc notic increas latenc around 50 request per second contrari foxi manag serv 340 request per second without notic increas latenc fact foxi serv 340 request per second user latenc 07 second therefor accept subsecond latenc rang foxi achiev almost 7 time higher throughput squid make matter wors squid increas perceiv endus latenc also increas network traffic requir fact disk subsystem becom overload squid effort offload disk may forward url request origin server even local copi disk cach behavior observ throughput requestssecond input load requestssecond foxi squid figur 18 throughput squid foxy13579 avg respons time per request sec input load requestssecond squid foxi figur 19 latenc squid foxi network bandwidth kbytessec input load requestssecond squid foxi figur 20 network bandwidth request squid foxi may increas network traffic significantli figur 20 show input load less 50 request per second squid foxi requir network bandwidth input load increas beyond 50 request per second network bandwidth requir foxi increas linearli input load expect howev network bandwidth requir squid increas higher rate induc 45 network traffic foxi 110 url request per second 5 previou work cach extens use web web browser cach document main memori local disk although wide use form web cach rare result high hit rate sinc browser cach typic small access singl user 1 improv effect cach proxi wide use strateg place internet 8 42 behalf user cach proxi request url web server store local disk serv futur request cach whenev possibl sinc even larg cach may eventu fill cach replac polici subject intens research 1 7 23 26 32 37 43 44 propos cach mechan improv user experi reduc overal traffic protect network server traffic surg 15 improv hit rate even enhanc overal user experi proxi may even employ intellig prefetch method 4 12 16 41 31 40 internet traffic grew larger realiz internet server bottleneck disk subsystem fritchi found usenet news server spend signific amount time store news articl file one file per articl 14 reduc overhead propos store sever articl per file manag file cyclic buffer implement show store sever news articl per file result signific perform improv much like news server web proxi also spend signific percentag time perform disk io rousskov soloviev observ disk delay contribut much 30 toward total hit respons time 35 mogul suggest disk io overhead disk cach turn much higher latenc improv cach hit 28 thu save disk io overhead proxi typic run noncach mode 28 reduc disk io overhead soloviev yahin suggest proxi sever disk 39 order distribut load among disk sever partit order local access relat data unfortun almeida cao 2 suggest ad sever disk exit tradit web proxi usual offer littl perform improv maltzahn richardson grunwald 24 measur perform web proxi found disk subsystem requir perform larg number request url access thu easili becom bottleneck subsequ work propos two method reduc disk io web proxi 25 ffl store url origin web server proxi directori squidl ffl use singl file store url less 8 kbyte size squidm although work 25 share common goal approach toward reduc disk metadata access web proxi work present clear contribut toward improv data metadata access overhead ffl propos evalu stream streampacket two filespac manag algorithm much like logstructur file system optim write perform write data contigu disk ffl propos evalu lazyread lazyreadsloc two method reduc disk seek overhead associ read oper perform result report 25 paper verifi metadata reduct method improv perform significantli exampl maltzahn et al report digit alphast 250 4266 512 mbyte ram three magnet disk squid abl serv around 50 urlget request per second best perform squidmla approach abl serv around 150 request per second similarli sun ultra1 166 mhz 384 mbyte ram singl magnet disk squid abl serv around 27 url get request per second buddi simplest webcosm techniqu reduc metadata overhead achiev around 133 request per second furthermor remain webcosm techniqu improv metadata also data access abl achiev close 500 urlget request per second web proxi implement userlevel process top commod albeit stateofth art filesystem web proxi built top custommad file system oper system netcach build top wafl file system improv perform write oper 18 inktomi traffic server use unix raw devic 20 cacheflow developedcacheo specialpurpos oper system proxi 19 similarli novel develop specialpurpos system store url cach object store 22 unfortun littl inform publish detail perform custommad web proxi thu direct quantit comparison approach difficult although custommad oper system enhanc filesystem offer signific perform improv choos explor approach run web proxi userappl top commod unixlik oper system believ approach result lower softwar develop mainten cost easier deploy use therefor quicker wider accept web proxi main contribut articl ffl studi overhead associ file io web proxi investig underli caus propos webcosm set new techniqu overcom file io limit ffl identifi local pattern exist web access show web proxi destroy pattern propos novel mechan restor exploit ffl applic approach shown foxi userlevel web proxi implement top commerci unix oper system ffl comprehensiveperformancemeasur use simul experiment evalu show approach easili achiev order magnitud perform improv tradit approach 6 discuss 61 reliabl issu although squidlik polici store one url per file perform well appear robust case system crash webcosm approach capit expens reliabl provid file system exampl system crash squid scan directori file disk cach recreat complet index cach object contrari webcosm method store metadata associ url main memori potenti long period time increas cach vulner system crash exampl stream store url singl file contain indic begin block url inform store main memori lost system crash fortun seemingli lost reliabl pose real threat system oper ffl webcosm method period ie everi minut write metadata inform safe storag case crash lose work last minut altern store along url name size disk block case crash system reboot disk scan inform url exist disk recov ffl even cach document lost due crash easili retriev web server perman resid thu system crash lose inform perman lose local copi data ie minut worth easili retriev web 62 lesson learn cours research call understand intric behavior web proxi system interest lesson learn includ ffl user request may invok counterintuit oper system action exampl observ small write request stream surprisingli invok disk read oper case intuit direct correspond user request oper system actual mismatch user request oper system action hurt perform also undermin user understand system ffl system bottleneck may appear place least expect popular belief proxi bottleneck network subsystem contrari found secondari storag manag system also major signific bottleneck design oper effici web workload exampl tradit file system use serv 10 concurr user request 50 kbyte per second 3 contrari busi web proxi especi countrywid proxi may requir serv hundr concurr user request data total sever mbyte per second 13 ffl optim perform read oper one major factor design secondari storag manag system web proxi write oper usual implement effici proceed disk bandwidth contrari read oper even asynchron one involv expens disk seek rotat latenc difficult imposs avoid disk bandwidth improv much faster disk latenc read oper becom increas perform bottleneck ffl local manifest even expect found client exhibit signific amount spatial local request sequenc relat url tradit proxi tend destroy local interleav request arriv differ client identifi exploit exist local url stream challeng task continu pursu summari conclus paper studi disk io overhead worldwid web proxi server use combin tracedriven simul experiment evalu show busi web proxi bottleneck secondari storag manag subsystem overcom limit propos webcosm set techniqu tailor manag web proxi secondari storag base experi design implement evalu webcosm conclud ffl singl largest sourc overhead tradit web proxi file creation file delet cost associ store url separ file relax onetoon map url file improv perform order magnitud ffl web client exhibit local refer access usual access url cluster interleav request sever client web proxi tend conceal local restor local refer stream result better layout url disk reduc fragment improv perform least 30 ffl manag map url file user level improv perform tradit web proxi factor 20 overal leav littl room improv special kernellevel implement believ result signific today even signific futur disk bandwidth improv much higher rate disk latenc two decad 10 method like webcosm reduc disk head movement stream data disk result increasingli larger perform improv furthermor webconsci storag manag method result better perform also help expos area research discov exploit local web acknowledg work support part institut comput scienc foundat research technolog hella part univers crete project file system web server 1200 deepli appreci financi support pano tsirigoti sourc inspir mani use comment manoli marazaki georg dramitino gave us use comment earlier version paper katia obraczka provid use comment earlier version paper p cao provid one simul use thank r cach proxi limit potenti measur proxi perform wisconsin proxi benchmark measur distribut file system specul data dissemin servic reduc server load heurist clean algorithm logstructur file system oper system benchmark wake lmbench case studi perform netbsd intel x86 architectur hierarch internet object cach trace revisit serverless network file system largescal studi file system content prefetch hyperlink measur access characterist worldwideweb client proxi cach cyclic news filesystem get inn less global internet project zebra stripe network file system file system design nf file server applianc cach flow inc inktomi inc workload requir highcapac proxi cach design replac polici proxi cach perform issu enterpris level web proxi reduc disk io web proxi server cach main memori cach web document fast file system unix speedier squid case studi internet server perform problem cach sprite network file system tracedriven analysi unix 42 bsd file system use predict prefetch improv world wide web latenc simpl web polygraph design implement logstructur file system perform cach proxi second ircach web cach bakeoff case delayconsci cach web document implement logstructur file system unix file placement web cach server defin high speed protocol fast worldwid web brows lowbandwidth link squid internet object cach remov polici network cach worldwid web document proxi cach estim page load delay tr design implement logstructur file system measur distribut file system zebra stripe network file system diskdirect io mimd multiprocessor remov polici network cach worldwid web document perform issu enterpris level web proxi oper system benchmark wake italiclmbenchital perform cach proxi extend abstract proxi cach estim page load delay measur proxi perform wisconsin proxi benchmark let put netapp cacheflow busi cyclic news filesystem storag manag web proxi effici algorithm persist storag alloc serverless network file system ctr abdolreza abhari sivarama p dandamudi shikharesh majumdar web objectbas storag manag proxi cach futur gener comput system v22 n1 p1631 januari 2006