task assign unknown durat consid distribut server system ask polici use assign job task host server job preemptibl also job servic demand known priori particularli concern case workload heavytail characterist mani empir measur comput workload analyz sever natur task assign polici propos new one tag task assign base guess size tag algorithm counterintuit mani respect includ load unbalanc nonworkconserv fair find heavytail workload tag outperform task assign polici known us sever order magnitud respect mean respons time mean slowdown provid system load high also introduc new practic perform metric distribut server call server expans server expans metric tag significantli outperform task assign polici regardless system load b introduct recent year distribut server becom commonplac allow increas comput power costeffect easili scalabl distribut server system request servic task arriv must assign one host machin process rule assign task host machin known task assign polici choic task assign polici signific effect perform perceiv user design distribut server system often come choos best task assign polici given model user requir question task assign polici best ageold question still remain open mani model paper consid particular model distribut server system task preemptibl ie concern applic context switch costli exampl one applic batch comput environ host parallel processor task parallel context switch task involv reload processor memori return state context switch context switch expens environ task alway simpli run complet note fact context switch expens preclud possibl kill job restart scratch assum furthermor priori inform known task time task arriv particular servic demand task known assum host ident cost time requir assign task host figur 1 one illustr distribut server illustr arriv task immedi dispatch central dispatch one host queue host wait servic serv firstcomefirstserv fcf order observ howev model gener preclud possibl central queue dispatch task might wait dispatch also preclud possibl altern schedul disciplin host long schedul disciplin requir preempt task reli priori knowledg task main perform goal choos task assign polici minim mean wait time importantli mean slowdown task slowdown wait time divid servic demand mean pertask averag consid mean slowdown import mean wait time desir task delay proport size system task size highli variabl user like anticip short delay short task like toler long delay longer task later paper introduc new perform metric call server expans relat mean slowdown secondari perform goal fair adopt standard definit fair say task larg small experi expect slowdown particular larg task shouldnt penal slow greater factor small task 1 consid task assign polici commonli propos distribut server system random task assign polici incom task sent host probabl 1h h number host polici equal expect number task host roundrobin task signment task assign host cyclic fashion ith task assign host mod h polici also equal expect number task host slightli less variabl interarriv time random shortestqueu task assign incom task immedi dispatch host fewest number task polici benefit tri equal instantan number task host rather expect number task polici properti task arriv host servic fcf order literatur tell us shortestqueu fact best task assign polici model follow condit met 1 priori knowledg task 2 task preemptibl 3 host servic task fcf order 4 incom task immedi dispatch host 5 task size distribut exponenti see section 2 one remov restrict 4 possibl even better wed realli like send task host least total outstand work work sum task size host host would afford task smallest wait time howev dont know priori host current least work sinc dont know task size turn actual easi get around simpli hold task dispatch fcf queue host free request next task easi prove hold method exactli equival immedi dispatch arriv task host least outstand work see 6 proof figur 2 illustr refer polici leastworkremain sinc effect send task host current least remain work observ leastworkremain come closest obtain instantan load balanc may seem leastworkremain best possibl task assign polici previou literatur show leastworkremain outperform previouslydiscuss polici gener condit see section 2 previou literatur also suggest leastworkremain 1 exampl processorshar requir infinitelymani preemption ultim fair everi task experi expect slowdown dispatch outsid arriv fcf fcf fcf fcf figur 1 illustr distribut server dispatch outsid arriv fcf fcf fcf fcf send host least work fcf b figur 2 two equival way implement leastworkremain task assign polici show incom task immedi dispatch host least remain work requir know priori size task host b show incom task pool fcf queue dispatch queue individu host host free request next task implement requir priori knowledg task size yet achiev effect may optim best possibl task assign polici case task size distribut exponenti see section 2 detail statement previou literatur task size distribut exponenti motiv respect increas evid high variabl task size distri bution seen mani measur comput workload particular measur mani comput workload shown fit heavytail distribut high varianc describ section 3 much higher varianc exponenti distribut better task assign polici leastworkremain task size variabl characterist empir workload evalu variou task assign polici interest understand influenc task size variabl decis task assign polici best analyt tractabl assum arriv process poisson simul indic variabl arriv process much less critic choos task assign polici variabl task size distribut paper propos new algorithm call tag task assign guess size specif design high variabl workload prove analyt task size show degre variabl characterist empir measur workload tag algorithm outperform mention algorithm sever order magnitud fact show heavytail task size distribut greater improv tag task assign algorithm improv conting system load high 2 case system load high show task assign polici poor perform becom impract tag especi neg affect practic system load high achiev reason perform one add new host server without increas outsid arriv rate thu drop system load system behav desir refer number new host must ad server expans requir show tag outperform previouslyment task assign polici respect server expans metric ie given initi load tag requir far fewer addit host perform well describ three flavor tag first call tagsoptmeanslowdown design minim mean slowdown second call tagsoptmeanwaitingtim 2 distribut server system load defin follow system load outsid arriv rate delta mean task size number host exampl system 2 host system load 5 outsid arriv rate system 4 host system load 25 observ 4 host system system load ae twice outsid arriv rate 2 host system system load ae design minim mean wait time although effect algorithm fair treatment task third flavor call tagsoptfair design optim fair manag fair tagsoptfair still achiev mean slowdown mean wait time close flavor tag section 2 elabor detail previou work area section 3 provid necessari background measur task size distribut heavytail section 4 describ tag algorithm flavor section 5 show result analysi case 2 host section 6 show result analysi multiplehost case section 7 explor effect lessvari job size distribut lastli conclud section 8 detail analysi tag describ appendix previou work task assign 21 task assign preemption problem task assign model like preemption priori knowledg extens studi mani basic question remain open one subproblem solv task assign restrict task immedi dispatch host upon arriv host servic task fcf order restrict model shown task size distribut exponenti arriv process poisson shortestqueu task assign polici optim winston 19 result optim defin maxim discount number task complet fix time ephremid varaiya walrand 5 show shortestqueu task assign polici also minim expect total time complet task arriv fix time exponenti task size distribut arbitrari arriv process actual perform shortestqueu polici known exactli mean respons time approxim nelson phillip 11 12 whitt shown variabl task size distribut grow shortestqueu polici longer optim 18 whitt suggest polici optim scenario also consid restrict model describ paragraph age time servic task current serv known possibl comput arriv task expect delay queue scenario weber 17 consid shortestexpecteddelay rule send task host least expect work note similar leastworkremain polici weber show rule optim task size distribut increas failur rate includ exponenti whitt 18 show exist task size distribut rule optim wolff 20 proven leastworkremain best possibl task assign polici polici make use task size result hold distribut task size arriv process anoth model consid case preemption size task known time arriv task within model sita algorithm see 7 shown outperform random roundrobin shortestqueu leastworkremain algorithm sever order magnitud task size distribut heavi tail contrast sita tag algorithm requir knowledg task size nevertheless nottoohigh system load 5 tag improv upon perform sita sever order magnitud heavytail workload 22 preemption allow gener throughout paper maintain assumpt task pre emptibl task start run stop continu left contrast exist consider work differ problem task preemptibl see 8 mani citat gener task assign problem includ scenario host heterogen multipl resourc content idea purpos unbalanc load suggest previous 3 1 differ context paper paper assum task size known priori 3 distribut system preemptibl task consid shown preemptibl model mean wait time minim balanc load howev mean slowdown minim unbalanc load 1 realtim schedul consid task firm deadlin context author propos load profil distribut load way probabl satisfi util requir incom task maxim 3 heavi tail describ section 1 concern distribut task size affect decis task assign polici use mani applic environ show mixtur task size span mani order magnitud environ typic mani small task fewer larg task much previou work use exponenti distribut captur variabl describ section 2 howev recent measur indic mani applic exponenti distribut poor model heavytail distribut accur gener heavytail distribut one 2 simplest heavytail distribut pareto distribu tion probabl mass function cumul distribut function set task size follow heavytail distribut follow properti 1 decreas failur rate particular longer task run longer expect continu run 2 infinit varianc ff 1 infinit mean 3 properti small fraction 1 largest task make larg fraction half load refer import properti throughout paper heavytail properti lower paramet ff variabl distribut pronounc heavytail properti ie smaller fraction larg task compris half load concret exampl figur 3 depict graphic loglog plot measur distribut cpu requir million unix process taken paper 8 distribut close fit curv prfprocess lifetim 8 shown distribut present varieti comput en viron includ instruct research administr environ fact heavytail distribut appear fit mani recent measur comput system includ exampl ffl unix process cpu requir measur bellcor 1 ff 125 10 ffl unix process cpu requir measur uc berkeley ff 1 8 ffl size file transfer web 11 ff 13 2 4 ffl size file store unix filesystem 9 ffl io time 14 ffl size ftp transfer internet 9 ff 11 13 case estim ff made ff tend close 1 repres high variabl task servic requir practic upper bound maximum size task file finit length throughout paper therefor model task size gener iid distribut follow power law upper bound high one refer distribut bound pareto character three paramet ff expon power law k smallest possibl observ p largest possibl observ probabl mass function bound pareto bk p ff defin paper vari ffparamet rang 0 2 order observ effect chang variabl distribut focu effect chang varianc keep distribut mean fix 3000 maximum valu fix correspond typic valu taken 2 order keep mean constant adjust k slightli ff note bound pareto distribut moment finit thu heavytail distribut sens defin ever distribut still show high variabl k p exampl figur 4 right show second moment e psi distribut function ff chosen keep e fxg constant 3000 1500 figur show second moment explod exponenti ff declin furthermor bound pareto distribut also still exhibit heavytail properti extent decreas failur rate properti unbound pareto distribut mention properti import determin choic best task assign polici distribut process lifetim log plot fraction process durat durat secs12 figur 3 measur distribut unix process cpu lifetim taken hd97 data indic fraction job whose cpu servic demand exceed second function power law w expon second moment bound pareto distribut alpha figur 4 paramet bound pareto distribut left second moment function ff e outsid arriv figur 5 illustr flow task tag algorithm 4 tag algorithm section describ tag algorithm let h number host distribut server think host number h ith host number associ tag work shown figur 5 incom task immedi dispatch host 1 servic fcf order complet use 1 amount cpu simpli leav system howev task use 1 amount cpu host 1 still hasnt complet kill rememb task preempt expens model task put end queue host 2 restart scratch 3 host servic task queue fcf order task host use amount cpu still hasnt complet kill put end queue host 1 way tag algorithm guess size task henc name tag algorithm may sound counterintuit reason first there sens highernumb host underutil 3 note although task restart still task cours therefor care analysi assign new servic requir first host overcrowd sinc incom task sent host 1 even vital concern tag algorithm wast larg amount resourc kill task restart scratch 4 there also sens big task especi penal sinc theyr one restart tag come 3 flavor differ chosen tagsoptmeanslowdown chosen optim mean slowdown tagsoptmeanwaitingtim chosen optim mean wait time well see tagsoptmeanslowdownand tagsoptmeanwaitingtim necessarili fair tagsoptfair chosen optim fair specif task whose final destin host experi expect slowdown tagsoptfair task whose final destin host j j tag may seem reminisc multilevel feedback queue relat multilevel feedback queue singl host mani virtual queue host timeshar task preemptibl task use amount servic time transfer kill restart lower prioriti queue also multilevel feedback queue task lower prioriti queue allow run task higher prioriti queue 5 analysi result case 2 host section contain result analysi tag task assign polici task assign polici order clearli explain effect tag algorithm limit discuss section case 2 host case refer task whose final destin host 1 small task task whose final destin host 2 big task section 53 alway assum system load 05 2 host section 53 consid system load still stick case 2 host final section 6 consid distribut server multipl host evalu sever task assign polici function ff ff varianceparamet bound pareto task size distribut ff rang 0 2 recal section 3 lower ff higher varianc task size distribut recal also empir measur task size distribut often show ff 1 4 dad micha harchol would add there also psycholog concern angri user might he told task kill help gener good evalu random leastworkremain tag polici roundrobin polici see section 1 evalu directli show previou paper 7 random roundrobin almost ident perform well explain section 51 analysi leastworkremain approxim howev confid approxim extens simul paper 7 show quit accur set well discuss section 51 analysi tag also approxim though lesser degre figur 6a show mean slowdown tagsoptslowdown compar task assign polici yaxi shown log scale observ high ff perform task assign polici compar good howev ff decreas perform polici degrad leastworkremain polici consist outperform random polici order magnitud howev tagsoptslowdown polici offer sever order magnitud improv 15 tagsoptslowdown polici outperform leastworkremain polici 2 order magnitud ff 1 tagsoptslowdown polici outperform leastworkremain polici 4 order magnitud 4 tagsoptslowdown polici outperform leastworkremain polici 9 order magnitud increas 15 order magnitud figur 6b c show mean slowdown tagsoptwaitingtim tagsoptfair respect compar task assign polici sinc tagsoptwaitingtim optim mean wait time rather mean slowdown understand perform improv respect mean slowdown dramat tagsoptslowdown howev what interest perform tagsoptfair close tagsoptslowdownand yet tagsoptfair addit benefit fair figur 7 ident figur 6 except case perform metric mean wait time rather mean slowdown tag al gorithm especi tagsoptwaitingtim show sever order magnitud improv task assign polici tag algorithm work well intuit seem leastworkremain best perform sinc leastworkremain send task individu experi lowest wait time reason tag work well 2fold first part varianc reduct section 51 second part load unbalanc section 52 use tagsoptslowdown 2 host load 5 alpha leastworkleft approx b result mean slowdown use tagsoptwaitingtim 2 host load 5 alpha leastworkleft approx c use tagsoptfair 2 host load 5 alpha leastworkleft approx tagsoptfair figur mean slowdown distribut server 2 host system use tagsoptslowdown 2 host load 5 alpha leastworkleft approx tagsoptfair b result mean wait time use tagsoptwaitingtim 2 host load 5 alpha leastworkleft approx tagsoptfair c use tagsoptfair 2 host load 5 alpha leastworkleft approx tagsoptfair figur 7 mean wait time distribut server 2 host system 51 varianc reduct varianc reduct refer reduc varianc task size share queue intuit varianc reduct import improv perform reduc chanc small task get stuck behind big task queue state formal theorem 1 deriv pollaczekkinchin formula theorem 1 given mg1 fcf queue arriv process rate x denot servic time distribut ae denot util fxg let w task wait time queue slowdown q queue length arriv proof slowdown formula follow fact w x independ fcf queue queue size follow littl formula observ everi metric simpl fcf queue depend psi second moment servic time recal workload heavytail second moment servic time explod shown figur 4 discuss effect high variabl task size distribut server system variou task assign polici random task assign random polici simpli perform bernoulli split input stream result host becom independ queue load ith host ae equal system load ae arriv rate ith host 1hfraction total outsid arriv rate theorem 1 appli directli perform metric proport second moment bk p ff perform gener poor second moment bk p ff high round robin round robin polici split incom stream host see e h bk p ff1 queue util ae system perform close random polici sinc still see high variabl servic time domin perform leastworkremain leastworkremain polici equival mgh queue exist known approxim 1621 qmgh qmmh x denot servic time distribut q denot queue length what import observ mean queue length therefor mean wait time mean slowdown proport second moment servic time distribut case random roundrobin task assign polici fact perform metric proport squar coeffici variat c servic time distribut tag tag polici one reduc varianc task size individu host let p fraction task whose final destin host consid task queue host first task destin host task size distribut bs origin task size distribut bound pareto task destin host number greater task cap size thu second moment task size distribut host lower second moment origin bk p ff distribut host except highestnumb host turn full analysi tag polici present appendix rel straightforward except one point fudg explain analyt conveni need abl assum task arriv host form poisson process cours true host 1 howev arriv host departur host exceed size form less bursti process poisson process sinc space apart least igamma1 throughout analysi tag make assumpt arriv process host poisson process 52 load unbalanc second reason tag perform well load unbalanc observ task assign polici describ specif tri balanc load host random roundrobin balanc expect load host leastworkremain goe even tri balanc instantan load host tag opposit figur 8 show load host 1 load host 2 tagsoptslowdown tagsoptwaitingtim tagsoptfair function ff observ 3 flavor tag purpos sever underload host 1 ff low higher ff actual overload host 1 somewhat middl rang ff 1 load balanc two host first explain load unbalanc desir optim overal mean slowdown system later explain happen optim fair understand desir oper unbalanc load need go back heavytail properti heavytail properti say distribut heavytail low ff miniscul fraction task largest one need make half total load exampl case turn less 10 gamma6 fraction task need make half load fact mani task still less 10 gamma4 fraction task need make 99999 fraction load suggest load game play choos cutoff point 1 task fraction host 1 final destin task largest fraction task host 2 final destin heavytail properti load host 2 extrem high 99999 load host 1 low 00001 sinc task get run reduc load overal mean slowdown low distribut littl less heavytail eg ff 1 cant play load unbalanc game well would like sever underload host 1 send 999999 fraction load go host 2 abl make small fraction task 10 gamma4 fraction go host 2 howev distribut heavytail larger fraction task must host 2 final destin creat high load host 2 turn mean task destin host 2 count determin overal mean slowdown system bad sinc task destin host 2 experi larger slowdown thu afford go far overload host 2 turn us get ff 1 turn actual pay overload host 1 littl seem counterintuit sinc host 1 count determin overal mean slowdown system fraction task destin host 1 greater howev point imposs creat wonder state almost task host 1 yet host 1 underload tail heavi enough matter choos cutoff signific portion task host 2 destin thu host 2 inevit figur overal mean slowdown need keep perform host 2 check turn need slightli underload host 2 make fact task size variabl much greater host 2 host 1 explan load unbalanc import respect optim system mean slowdown howev clear load unbalanc also optim fair tagsoptfair 20103050709load host tagsoptslowdown 2 host load 5 alpha host 1 load host 2 b 20103050709load host tagsoptwaitingtim 2 host load 5 alpha host 1 load host 2 c 20103050709load host tagsoptfair 2 host load 5 alpha host 1 load host 2 figur 8 load host 1 compar host 2 distribut server 2 host system load 5 tagsoptslowdown b tagsoptwaitingtim c tagsoptfair observ low ff host 1 run load close zero host 2 run load close 1 wherea high ff host 1 somewhat overload system load 03 use tagsoptslowdown 2 host load 3 alpha leastworkleft approx b system load 05 result mean slowdown use tagsoptslowdown 2 host load 5 alpha leastworkleft approx c system load 07 use tagsoptslowdown 2 host load 7 alpha leastworkleft approx figur 9 mean slowdown tagsoptslowdown distribut server 2 host system load 03 b 05 c 07 figur mean slowdown tagsoptslowdown compar perform random leastworkremain observ figur tag outperform task assign polici ff howev tag effect lower system load mean slowdown experienc small task equal mean slowdown experienc big task howev seem fact treat big task unfairli 3 count 1 small task run host 1 low load low ff 2 small task run host 1 low e 3 small task dont restart scratch wait second line possibl fair help small task much answer simpli small task small thu need low wait time keep slowdown low big task hand afford lot wait time better abl amort punish long lifetim import mention though would case distribut task size distribut low ff heavytail big task truli eleph way bigger small thu afford suffer 5 53 differ load studi model distribut server two host system load 5 section consid effect system load perform tag continu assum 2 host model figur 9 show perform tagsoptslowdown distribut server 2 host run system load 03 b 05 c 07 three figur tagsoptslowdown improv upon perform leastworkremain random full rang ff howev improv tagsoptslowdown much better system lightli load fact task assign polici improv system load drop howev improv tag dramat case system load 03 tagsoptslowdown improv upon leastworkremain 4 order magnitud 6 7 order magnitud almost 20 order magnitud system load 07 5 may interest reader understand degre unfair exhibit tagsoptslowdown tagsoptwaitingtim tagsoptslowdown analysi show expect slowdown big task alway exce small task ratio increas exponenti ff drop efslowdownsmallsg contrast tagsoptwaitingtim expect slowdown big task approxim equal small task ff drop 1 point expect slowdown big task drop way small task ratio big small decreas superexponenti ff drop hand tagsoptslowdown behav compar leastworkremain ff improv upon leastworkremain narrow rang howev ff 1 improv tagsoptslowdown still 4 order magnitud perform tag correl load 2 reason understood look figur 10 show load 2 host tagsoptslowdown case system load 03 b 05 c 07 first reason ineffect tag high load higher load less abl tag play loadunbalanc game describ section 52 lower ff tag reap much benefit lower ff move load onto host 2 system load 05 tag easili abl pile load host 2 without exceed load 1 host 2 howev system load 07 restrict load host 2 must exceed 1 becom bottleneck tag sinc mean host 1 underload tag would like seen compar figur 10b figur 10c c load host 1 much higher lower ff b second reason ineffect tag high load call excess excess extra work creat tag task kill restart 2host case excess simpli equal outsid arriv rate p 2 fraction task whose final destin host 2 1 cutoff differenti small task big task equival definit excess differ actual sum load host h time system load h number host notic dot line figur 10abc show sum load host weve consid distribut server 2 host system load 05 scenario excess problem reason low ff need sever load unbalanc excess basic nonexist load 05 sinc p 2 small due heavytail properti sinc 1 could forc high ff excess present howev task assign polici alreadi well high ff region low task size variabl excess much handicap look case system load 07 howev excess much problem evidenc dot line figur 10c one reason excess wors simpli overal excess increas load excess proport turn proport load reason excess wors higher load 1 low ff rang although p 2 still low due heavytail properti 1 forc low load host 2 cap 1 thu excess low ff high make matter wors excess must heap host 1 high ff rang excess high p 2 high fortun observ higher load excess lowest point ff 1 fact bare exist region observ also region region balanc load optim thing respect minim mean slowdown regardless system load sweet spot fortun ff 1 characterist mani empir measur comput workload see section 3 6 analyt result case multipl host consid distribut server 2 host case 2 host saw perform tagsoptslowdown amazingli good system load 05 less nearli good system load 05 section consid case 2 host phrase ad host ambigu clear whether arriv rate increas well exampl given system host system load 07 could increas number host 4 host without chang arriv rate system load would drop 035 hand could increas number host 4 host increas arriv rate appropri doubl maintain system load 07 discuss attempt clear view mind one claim made straight h host system h system load ae alway configur produc perform least good 2 host system system load ae see observ use h host system assum h even simul 2 host system illustr figur 11 renam host 1 2 subsystem 1 renam host 3 4 subsystem 2 renam host 5 6 subsystem 3 etc split traffic enter h host system 2hth task go h2 subsystem appli favorit task assign polici subsystem independ case choos tag subsystem behav like 2 host system load ae run tag sinc subsystem ident perform perform whole host system equal perform one subsystem observ cute argument work task assign polici figur 12 show mean slowdown tagsoptslowdown case 4 host distribut server system load 03 compar result 2 host system system load 03 figur 9a see system load 03 load host tagsoptslowdown 2 host load 3 alpha host 1 load host 2 sum b system load 05 load host tagsoptslowdown 2 host load 5 alpha host 1 load host 2 sum c system load 07 20611418load host tagsoptslowdown 2 host load 7 alpha host 1 load host 2 sum figur 10 load host 1 host 2 tagsoptslowdown shown distribut server 2 host system load 03 b 05 c 07 dot line show sum load 2 host excess dot line would 06 b 10 c 14 graph respect figur b see excess higher ff rang figur c see excess low ff high ff rang around ff 1 dispatch outsid arriv tag subsystem tag subsystem tag figur 11 illustr claim h host system h 2 system load ae alway configur produc perform least good 2 host system system load ae although h host system much higher arriv rate result mean slowdown use tagsoptslowdown 4 host load 3 alpha leastworkleft approx figur 12 mean slowdown tagsoptslowdown compar task assign polici case distribut server 4 host system load 03 cutoff tagsoptslowdown optim hand mani case possibl improv upon result shown adjust cutoff slight bend graph may meaning observ mean slowdown tag almost never exce 1 1 perform random stay 2 perform leastworkremain improv coupl order magnitud higher ff region less lower ff region leastworkremain task assign polici help increas number host although system load stay host increas chanc one free 3 perform tagsoptslowdown improv lot much mean slowdown tagsoptslowdown never 6 almost alway 1 ff 1 tagsoptslowdown improv upon leastworkremainingbi 45 order magnitud improv upon leastworkremain 89 order magnitud improv upon leastworkremain 25 order magnitud enhanc perform tag host may come fact host allow greater flexibl choos cutoff howev hard say sure difficult comput result case 2 host cutoff case 2 host optim mathematica case 4 host necessari perform optim hand know may possibl even better case system load 07 4 host ran type problem 2 host case system load 07 61 server expans perform metric one thing seem artifici current comparison task assign polici one would ever will run system whose expect mean slowdown practic system oper mean slowdown number host would increas without increas arriv rate thu drop system load system perform improv reason mean slowdown like 3 less consid follow exampl suppos 2host system run system load 7 variabl paramet 6 system mean slowdown tagsoptslowdown order 10 9 task assign polici know better suppos howev desir system mean slowdown 3 less doubl number host without increas outsid arriv rate 4 host system load 035 tagsoptslowdown mean slowdown around 1 wherea leastworkremain slowdown improv around 10 8 turn would increas number host 13 perform leastworkremain improv point mean slowdown 3 random reach level would requir addit 10 9 host exampl suggest new practic perform metric distribut server call server expans metric server expans metric ask mani addit host must ad exist server without increas outsid arriv rate bring mean slowdown reason level well arbitrarili defin reason 3 less figur 13 compar perform task assign polici accord server expans metric given start 2 host system system load 07 tagsoptslowdown server expans 3 2 ff leastworkremain hand number host need add rang 1 27 ff decreas still leastworkremain bad least perform improv somewhat quickli host ad load decreas reason effect increas probabl task find idl host contrast random shown figur 13b exponenti wors other requir mani 10 5 addit host ff 1 although random benefit increas number host effect nonlog scale alpha tagsoptslowdown leastworkremain b log scale server expans requir random leastworkremain tagsoptslowdown alpha figur 13 server expans requir task assign polici given start 2 host system system load 07 show leastworkremain tagsoptslowdown nonlog scale b show leastworkremain tagsoptslowdown random log scale second moment bound pareto distribut bkpalpha alpha figur 14 second moment bk p ff distribut upper bound p set mean held fix 3000 ff vari observ coeffici variat rang 2 isnt nearli strong tag leastworkremain 7 effect rang task size purpos section investig happen rang task size differ biggest smallest possibl task size smaller heretofor assum result smaller coeffici variat task size distribut alway assum task size distribut accord bound pareto distribut upper bound fix mean 3000 mean exampl ff 1 agre empir data need set lower bound task size 167 howev impli rang task size span 8 order magnitud clear applic task size rang 8 order mag nitud section reder perform task assign polici upper bound p set still hold mean task size distribut 3000 mean exampl ff 1 use tagsoptslowdown 2 host load 5p 10 7 alpha figur 15 mean slowdown tagsoptslowdown distribut server 2 host system load 05 compar perform random leastworkremain set result task size distribut agre empir data need set lower bound task size impli rang task size span 5 order magnitud figur 14 show second moment bound pareto task size distribut function ff compar figur figur 4 see task size variabl far lower therfor coeffici variat lower varianc task size distribut suggest improv tag task assign polici dramat higher variabl set fact case interest howev even lower variabl set improv tag task assign polici still impress shown figur 15 figur 15 show mean slowdown tagsoptslowdown compar random leastworkleft case two host system load 05 observ ff 1 tag improv upon task assign polici 2 order magnitud ff drop improv increas figur contrast figur 9b show scenario 8 conclus futur work paper interest propos power new task assign polici challeng natur intuit come adopt time common knowledg tradit area task assign load balanc load share consist heurist seek balanc load among multipl host tag hand specif seek unbal load sometim sever unbal load tradit idea kill task restart scratch differ machin view skeptic possibl toler new host idl tag hand kill task restart target host typic oper extrem high load much higher load origin sourc host furthermor tag propos restart task multipl time interest consid implic result outsid scope task assign consid exampl question schedul cpubound task singl cpu task preemptibl priori knowledg given task first seem fcf schedul option howev fact high task size variabl fcf may wise paper suggest kill restart task may worth investig altern load cpu low enough toler extra work creat task assign also applic outsid context distribut server system describ paper interest recent paper shaikh rexford shin 15 discuss rout ip flow also heavytail size distribut recommend rout long flow differ short flow r load profil methodolog schedul realtim task distribut system task assign distribut system improv perform unbalanc load simpl dynam rout problem task assign distribut server task assign distribut server exploit process lifetim distribut dynam load balanc unix file size survey year1993year approxim respons time shortest queue rout approxim mean respons time shortest queue rout gener interarriv servic time fractal pattern dasd io traffic approxim finit capac multiserv queue poisson arriv optim assign custom parallel server decid queue join counterexampl optim shortest line disciplin upper bound multichannel queue stochast model theori queue tr decid queue join counterexampl approxim respons time shortest queue rout approxim mean respons time shortest queue rout gener interarriv servic time area traffic exploit process lifetim distribut dynam load balanc selfsimilar world wide web traffic task assign distribut system extend abstract heavytail probabl distribut world wide web loadsensit rout longliv ip flow loadbalanc heurist process behavior choos task assign polici distribut server system implement multiprocessor schedul disciplin theori practic parallel job schedul improv util respons gang schedul valuat ultrascal comput system parallel workload model implic processor alloc evalu task assign polici supercomput server load profil ctr jianbin wei chengzhong xu design implement feedback control slowdown differenti internet server special interest track poster 14th intern confer world wide web may 1014 2005 chiba japan konstantino psouni pablo molinerofernndez balaji prabhakar fragkisko papadopoulo system multipl server heavytail workload perform evalu v62 n14 p456474 octob 2005 victoria ungureanu benjamin melam phillip g bradford michael katehaki classdepend assign clusterbas server proceed 2004 acm symposium appli comput march 1417 2004 nicosia cypru victoria ungureanu benjamin melam michael katehaki phillip g bradford defer assign schedul clusterbas server cluster comput v9 n1 p5765 januari 2006 mor harcholbalt cuihong li takayuki osogami alan schellerwolf mark squillant cycl steal immedi dispatch task assign proceed fifteenth annual acm symposium parallel algorithm architectur june 0709 2003 san diego california usa jianbin wei xiaobo zhou chengzhong xu robust process rate alloc proport slowdown differenti internet server ieee transact comput v54 n8 p964977 august 2005 jame broberg zahir tari panlop zeephongsekul task assign workconserv migrat parallel comput v32 n1112 p808830 decemb 2006 madhusudan youngjun son simulationbas approach dynam process manag web servic platform comput industri engin v49 n2 p287317 septemb 2005