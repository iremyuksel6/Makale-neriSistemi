reduc branch cost via branch align sever research propos algorithm basic block reorder call branch align algorithm primari emphasi algorithm improv instruct cach local studi concern branch predict report small minim improv wideissu architectur becom increasingli popular import reduc branch cost increas branch align one mechan effect reduc costsin paper propos improv branch align algorithm take consider architectur cost model branch predict architectur perform basic block reorder show branch align algorithm improv broad rang static dynam branch predict architectur also show program perform improv approxim 5 even use recent propos highli accur branch predict architectur program compil exist compil transform via binari transform implement algorithm alpha axp 21604 16 reduct total execut time achiev b introduct convent processor architectur particularli modern superscalar design extrem sensit control flow chang chang control flow condit uncondit branch direct indirect function call return detect instruct decod keep pipelin fulli util processor typic fetch address follow appear 6th intern confer architectur support program languag oper system asplosvi san jose california octob 1994 recent address decod instruct break control flow previous fetch instruct use new instruct must fetch introduc pipelin bubbl unus pipelin step call instruct misfetch penalti final destin condit branch indirect function call return typic avail latter stage pipelin point branch complet eval uat processor may elect fetch decod instruct assumpt eventu branch target accur predict processor mispredict branch destin instruct fetch incorrect instruct stream must discard lead sever pipelin bubbl caus mispredict penalti practic pipelin bubbl due mispredict break control flow degrad program perform misfetch penalti exampl combin branch mispredict penalti digit alpha axp 21064 processor ten instruct comparison axp 21064 would lose two instruct instruct misfetch almost modern architectur use form branch pre diction reduc number misfetch mispredict penalti increasingli import wideissu architec ture paper examin algorithm reorder structur program improv accuraci branch fetch predict architectur code transform reduc number mispredict branch number misfetch instruct essenti method restructur control flow graph fallthrough branch occur fre quentli use profil inform direct transform architectur cost model decid transform warrant transform includ rearrang placement basic block chang sens condit oper move uncondit branch frequent execut path occasion insert uncondit branch show static dynam branch predict mechan examin benefit transform static branch architectur benefit dynam implement branch align binari transform algorithm dec alpha axp 21064 measur total execut time improv 16 consider work profiledriven program opti mizat section weconsid relev work onoptim instruct cach branch mechan optim memori hierarchi due expens memori earli comput much earli work focus reduc page virtual memori system sever research explor way group relat subroutin basic block onto virtual memori page 1 8 11 13 10 research extend work lower level memori hierarchi optim perform instruct cach mcfarl 15 describ algorithm reduc instruct cach conflict particular class program hwu chang 18 describ gener effect techniqu use compil time analysi impacti compil system use profilebas transform impacti compil inlin subroutinesand perform trace anal ysi subroutin instruct pack use frequent execut trace move infrequ execut trace end function follow global analysi arrang function reduc interfunct cach conflict similar transform appli petti hansen 21 program hp parisc optim control flow mcfarl hennessi 17 describ number method reduc branch mispredict instruct fetch penalti includ profiledriven static branch predict delay slot aform branch align variant branch align consid ifthenels construct later bray flynn 4 extend work mcfarl et al examin variou branch target buffer btb architectur yet also examin ifthenels construct yeh et al 26 comment trace schedul taken branch could reduc 62 execut condit branch 50 execut condit branch earlier studi hwu chang 18 show 58 fallthrough rate branch align paper mcfarl hen nessi bray flynn petti hansen report chang percentag taken branch branch align reorder algorithm propos hwu et al gener mcfarl bray hwu chang examin basic block rearrang achiev better branch align abl handl branch form ifthenels structur work petti hansen 21 describ greedi algorithm branch align similar hwu chang sinc look basic block petti hansen greedi algorithm gener hwu chang algorithm perform better term reduc cost branch paper describ algorithm extens petti hansen algorithm compar result greedi algorithm also improv upon analysi effect branch align mcfarl bray flynn hwu chang petti hansen describ effici appli branch align variou static dynam predict architectur measur effect branch align architectur techniqu similar method mcfarl bray flynn hwu chang petti hansen howev inlin function perform global analysi duplic code perform analysi use object code postprocessor rather compil simplifi analysi avoid recompil full program simpl transform also allow us appli branch align full program includ portion normal compil user program librari process mani program gener number differ compil postprocessor tool branch align would normal one sever optim appli program 3 branch predict architectur branch architectur donot includ abtb incur misfetch penalti branch decod architectur use branch delay slot mechan 5 7 17 avoid penalti paper assum fallthrough instruct fetch branch decod except branch target buffer architectur thu taken branch alway incur misfetch penalti model three static branch predict architectur two dynam predict architectur static branch predict architectur fallthrough model assum fallthrough execut path alway execut btfnt backwardtaken forward taken assumesback ward branch alway taken forward branch taken branch model fairli common variant implement hp parisc alpha axp21064 like model assum encod inform branch instruct indic whether branch like taken taken branch model use sever architectur includ tera 2 likelyunlik flag set either use compiletim estim 3 profil inform 9 use profil inform sinc much accur simpl gather appropri tool 23 program transform help branch predict architectur reduc misfetch mispredict delay fallthrough architectur fallthrough path execut frequent reduc misfetch improv predict btfnt architectur use fallthrough common path that possibl costeffect branch target place condit branch backward branch predict sinc branch mispredict penalti larger misfetch penalti may better correctli predict backwardsbranch even result misfetch like model compil specifi like branch come therefor code transform elimin mi fetch penalti make fallthrough frequent execut path expect opportun optim fallthrough method btfnt model taken branch mispredict fallthrough method likewis would expect optim opportun btfnt model like model sinc improv misfetch rate transform program use like model figur 1 show code transform help static origin code b transform code figur 1 benefit code transform elim lower espresso darken edg fallthrough dot edg taken node repres basic block predict model figur 1 show portion control flow graph routin elim lower espresso bench mark node label number number parenthesi indic number instruct basic block edg label frequenc execut edg label 16 execut 16 edg transit subroutin unlabel edg execut less 1 time fallthrough edg darken taken edg dot origin code figur 1a like architectur correctli predict like target misfetch penalti edg comparison fallthrough architectur mispredict edg sinc taken branch btfnt architectur also mispredict edg correctli predict edg sinc target branch instruct result backward branch transform code figur 1b effici layout term branch cost static predict architectur sinc node 25 fallthrough node 31 architectur correctli predict edg penalti sinc 31 laid 25 btfnt accur predict edg misfetch penalti also sinc node 29 laid 27 branch accur predict transform program give optim layout btfnt sinc predict likely2041441146 figur 2 routin input hidden alvinn architectur also good layout fallthrough ar chitectur though still suffer mispredict edg predict less like execut edg notic transform code two taken edg come node 28 sinc one edg fallthrough need add uncondit branch fallthrough turn jump correct destin node transform code figur 1b give effici transform static architectur gener singl branch align transform alway give optim align differ architectur code transform reduc branch penalti consid underli branch model perform branch align later examin transform algorithm model underli branch architectur show perform better algorithm mani optim unrol loop investig exampl trace alvinn pro gram neural net simul found 46 time spent routin input hidden anoth 46 spent hidden input figur 2 show control flow graph input hidden nearli 100 branch sub routin 46 branch alvinn aris singl branch basic block 4 unrol loop duplic 11instruct basic block 4 could reduc misfetch penalti architectur improv branch predict fallthrough architectur normal loop unrol complex transform also attempt reduc total number execut branch within unrol code feel simpli duplic basic block 4 invert align branch condit ad condit branch exampl would offer perform improv even optim offer loop unrol ignor dynam branch predict method static predict mechan particularli profilebas method accur predict 7090 condit branch mani current comput architectur use dynamicpredictionsuch branch target buffer btb pattern histori tabl pht accur predict 9095 branch origin btb use mechan branch pre diction effect predict prior behavior branch even small btb found effect 4 17 20 22 26 intel pentium exampl current architectur use btb 256entri btb organ 64 line fourway associ cach branch taken enter btb branch address appear btb store address use fetch futur instruct otherwis fallthrough address use btb entri pentium also use twobit satur counter predict direct condit branch 14 condit branch predict use much simpler mechan method noth misfetch penal tie pattern histori tabl pht elimin site target address tabl tabl predict direct condit branch design use branch site address index tabl predict bit recent pan et al 19 yeh patt 27 investig branchcorrel twolevel branch predict mechan although number variant mechan gener combin histori sever recent branch predict outcom branch simplest exampl degeneratemethod pan et al use 4096 entri tabl processor maintain 12bit shift regist global histori regist record outcom previou branch previou 12 branch execut sequenc three taken branch six nontaken branch three taken branch tttnnnnnnttt regist might store valu 111000000111 2 3591 valu use index 4096entri pattern histori tabl provid contextu inform particular pattern branch simul two pht direct map pht degener twolevel correl pht use variant mcfarl 16 found accur method perform exclusiveor branch address global histori regist use index pht pht simul contain satur updown counter total 1kbyte storag also simul two btb configur model 64entri 2way associ btb 256entri 4way btb latter configur use intel pentium btb simul store taken branch btb predict fallthrough btb miss btb entri contain 2bit satur updown counter use predict destin condit branch btb simul hold entri condit branch uncondit branch indirect jump procedur call return 5 26 4 branch align algorithm implement branch align algorithm suggest petti hansen 21 implement algorithm mcfarl hennessi bray flynn examin ifthenels construct limit effect uncondit branch 2 instruct correctli predict fallthrough 1 instruct correctli predict taken 2 instruct mispredict tabl 1 cost cycl differ branch ness sinc mani transform appli loop exampl algorithm would perform transform shown figur 1 result perform branch align procedur program mainli concern reduc branch cost although instruct cach perform may also improv repres procedur direct control flow graph contain set basic block repres node edg node trace program execut record number time edg travers call execut weight edg e node n transform program look node degre one two uncondit branch basic block singl outgo edg taken edg condit basic block two edg taken fallthrough edg fall basic block outgo fallthrough edg edg given weight zero consid appli branch align thu ignor indirect branch procedur return subroutin call section discuss three branch align algorithm greedi petti hansen 21 propos two heurist align branch describ bottomup greedi algorithm sinc better perform greedi algorithm direct toward btfnt architectur consid implic differ branch architectur terminolog 21 chain contigu sequenc basic block thread head tail pointer first basic block chain null head pointer last basic block chain null tail pointer algorithm align procedur turn edg sourc destin largest weight select algorithm attempt posit node fallthrough node alreadi fallthrough basic block alreadi head two basic block combin chain otherwis block link basic block part exist chain two chain merg basic block link repeat edg examin chain longer merg petti hansen implement techniqu hp parisc architectur architectur use btfnt condit branch predict model edg procedur examin preced relat defin chain determin order chain would achiev best predict use btfnt model chain posit use preced relat insert uncondit branch need cost greedi algorithm consid underlin architectur construct chain includ underlin architectur cost algorithm order reduc cost branch beyond greedi algorithm architectur assumesspecif cost differ branch shown tabl 1 cost transform algorithm tri minim cost branch procedur use simpl heurist hope local minim result global perform improv greedi algorithm cost algorithm start edg highest weight pick edg determin fallthrough local benefit program use cost model tri link examin predecessor see cost effect connect anoth node algorithm consid basic block one two exit edg consid two possibl align singleexit node examin cost align edg fall therebi avoid uncondit branch ad uncondit branch exampl singleexit node could either includ chain insert jump end allow differ chain condit branch examin three possibl align assum anoth edg 2 consid includ 2 edg current chain ad jump end make jump fallthrough latter transform may use cost effect 2 fallthrough chain certain case align either edg condit branch canimprov performanceon fallthroughandbtfnt archi tectur exampl consid loop consist singl basic block shown figur 2 use fallthrough model origin loop node 4 incur five cycl penalti one cycl branch instruct four cycl mispredict penalti use costmodel costeffect invert sens condit end block follow block insert jump instruct combin take three cycl correctli predict condit branch uncondit branch singl misfetch penalti loop structur way illustr point use singl block loop greedi algorithm would restructur loop occur frequent try15 simul studi show cost heurist gave sizabl improv fallthrough architectur modest improv btfnt neglig improv like briefli consid use cost model assess cost everi possibl basic block align use exhaust search select minim cost order practic sound expens common case procedur contain 515 basic block howev program procedur contain hundr block make exhaust search imposs procedur exampl gcc program contain procedur yypars contain 712 basic block howev mani edg never execut larg procedur basic block contribut execut time devis heurist balanc time perform procedurew select 15 frequent executededg attempt possibl align node select cda9000a origin code b align figur 3 exampl illustr try15 reduc branch cost darken edg fallthrough dot edg taken node repres basic block next 15 edg allow us tri possibl combin group 15 node possibl tri node similar describ cost algorithm singleexit node uncondit fall basic block two possibl make outgo edg either fall taken edg node twoexit edg condi tional branch tri align separ two outgo edgesa fallthrough tri neither outgo edg fallthrough call try15 method heurist took time greedi cost heurist produc better result still ran minut consid 10 node time gave slightli wors result try15 program took less minut run still result better perform greedi algorithm improv perform algorithm examin edg executedmor elimin half edg consider program profil use combin program one could reduc execut time try15 algorithm examin condit branch account 99 execut branch branch align algorithm align loop difficult one case heurist perform better greedi algorithm figur 3a show fragment code loop greedi algorithm would modifi code assum choos align edg wherea try15 algorithm transform code shown figur 3b note transform code uncondit branch c remov use cost model tabl 1 like btfnt architectur execut cost origin code edgeweightsshown 900089998999 21 cycl cost transform version 8999 9000 cycl reduc branch execut cost 33 ideal want like path loop singl chain greedi cost algorithm examin enough loop minim cost one main reason try15 heurist abl produc better result algorithm try15 heurist tri combin find correct place break loop 5 experiment methodolog construct two tool studi branch align initi simul sever differ branch architectur use trace driven simul later implement differ branch align algorithm use om 24 25 system linktim code tran format simul provid detail insight branch align use differ branch architectur implement illustr techniqu practic valu simul studi instrument program spec92 benchmark suit program includ objectori program written c use atom 23 instrument program due structur atom need record trace could trace longrun program program compil dec 3000400 use alpha processor use either dec c compil dec c compil system run standard osf1 v13 oper system program compil standard optim construct sever simul analyz program simul run collect inform branch target second time use profil inform prior run spec92 program use largest input distribut spec92 suit tabl 2 show basic statist program instru ment first column list number instruct trace second column give percentag instruct caus break control flow column label q50 q90 q99 q100 show number branch instruct site contribut 50 90 99 100 execut condit branch program next column static show total number condit branch site program thu doduc three branch instruct constitut 50 execut branch taken column show percentag condit branch taken execut last five column provid detail five type break control flow encount trace condit branch cbr indirect jump ij uncondit branch br procedur call call procedur return ret note dynam dispatch call implement indirect jump c therefor includ indirect jump metric program includ cfront version 301 att c languag preprocessor written c groff version ditroff text formatt written c idl c parser corba interfac descript languag db version deltablu constraint solut system written c format system select program found spec92 suit typifi behavior seen larg program c program 6 altern program use sizabl input hope would exercis larg part program exampl e x program format 45page document 6 result result rearrang basic block within proce dure perform procedur split procedur rearrang sinc branch align method add remov instruct program clear cut perform metric compar perform differ align simpl metric predict accuraci use one method may remov ad uncondit branch achiev particular branch align defin branch execut penalti bep execut penalti associ misfetch mispredict branch simul assum misfetch branch caus one cycl misfetch penalti mispredict branch caus four cycl mispredict penalti static branch pht architec ture uncondit branch correctli predict taken condit branch direct procedur call caus misfetch penalti wherea mispredict condit branch mispredict return indirect jump caus mispredict penalti sinc btb architectur tri predict type branch taken branch pro cedur call uncondit jump taken condit branch found btb necessarili caus misfetch penalti static dynam architectur simul simul 32entri return stack 12 accur predict destin return instruct order evalu perform differ align architectur add bep number instruct execut align program divid number instruct execut origin program essenti defin cycl per instruct rel origin program also assum instruct take one cycl exampl origin program issu 1000 instruct encount 347 cycl branch penalti would cpi 1347 modifi program issu 978 instruct assum branch avoid incur 347 cycl branch penalti would rel cpi 978 3471000 1325 cycl call rel cpi sinc divid cost align program number instruct origin program tabl 3 show rel cpi program use variou align three static branch architectur tabl also show percent execut condit branch fallthrough align perform vari architectur percent fallthrough branch chang petti algorithm vari branch architec ture wherea fallthrough percentag try15 algorithm chang architectur sinc cost model algorithm differ architectur tabl 4 show rel cpi pht btb architectur arithmet averag shown group program specfp92 specint92 orig column architectur show perform instrument trace origin program like architectur use profil use creat branch align order predict like branch direct given branch site architectur use input align program measur improv align branch align heurist use architectur cost model usual perform better simpler greedi algorithm insn condit branch percentag break trace program trace break q50 q90 q99 q100 static taken cbr ij br call ret doduc 1149864756 853 3 175 296 1447 7073 4868 8131 001 497 686 686 hydro2d 5682546752 628 14 74 spice su2cor 4776762363 436 8 26 compress 92629658 1391 4 12 espresso 513008174 1711 44 163 470 1737 4568 6190 9325 020 188 229 239 gcc 143737915 1597 245 1612 3724 7640 16294 5942 7885 286 575 604 649 li 1355059387 1767 sc 1450134411 2093 14 94 336 1471 4478 6688 8596 098 262 518 526 cfront 19001390 1608 112 946 3055 5783 15509 5318 7345 217 640 872 926 groff 41522284 1610 86 372 1021 2511 7434 5417 6612 480 780 877 1251 tabl 2 measur attribut trace program particularli notabl fallthrough architectur fallthrough architectur longer realist architectur consid use combin btb fallthrough predict btb miss improv perform occur try15 heurist align either outgo edg condit branch instead uncondit branch ad one condit branch edg take advantag fallthrough predict cost model fact try15 heurist convert 99 seen tabl 3 condit branch program fallthrough fallthrough model ad uncondit jump work especi well singl basic block loop end condit branch describ earlier alvinn mani fortran program btfnt architectur see reason improv branch align btfnt architectur difficult creat chain btfnt architectur form chain known taken branch locat final procedur chain form laid destin taken branch could place current node affect final branch predict cost small benefit like architectur occur elimin misfetch penalti mani branch remov uncondit branch like execut path elimin instruct misfetch increasingli import superscalar architectur becom common fourissu superscalar architectur could encount branch everi two three cycl benefit architectur frequent fallthrough branch howev rel cpi metric shown reflect improv singl issu architectur cost model use static architectur differ dynam architectur examin cost align condit branch static architectur cost align condit branch clear cut mean one target condit branch predict must alway mispredict dynam architectur case order compens increas accuraci predict condit branch cost model pht architectur assum condit branch mispredict 10 time similarli btb architectur also assum condit branch mispredict 10 time addit assum btb architectur 10 miss rate mean taken uncondit condit branch caus misfetch penalti 10 time seen tabl 4 branch align offer improv pht architectur littl improv btb architectur except small btb like architectur major improv perform pht architectur come move uncondit branch frequent execut path reduc misfetch penalti occur taken condit branch origin program perform btb architectur alreadi effici store predict indirect jump procedur call uncondit condit branch small btb architectur benefit branch align larger btb sinc taken branch store btb therefor remov uncondit branch make branch fallthrough caus align program use less entri btb import observ branch align reduc differ performancebetween variou branch architectur exampl align fallthroughandbtfnt architectur almost ident perform slightli slower like pht architectur btb architectur rel cycl per instruct fallthrough condit branch fallthrough btfnt like fallthrough btfnt like program orig greedi try15 orig greedi try15 orig greedi try15 orig greedi try15 try15 try15 alvinn 135 134 117 109 109 109 109 109 109 223 376 9957 371 375 doduc 115 109 105 109 104 104 105 104 103 5132 6890 9508 6877 9224 hydro2d 118 110 106 110 110 104 106 104 104 2666 5768 9544 5343 5345 ora 113 102 102 112 102 105 105 102 102 4676 9467 9496 9036 9050 spice 134 129 125 115 114 113 112 111 111 2837 3837 9231 3742 3774 su2cor 111 107 105 105 104 104 104 104 103 2693 5227 8982 3812 3812 tomcatv 113 108 104 108 102 102 103 102 102 072 4371 9938 4371 4371 compress 135 114 112 126 117 110 116 112 110 3175 8173 8414 6872 6872 li 127 112 111 126 114 113 115 110 110 5270 8303 8563 8303 8311 sc 151 127 118 136 117 116 120 114 114 3312 6637 9091 6566 6572 cfront 125 112 110 123 110 110 113 109 109 4682 8105 8964 8052 8120 groff 131 111 110 126 117 109 114 109 108 4586 8420 9406 8216 8453 idl 131 114 113 130 113 113 119 113 113 5330 9037 9611 8996 9000 tex 120 110 108 117 109 109 110 107 107 4253 7323 8743 7067 7143 avg 128 114 112 125 113 112 115 111 111 4633 8056 9149 7936 8030 tabl 3 rel cycl per instruct static predict architectur correspond fallthrough branch direct map pht 4096 correl pht 64entri 2way btb 256entri 4way btb program orig greedi try15 orig greedi try15 orig greedi try15 orig greedi try15 alvinn 109 109 109 109 109 109 101 100 100 100 100 100 doduc 106 104 104 106 103 104 103 102 102 102 101 101 hydro2d 105 104 104 105 104 104 101 102 101 101 102 101 spice 112 111 112 111 110 111 104 104 107 104 104 107 su2cor 105 104 104 105 104 104 102 102 101 102 102 101 compress 115 112 110 115 111 109 108 108 106 106 108 106 espresso 117 115 115 114 112 112 111 110 110 107 109 109 gcc 117 112 112 117 111 111 118 110 110 112 108 108 li 115 111 110 112 108 107 113 107 107 107 106 105 sc 117 111 111 116 110 110 108 104 104 104 103 103 cfront 114 109 109 114 109 109 119 109 109 113 107 107 groff 114 109 108 113 108 107 113 107 105 106 105 103 idl 119 113 112 118 112 112 111 102 102 103 101 101 tex 110 107 107 109 106 106 108 105 104 105 104 104 avg 115 111 111 114 110 110 112 105 105 106 104 104 tabl 4 rel cycl per instruct dynam predict architectur alvinn ear compress eqntott espresso gcc li sc060810rel execut time origin petti hansen figur 4 total execut time improv dec 3000600 alpha axp spec92 c program best overal perform compar static btfnt architectur perform 4096entri correl pht align pht architectur perform 7 better btfnt architectur align perform 2 better btfnt architectur take averag cpi simul program lastli note signific differ differ program class specint92 program see benefit branch align specfp92 program reason seen tabl 2 specfp92 program 65 instruct execut caus break control flow wherea specint92 program 16 instruct caus break control 61 perform comparison implement greedi try15 align algo rithm figur 4 indic improv total execut time spec92c program dec 3000600 alpha axp 21064 processor run osf2 v20 program show execut time origin program compil nativ compil transform program use petti hanson greedi algorithm transform program use try15 algorithm scale execut time program time origin program program compil previous describ link use om link result object file standard librari use omful describ 25 therefor origin program execut time shown figur 4 use standard om link time optim modifi om produc desir branch align use link program alpha axp 21064 dual issu architectur use combin dynam static branch predict instruct onchip cach singl bit indic previou branch direct instruct cach line flush bit initi bit instruct sign displac locat thu perform expect architectur cross direct map pht tabl btfnt architectur surprisingli float point program alvinn ear see benefit branch align agre simul result believ benefit could gain singl loop basic block shown figur 2 duplic gcc eqntott sc program benefit branch align difficult understand actual perform improv branch align come tool allow us instrument measur transform program trace simul complet model alpha axp architectur simul describ previou section two differ chain layout algorithm use greedi try15 align one algorithm laid chain procedur start highest execut chain continu lowest execut chain algorithm laid chain use btfnt model describ 21 implement chain layout om found algorithm laid chain highest execut lowest execut perform slightli better one laid chain use btfnt model believ perform come fact lay chain highest lowest execut satisfi mani branch prioriti btfnt model time allow better cach local therefor result shown figur 4 use greedi align use simul except btfnt simul highest lowest chain order om also implement btfnt pht btb align try15 use simul found align perform slightli better pht align better btfnt align recal creat pht align taken condit branch uncondit branch one cycl misfetch penalti associ cost model contrast btb cost model assum 10 btb miss rate mean assum one cycl misfetch penalti occur 10 taken branch alpha axp 21604 architectur misfetch penalti squash pipelin current wait stall fore cost model would actual fit alpha axp 21604 architectur would assum taken branch squash rufe 30 time result figur 4 use align use btb simul shown tabl 4 conclus simul number branch predict architectur show branch align use architectur simul result assum singl issu architectur wide issu architectur becom popular branch align algorithm larger impact perform program align algorithm implement saw 16 improv execut time dual issu alpha axp 21604 architectur total reduct program execut time result combin reduct misfetch mispredict penalti instruct cach miss rate number instruct issu describ improvedalign algorithm also show branchesdetermin branch behavior manycommon benchmark program techniqu address broader class program structur 15 4 anddo requir recompil need hwu chang18 petti hansen 21 haveshownhow simpl object code transform take minut run even larg program improv program perform branch align benefit program integ program reason improv seen variou branch predict architectur acknowledg wed like thank alan eustac amitabh srivastava develop atom especi amitabh srivastava develop om wed also like thank keith farka denni lee anonym review use comment work fund part nsf grant asc9217394 arpa fellowship decwrl summer internship work part continu effort make languag c suitabl scientif comput r perform enhanc page system program analysi tran format tera comput system branch predict free strategi branch target buffer 21st annual annual intern symposium comput architectur quantifi behavior differ c c branch fold crisp microprocessor reduc branch delay zero improv local critic work set predict condit branch direct previou run program program restructur virtual memori branch histori tabl predict move target branch due subroutin return optim sequenti partit graph branch predict strategi branch target buffer design program optim instruct cach combin branch predictor reduc cost branch hwu pohua p improvingth accuracyof dynam branch target buffer design optim profil guid code posit studi system build custom program analysi tool practic system intermodul code optim linktim comprehens instruct fetch mechan processor support specul execut comparisonof dynam branchpred tor use two level branch histori tr reduc cost branch branch fold crisp microprocessor reduc branch delay zero compiletim program restructur multiprogram virtual memori system program optim instruct cach achiev high instruct cach perform optim compil profil guid code posit branch histori tabl predict move target branch due subroutin return strategi branch target buffer improv accuraci dynam branch predict use branch correl predict condit branch direct previou run program comprehens instruct fetch mechan processor support specul execut branch predict free comparison dynam branch predictor use two level branch histori linktim optim address calcul 64bit architectur atom fast accur instruct fetch branch predict tera comput system optim sequenti partit graph improv local critic work set branch target buffer design optim studi branch predict strategi ctr chunl hu john mccabe daniel jimnez ulrich kremer camino compil infrastructur acm sigarch comput architectur news v33 n5 decemb 2005 steven wallac nader bagherzadeh model measur instruct fetch perform superscalar microprocessor ieee transact parallel distribut system v9 n6 p570578 june 1998 nicola gloy michael smith cliff young perform issu correl branch predict scheme proceed 28th annual intern symposium microarchitectur p314 novemb 29decemb 01 1995 ann arbor michigan unit state icheng k chen john coffey trevor n mudg analysi branch predict via data compress acm sigplan notic v31 n9 p128137 sept 1996 young david johnson michael smith david r karger nearoptim intraprocedur branch align acm sigplan notic v32 n5 p183193 may 1997 robert cohn p geoffrey lowney hot cold optim larg windowsnt applic proceed 29th annual acmiee intern symposium microarchitectur p8089 decemb 0204 1996 pari franc brad calder dirk grunwald joel emer system level perspect branch architectur perform proceed 28th annual intern symposium microarchitectur p199206 novemb 29decemb 01 1995 ann arbor michigan unit state gadi haber mosh klausner vadim eisenberg bilha mendelson maxim gurevich optim opportun creat global data reorder proceed intern symposium code gener optim feedbackdirect runtim optim march 2326 2003 san francisco california anton ertl david gregg optim indirect branch predict accuraci virtual machin interpret acm sigplan notic v38 n5 may brad calder dirk grunwald amitabh srivastava predict branch librari proceed 28th annual intern symposium microarchitectur p2434 novemb 29decemb 01 1995 ann arbor michigan unit state alex ramirez oliverio j santana josep l larribapey mateo valero fetch instruct stream proceed 35th annual acmiee intern symposium microarchitectur novemb 1822 2002 istanbul turkey minghui yang gangryung uh david b whalley improv perform branch reorder acm sigplan notic v33 n5 p130141 may 1998 alex ramirez josep l larribapey mateo valero softwar trace cach ieee transact comput v54 n1 p2235 januari 2005 daniel jimnez code placement improv dynam branch predict accuraci acm sigplan notic v40 n6 june 2005 minghui yang gangryung uh david b whalley effici effect branch reorder use profil data acm transact program languag system topla v24 n6 p667697 novemb 2002 amir h hashemi david r kaeli brad calder effici procedur map use cach line color acm sigplan notic v32 n5 p171182 may 1997 bernard goossen david defour instruct regist file microarchitectur futur gener comput system v21 n5 p767773 may 2005 paramjit oberoi gurindar sohi parallel frontend acm sigarch comput architectur news v31 n2 may nikola gloy michael smith procedur placement use temporalord inform acm transact program languag system topla v21 n5 p9771027 sept 1999 glenn reinman brad calder todd austin optim enabl decoupl frontend architectur ieee transact comput v50 n4 p338355 april 2001 matthew arnold david grove collect exploit highaccuraci call graph profil virtual machin proceed intern symposium code gener optim p5162 march 2023 2005 wankang zhao david whalley christoph heali frank mueller improv wcet appli wc codeposit optim acm transact architectur code optim taco v2 n4 p335365 decemb 2005 ann gordonross frank vahid nikil dutt first look interplay code reorder configur cach proceed 15th acm great lake symposium vlsi april 1719 2005 chicago illinoi usa brad calder dirk grunwald donald lindsay jame martin michael mozer benjamin zorn corpusbas static branch predict acm sigplan notic v30 n6 p7992 june 1995 glenn reinman todd austin brad calder scalabl frontend architectur fast instruct deliveri acm sigarch comput architectur news v27 n2 p234245 may 1999 mikko h lipasti william j schmidt steven r kunkel robert r roedig spaid softwar prefetch pointer callintens environ proceed 28th annual intern symposium microarchitectur p231236 novemb 29decemb 01 1995 ann arbor michigan unit state brad calder dirk grunwald michael jone donald lindsay jame martin michael mozer benjamin zorn evidencebas static branch predict use machin learn acm transact program languag system topla v19 n1 p188222 jan 1997 sangwook p kim gari tyson analyz work set characterist branch execut proceed 31st annual acmiee intern symposium microarchitectur p4958 novemb 1998 dalla texa unit state young michael smith static correl branch predict acm transact program languag system topla v21 n5 p10281075 sept 1999 pierr michaud andr seznec stphan jourdan explor instruct fetch requir outoford superscalar processor intern journal parallel program v29 n1 p3558 februari 2001