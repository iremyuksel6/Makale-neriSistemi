data reloc prefetch program larg data set numer applic frequent contain nest loop structur process larg array data execut loop structur often produc memori refer pattern poorli util data cach limit associ cach capac result cach conflict miss also nonunit stride access pattern caus low util cach line data copi propos investig order reduc cach conflict miss techniqu high execut overhead sinc perform copi oper entir softwarew propos combin hardwar softwar techniqu call data reloc prefetch elimin much overhead data copi use special hardwar furthermor reloc data perform softwar prefetch overhead copi data reduc experiment result data reloc prefetch encourag show larg improv cach perform b introduct numer applic frequent contain nest loop structur process larg array execut loop structur shown produc memori prefer pattern poorli util data cach 34 first three problem involv insuffici capac cach data access loop may exceed cach size result cach miss limit associ cach present second problem access differ array even differ element singl array may conflict final problem involv nonunit stride access pattern caus low util cach line wast bu memori cycl 5 potenti one could use larger cach size higher cach associ elimin cach capac miss cach conflict miss brute forc approach howev scale well rapidli increas amount data use sophist numer applic moreov would result signific hardwar cost increas cach access latenc could avoid via costeffect approach propos paper use block transform could reduc workingset size data access loop nest 4 1 6 reorder execut iter block transform reduc amount data referenc two refer data data access two refer data reduc amount smaller cach size capac miss elimin practic howev block transform may reduc cach miss cach map conflict addit block alon reduc workingset size data access singl loop sinc data access reorder data prefetch also propos reduc cach miss fetch data cach referenc 7 8 use conjunct small cacheblock size one potenti elimin problem low util cach block wast bu cycl 5 howev data prefetch may increas size work set introduc capac miss also prefetch data may conflict current work set cach introduc conflict miss 9 10 order data prefetch improv perform reliabl manner one must ensur current futur work set fit cach propos approach achiev goal compress current futur work set local region virtual address space cach map conflict exist among locat region paper present approach howev solv three cach perform problem arraybas applic rather solv problem singli first phase techniqu consist loop block inner loop reduc number array access work set second phase insert special hardwar instruct compress work set local region virtual address space prefetch compress work set cach compil also modifi work set access refer made compress data cach sinc array data sequenti local region conflict miss elimin also origin data access pattern nonunit stride unus data brought cach compress prefetch result improv cachelin util comput complet addit instruct decompress modifi data reloc back origin program array order minim overhead compress decompress data compress perform data prefetch memori cach also use compil transform compress prefetch next work set overlap current comput order hide latenc reloc use prototyp compil emul tool simul tool show extens cach architectur along requisit compil support greatli improv data cach perform arraybas applic remaind paper organ six section section 2 describ propos method describ necessari architectur hardwar support section 3 explain compil transform data reloc prefetch section 4 simulationbas experiment result provid demonstr effect propos architectur relat work discuss section 5 final section 6 offer conclud remark futur direct 2 data reloc prefetch 21 method propos compilersupport hardwarebas techniqu call data reloc prefetch order improv data cach perform method array refer inner loop nest sequenti map cach access reloc oper invok explicit instruct compil insert compil also insert declar origin code reloc buffer alloc space reloc data memori special hardwar attach cach unit map compress data virtual buffer space reloc perform prefetch data memori cach without stall cpu order access reloc data instead origin array data comput compil replac origin array refer correspond reloc buffer refer array data reloc prefetch bind comput newli assign address reloc buffer space use access data rather origin address cons quentli reloc must complet comput data begin reloc cach data replac origin address access scalar access reloc data must written back reloc buffer memori sinc access comput use address reloc data insur writeback reloc data dirti bit set cach line data alloc comput use reloc data finish modifi reloc data written back reloc buffer origin memori locat use explicit machin instruct data reloc prefetch improv local array access loop nest figur 1 show array data element access first iter outer loop copi sequenti cach locat map reloc buffer memori array access stride two array layout memori layout cach reloc buffer figur 1 concept data reloc b access column order execut inner loop access array element result poor perform 1 access may exhibit spatial local nonunit access stride result wast cach capac may lower cach hit rate 2 set access differ array may conflict happen map locat cach 3 access singl array may conflict larg access stride access element array reloc cach spatial local improv pack element array contigu locat also sinc necessari element brought cach extra memori request time fill cach line due nonunit stride access reduc furthermor total size reloc array element smaller cach size compress guarante refer reloc data conflict cach final cach space conserv pack element array order reduc instructionfetch overhead due insert reloc instruct instruct contain enough inform oper sever element array sequenc also order accommod latenc reloc array data reloc comput phase separ time softwarepipelin outer loop detail given section 3 22 architectur support implement mechan data reloc prefetch requir extra instruct well extra hardwar five instruct support data reloc prefetch ad instruct set precollect prealloc distribut await finishup 221 precollect precollect instruct five operand collect array data referenc comput consecut locat cach data need comput first operand address first element array reloc wherea second operand address first element reloc array reloc buffer third fifth operand size array element byte stride array access byte number array element collect inform given third fifth operand necessari sinc scheme reloc entir cach line rather reloc array element access comput use operand precollect instruct fetch data origin address store data cach tag reloc address instruct nonblock stall processor even caus cach miss therefor execut instruct overlap execut instruct perform comput loop nest 222 prealloc prealloc instruct alloc necessari cach line instead collect array data consecut locat within cach use array data read written comput case need collect data cach comput elimin overhead fetch data prealloc instruct operand precollect instruct except first operand origin start address fourth operand stride origin array access need instruct also nonblock 223 distribut distribut instruct write reloc data updat comput back origin array locat memori format distribut instruct precollect instruct first operand specifi start address array element reloc second operand specifi start address array data reloc buffer like precollect prealloc instruct distribut instruct stall processor 224 await await instruct provid simpl synchron mechan avoid access reloc array data precollect prealloc oper complet instruct singl operand must match second operand associ precollect prealloc instruct precollect prealloc oper complet await oper caus data cach block oper finish 225 finishup loop nest finish execut may unfinish distribut oper must complet array data access subsequ code finishup instruct provid synchron mechan insur distribut oper complet block data cach operand necessari 23 hardwar support execut data reloc prefetch instruct handl special hardwar call data reloc prefetch drp unit attach exist cach unit figur 2 drp unit share mmu cach also share cach cpu configur processor cach higher prioriti drp unit access share resourc prioriti hierarchi help ensur drp unit doesnt significantli slow execut applic program execut precollect prealloc distribut instruct unless await finishup instruct execut highbandwidth memori system like splittransact bu system use drp unit util bandwidth pipelin read write request memori system data cach configur necessari support drp unit writeback cach alloc write miss figur 3 illustr compon drp unit data path drp unit design way cach need block due fetch gener drp instruct insur handl fetch drp unit sinc cach block write servic unless write buffer full write miss gener drp instruct handl cach instead dedic drp hardwar furthermor drp unit block fetch memori locat program execut proce precollect prealloc distribut instruct processor place instruct queue instruct queue full drp unit stall processor empti entri queue instruct head queue process complet cpu cach mmu bu memori request data reloc cach unit precollect prealloc distribut await finishup figur 2 data reloc prefetch unit interfac address gener next may proceed address gener calcul origin address array element use start array address stride inform address gener also use start reloc buffer address element size calcul reloc buffer address array element pair address gener entri store suboper queue process precollect prealloc instruct origin address store sourc address field buffer address store destin field suboper queue distribut instruct address revers begin process precollect suboper sourc address field use send special read request cach data present cach first store drp unit data buffer written cach use destin address also suboper remov queue sinc finish data present cach cach send read request fetch data instead drp unit send read request mmu use sourc address point next suboper suboper queue begin process pend suboper left queue process suboper queue enough entri queue block suboper wait memori access complet data return memori read buffer sourc address field suboper queue search associ use address read buffer obtain destin address size data suboper appropri cach line alloc data read buffer written cach use destin address size block written reloc data cach mark dirti instruct queue suboper queue data element counter cach unit id counter sourc addr dest addr size id array addr buffer addr size data address gener counter precollect prealloc distribut instruct await instruct bu mmu read buffer address data type type block cach buffer addr data addr size data addr size port read port data buffer figur 3 data reloc prefetch unit data path begin process prealloc suboper sourc address field use access cach tag store address miss cach cach line alloc reloc data array data fetch cach line alloc mark clean suboper remov suboper queue prealloc suboper must finish reloc address written comput order insur correct result obtain program execut distribut suboper reloc data read cach use sourc address field entri head distribut queue data present cach place drp unit data buffer data present cach occur nonreloc data conflict reloc data cach cach fetch data instead drp unit send read request mmu use sourc address point next suboper queue begin process pend suboper left queue process data return memori address read buffer use associ search sourc address field suboper queue destin address size field next write request sent cach use destin address data either read buffer data buffer depend whether read reloc data produc cach miss hit respect suboper remov queue data written origin address cach write hit occur memori write miss occur instruct pass instruct queue address gener entri alloc data element counter total number data element use initi counter suboper queue finish process data element element counter decrement one therefor prealloc precollect distribut instruct correspond nonzero data counter entri execut await instruct caus data cach block data counter entri match buffer address identifi reach zero finishup instruct caus data cach block data counter contain zero interlock mechan insur precollect prealloc instruct begin execut previous issu distribut instruct use reloc buffer complet execu tion identifi buffer address instruct head instruct queue use search data counter associ instruct identifi still execut address gener delay previou instruct complet 3 compil support compil support essenti transform sourc code propos scheme improv cach perform impact research prototyp compil 11 support highlevel transform optim superscalar vliw optim schedul 12 well classic machinespecif optim data reloc prefetch optim appli directli loop nest least two deep figur 4a show exampl loop nest illustr differ array access pattern invoc innermost loop array data access innermost loop first reloc prefetch comput proce inner loop finish transform alway appli two innermost loop loop nest nest deepli two case refer outer two innermost loop outer loop innermost loop inner loop highlevel code transform employ data reloc prefetch loop unrol insert drp oper replac array refer reloc buffer refer loop block 31 loop unrol order overlap data reloc prefetch next outerloop iter comput current iter reloc prefetch phase softwarepipelin comput phase softwarepipelin scheme requir two reloc buffer inner loop duplic unrol outer loop shown figur 4b first outerloop bodi data reloc proce second reloc buffer comput perform use data alreadi reloc first buffer second outerloop bodi method use first outerloop bodi except buffer switch data depend inform provid omega test 1314 use insur valid softwarepipelin data reloc comput phase 32 insert oper new oper insert sourcelevel code perform precollect prealloc await distribut finishup oper see figur 4c highlevel oper replac correspond machin instruct assembl code level one precollect andor prealloc oper insert inner loop order reloc case precollect oper fetch data access next iter origin outer loop two oper nonblock execut overlap comput subsequ inner loop figur 4c 0 pointer reloc buffer start address element array b c respect access first unrol outerloop bodi 00 b 00 c 00 point reloc buffer start address array element access second unrol outerloop bodi singledimension datacaches array divid two equal part repres two reloc buffer declar entir loop nest pointer variabl new locat initi start address reloc array one await oper insert inner loop insur precollect prealloc oper complet innerloop array comput begin distribut oper insert inner loop order restor updat data buffer origin locat memori final finishup oper place outer loop order insur distribut oper complet execut proce comput may involv array data 33 replac array refer buffer refer reloc prefetch oper insert array refer comput within inner loop modifi buffer locat access instead origin array locat final version exampl loop transform complet shown figur 4c origin loop nest i0 j0 jn j b loop unrol i0 i2 first outer loop bodi j0 jn j second outer loop bodi j0 jn j c reloc oper insert first outer loop bodi preallocatec 8 n i0 i2 first outerloop bodi second outerloop bodi precollectb0i1 b 8 bd n preallocatec 8 n j0 jn j second outerloop bodi first outerloop bodi precollectb0i1 b 8 bd n preallocatec 8 n j0 jn j figur 4 exampl loop unrol insert reloc prefetch oper 34 loop block loop block optim techniqu partit iter space increas data reus cach therebi reduc number cach miss data reloc techniqu block inner loop use reduc amount data reloc innerloop comput amount larg fit cach consequ singl loop often block even though access pattern data loop bodi affect block transform data depend inform provid omega test use determin loop block valid transform loop nest 4 experiment evalu section effect data reloc prefetch optim techniqu evalu simul set arraybas benchmark 41 methodolog 411 benchmark program benchmark studi consist six numer program adm ocean arc2d perfect 15 matrix300 spec89 tomcatv nasa7 spec92 benchmark profil looplevel obtain number invoc number iter loop order appli transform select effect loop nest contain multipl inner loop return goto break statement exclud well loopnest contain subroutin call possibl sideeffect data depend analysi also use exclud loop specif crossiter depend prevent necessari transform 412 transform correct verif via emul order provid realist evalu drp techniqu first optim code use impact compil classic optim appli ilp increas optim loop unrol superblock format perform code schedul regist alloc optim fourissu scoreboard superscalar processor regist renam regist file contain 64 integ regist 64 doubleprecis floatingpoint regist four function unit pipelin execut type instruct verifi correct code transform emul gener code perform hewlettpackard parisc 7100 workstat precollect distribut instruct emul use machin languag subroutin perform data reloc memori memori instead cach thu transform code must reloc data refer use correct address emul produc valid result time simul also need verifi correct detail oper drp unit sinc emul drp instruct stall processor complet function latenc function latenc memori load 2 fp multipli 2 memori store 1 fp divid sgl 8 branch tabl 1 instruct latenc simul experi 413 simul experi emul drive simul model processor drp unit determin execut time cach perform bu util simul latenc use hewlettpackard parisc 7100 microprocessor given tabl 1 processor model includ separ instruct data cach directmap 8kbyte block cach 16byte block size data cach multiport writeback writealloc cach satisfi four load store request per cycl processor 8entri write buffer combin write request cach line stream data load miss minim load miss penalti instruct cach data cach share common splittransact memori bu 64 bitscycl data bandwidth pipelin memori model use 10cycl latenc directmap branch target buffer 1024 entri use perform dynam branch predict use 2bit counter hardwar specul support branch mispredict penalti approxim two cycl simul model drp unit base descript section 2 howev infinitelys queue buffer model block occur drp unit due insuffici entri also data cach one read one write port dedic servic drp unit access sinc simul entir benchmark program level detail would impract uniform sampl use reduc simul time 16 sampl 200000 instruct length space evenli everi 20000000 instruct yield 1 sampl ratio benchmark use billion dynam instruct least 50 sampl thu 10000000 instruct simul smaller benchmark space reduc maintain least 50 sampl 10000000 instruct experi emulationdriven simul determin sampl least 50 sampl introduc littl error perform estim typic statist gener sampl within 1 gener without sampl 42 experiment result order show full perform benefit drp techniqu experiment result present benchmark program loop nest modifi drp transform result entir transform execut benchmark loop nest percentag filery35j 24 filery38j 23 arc2d tk1j 26 tkinv1j 27 rhsy20j 22 rhsy30j 21 rhsx200j 22 ocean in10 112 main501i 144 cholsky8l 10 copy100 31 tabl 2 origin code loopnest execut time percentag entir program execut time drp transform loopnest benchmark also present evalu current state compil techniqu loop nest select applic drp techniqu 421 individu loop nest result perform statist individu loop nest obtain mark drptransform loop nest execut region simul consequ simul execut entir program suffici gather result transform loop nest context entir program execut tabl 2 show origin code execut time loop nest select drp techniqu percentag total origin code execut time transform loop nest identifi function name fortran outer doloop number loop iter variabl necessari figur 5 illustr speedup origin loop nest execut time drptransform loop nest execut time measur speedup loop nest rel larg demonstr high perform improv obtain use data reloc prefetch techniqu loop nest arc2d ocean tomcatv matrix300 nasa7 figur 5 speedup drpoptim code origin code loop nest figur 6 show data cach miss ratio origin code drpoptim code loop nest sinc writealloc cach use experi miss ratio origin optim code calcul divid number cach read miss number cach read request origin code method calcul cach miss assur fair comparison number cach access transform code differ number origin code ratio includ request initi drp unit sinc cach read stall cpu minim impact perform note cach miss nearli elimin loop nest sinc compil reloc array data referenc loop nest possibl cach miss occur scalar variabl access loop nest prefetch may conflict reloc data caus cach miss sever loop nest arc2d benchmark contain innerloop scalar access contribut nonzero cach miss ration stepfy430 tk1j tkinv1j rhsx200j rhsx200j eigval100j anoth caus cach miss addit memori access introduc regist spill code illustr loop nest eigval100j ypenta13 execut speedup obtain loop nest alway highli correl reduct cach miss ratio complex schedul multipleissu processor memori bu util transform origin loop nest display figur 7 drp unit util unus bu cycl lower prioriti cach access bu case howev precollect prealloc instruct complet time await instruct issu aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa loop nest cach miss 100 200 300 400 500 700 800 900 1000 aaaa aaaa aaaa origin code drp adm arc2d ocean tomcatv matrix300 nasa7 figur miss ratio drptransform code origin code loop nest loop insuffici comput overlap latenc precollect oper even though oper move back across one iter outer loop softwar pipelin thu precollect alway wait use bu free result near 100 bu util loop figur 8 provid evid effect display percentag execut cycl await instruct stall processor transform loop nest notic loop nest 95 bu util also larg percentag cycl stall await 95 bu util fewer stall cycl reduc await cycl improv perform precollect prealloc oper must execut earlier one iter correspond comput 422 entir benchmark result speedup simul execut drptransform code origin code six benchmark given tabl 3 program execut speedup benchmark except matrix300 tomcatv rel small adm nasa7 arc2d small speedup attribut fact percentag execut time spent transform loop nest rel small sinc use overlyconserv loop nest transform criterion guarante correct transform aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa loop nest bu util 100 200 300 400 500 700 800 900 1000 aaaa aaaa aaaa aaaa drp origin code adm arc2d ocean tomcatv matrix300 nasa7 figur 7 bu util drptransform code origin code loop nest loop nest await stall 100 200 300 400 500 700 800 900 1000 36 88 73 500 62 33 432 24 09 509 18 24 40 25 16 16 93 32 33 306 47 290 adm arc2d ocean tomcatv matrix300 nasa7 figur 8 await stall overhead drptransform code origin code loop nest transform execut time benchmark loop nest billion cycl execut execut base drp speedup arc2d 319 9248 8300 111 ocean 198 11165 10512 106 adm 22 1732 1703 102 matrix300 963 3181 1586 201 tabl 3 speedup drptransform code origin code entir benchmark aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa benchmark cach miss 100 200 300 400 500 arc2d ocean adm tomcatv matrix300 nasa7 63 215 373 62 54 155 263 aaaa aaaa aaaa origin code drp figur 9 data cach miss ratio origin code drptransform benchmark ocean processor stall due await instruct sever restrict perform benefit drp techniqu discuss section 421 speedup measur given tabl 3 match close entir benchmark speedup calcul use loop speedup figur 5 loop execut percentag tabl 2 except tomcatv benchmark tomcatv whole program speedup exce weight sum loop speedup nontransform loop benefit cach effect transform loop although transform loop access enough array data replac data entir cach transform substanti reduc space use cach array data sinc data replac cach origin code extens reus opportun transform code allow data effect reus reus result much better cach perform import nontransform loop nest due reduct interarray conflict miss data cach miss ratio show promis improv almost benchmark shown figur 9 bindingprefetch mechan drp techniqu guarante necessari data comput resid cach also compress data reloc buffer increas util cach data resid cach time 5 relat work techniqu call data copi propos investig order reduc cach conflict miss 12 data copi howev benefici perform improv outweigh overhead copi reus data mani time overhead copi data array array signific gener propos method data reloc prefetch benefit data copi reduc overhead copi furthermor unlik data copi data reloc prefetch reloc data cach prefetch minim overhead reloc precollect distribut oper conceptu similar gather scatter oper use cray1 17 cray1 array element gather memori vector regist perform vector oper scatter back memori vector oper complet howev hardwar necessari support data reloc prefetch would much easier add exist processor hardwar support vector 6 conclus architectur extens refer data reloc prefetch propos perform data reloc compress prefetch data reloc use remov arraydata map conflict compress access loop nest sequenti locat cach compress also improv util cach transform nonunit stride array column access sequenti access requir fewer cach line storag furthermor reduct cach space use hold data loop nest increas data reus across transform loop nest combin data reloc prefetch hardwar support compil transform perform loop nest greatli improv set arraybas benchmark also shown applic data reloc prefetch optim greatli improv cach perform perform measur entir benchmark motiv need futur research tune data reloc prefetch techniqu precollect prealloc instruct need move back across one iter outer loop order reduc processor stall caus await instruct addit compil transform expand improv order transform loop nest effect experi warrant studi perform optim use variou implement paramet drp hardwar r cach perform optim block algorithm copi copi compiletim techniqu assess data copi use elimin cach conflict characterist parallel program impact hierarch memori system linear algebra design data prefetch multiprocessor vector cach memori compiletim partit iter parallel loop reduc cach coher traffic effect onchip preload scheme reduc data access penalti design evalu compil algorithm prefetch data access microarchitectur superscalar processor compilerassist data prefetch toler data access latenc regist preload impact architectur framework multipleinstructionissu processor superblock effect techniqu vliw superscalar compil practic algorithm exact array depend analysi elimin fals data depend use omega test perfect club benchmark effect perform evalu supercom puter simul 100 billion refer cheapli cray1 comput system tr cach perform optim block algorithm data prefetch multiprocessor vector cach memori impact data access microarchitectur superscalar processor compilerassist data prefetch effect onchip preload scheme reduc data access penalti practic algorithm exact array depend analysi elimin fals data depend use omega test toler data access latenc regist preload design evalu compil algorithm prefetch copi copi superblock cray1 comput system compiletim partit iter parallel loop reduc cach coher traffic ctr zhong wang timothi w oneil edwin hm sha minim averag schedul length memori constraint optim partit prefetch journal vlsi signal process system v27 n3 p215233 march 1 2001 fei chen timothi w oneil edwin hm sha optim overal loop schedul use prefetch partit ieee transact parallel distribut system v11 n6 p604614 june 2000 rakesh kumar dean tullsen compil instruct cach perform multithread architectur proceed 35th annual acmiee intern symposium microarchitectur novemb 1822 2002 istanbul turkey lixin zhang mike parker john carter effici address remap distribut sharedmemori system acm transact architectur code optim taco v3 n2 p209229 june 2006 luddi harrison examin memori access classif scheme pointerintens numer program proceed 10th intern confer supercomput p133140 may 2528 1996 philadelphia pennsylvania unit state weifeng zhang brad calder dean tullsen selfrepair prefetch eventdriven dynam optim framework proceed intern symposium code gener optim p5064 march 2629 2006 timothi sherwood brad calder joel emer reduc cach miss use hardwar softwar page placement proceed 13th intern confer supercomput p155164 june 2025 1999 rhode greec