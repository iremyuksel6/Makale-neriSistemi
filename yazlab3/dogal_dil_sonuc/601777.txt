decid confluenc order term rewrit system replac b introduct rewrit system tr appli mani problem symbol computa tion autom theorem prove program synthesi verif logic program among other two fundament properti tr termin confluenc togeth ensur exist uniqu normal form henc decid word problem let us take closer look properti termin tr undecid even leftlinear onerul system dau89 howev tr r termin reduct order l r l r 2 r practic generalpurpos method defin standard tr deal inher nonorient axiom like commut axiom therefor gener order tr e rewrit second author partial support nsf grant ccr9712396 int9401087 three author support ccl esprit work group 22457 earlier verion work present lics98 confer includ similar result limit lpo order done appli equat e whatev direct agre hr87 henc order tr handl set equat e termin definit standard choic practic exist generalpurpos path order sinc easili defin implement section 2 character requir need solv word problem order rewrit show obtain simpl way path order confluenc undecid gener termin tr decis procedur given knuth bendix landmark paper kb70 tr confluent critic pair joinabl order tr decid confluenc difficult long stand open question list instanc open problem 64 rta93 list djk93 main problem due order restrict differ instanc critic pair may requir differ joinabl proof prove decid confluenc belong class path order possibl finit analyz joinabl ground instanc possibl new symbol critic pair deal new symbol essenti decid arbitrari word problem also fundament characterist notion confluenc sinc weaker properti ground confluenc ie confluenc rewrit ground term given signatur undecid even termin standard tr kno90 exampl let e consist clearli nonorient singl equat critic pair cp z show confluenc prove everi instanc cpoe joinabl order rewrit e exampl done consid number wellchosen order relat term cover possibl case one hand one consid yoe possibl relat uoe case joinabl follow note suffici consid relat variabl observ mn90 gener pictur simpl previou exampl joinabl proof may one step case order relat consid must compat one previou step also new equal relat may introduc addit subterm rewritten furthermor one show search process attempt joinabl proof case analysi finit cover possibl case follow build critic pair cp arbitrari confluenc tree whose node orderingconstrain equat whose root cp children node obtain three possibl step constrain rewrit decomposit instanti step precis gener right order relat analyz main result final e confluent leav tree tautolog whole process build tree importantli reli exist result order constraint solv also case proof finit tree adapt constraint solv algorithm nie93 extend signatur semant ie new symbol may appear solut recurs path order statu rpo rpo everi symbol assign lexicograph multiset statu lexicograph path order lpo multiset path order mpo obtain particular case rpo make symbol lexicograph multiset respect see eg der82 refin path order like kn kns85 rdo les90 includ well sinc order coincid ground term der87 henc constraint solv algorithm appli emphas decis procedur theoret interest sinc knuth bendix paper late 60 lot work devot complet standard tr order unfail complet order tr eg bdh86 hr87 pet90 mn90 bd94 order complet provabl yield confluent system possibl infinit number iter roughli amount systemat closur tr inclus simplif nonjoin critic pair order enhanc effici complet find finit complet tr whenev exist power method prove joinabl henc redund critic pair crucial precis method abl automat make also possibl decid whether complet finish fact nn93 report use similar tree satur system gnn95 success method prove redund critic pair furthermor case nonjoin instead ad critic pair e one may choos add nontautolog leav tree compar result undecid confluenc arbitrari finit term rewrit system seem quit surpris favour order rewrit sinc extend notion reduct go undecid decid obviou clue result order rewrit alway termin howev pictur simpl instanc also show finit set constrain equat confluenc undecid order rewrit still termin relativ scope decid result also show signific unfortun complet constraint inherit kkr90 nr95 constrain equat appear even start unconstrain one equat e j c constraint c record condit e deriv restrict number critic pair consid arbitrari simplif rewrit allow context problem decid joinabl critic pair rewrit set constrain equat easi simplif arbitrari constrain rule undecid ct97 given term rule l r j c undecid whether instanc reduc go investig use order rewrit classic applic rewrit system proofbyconsist approach prove induct theorem km87 jk86 bac88 result opposit happen case finit rewrit system show ground reduc undecid order rewrit paper organ follow mainli focu decid result decid confluenc first recal section 2 basic notion order rewrit well result order constraint section 3 introduc confluenc tree show solv constraint set normal form deriv decid confluenc section 4 sketch undecid confluenc finit set constrain equat section 5 show ground reduc undecid order rewrit final section 6 state possibl extens implic decid result area order rewrit rpo constraint adopt terminolog notat dj90 set firstord term built alphabet f function symbol x variabl symbol f set term contain variabl multiset set function union intersect multiset defin usual 1 2 also use setlik notat denot x 6j b multiset empti equat multiset two term written posit term string posit integ correspond path tree represent term set posit term written post p posit tj p subterm posit p tu p term obtain replac tj p u posit p topmost symbol term size term denot jtj 1 variabl term ft two term ident written j order distinguish equal symbol equat binari relat set invers symmetr closur reflexivetransit closur transit closur write 0 0 call normal form relat wellfound termin exist infinit sequenc confluent relat contain joinabl relat ffi local confluent relat ffi contain joinabl relat ffi relat term monoton term u posit p strict partial order irreflex transit binari relat order reduct order wellfound monoton stabl substitut impli soe toe oe rang word problem set equat e check given equat logic consequ e denot usual e denot e smallest monoton relat term soe e toe substitut oe 21 order rewrit order term rewrit system tr pair e e set equat reduct order order rewrit relat defin e smallest binari relat e term soe e toe whenev soe toe aim appli order rewrit e solv word problem e built gener univers quantifi wellknown suffic consid ground signatur suffici mani new constant symbol purpos need go slightli beyond consid one new symbol succ follow let 0 constant symbol f constant f 0 ad usual let succ new unari function symbol f let f e denot f fsuccg proposit 1 let e set equat let equat term e built oe substitut fx 1 7 soe standard rewrit termin confluenc r suffic solv word problem theori tr r sinc r r ie uniqu normal form r coincid order rewrit longer case relat e restrict order exampl empti order e empti well henc confluent termin useless purpos necessari condit clearli uniqu minim element wrt econgru class even insuffici e smallest relat contain c b c e confluent termin c differ eequival normal form sinc proposit 1 suffic consid word problem equat prove built literatur problem overcom requir total ground term show weaken suffici orient nontrivi instanc equat ie instanc onestep rewrit proof use e fact suffic consid rewrit proof arbitrari number step lead follow precis character need decid word problem order term rewrit system e confluent termin follow two statement equival 1 uoe e voe oe rang 2 henc word problem e decid proof second statement trivial impli first one convers 2 clearli deriv monoton step decompos zero step e confluenc termin e impli 2 lemma show relev follow set equat built given wellfound monoton order f order rewrit system e ground confluent e confluent f given wellfound monoton order confluent e confluent note classic term rewrit confluenc defin arbitrari extens f new symbol make sens order rewrit without extend accordingli said extens practic henc definit confluenc order tr adequ counterpart confluenc classic tr classic term rewrit order rewrit gap confluenc ground confluenc given order confluenc impli ground confluenc convers fals easi exampl given 0g rewrit system confluent howev f consist 0 f system ground confluent exampl also appli order rewrit system introduc new symbol f e allow form critic peak reduc exampl correspond would fsucc0 e succ0 fsucc0 e 0 distinct normal form succ0 0 next section new symbol succ also use build solut order constraint crucial respect 22 recurs path order statu rpo let order term let congruenc relat lexicograph left right extens lex wrt ntupl defin k well found lex extens multiset denot mul smallest relat extens multiset wrt defin smallest order mul st wellfound mul finit multiset dm79 let f wellfound order f call preced let stat statu function stat f flexmulg rpo order defin follow rpo x x variabl proper subterm els j least one follow condit hold henc nm henc nm rpo mul rpo defin wrt rpo equal permut argument function symbol mul multiset statu rpo reduct order term fulfil subterm properti rpo proper subterm henc also contain strict tree embed relat smallest transit monoton relat emb emb proper subterm lpo particular case rpo lex lexicograph statu symbol simplif order total f f total f rpo total total f lpo total preced standard choic order tr sinc fulfil requir lemma 1 preced total f rpo requir ensur make f lexicograph whenev permut equat possibl context permut thu avoid nonorient f e instanc henc follow assum rpo rpo linear preced f e 0 smallest constant symbol f constant f add one wlog unari symbol succ smallest function symbol furthermor consid order rewrit system e rpo result appli equival order tr e order iff rpo ground term particular case aforement path order kn rdo order lpo use sever time denot rpo symbol lexicograph statu exampl 1 let e set fx zg j henc also succ000 e lpo 0succ00 e lpo 00succ0 latter term irreduc exampl 2 let e set ffx fa e lpo ga fa also rewrit ga b ga 0 ga succ0 etc sinc choic instanti socal extra variabl z long step reduct wrt lpo cours e lpo confluent choic lead normal form equival set confluent term form fs gs gs 0 uniqu normal form clearli 0 effici choic instanti extra variabl like z fact reach normal form one eventu forc chose 0 23 rpo constraint definit notat section consist com90 nie93 nr95 refer detail main result restrict rposconstraint extend signatur semant see need result confluenc follow rpo constraint boolean combin use connect atom order constraint interpret boolean connect usual mean assign oe variabl resp oe assign oe satisfi constraint c oe call solut c sometim write chain also shorthand exampl 3 let oe assign fx 7 succ0 7 succsucc0g oe x constraint fx unsatisfi independ lexicograph multiset statu f interest properti rpo nonvari term relat follow least one conjunct relat form subterm respect jsj rise socal rpo decomposit relat j fs ffl rpo decomposit rpo decomposit form ie constraint impli hs rpo decomposit impli rpo decomposit rpo constraint c without disjunct call rposclos iff 0 x c relat c nonvari term c contain rposdecomposit contain well j exampl 4 suppos f f e g rpo decomposit fx ygx z fx yx yz four rpo decomposit gx yfi z xfi z xfi z z six rpo decomposit fx fy z name xfi z yfi z xfi z yfi z xy fx yz xy yz one rpo decomposit fx yfz x name yz simpl system particular constraint form n n everi strict subterm j least equival relat fs contain pair least transit relat fs contain pair respect equal order constraint deduc follow assum term occur simpl system written sort way occur f multiset statu 1 n equat part simpl system write eqpart tg inequ part denot ineqpart fsoe oe gener simultan unifi eqpart eqpart unifi call pure inequ j ineqpart satisfi problem rpo constraint extend signatur solv np time follow method nie93 key step result follow 1 constraint c effect equival finit disjunct simpl system henc c satisfi satisfi 2 simpl system unsatisfi eqpart unifi 3 simpl system equival ineqpart eqpart unifi 4 pure inequ simpl system satisfi rposclos proof sketch proof last statement sinc less obviou construct use throughout paper first note contain rpo decomposit must unsatisfi sinc close subterm henc must contradict rpo decomposit happen exampl constraint fy revers implic form build solut oe right left ie induct index variabl let oe succ0 see oe inde solut use fact rposclos use induct argument jsj jtj relat shown substitut oe satisfi satisfi relat variabl turn hold sinc succ new smallest symbol see nie93 detail 2 follow previou kind solut call minim solut note alien everi variabl x solut xoe head new 3 decid confluenc order rewrit follow e rpo order tr accord previou section assum term e belong substitut interpret constraint constrain equat pair equat c constraint denot instanc equat oe henc tautolog soe j toe oe critic pair two equat e constrain equat ut posit p uj p variabl newmann lemma state termin relat confluenc equival local confluenc term rewrit resp order rewrit reduc joinabl critic pair follow result essenti due j hsiang rusinowitch hr87 see also bdh86 lemma 2 erpo confluent everi critic pair equat e instanc joinabl ie term u erpo u erpo toe confluenc tree e rpo critic pair tree node constrain equat root children node e j c constrain equat obtain one follow three kind step 1 constrain rewrit e j c rewritten complementari equat e j c roe loe iff loe roe satisfi everi variabl x r occur l xzyxz xzyzx z yx z x figur 1 exampl confluenc tree 2 decomposit e j c rewritten fe c satisfi simpl system fs equival set simpl system c 3 instanti e j c rewritten eoe j ineqpartc c satisfi pure inequ simpl system oe gener unifi eqpartc exampl 5 consid set e critic pair pair yield unsatisfi constraint renam pair confluenc tree root first one automat gener satur system nn93 depict figur 1 note constrain rewrit step associ axiom like one appli root complementari equat alway unsatisfi constraint henc shown three frame node leav leftmost one tautolog henc e confluent last step two rightmost frame node decomposit instanti three node without descend becom leav one step decomposit instanti follow case one rewrit step associ proof plan decis procedur base construct one arbitrari confluenc tree critic pair main result erpo confluent tree tautolog leav purpos first show tree finit lemma 3 easi decid whether leaf tautolog lemma 4 lemma 5 show everi instanc critic pair root rewritten leaf henc erpo confluent leav tautolog sinc instanc critic pair joinabl final harder revers implic lemma 6 everi nontautolog leaf c reconstruct substitut oe necessarili solut c soe toe distinct normal form contradict confluenc sinc e lemma 3 everi confluenc tree finit proof tree finit branch henc konig lemma suffic show everi path finit assum contrari finit number instanti step appli branch sinc reduc number variabl descend node two consecut decomposit step appli node henc must infinit branch constrain rewrit step one follow zero one de composit branch infinit subsequ complementari step sinc number possibl applic equat finit e finit complementari step appli twice posit noncomplementari constraint becom unsatisfi henc must infinit number noncomplementari step kruskal theorem sinc term tree built finit set symbol infinit branch must node e construct tree oe oe c constrain equat c pure inequ simpl system tautolog either c unsatisfi j proof clearli c unsatisfi j tautolog revers direct suppos c satisfi 6j c alien solut oe everi variabl x solut xoe head new symbol succ easi see alien oe unifi two differ term henc soe 6j toe tautolog 2 lemma 5 let confluenc tree root leav tautolog instanc joinabl proof let soe toe instanc soe toe show induct depth tree soe toe joinabl alreadi leaf must tautolog instanc tautolog trivial joinabl otherwis children obtain one three differ step constrain rewrit children sr either instanc one children rewrit one case joinabl follow induct hypothesi subtre smaller depth decomposit children g sinc c equival disjunct toe instanc one children joinabl follow induct hypothesi instanti descend still instanc child joinabl follow induct hypothesi 2 lemma 6 let e rpo order tr let confluenc tree critic pair two equat e nontautolog leaf erpo confluent proof nontautolog leaf c reconstruct substitut oe necessarili solut c soe 0 oe distinct normal form wrt erpo contradict confluenc sinc e first build satisfi rposclos constraint g graph express 0 irreduc let ff alien solut c ff use total order set rpo differ subterm 0 simpl system spine g contain subterm 0 ff solut spine spine first part g add g relat r rib g l j henc r contain variabl spine variabl g spine g sinc ff solut c rff rpo lff otherwis would reduc would leaf imposs ff alien l 6 rpo r rff rpo lff henc ff satisfi g spine rib close g rpo keep ff solut g sinc spine alreadi rposclos done rib r produc new rib form j sinc equal imposs ff alien note variabl sinc variabl alreadi spine complet proof show minim solut oe spine satisfi whole g distinct irreduc wrt erpo suffic show toe rpo soe pair g spine henc variabl proceed induct order pair whose first compon situat spine whose second compon subterm order variabl toe rpo oe sinc contain least one symbol g f g f e 0 variabl induct hypothesi toe rpo igamma1 oe henc sinc head symbol f variabl follow induct hypothesi relat smaller measur sinc g rposclos oe satisfi spine distinct prove also irreduc wrt erpo proceed induct subindic succ0 clearli irreduc 1 ground also irreduc sinc 1 subterm leaf induct step variabl oe succ igamma1 oe irreduc sinc igamma1 oe irreduc induct hypothesi variabl form ft j k k j oe irreduc induct hypothesi henc check reduc topmost posit suppos oe j l show case alien variabl posit l must posit otherwis nonvari posit l would succ mean j lae ae j aeae 0 ae 0 lae rpo rae done lae 6 rpo rae rae lae relat g henc raeoe rpo laeoe impli r rpo l 2 theorem 1 confluenc order tr e rpo let us conclud section exampl applic show complet associ commut axiom yield confluent order rewrit system make use algorithm check confluenc exampl 6 continu exampl 5 consid axiom associ commut binari lexicograph statu symbol axiom handl standard complet commut orient without loos termin confluenc tree exampl 5 show two axiom alon confluent wrt order rewrit sinc leav confluenc tree tautolog may howev add equat leav tree origin set axiom without modifi origin equat theori complet process check order confluenc instanc follow figur 1 may add equat x origin set equat 3 equat present turn confluent wrt order rewrit 10 critic pair consid henc associ confluenc tree tautolog leav depict automat reproduc satur system exampl confluenc also prove mean incomplet method given martin nipkow mn90 method base fact everi instanc oe critic pair cp order variabl cp way sometim one prove confluenc order exampl one cp order x inform need show side cpoe rewrit x 1 oe fact normal rewrit system simpli sort associ right note mani case eg exampl given introduct martin nipkow analysi coars gener even case analysi possibl order subterm critic pair suffic 4 undecid confluenc constrain equat use full constraint inherit order complet gener constrain equat henc would nice abl decid confluenc order rewrit system e rpo also consid case e may contain constrain equat show imposs go unconstrain constrain equat confluenc becom undecid given constrain equat rewrit v use e u rewrit v use instanc soe toe oe confluenc ground confluenc set constrain equat defin accordingli theorem 2 problem confluenc order rewrit finit set constrain equat undecid proof main idea express without refer 0 term contain 0 reduc ground confluenc termin rewrit system confluenc order rewrit respect set constrain equat hand ground confluenc undecid even termin rewrit system reduc ground confluenc problem lpotermin string rewrit confluenc order rewrit finit set constrain equat former undecid kno90 consid system r uv kno90 section 5 involv unari function symbol right hand side reduc variabl system termin termin prove use lpo extend total preced finit alphabet unari function symbol plu constant smallest constant signatur extend signatur f 3 function symbol succ 0 lower end preced let f set equat contain r uv plu follow addit copi rule r uv basic first equat express want solut mfx fx term succ result set constrain equat claim everi term 2 belong accord three last set rule irreduc term f succ 0g 0 everi term set reduc 0 first set rule elimin occurr succ confluent sinc critic pair trivial joinabl moreov reduct relat respect e 0 normal form reach shown induct number rewrit step impli gener claim e confluent iff r uv ground confluent prove undecid first assum r uv ground confluent f e 1 ground confluent show local confluenc assum commut properti 2 ground confluenc joinabl show confluenc convers assum e confluent e 1 confluent term rewritten rule e 1 replac 0 get confluenc r uv 5 undecid ground reduc let us recal term ground reduc wrt rewrit system r iff instanc reduc r definit extend order rewrit replac r e e finit set unconstrain equat ground reduc decid arbitrari finit term rewrit system pla85 show undecid finit set equat theorem 3 problem input finit set unconstrain equat e term lexicograph path order question ground reduc wrt e undecid proof reduc halt problem twocount machin first let us recal comput model determinist two counter machin tupl q finit set state set final state q 0 initi state delta transit function q finit set action consist 1 coupl 1 2 coupl 2 3 tripl 1 q 4 tripl 2 q assum delta undefin state q 2 q f configur machin consist two nonneg integ n state q 2 q move machin configur n possibl iff transit deltaq 1 either 1 increas counter move q 0 2 2 counter zero move q 0 without chang counter valu 3 counter posit decrement move q 0 input machin nonneg integ n correspond initi configur n 0 q 0 machin halt input n iff finit sequenc transit yield configur n follow problem undecid min67 input two counter machin nonneg integ n question n k k 0 figur 2 represent sequenc configur may assum without loss gener q 0 6 q 00 whenev suffic introduc two new state q 0 1 q 0 order encod twocount machin consid alphabet everi symbol q set state machin ternari symbol b unari symbol 0 constant f order accord q state order arbitrari way let n term q 0 n 0 0 x go show n ground reduc wrt set equat defin iff halt n intuit go design e way irreduc ground instanc n encod halt sequenc success configur machin depict figur 2 configur machin n divid set equat 2 part first part independ delta design way sequenc possibl configur necessarili consecut one kept irreduc term second set main one encod comput machin first set equat 1 qx everi non final state q 2 qx everi state q 3 qq 0 everi state q q 0 4 everi state q q 0 5 aqx everi state q equat actual turn rule left right irreduc ground term wrt rule term k 0 term form n k k 0 final state let 1 set ground term follow consid applic rule 1 second set equat equat 7 simpli remov configur consecut success state 7 move counter right way follow array display equat case summar constraint impos rule term 1 equat condit transit constraint result irreduc 9 qx 8 appli left right reduc term qa appli right left term 1 sinc b occur term 1 appli left right reduc term qa 9 appli right left term 1 10 forc put togeth 8 9 10 assum rule irreduc root iff note role b twofold time appear right member rule consid possibl applic equat left right sinc b occur term 1 forc consid particular orient recal follow b minim preced play role order constraint except prevent equal similar way 11 12 forc second counter remain constant ie rule similar equat 812 transit equat condit transit constraint result irreduc 14 qx final design similar rule transit display next array equat condit transit constraint result irreduc 19 qx 22 q0 26 qx 28 qx 29 qx 34 qx instanc equat 18 22 forc transit q 0 first counter 0 transit q 00 counter 0 new valu counter forc equat 19 20 21 case transit q 0 2326 case transit q 00 end get look irreduc term 1 everi pattern qa correspond move n machin 2 6 conclus shown behaviour order rewrit exactli opposit classic term rewrit two import problem confluenc ground reduc confluenc becom decid wherea undecid term rewrit ground reduc becom undecid wherea decid term rewrit result provid interest insight theori order rewrit regard proof confluenc order tr fact show confluenc equival ground confluenc signatur new symbol succ final show decid difficult show termin tr result hold regard applic complet apart alreadi mention introduct also remark decis method work well instead build tree critic pair e j c uj p build eoe j start empti order constraint howev initi constraint c increas effici procedur practic reduc size tree sever question remain open instanc result heavili reli particular class path order class order use context order tr confluenc also decid acknowledg thank r treinen comment earlier version paper r proof consist equat theori equat infer order equat proof solv symbol order constraint firstord theori lexicograph path order undecid simul ture machin leftlinear rewrit rule order termrewrit system termin rewrit rewrit system problem rewrit prove termnat multiset order ing satur system word problem equat theori automat proof induct equat theori without constructor simpl word problem univers algebra deduct symbol constraint proof consist ground confluenc term rewrit system path order prove termin term rewrit system recurs decomposit order lexicograph statu relat order order rewrit confluenc simpl lpo constraint solv method practic result satur full firstord claus experi satur system theorem prove order equal constrain claus complet set reduct constraint confluenc test complet method tr path order prove termin term rewrit system proof consist word problem equat theori termin rewrit simul ture machin leftlinear rewrit rule groundconflu term rewrit system recurs decomposit order lexicograph statu relat order order rewrit confluenc complet set reduct constraint simpl lpo constraint solv method equat infer canon proof proof order theorem prove order equal constrain claus firstord theori lexicograph path order undecid prove termin multiset order problem rewrit satur firstord constrain claus satur system