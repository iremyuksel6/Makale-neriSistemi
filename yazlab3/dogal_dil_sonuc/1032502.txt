softwar trace cach paper explor use compil optim optim layout instruct memori target enabl code make better use underli hardwar resourc regardless specif detail processorarchitectur order increas fetch perform softwar trace cach stc code layout algorithm broader target previou layout optim target improv instruct cach hit rate also increas effect fetch width fetch engin stc algorithm organ basic block chain tri make sequenti execut basic block resid consecut memori posit map basic block chain memori minim conflict miss import section program evalu analyz detail impact stc code layout optim gener three main aspect fetch perform instruct cach hit rate effect fetch width branch predict accuraci result show layout optim code special characterist make amen highperform instruct high rate nottaken branch execut long chain sequenti instruct also make effect use instruct cach line map use instruct execut close time increas spatial tempor local b introduct instruct fetch bandwidth may becom major limit factor futur aggress wideissu superscalar cons quentli crucial develop softwar hardwar techniqu interact deliv multipl basic block processor everi cycl unfortun mani import code hard instanc databas code sever integ spec research support cicyt grant tic0511 author generalitat de catalunya grant aci 97 26 josep l larribapey josep torrella 1998fi00306 aptind alex ramirez commiss cultur educ scientif exchang unit state america spain josep l larribapey josep torrella mateo valero nsf grant mip9619351 josep torrella cepba alex ramirez want thank fellow pbc time effort author want thank xavi serrano help set analyz postgresql univers illinoi urbana champaign usa applic frequent control flow transfer high instructioncach miss rate characterist make suppli high number use instruct difficult task even presenc aid devic like hardwar trace cach htc 4 12 softwar side possibl reorder code memori easier suppli use instruct execut unit code reorder target elimin cach conflict 5 6 8 7 10 13 addit also map sequentiallyexecut basic block consecut memori posit 7 10 13 aspect may increas number use instruct fetch per access futur wideissu superscalar paper focu interact hardwar softwar provid high instruct bandwidth start present fullyautom compiletim code reorder techniqu focus maxim sequenti instruct still tri minim instruct cach miss call techniqu softwar trace cach stc compar result obtain stc obtain htc alon combin techniqu result obtain postgresql databas arcad game spec95 benchmark result show larg code loop determinist execut sequenc like postgres95 databas manag system stc offer similar better result htc moreov combin stc htc obtain encourag result specif number fetch instruct per cycl obtain combin stc small htc compar htc doubl size alon final stc use even combin larg htc due instruct cach miss rate reduct paper structur follow section 2 describ fetch mechan htc section 3 describ character instruct refer stream varieti workload section 5 use simul evalu variou combin stc htc section 6 discuss relat work section 7 draw final remark 2 fetch mechan simul aggress sequenti fetch unit similar describ 12 shown figur 1 core fetch unit model compos interleav instruct cach icach multipl branch predictor bp interleav branch target buffer btb return address stack ra fetch unit design fetch mani contigu instruct possibl limit pose width data path branch predictor throughput work assum limit 16 instruct 3 branch per cycl core fetch unit icach tcach fill buffer fetch commit next fetch address hit next address logic fetch address decod figur 1 fetch unit model use simul complet hardwar trace cach mechan simul n16 m3 two consecut icach line access per cycl allow us fetch sequenti code cross cach line boundari btb access parallel icach use predict address indirect jump subroutin call return address subroutin accur predict use ra assum instruct predecod allow branch control transfer detect target pcrel branch calcul obtain btb use output bp btb inform regard instruct repres control transfer obtain instruct mask select valid instruct fetch icach line gener fetch address next cycl allow fetch unit stop indirect jump break execut sequenc add break bit btb inform fetch unit predict jump address break sequenc summar instruct fetch stop one condit instruct fetch ffl 3 branch fetch ffl branch predict taken ffl indirect jump predict break execut sequenc ffl system call fetch ffl mispredict btb miss high branch predict accuraci use 4kb gag correl branch predictor 14bit histori length extend allow multipl branch predict singl cycl 256entri btb enhanc break bit 256entri ra also simul core fetch unit conjunct basic trace cach model describ 12 complet fetch unit trace cach tcach call hardwar trace cach htc fill buffer read instruct either fetch unit specul trace con struction commit stage nonspecul trace construct store special purpos buffer trace complet store tcach conjunct branch outcom led instruct sequenc lead instruct branch outcom encount futur trace fed directli tcach decod unit fill buffer stop build trace condit core fetch unit except case sequenc break tcach abl store noncontigu instruct contigu memori posit 3 softwar trace cach number use instruct per cycl provid processor broadli determin three factor branch predict accuraci instruct cach miss rate execut noncontigu basic block deal last two problem propos code reorder techniqu use whole memori space softwar trace cach store popular sequenc basic block order avoid sequenc break reorder basic block program chang taken branch nontaken one move unus basic block execut path inlin basic block popular function reduc instruct cach miss rate map popular trace reserv area icach algorithm base profil inform mean result obtain depend repres train input popular execut path given input set need relat execut path differ input set run train set benchmark obtain direct graph basic block weight edg edg connect two basic block p q q execut p weight edg w pq equal total number time q execut p weight basic block w p obtain ad weight outgo edg branch probabl edg bpq obtain w pqw p unexecut basic block prune graph next describ select seed start basic block code sequenc algorithm build basic block trace select seed map algorithm use alloc trace minim instruct cach miss 31 seed select obtain order list seed sort entri point function decreas frequenc execut tri expos maximum tempor local first trace built start frequent referenc function possibl obtain better result seed select base intern structur code show 11 howev access sourc code applic alway grant gain deep understand code time consum task may offer improv larg enough compens effort 32 trace build use weight graph obtain run train set start select seed implement greedi algorithm build basic block trace target increas code sequenti given basic block algorithm follow frequent execut path impli visit subroutin call basic block follow control transfer highest probabl use valid transit basic block note futur examin algorithm use two paramet call exec threshold branch threshold trace build algorithm stop successor basic block visit weight lower exec threshold outgo arc branch probabl less branch threshold case start next accept transit note build secondari execut path seed basic block reachabl given seed includ main secondari sequenc proceed next seed figur 2a show exampl weight graph figur 2b show result sequenc use exec thresh 4 branchthresh 04 start seed follow like outgo edg basic block build sequenc 2b transit b1 c5 discard due branch threshold note transit a3 a5 valid transit start secondari trace a5 successor alreadi visit sequenc end start secondari trace a6 weight lower exec threshold execut threshold b result sequenc weight graph discard trace secondari branch threshold discard branch threshold discard trace main a3 a3 branch probabilitynod weight a8a1106 424302020 uncondit branch fallthrough subroutin call condit branch subroutin return figur 2 trace build exampl code replic order increas code sequenti introduc limit form code replic method allow main execut path subroutin replic call point introduc two new threshold valu execrep branchrep threshold control amount code replic sequenc replic call probabl pass branchrep threshold start basic block sequenc pass execrep threshold exampl figur 2 found new call c1 say a7 would replic sequenc c1 c4 includ a7 a8 main execut path threshold select loop algorithm repeatedli select set valu four threshold gener result trace pass basic block includ previou pass prune newli form trace limit amount code replic pass iter select less less restrict valu threshold build trace group pass decreas frequenc execut valu select exec branch threshold determin number basic block includ pass algorithm gener larger smaller group trace target pack given pass trace similar popular keep total number instruct control paper select exec threshold pass contain approxim 4kb replic code maxim effect code replic use least restrict execrep branchrep threshold 33 trace map shown figur 3 map code sequenc decreas order popular concentr like use code first memori page map popular sequenc close equal popular one reduc conflict among also popular sequenc map reserv area cach leav gap creat conflict free area cfa shield popular trace interfer code popular trace least popular traces000000000000000000000000000000000000111111111111111111111111111111111111111111111 icach size cfa instruct cach icach figur 3 trace map direct map instruct cach map algorithm appli set associ cach minor modif complet studi differ factor determin instruct cach miss reduct offer map code sequenc comparison code map algorithm postgresql databas found 11 4 local studi object stc build compil time popular trace built run time htc also stc target minim icach miss rate time analyz instruct refer stream wide set workload character instruct local execut path determin affect perform offer stc inform intend predict perform increas expect use stc workload refer local affect icach miss rate reduct offer techniqu basic block size number loop determin program execut influenc increas code sequenti accomplish basic block reorder 41 workload use four class workload tri cover wide rang applic common integ float point code commerci workload arcad game recent studi shown commerci workload behav like common integ code like specint set also well known float point code differ behavior integ code workload includ whole spec 95 benchmark use postgresql 632 databas manag system commerci workload xblast 22 arcad game exampl littl studi workload execut simul need develop work done use alpha 21164 processor dec atom trace driven simul use differ input set obtain profil inform obtain simul result ensur improv valid input profil one benchmark run complet train simul 42 code analysi examin profil inform obtain run train set classifi workload attend characterist affect perform techniqu code local amount loop condit branch subroutin call basic block size number sequenc break examin code local determin number static instruct need gather 75 90 99 dynam instruct refer shown tabl 1 total code size benchmark cfa size select 32 64kb instruct cach also shown tabl 1 observ code larg work set like applu apsi fpppp gcc postgr fit even 32kb cach furthermor code exhibit littl tempor local like gcc fit 75 refer 32kb cach select cfa size gather 75 90 instruct refer still leav reason space rest code obvious larger cach allow larger cfa code replic exampl xblast concentr 90 dynam refer 2362 instruct 9448 byte almost fit 8kb cfa use 32kb instruct cach 64kb cach allow cfa grow 16kb next examin code sequenti origin layout observ float point benchmark larg basic block 35 instruct averag lead larg code sequenc 57 consecut instruct aver age meanwhil averag sequenc length integ benchmark usual 12 instruct less 2 consecut basic block execut typic basic block size around 57 instruct dynam refer code cfa size benchmark 75 90 99 size 32kb 64kb 103su2cor 979 1839 4197 129741 8 104hydro2d 1223 1977 5371 125946 8 107mgrid 147 218 1029 112421 4 4 125turb3d 1065 1771 2828 121181 8 8 129compress 243 338 525 21991 4 8 134perl 987 1582 3006 108227 8 147vortex 751 1486 5128 172690 8 24 postgr 2716 5221 11748 374399 xblast 1100 2362 6326 430664 8 tabl 1 number static instruct need accumul 75 90 99 dynam refer total code size includ unreferenc instruct select cfa size instruct cach final examin classif dynam basic block execut benchmark differ type basic block consid shown tabl 2 percentag basic block type execut shown tabl 3 last two column show percentag branch loop basic block behav fix way fbfl alway taken alway taken low proport fix loop branch mean loop execut iter less 20 bb type descript target f fallthrough next instruct j uncondit branch pc rel uncondit branch indirect condit branch pc rel subroutin call pc rel subroutin call indirect r subroutin return indirect tabl 2 basic block type consid chang order basic block program reduc number uncondit branch chang taken condit branch taken one also inlin popular function elimin subroutin call return increment number sequenti execut instruct note number sequenc break due loop branch unpredict condit branch depend organ code consid indirect jump separ way elimin target address unknown may jump unexpect address ever reorder code frequent target address break execut sequenc reduc number loop compil optim like loop unrol use yet includ work consequ stc offer littl advantag code lot loop fix condit branch also code subroutin call benefit fact stc build execut sequenc cross procedur call number predict basic block transit determin fallthrough basic block pcrel uncondit branch condit branch fix behavior subroutin call percentag fallthrough basic block around 1020 code stc perform determin rest basic block class mainli percentag loop basic block criteria expect postgr 34 loop basic block 128 subroutin call 43 condit branch 762 behav fix way one benefit stc hand 32 basic block execut ijpeg end loop branch bare 30 condit branch behav fix way make difficult enlarg execut sequenc among fp code apsi look best candid larg proport fix condit branch loop subroutin call 5 simul result select appropri cfa size bench mark measur increas number instruct execut two sequenc break obtain stc tabl 4 show percentag basic block transit break sequenc averag number consecut instruct execut benchmark origin code propos layout measur run test set number consecut instruct execut repres perform limit sequenti fetch unit even limit bu width branch predictor throughput branch mispredict would still limit taken branch tabl 4 show stc improv perform limit averag origin reorder benchmark bb size break seq len break seq len su2cor 198 52 377 hydro2d 149 69 216 53 283 mgrid 620 89 700 90 688 applu 234 50 465 58 407 turb3d 219 47 467 36 606 apsi 263 55 480 44 594 averag compress 677 58 117 62 109 li 420 49 85 37 112 ijpeg 167 68 244 perl 536 54 100 38 139 vortex 476 55 87 27 176 averag 685 57 116 42 158 postgr 458 51 90 25 183 xblast 525 62 84 27 195 tabl 4 percentag basic block transit averag number consecut instruct execut origin reorder code averag bb size code layout expect fp benchmark bare reduc percentag sequenc break best result obtain hydro2d apsi reduct 2025 translat sequenc length increas 2431 expect due reduc proport loop ex ecut hand mgrid actual increas percentag sequenc break bb transit 89 90 fp benchmark higher proport loop basic block execut integ code obtain sequenc length increas 100 m88ksim vortex postgr xblast meanwhil ijpeg experi notic improv ment roughli correspond expect section 4 gener term integ code experi signific reduct percentag sequenc break bb transit reorder code execut 23 consecut basic block rais averag perform limit 158 instruct 51 fetch unit simul tabl 5 show simul result fetch unit describ section 2 use 32kb instruct cach icach simul code layout core fetch unit combin trace cach tcach 16 32kb code layout either origin code base optim layout correspond cfa xkb cfax present number fetch instruct per access three separ result averag number instruct core fetch unit icach provid averag number instruct tcach provid averag global perform tcach present core fetch unit global perform also separ icach tcach miss rate present term miss per line access two icach line access one tcach line access fetch unit access also present branch mispredict rate final perform metric number fetch instruct per cycl fipc fipc obtain divid fipa estim number cycl per access cpa instruct cach miss caus fetch engin stall increas cpa branch mispredict caus fetch unit fetch instruct wrong execut path effect wast fetch cycl use fix number cycl icach miss assum icach line miss could serv simultan also assum averag number penalti cycl branch mispredict icach miss penalti use 3 6 cycl branch mispredict penalti 4 8 12 cycl depend execut core processor softwar trace cach main effect stc increas fipa provid core fetch unit reduct icach miss rate code show larg improv one number other seem unaffect found unexpect side effect branch predict accuraci exampl reorder code postgr increas fipa core fetch unit 75 103 instruct 103 instruct per access still far away 183 shown tabl 4 perform limit limit bu width branch predictor throughput accuraci taken branch basic block type fix branch 101tomcatv 33 41 31 282 590 02 10 12 920 493 103su2cor 118 59 20 444 253 01 52 53 659 924 104hydro2d 98 16 06 463 391 01 13 13 665 881 107mgrid 52 01 01 132 811 125turb3d 118 64 04 469 293 22 04 26 815 148 145fpppp 198 27 27 563 96 00 45 45 462 169 146wave5 152 17 08 352 319 25 51 76 905 883 126gcc 95 42 22 588 113 40 30 70 399 217 129compress 123 59 130li 211 32 19 398 116 73 39 112 444 508 132ijpeg 138 50 00 437 321 16 11 27 298 351 134perl 211 36 26 459 92 21 67 88 690 534 147vortex 160 62 05 444 178 01 75 76 637 326 postgr 221 25 12 434 34 128 09 136 762 263 xblast 208 10 01 501 112 22 62 84 651 135 tabl 3 percent dynam basic block type workload percent condit loop branch fix behavior increas caus global fipa perform stc alon come quit close htc code exampl core fetch unit provid 101 instruct per access reorder xblast use 16kb tcach origin code obtain 108 instruct per access also observ stc drastic reduc icach miss rate fp integ code larg code like apsi xblast postgr obtain miss rate reduct around 90 final icach miss rate around 1 32kb cach branch mispredict rate increas slightli reorder code reorder code reduc number taken branch introduc zero histori regist gag predictor lead wors util histori tabl exampl branch mispredict rate m88ksim increas 49 79 code reorder mainli due reduct sequenc break 61 27 see tabl 4 hardwar trace cach fact trace provid tcach built fill buffer make fipa provid tcach independ tcach geometri also read instruct form dynam stream make trace independ code layout tcach miss rate seem depend code layout tcach size order reduc tcach miss rate techniqu like partial match 4 propos also reduc number instruct provid htc mechan assum tcach alway abl provid instruct core fetch unit statement may true consid increas fipa perform stc reduc trace length caus techniqu may worth ad function htc compiletim optim obtain similar result htc visibl impact branch predict accuraci stc htc interact best result obtain combin stc htc core fetch unit abl provid instruct tcach miss lower icach miss rate exampl combin stc 16kb tcach vortex provid 122 instruct per access htc provid 113 larger code tcach rememb execut code sequenc core fetch unit use extens case like gcc stc prove use combin small tcach provid better result tcach doubl size alon combin stc larg tcach still improv result larger code fipa increas minimum small one stc htc improv fipa also target reduct cpa minim icach miss small code like hydro2d alreadi low icach miss rate stc use htc provid much better perform case like li increas branch mispredict rate actual hinder perform htc hand largest code like postgr xblast stc alon offer similar better result htc alon case combin compiletim runtim techniqu offer best result rais fipc 59 stc 46 16kb htc 65 combin case use combin stc small htc offer similar better result htc doubl size benefit stc obviou icach miss penalti increas branch mispredict penalti small htc prove use icach miss penalti low conclud larg code loop stc provid better result htc alon combin stc small htc provid similar better result much larger htc alon combin larg tcach stc still abl provid perform improv due reduc icach miss rate setup fipa miss rate branch fipc miss penbr pen bench tcach layout icach tcach global icach tcach mispr 68 612 38 64 base 117 117 008 03 115 114 115 116 hydro2d 16kb base 114 155 154 009 33 03 150 148 150 152 base 91 155 155 008 05 03 150 148 151 152 base 138 138 13 28 118 114 124 123 apsi 16kb base 135 159 153 15 231 28 129 124 135 134 base 133 159 155 14 165 28 130 135 137 136 base 69 69 116 49 32 30 41 35 base 65 138 111 145 369 49 44 40 57 50 base 64 137 119 135 254 49 47 42 61 54 base 77 77 102 100 32 27 37 38 43 gcc 16kb base 71 136 98 124 594 100 35 29 42 42 base 69 136 101 124 516 100 36 30 42 44 base 74 74 01 50 53 46 53 61 li 16kb base 64 135 106 02 404 50 68 58 68 82 base 61 134 111 02 320 50 70 59 70 85 base 117 117 007 97 83 72 83 97 ijpeg 16kb base 97 155 145 01 174 97 96 82 96 114 base 88 155 145 01 144 97 96 82 96 115 base 76 76 78 74 35 31 42 41 vortex 16kb base 67 138 108 81 421 74 46 39 53 55 base 67 137 113 82 347 74 47 40 54 57 base 75 75 93 30 41 39 52 43 postgr 16kb base 72 142 106 100 518 30 53 50 68 57 base 70 142 116 99 357 30 58 54 74 62 63 52 65 81 base 71 71 48 77 39 34 44 45 xblast 16kb base 70 137 108 68 434 77 49 42 56 59 base 68 137 111 72 379 79 49 42 56 59 tabl 5 simul result 32kb instruct cach 6 relat work much work code map algorithm optim instruct cach miss rate work target less aggress processor need fetch instruct multipl basic block per cycl hwu chang 7 use function inlin expans group trace basic block tend execut sequenc observ profil code map trace cach function execut close place page petti hansen 10 propos profil base techniqu reorder procedur program basic block within procedur aim minim conflict frequent use function place function refer close memori also reorder basic block procedur move unus basic block bottom function code even split procedur two move away unus basic block torrella et al 13 design basic block reorder algorithm oper system code run conserv vector processor map code form sequenc basic block span sever function keep section cach address space reserv frequent referenc basic block comparison stc petti hansen method torrella et al method found 11 gloy et al 5 extend petti hansen placement algorithm procedur level consid tempor relationship procedur addit target cach inform size procedur hashemi et al 6 kalamaitiano et al 8 use cach line color algorithm inspir regist color techniqu map procedur result number conflict minim techniqu develop vliw processor like trace schedul 3 also identifi frequent execut path program techniqu tri optim schedul instruct execut core processor perform instruct fetch en gine individu instruct move cross basic block boundari optim ilp execut core processor insert compens code undo wrongli place instruct wrong path taken trace defin logic basic block need actual move order obtain desir effect sens techniqu stc may complementari one optim instruct fetch optim instruct schedul use profil inform hardwar side techniqu like branch address cach 14 collaps buffer 2 trace cach 4 12 approach problem fetch multipl noncontigu basic block cycl branch address cach collaps buffer access nonconsecut cach line interleav icach cycl merg requir instruct access line trace cach requir fetch nonconsecut basic block icach store dynam construct sequenc basic block special purpos cach techniqu requir hardwar extens fetch unit target icach miss rate reduct reli techniqu work examin interact runtim compiletim techniqu regard instruct fetch mechan chen et al 1 examin effect code expand optim loop unrol function inlin instruct cach miss rate also exampl softwar hardwar cooper patel et al 9 identifi branch fix behavior avoid make predict increas potenti trace cach conclus paper present profil base code reorder techniqu target optim instruct fetch perform aggress wide superscalar processor care map basic block program store frequent execut trace memori use instruct cach softwar trace cach stc obtain better perform sequenti fetch unit complement hardwar trace cach htc mechan better failsaf mechan result show larg code loop determinist execut sequenc like databas appli cation stc offer similar better result htc alon howev optimum result come combin softwar hardwar approach number fetch instruct per cycl obtain combin stc small trace cach compar htc doubl size alon storag popular trace instruct cach lead new view fetch unit trace cach tightli coupl content instruct cach trace redundantli store cach effect wast space displac potenti use trace trace cach yet anoth exampl need softwar hardwar work togeth order obtain optimum perform minimum cost r effect code expand optim instruct cach design optim instruct fetch mechan high issu rate trace schedul techniqu global microcod compact altern fetch issu techniqu trace cach mecha nism procedur placement use tempor order informa tion effici procedur map use cach line color achiev high instruct cach perform optim compil improv trace cach effect branch promot trace pack profil guid code posi tion code reorder decis support system optim instruct fetch trace cach low latenc aprroach high bandwith instruct fetch optim instruct cach perform oper system intens workload increas instruct fetch rate via multipl branch predict branch address cach tr ctr code reorder limit branch offset acm transact architectur code optim taco v4 n2 p10e june 2007