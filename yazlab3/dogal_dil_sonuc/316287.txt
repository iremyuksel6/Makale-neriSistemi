domainspecif languag regular set string tree abstractw propos new highlevel program notat call fido design concis express regular set string tree particular view domainspecif languag express finitest automata larg alphabet sometim astronom size fido base combin mathemat logic program languag concept combin share similar usual logic program languag fido compil finitest string tree automata concept runtimeit alreadi appli varieti problem consider complex practic interest present paper motiv need languag like fido discuss design implement also briefli discuss design criteria domainspecif languag learn work fido show recurs data type unif implicit coercion subtyp merg variat predic logic call monad secondord logic m2l tree fido translat first pure m2l via suitabl encod final finitest automata mona tool b introduct finitest problem everywher embed mani layer softwar system often difficult extract solv comput basic observ motiv work present paper recent research us colleagu exploit monad secondord logic m2l finit string tree solv interest challeng problem case result obtain identifi inher regular problem domain thu reduc problem question regular string tree languag success applic today includ verif concurr system 9 8 hardwar verif 2 softwar engin 10 pointer verif 7 work progress involv graphic user interfac regular express extend m2l document logic www role m2l approach provid extraordinarili succinct notat complic regular set applic demonstr notat essenc use describ properti finit state automata regular ex pression grammar would tend cum bersom volumin remov user intuit hardli surpris sinc m2l variat predic logic thu natur use also known nonelementarili succinct notat mention thu formula m2l describ regular set size correspond dfa compar size formula bound finit stack exponenti flip side impress succinct m2l correspondingli nonelementari lower bound decis procedur surprisingli mona implement m2l 5 handl nontrivi formula larg 500000 charac ter due part applic bdd techniqu 4 special algorithm finitest automata 3 care tune implement 11 also turn intermedi automata gener even result subset construct usual big compar automata repres properti reason success applic m2l mona resid common product nich requir specif regular set complic describ mean complic infeas tool basic m2l formal simpl quit intuit earli experi quickli indic formal practic suffer primit domain discours bitlabel string tree fact m2l specif uncomfort similar assembl code program focu explicit manipul bit pattern m2l interpret tree situat even wors sinc theori two successor far less familiar intuit linear sublog similarli earli experi machin lan guag found m2l programm spent time debug cumbersom encod contribut paper propos domainspecif program formal fido combin mathemat logic recurs data type believ new way suggest follow four kind valu finit domain recurs data valu label finit domain posit recurs data valu subset posit show mani common program languag concept like sub type coercion unif make sens underli semant base assign automaton store transform express semant properti allow us view compil process calcul valu determinist finitest automata express evalu calcul number arriv result automata primit object subject oper reflect semant languag view quit differ method behind statemachin formal use verif promela languag 6 languag resembl gener purpos languag express singl finitest machin whose state space transit system construct piecem calcul explor state space view howev similar use regular express text match except implement algorithm avoid construct determinist automata fido implement provid along support tool optim compil m2l mula use sever reallif applic also sourc biggest formula yet handl mona articl motiv explain fido particular discuss type system compil techniqu also give sever exampl taken articl alreadi publish use fido without explain origin design technic consider concern relationship data structur tree automaton represent 3 compil process explain elsewher 2 m2l mona basic m2l simpl syntax seman tic formula interpret binari tree string label bit pattern determin valu free variabl firstord term denot posit tree includ firstord variabl p successor t0 t1 secondord term denot set posit ie monad predi cate includ secondord variabl p empti set union 1 basic predic set membership set inclus 1 logic permit usual connect first secondord quantifi convent leaf posit p p1 sublog string use 0successor mona tool accept formula suitabl ascii syntax produc minimum dfa accept tree satisfi given formula thu satisfi formula equival non empty deriv automaton valid equival total valu free variabl formula encod alphabet automaton thu formula yield alphabet sigma size 2 32 intern represent automata transit function share multitermin sigmabdd bdd techniqu mona tool process formula hundr thousand charact minut 3 motiv small exampl motiv need highlevel notat assum wish use mona prove follow hard theorem everi string ab c eventu follow c state theorem m2l must first choos encod label b c purpos introduc two free secondord variabl label encod accord follow arbitrari schema posit p label correspond bit pattern 00 similarli assign b bit pattern 01 c pattern 10 properti eventu follow c becom formula regular express ab c similar way encod formula theorem formal state implic oe mona tool readili verifi formula m2l tautolog thu prove theorem reason m2l specif much volumin promis appar signific overhead encod automat check consist use bit pattern support encod usual suppli type system m2l string regular set immedi suggest notion type quit common m2l formula implic form oe oe formula restrict string coars regular set provid intric restrict thu highlevel version formula could look like string x ab c keyword string po intend declar free variabl two kind formula read posit p string x p label exist posit q also x p q q label c main formula almost mona version proper use label support compil verifi type checker m2l interpret tree howev intuit analogu regular express program languag know intuit success formal specifi coars regular set tree recurs data type thu adopt wellknown trust program concept highlevel notat use idea may prove theorem follow string x arbitrari recurs data type may cours express directli formula translat volumin best perform automat translat also solv problem mona decis procedur work formula whose domain discours binari tree wherea valu recurs data type tree vari number branch solut rather technic sinc involv bend recurs data type valu shape binari branch tree note regular tree set captur recurs data type consid binari tree node color red green blue subset tree one node color blue recurs data type howev easili captur follow fido specif tree x rgb certainli advanc complic notion data type could similarli adopt 1 ever fido philosophi reli heavili standard program languag concept describ complex structur oper ambit idiom merg seamlessli logic concept describ complex properti structur gener allow finit domain name fido deriv valu node finit domain construct conjunct disjunct enumer scalar type thu alphabet tree automata read recurs data type easili becom larg 4 design paper intend proper languag report explain interest unusu concept fido notat provid domain data type finit domain construct simpl scalar list freeli combin product oper union oper j union two finit domain form requir disjoint thu defin domain valu domain state may written stateab2 complic definit obtain valu ea1a2b3a2b1 mula finit domain valu may unifi use syntax statepcar ps r unif variabl recurs data type quit ordinari except constructor gener singl name finit domain finit domain could cours encod nonrecurs data type chosen separ concept sever reason first distinct tree label seem intuit mani applic second allow oper finit domain tree exampl introduct unif concaten tree would yield undecid formal ism third translat automata finit domain encod bdd wherea tree encod state space often necessari programm control choic exampl linear data type sequenc state valu termin node label done nonlinear exampl denot binari tree notat 110 abbrevi correspond 10 scalar variabl four kind variabl fido introduc exampl domain variabl rang state may declar dom state tree variabl recurs data type variabl x may declar tree xy tree variabl defin space posit thu posit x use denot node declar posit variabl may denot posit either x write po p x valu variabl point node either x case node point either red black similarli set variabl contain posit union xs ys posit space may declar set x quantif variabl quantifi exampl formula comput contain loop may involv quantif string tree finit domain posit 9string x comp 9dom state 9po pq xpq ps qs type type may one four differ kind po set dom tree po kind correspond firstord term ie posit tree set kind similarli encompass secondord term dom kind new compar m2l describ valu finit domain final tree kind extens captur entir tree valu within kind type refin set tree name set data type name exampl type posfxygfrstg denot posit node either tree x root subtre one data type r refin type prove conveni restrict free variabl model express relativ quantif furthermor type structur prove crucial optim implement type rule impos restrict oper languag gener rule boil trivial statement finit set exampl term type setx type setx 1 also term type posxd term pn type tn data type reach along nsuccessor formula decid pure basi type system exampl p type type setx static decis exploit fido compil notat conveni formal notat tendenc becom quagmir detail design fido attack problem three differ way first often conveni implicitli coerc valu differ kind express simpl subtyp structur two type relat subtyp follow finit order tree set dom po posset root read order relat decor coercion function posset comput set posit tree root find root posit tree read comput label posit subtyp structur exploit automat insert coer cion note subtyp structur clearli semant coher coercion uniqu 12 ad coercion singleton po set semant coher would fail second allow implicit cast finit main exampl definit allow valu domain fruit root use directli valu domain veg etabl even though strictli speak express eg castfruitappleveget third allow sensibl default whenev possibl thu name unambigu determin specif mean formal qualifi may dismiss exampl name orang use scalar domain fruit constant fruitorang may written simpli orang specif exampl techniqu consid previou theorem alreadi use number syntact conveni specif compil insert necessari coercion reconstruct explicit code 9po qxtpq readqtc somewhat harder read reallif 12page formula 400 pedant correct automat perform decompil compil writer must also consid need decompil case fido mona specif translat primit logic fine want decid valid iti howev mona also abil gener counterexampl invalid formula mona counterexampl make littl sens fido programm sinc complet differ structur riddl bit pattern consequ fido system provid decompil lift counterexampl highlevel syntax anoth use mona illustr follow section gener specif automata applic fido provid differ decompil express automaton particular kind attribut grammar level recurs data type 5 exampl provid exampl illustr benefit fido notat includ applic aim synthes automata well aim verifi properti case present toy exampl detail sketch larg previous publish applic similar natur synthesi follow exampl consid fragment html syntax syntact correct html specif allow exampl document never contain anchor within anoth anchor confus reader constraint could incorpor contextfre syntax would essenti doubl number nontermin howev easili captur html pars tree valu recurs data type tree express logic formula restrict wish impos anchoru url html j paragraph j rule j listl list follow transit html j anchor 00 7 1 mean node anchor two subtre synthes attribut valu 0 synthes attribut valu 1 simpl idea exploit collabor ericsson telecommun compani formal constraint design architectur 10 verif two specif say distribut system compar mean implic bi implic connect consid simplemind mutual exclus protocol two process share memori turn integ rang 12 task bodi proc1 begin loop b loop exit turn 2 task bodi proc2 begin loop b loop exit c criticalsection2 turn loop fido specif model valid interleav comput simpli ask whether safeti properti hold string ff comput let dom pc pc dom r turn apcr 7 bpcr j validstr x comput formula 8po p x pnext6don let dom st state ps pnextt transst mutexstr x comput formula 8po p xp6cc formula transst end denot binari relat state domain valu hold pair valu simultan match one list case correspond raw mona formula look like p q g0 q notin posp s1 s1p c posp s2 posp s3 posp s4 s0r pos41 s0 s0pc posp s3 posp s4 s0r pos41 osp s0 s0pc posp s1 s1pc posp pos41 s0 s0pc s1t s1pc pos41 s2 posp s3 posp s4 pos41 s0 pos41 s3 pos41 s4 posp s0 posp pos41 s3 pos41 s4 s0r po p s0 posp s1 posp s2 s0pc posp s3 s1pc posp s4 s0r posp s0 s1 posp s2 s0pc po pos41 s1 pos41 s2 s0pc pos41 pos41 s1 pos41 s2 s0pc pos41 s3 pos41 s1 pos41 s2 s0pc pos41 sinc simplist mutual exclus protocol clearli correct formula tautolog ever mistakenli tri verifi proc2 could never enter critic region mutexstr x comput formula 8po p xp6c fido would gener counterexampl computationba1 computationbb1 computationcb1 computationdb1 computationab2 computationac2 computationdon exactli describ comput realist exampl intern event project away mean existenti quanti fier 8 detail account given applic fido languag verif problem pose broy lamport 1994 distribut system describ interv logic easili defin fido evolut system finit segment time model recurs linear data type constructor defin current event thu posit variabl instant thousand event possibl distribut system compar describ type type properti verifi requir 12 page fido specif translat m2l formula size 500000 charact entir differ use fido allow us verifi mani properti pascal program use pointer 7 encod store string use fido formula describ effect program statement automat verifi desir properti exampl follow pro gram perform insitu revers link list color element program case tag color var xyp list begin xnil pxnext xp end system automat verifi result structur still link list conform type list also verifi pointer error occur dangl refer unclaim memori cell howev verifi result list contain color revers order still partial verif clearli serv fine mask filter mani common program error pascal tool add anoth level compila tion simpl pascal program fido specif m2l formula final finitest automata accept encod initi store counterexampl program page fido specif expand 60000 charact m2l formula result automaton cours tini sinc counterexampl largest intermedi result 74 state 297 bddnode direct translat mona would essenti add complex fido compil implement pascal tool 6 implement implement pars symbol analysi type check entir standard way nonstandard everi subterm compil tree automaton intermedi represent m2l formula thu resourc alloc becom question manag bit pattern encod domain valu express m2l formula strive achiev parsimoni strategi sinc everi bit squander may potenti doubl mona execut time concret exampl consid type encod mona requir seven bit two type bit t0 use distinguish type tree enum special null node tree singl group bit g0 use distinguish redblack leaf variant four scalar bit s0 s1 s2 s3 use distinguish valu final domain largest 010 exampl formula macro typetreevar1 p t0 p notin t1 express type tree encod bit pattern 10 null node requir encod arbitrari fanout binari tree exampl tree repres null node doubl line wellform valu type tree describ mona predic tree tree impos proper relationship type valu node descend technic problem predic natur describ recurs avail m2l solv phrase requir univers quantif impos suffici local wellformed properti macro treetreevar1 all1 q pq null wf predic describ relationship singl node immedi descend macro nullvar1 p notin t0 p notin t1 p notin g0 p notin p notin s2 p notin s3 macro typeenumvar1 p notin t0 p t1 macro grouptreeredblackvar1 p notin g0 macro grouptreeleafvar1 p g0 macro grouptreevar1 macro scalarenumvar1 p notin macro scalartreeredblackvar1 macro scalartreevar1 macro succenumvar1 macro succtreeredblackvar1 macro succtreeleafvar1 macro wfenumvar1 macro wftreevar1 p notin s0 succtreeleafp encod simpl induct man ner illustr consid tini formula p2 argument gener term term p kind po gener tupl p firstord variabl constrain formula oe similarli term kind set gener tupl secondord variabl term p2 gener formula existenti quantif correspond discharg regist fairli straightforward task provid similar templat fido construct therebi provid composit semant recip systemat translat concret exampl consid formula tree x tree xleftrightleftr describ regular set tree specif node exist color red encod follow mona formula macro dotrightvar1 pvar1 macro dotleftvar1 pvar1 assum ex1 p rootp treetreep ex0 t01t11g01s01 ex0 t02t12g02s02 t11pos6 t1 t01pos6 t0 g01pos6 g0 s01pos6 s0 analog runtim comput mona finitest automaton gener formula alway guarante ter minat may prohibit expens thu fido compil extens optim mani level case reli heavili type structur fido formula symbol reduc detect simpl tautolog elimin unnecessari variabl quantifi care strategi employ alloc short bit pattern finit domain includ global analysi concret use also discov fido type structur contain wealth inform current exploit mona implemen tation ongo develop effort enrich notion tree automata accommod posit inform deriv fido specif may case yield exponenti speedup mona level 7 fido dsl opinion fido compel exampl domainspecif languag focus clearli defin narrow domain formula monad secondord logic equival automata larg alphabet offer solut classic softwar problem drown swamp lowlevel en code advoc simpl design principl go analog standard program languag con cept use wellknown trust technol ogi phase standard compil includ optim level provid uniqu benefit match librari standard program languag notat con venienc type check global optim develop discov new insight domain new notion tree automata algorithm r specif languag base ws2 hardwar verif use monad secondord logic algorithm guid tree automata monad secondord logic practic model checker spin automat verif pointer program use monad secondord logic case studi autom verif base trace abstract autom logic verif base trace ab straction formal design constraint bdd algorithm cach miss three approach type struc ture tr ctr ander mller michael schwartzbach pointer assert logic engin acm sigplan notic v36 n5 p221231 may 2001 marjan mernik jan heer anthoni sloan develop domainspecif languag acm comput survey csur v37 n4 p316344 decemb 2005