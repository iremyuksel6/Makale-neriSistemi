spars evalu represent spars evalu graph emerg past sever year intermedi represent captur dataflow inform program compactli help perform dataflow analysi effici contribut paper threefold present linear time algorithm construct variant spars evalu graph dataflow analysi problem algorithm two advantag previou algorithm construct spars evalu graph first simpler understand implement second algorithm gener compact represent one gener previou algorithm algorithm also effici effici known algorithm problem present formal definit equival flow graph attempt captur goal spars evalu present quadrat algorithm construct equival flow graph consist minimum number vertic possibl show problem construct equival flow graph consist minimum number vertic edg nphard gener notion equival flow graph partial equival flow graph even compact represent util fact dataflow solut requir everi node controlflow graph also present effici linear time algorithm construct partial equival flow graph copyright 2002 elsevi scienc bv b introduct techniqu spars evalu emerg past sever year effici way perform program analysi spars evalu base simpl observ given analysi problem number statement given program may irrelev respect analysi problem simpl exampl consid version pointer analysi problem eg see 13 1 goal identifi relat may exist pointervalu variabl assign integervalu variabl 10 typic irrelev problem may ignor goal spars evalu simpli construct smaller program whose analysi suffici produc result origin program enabl analysi run faster also reduc space requir perform analysi complex analys like pointer analysi space often bottleneck spars evalu make differ abl complet analysi idea spars evalu born context work done static singl assign 5 6 show ssa form could help solv variou analysi problem constant propag redund elimin effici choi et al 2 gener idea show could use arbitrari dataflow analysi problem express kildal framework 12 idea fact applic analysi problem express variou differ framework gener problem comput extrem fix point collect equat certain form howev sake concret also deal analysi problem express kildal framework context kildal framework interest solv dataflow analysi problem controlflow graph g idea behind spars evalu construct smaller graph h refer equival flow graph whose dataflow solut solut origin graph g trivial recov detail discuss equival flow graph use found 2 11 16 choi et al 2 defin particular equival flow graph call spars evalu graph seg present algorithm construct johnson et al 11 10 defin differ equival flow graph call preliminari version paper appear proceed fourth intern static analysi symposium volum 1302 lectur note incomput scienc page 115 quick propag graph qpg present linear time algorithm construct gener quick propag graph compact spars evalu graph cytron ferrant 4 sreedhar gao 16 pingali bilardi 14 15 improv upon effici origin choi et al algorithm construct spars evalu graph duesterwald et al 8 show congruenc partit techniqu use construct equival flow graph believ standard spars evalu graph pingalibilardi algorithm sreedhargao algorithm linear best worstcas complex among variou algorithm construct spars evalu graph contribut paper follow ffl defin new equival flow graph compact evalu graph ceg present linear time algorithm construct compact evalu graph monoton dataflow analysi problem algorithm two advantag previou algorithm simplic algorithm particularli simpl understand implement conceptu simpl base two graph transform whose correct transpar ob viou implement term simplic deriv fact requir comput domin tree util wellknown strongli connect compon algorithm topolog sort algorithm compact gener compact evalu graph smaller spars evalu graph quick propag graph particular show seg qpg also principl gener util two graph transform mention howev compact evalu graph normal form respect tran format seg qpg necessarili sinc transform make graph smaller sinc transform churchross follow compact evalu graph least small seg qpg ffl reason definit equival flow graph present quadrat algorithm construct equival flow graph consist minimum number vertic also show problem construct equival flow graph consist minimum number vertic edg nphard ffl show util fact dataflow solut requir everi node controlflow graph construct even compact represent call partial equival flow graph present effici algorithm also base simpl graph transform produc partial equival flow graph rest paper organ follow section 2 present notat terminolog use section 3 describ compact evalu graph algorithm construct section 4 discuss graph transform use construct compact evalu graph section 5 compar compact evalu graph previous propos equival flow graph section 6 present result concern equival flow graph minimum size section 7 introduc concept partial equival flow graph present algorithm construct one section 8 briefli discuss concept appli case interprocedur analysi section 9 present comparison work previou work present conclus notat terminolog dataflow analysi problem come variou differ flavor mani differ cosmet paper focu forward dataflow analysi problem result applic backward dataflow analysi problem well also assum transfer function associ vertic controlflow graph rather edg interest identifi dataflow solut hold exit node particular talk dataflow solut node u mean solut hold exit u controlflow graph g direct graph distinguish entri vertex denot vertex set g v g v edg set g eg e entri vertex entryg conveni assum entri vertex predecessor everi vertex graph reachabl entri vertex formal dataflow analysi problem instanc tupl g c semilattic ffl g controlflow graph map gs vertic dataflow function dataflow fact associ entri vertex refer u transfer function associ vertex u function extend map everi path graph function l l p path v 1 defin v k conveni gener definit sequenc vertic even sequenc path graph meetoverallpath solut mopf problem instanc g c defin follow denot set path p entryg u maxim fix point solut problem denot mfpf maxim fix point follow collect equat set variabl fx u j result paper appli regardless whether one interest maxim fix point solut meetoverallpath solut whenev simpli refer dataflow solut statement appli solut assum interest solv dataflow analysi problem controlflow graph g idea behind spars evalu techniqu construct usual smaller graph h along function f set vertic g set vertic h dataflow solut node u graph g dataflow solut node fu graph h impli suffici perform dataflow analysi graph h furthermor graph h map f construct know set node g ident transfer function respect given dataflow analysi problem word reduct valid dataflow problem instanc graph g associ ident transfer function vertic though descript somewhat incomplet suffic later present formal definit equival flow graph compact evalu graph overview goal section explain compact evalu graph algorithm construct graph simpl term without distract formal formal detail present latter section let set node g includ entri node g well node nonident transfer function respect given dataflow analysi problem refer node whose execut may modifi abstract program state mnode node whose execut preserv abstract program state pnode given graph g set idea construct smaller graph equival g explain earlier approach gener equival flow graph appli sequenc elementari transform much like t1t2 style elimin dataflow analysi algorithm 18 9 use two elementari transform t2 t4 name relat t1 t2 t3 transform 18 9 basic transform transform t2 transform t2 applic node u iff u pnode ii u one predecessor let v denot uniqu predecessor node u t2 applic graph obtain g merg u v remov node u edg v u graph g replac everi outgo edg u say u correspond edg transform essenti one outlin ullman18 appli pnode note dataflow solut graph g obtain trivial dataflow solut graph particular dataflow solut node u g given dataflow solut node 2u vg dataflow solut everi node graph transform t4 t4 transform applic strongli connect set pnode set x vertic said strongli connect exist path two vertic x path contain vertic x x strongli connect set pnode graph g graph 4xg obtain g collaps x singl pnode word replac set x vertic new pnode say w replac edg form u edg replac edg form u edg w v delet edg form u note dataflow solut graph g obtain trivial dataflow solut graph 4xg particular solut node u g given solut new node w solut node u 4xg u 62 x algorithm construct equival flow graph take initi graph repeatedli appli t2 t4 transform transform applic show latter final graph produc independ order transform appli let denot final graph produc everi vertex u final graph t2t set su vertic origin graph g either u contain mnode case transfer function associ u graph ident function u contain exactli one mnode v zero pnode case us transfer function graph transfer function v g dataflow solut vertex u g given dataflow solut vertex u refer compact evalu graph g comput normal form present algorithm construct normal form graph respect t2 t4 transform step 1 let g denot initi control flow graph let g p denot restrict g set pnode g g p graph obtain g remov mnode edg incid maxim strongli connect compon g p use standard algorithm let x 1 denot strongli connect compon g 1 topolog sort order topolog sort order impli edg vertex x vertex x j j step 2 appli t4 transform x g collaps x singl vertex w let us denot result graph g 1 note graph g p use identifi set x 1 transform appli start graph g step 3 visit vertic w 1 w k g 1 order vertex w visit check transform applic appli transform let us denot final graph produc w k visit g show later g t2 g obviou complex basic algorithm linear size graph case algorithm actual complex depend implement detail especi detail set implement straightforward implement algorithm run linear time also note simpl algorithm identifi strongli connect compon describ 3 due kosaraju sharir directli gener compon topolog sort order exampl exampl figur 1 illustr algorithm assum interest identifi reach definit variabl x graph g shown figur 1i problem vertex controlflow graph mnode iff entri node contain definit variabl x let us assum node r c g shown bold circl mnode g remain node shown regular circl pnode 1 first step algorithm identifi maxim strongli connect compon subgraph g consist pnode exampl g p one nontrivi maxim strongli connect compon name fa eg remain pnode form strongli connect compon consist singl vertex step 2 next step appli t4 transform strongli connect compon identifi previou step t4 transform appli strongli connect compon consist singl vertex without self loop ident transform henc need appli t4 transform fa eg reduc set vertic new vertex w give us graph figur 1ii later figur vertex gener merg set x vertic origin graph shown polygon enclos subgraph induc set x subgraph shown use dash edg ital font part transform graph shown aid reader step 3 next step visit possibl transform strongli connect compon set vertic h j topolog sort order tri appli t2 transform first visit node w node w two predecessor name r c t2 transform applic w visit b one predecessor name w henc appli t2 transform b obtain graph shown figur 1iii similarli appli t2 transform node f one anoth merg w node h merg g transform applic last node visit j graph figur 1vi normal form g respect t2 t4 transform 4 t2 t4 transform section show appli t2 t4 transform graph order whatsoev applic transform exist result graph uniqu also establish algorithm produc uniqu normal form follow transform denot either t2 t4 transform theorem 1 let 1 2 two transform applic graph g exist transform 1 applic 2 g transform 0 2 applic 1 g 0 proof follow denot vertex obtain collaps set x vertic v x disjoint transform follow straightforward way choos 0 1 1 0 2 2 let us consid two overlap t2 transform 1 2u v 2 2v w choos 0 1 2u v 1 0 2 2u w 2 renam handl merg v u let us consid two overlap t4 transform 1 4x 2 4y choos 0 1 2 let us consid overlap 1 ident transform 0 2 vg 1 2v v 0 2 4y follow theorem t2 t4 transform form finit church rosser system henc everi graph uniqu normal form respect transform show graph g produc algorithm normal form r e f c r f c r f c r c r c r c ii iii iv v vi e e e f e f e f figur 1 exampl illustr algorithm construct compact evalu graph theorem 2 t4 transform applic g proof first observ nontrivi strongli connect set pnode exist graph g 1 henc t4 transform applic graph g 1 clearli applic one t2 transform g 1 creat nontrivi strongli connect set pnode henc t4 transform applic final graph g either consid construct g g 1 assum find t2 transform applic pnode w visit node w word w least two predecessor visit clearli predecessor w must either mnode node w j transform elimin node form w j j henc none w predecessor elimin subsequ henc t2 transform applic w g either 2 5 comparison previou equival flow graph section compar ceg equival flowgraph produc algorithm two previous propos equival flow graph name spars evalu graph seg 2 quick propag graph qpg 11 10 show spars evalu graph compact evalu graph gener origin graph appli appropri sequenc t2 t4 tran format goal present algorithm gener seg qpg rather show seg qpg two mani equival flowgraph gener via t2t4 transform follow ceg least small seg qpg begin defin spars evalu graph say vertex x domin vertex everi path entri vertex pass x say x strictli domin x domin domin frontier vertex x denot df x set x domin predecessor strictli domin domin frontier set vertic defin union domin frontier element let x set vertic defin idf df x 1 limit sequenc call iter domin frontier x denot idf x given graph g set vertic spars evalu graph consist 2 set vertic v idf set edg e idf defin follow exist path x g none whose intern vertic v idf g vertex defin set partitionu follow exist path u v g none whose intern vertic v idf g denot set fug partitionu domin everi vertex partitionu proof let path g none v v idf show u domin v induct consid domin v 1 v 1 df u definit henc v 1 must v idf contradict assumpt df idf x idf x 2 choi et al also discuss coupl simpl optim appli seg ignor discuss later section 7 consid 1 know induct hypothesi u domin v igamma1 u domin v v df u definit henc v must v idf contradict assumpt result follow 2 two differ vertic v idf partitionu partitionv disjoint proof sinc domin antisymmetr relat either u domin v v domin u assum without loss gener u domin v impli exist path ff entri vertex v contain u consid w partitionv definit exist path fi v w none whose intern vertic v idf particular fi contain u concaten ff fi path entri vertex w contain u henc u domin w follow lemma1 w element partitionu result follow 2 lemma 3 v partitionu predecessor w v must partit proof recal assum everi vertex controlflow graph reachabl entri vertex consid path ff entri vertex w let z last vertex ff belong v idf impli w belong partit z also impli v partit z definit partitionz henc z must u lemma 2 2 theorem 3 spars evalu graph produc origin controlflow graph appli appropri sequenc t2 t4 transform proof first show vertex u v idf whole partitionu merg u sequenc t2 t4 transform consid subgraph induc partitionu let c 1 denot strongli connect compon subgraph topolog sort order reduc everi c vertex w use t4 transform let hu denot result graph appli t2 transform vertic w 1 w k order t2 transform applic w follow reason note lemma 3b impli predecessor w graph hu must either u w j appli t2 transform vertic w 1 w u uniqu predecessor henc appli t2 transform w well merg u clear end process everi vertex partitionu merg u repeat process everi vertex u v idf clearli result graph spars evalu graph 2 corollari 1 compact evalu graph gener spars evalu graph appli appropri sequenc t2 t4 transform note applic either t2 t4 make graph smaller transform reduc number node number edg graph henc corollari impli represent produc algorithm least spars one produc choi et al algorithm figur 2 show differ compact evalu graph spars evalu graph exampl graph g present figur 1 seen compact evalu graph gener spars evalu graph appli transform 4fx yg r b e f g h c b c r e f x g h figur 2 compact evalu graph produc algorithm ii spars evalu graph produc previou algorithm also establish result analog quick propag graph defin 10 quick propag graph base concept singleentri singleexit region everi singleentri singleexit r uniqu entri edg edg vertex outsid r vertex insid r let us refer vertex u entri vertex r show proof theorem 3 singleentri singleexit region r consist pnode merg entri vertex use t2 t4 transform sinc quick propag graph construct precis merg singleentri singleexit region consist pnode entri vertic theorem 4 quick propag graph produc origin controlflow graph appli appropri sequenc t2 t4 transform 6 minimum size equival flow graph seen three differ graph name seg qpg ceg serv equival flow graph ie help speed dataflow analysi spars evalu techniqu rais question exactli equival flow graph particular possibl construct equival flow graph minimum size effici section attempt address question present one possibl definit equival flow graph let set vertic graph g given path defin sproject ff denot project ff subsequ x 1 ff consist vertic let oe arbitrari sequenc element say oe spath vertic x iff exist path ff vertic x whose sproject oe use notat xs denot fact spath x usual omit superscript obviou context f function set vertic g set vertic anoth graph h let fs denot set ffx j x 2 sg say hf hi preserv spath ii f onetoon respect 8x 2 sx iii vertex graph g spath entryg g iff fspath entryh fy h say dataflow analysi problem instanc graph g srestrict transfer function associ vertex ident function definit one show hf hi preserv spath srestrict dataflow analysi problem instanc graph g mop mfp solut g recov mop mfp solut h theorem 5 let g controlflow graph set vertic g includ entri vertex g let hf hi preserv spath let g c srestrict dataflow analysi problem instanc g defin f 0 l hm 0 c 0 u defin x ident function otherwis everi vertex u g proof note path ff g project ff sinc transfer function associ vertic ident function let r denot entri vertex g let spathsr u denot set spath r u obvious sinc hf hi preserv spath follow trivial mopf let us consid dataflow equat induc f let u vertex sinc transfer function associ u ident function equat associ u reduc let us elimin right hand side equat variabl x u associ vertex elimin slightli complic cycl involv vertic cycl consist vertic equat vertic cycl togeth impli x two vertic u v cycl henc mutual recurs equat induc vertic convert selfrecurs equat selfrecurs elimin elimin process final transform equat associ vertex w note meet set vertic reach w path consist vertic endpoint sinc assum everi vertex graph reachabl entri vertex clear ssww iff entrygffsww path ff clear dataflow equat f f 0 isomorph reduc simpl form henc maxim fix point solut f f 0 sameth theorem show condit definit 1 suffici ensur dataflow solut g recov dataflow solut h also argu condit necessari fact theorem like hold obvious need condit definit 1 two vertic trivial construct srestrict dataflow analysi problem instanc g solut two vertic differ henc clearli condit ii also necessari similarli vertex g set spath entryg dont correspond set fspath entryh fy trivial construct srestrict dataflow analysi problem instanc g solut differ solut fy henc may defin given graph g set vertic g say hf hi equival flow graph g respect iff hf hi preserv spath 61 algorithm construct vertex minim equival flow graph present simpl algorithm construct equival flow graph consist minimum number vertic possibl algorithm run ojsjjv denot number mnode graph jv j jej denot number vertic edg graph begin notat help relat algorithm base collaps multipl vertic singl vertex earlier algorithm base t2 t4 transform notion equival flow graph introduc let equival relat vertic graph g denot set equival class let u denot equival class vertex belong let denot function v g map everi vertex equival class may occasion omit subscript reduc notat clutter defin quotient graph obtain collaps everi equival class singl vertex follow definit depend set mnode obviou natur definit reason definit becom appar soon graph gs graph h whose vertex set edg set definit eh deserv explan basic idea edg u v g becom edg u v collaps graph howev definit ensur certain edg elimin complet particular u v correspond edg u v self loop retain v 2 similarli v edg direct v project otherwis elimin note t2 t4 transform view simpl quotient graph construct particular correspond equival relat place u v equival class everi vertex equival class similarli 4x correspond equival relat vertic x equival everi vertex x equival class sequenc transform correspond equival relat name transit closur union equival relat associ individu transform sequenc henc compact evalu graph quotient graph respect appropri equival relat defin particular equival relat induc set defin pred u set vertic 2 exist spath u note 2 pred fsg say pred pred v algorithm identifi equival class equival relat collaps equival class singl vertex formal algorithm produc equival flow graph h gs first establish minim claim theorem 6 hf hi preserv spath proof let hf hi preserv spath assum pred x w spath w x definit pred x fw fspath fw fx sinc hf hi preserv spath fw fspath fw fy sinc w spath w sinc hf hi preserv spath pred definit pred henc pred pred x 2 follow theorem construct equival flow graph fewer vertic h g need show h g equival flow graph follow theorem establish gener result name equival relat approxim quotient graph respect equival flow graph theorem 7 preserv spath iff proof let f denot forward implic theorem follow directli theorem 6 consid revers implic first two condit definit 1 follow trivial need show third condit hold recal xs denot fact spath x let r denot entri vertex g need show establish forward implic induct length path r base case trivial sinc frfrfr induct step assum path p r consist n edg whose sproject first consid case consid prefix path p end vertex k path r k consist less n edg whose sproject follow induct hypothesi frf 1 frf 1 consid remain case note presenc path p impli henc x last edg path p r via path edg follow induct hypothesi frf 1 done otherwis h includ edg fx fy follow frf 1 establish revers implic induct length path fr fy h base case trivial sinc r r r induct step assum path p fr fy length n edg whose fs project fs 1 establish r two step proof r first consid case last edg p must edg g sinc path less edg fr fx whose sproject fs 1 follow induct hypothesi r togeth edg x k impli r consid case path less edg fr fs k whose sproject fs 1 follow induct hypothesi proof k k consid suffix path p fs k fy suffix written form fu 1 immedi follow k k u particular impli path q k g whose sproject k follow r easi verifi equival relat correspond t2 t4 transform approxim henc theorem show h gs compact evalu graph spars evalu graph quick propag graph valid equival flow graph identifi equival class present effici algorithm identifi equival class algorithm partit algorithm similar hopcroft algorithm minim finit automata initi start partit node singl equival class refin partit consid everi node one one everi node first perform travers graph identifi rm set node reachabl without go anoth node node u pred u contain everi equival class x refin two equival class set nonempti refin ensur two vertic x left equival class 2 pred pred henc refin done respect everi vertex pred pred two vertic x left equival class refin partit given node done linear time appropri data structur use exampl maintain equival class doubli link list element remov equival class constant time consequ final partit construct time ojsjjv practic might effici first construct compact evalu graph use linear time algorithm appli quadrat algorithm smaller compact evalu graph algorithm similar spirit work duesterwald et al 8 present ojv j log jv algorithm ojv j 2 log v partit base algorithm construct equival graph complex measur base assumpt number edg incid vertex bound constant duesterwald et al algorithm hopcroft algorithm util edg graph refin partit algorithm use path graph consist pnodesto refin step guarante graph produc algorithm minimum number vertic possibl case duesterwald et al algorithm 62 construct edg minim equival flow graph nphard show problem construct smallest equival flow graph becom much difficult one count number edg graph well defin size hf hi sum number node number edg h theorem 8 problem find equival flow graph minimum size nphard proof reduct setcov problem setcov problem 3 follow given finit s2f find minimums subset c f setcov problem known nphard show given instanc x f setcov problem construct polynomi time graph g minimums cover x f gener polynomi time minimums equival flow graph g assum input instanc x 62 f otherwis fxg trivial minimums cover x f graph g consist mnode r entri vertex mnode x everi x 2 x pnode ps everi 2 f pnode exit graph consist edg r everi x edg x p edg everi p exit let hf hi minimum size equival flow graph g assum everi predecessor fexit h vertex form fp sw case h trivial modifi follow without increas size ensur consid vertex fexit h let w predecessor fexit h claim must fp sw reachabl w exist fp sw reachabl w proof consid follow case case 1 w fr possibl sinc hf hi preserv spath case 2 w fm x x clearli x must set 2 f henc must exist edg x ps g sinc hf hi preserv spath must exist path case 3 w fp result trivial follow case 4 w fexit possibl sinc drop edg fexit get smaller equival flow graph case 5 w fu u fp reachabl w could simpli merg w fexit gener smaller equival flow graph henc must exist fp reachabl w us replac everi predecessor w fexit fp sw give minimum size equival flow graph predecessor fexit form fp shown set fs 2 f j fp edg hg minimum size cover x f clearli condit spath preserv impli set must cover x f minimum size cover let c f minimum size cover x f replac predecessor fexit set ffp js 2 cg give us smaller equival flow graph contradict assumpt hf hi minimum size equival flow graph 2 63 discuss let us look result seen far slightli differ perspect seen cycl involv pnode irrelev may elimin eg via t4 transform cycl elimin problem construct equival flow graph becom similar wellknown problem minim comput requir evalu set express set variabl one addit factor need consid oper allow express meet oper commut associ idempot exampl problem may view minim boolean circuit consist say booleanand oper algorithm construct vertex minim equival flow graph essenti elimin common subexpress point view perform dataflow analysi achiev best possibl space reduct one might hope sinc iter algorithm typic maintain one solut everi vertex graph also reduc number meet oper iter algorithm need perform order comput final solut least number necessari elimin unnecessari edg graph reduc number meet oper perform analysi algorithm though provid space save help place nphard result perspect indic achiev effici yet anoth question concern signific nphard result feel may simpler gener minimum size equival flow graph controlflow graph gener structur program graph gener unstructur program nphard result might hold restrict attent structur controlflow graph consid exampl figur 3i mnode shown bold circl graph alreadi normal form respect t2 t4 transform henc compact evalu graph graph howev smaller equival flow graph exist input graph shown figur 3ii note howev graph figur 3i gener use structur program construct contrast consid graph shown figur 3iii graph gener use structur construct case statement ifthenels statement node e f g graph solut correspond node figur 3i case howev linear time t2t4 base algorithm abl reduc graph normal form shown figur 3ii interest question aris whether simpler gener minimum size equival flow graph controlflow graph structur program particular nphard result hold restrict attent structur controlflow graph 7 partial equival flow graph note equival flow graph consid far permit dataflow solut vertex origin graph recov spars graph gener may requir dataflow r f e r r e f figur 3 exampl illustr kind factor algorithm attempt achiev solut everi vertex exampl solv reach definit problem variabl x solut usual necessari node contain use variabl x one use fact construct graph even compact equival flow graph refer gener graph allow us recov dataflow solut specifi set vertic origin graph partial equival flow graph let us refer node dataflow solut requir rnode node dataflow solut requir unod let us refer node pnode unod upnod defin transform use construct partial equival flow graph transform transform t5 t5 transform applic node u u upnod ii u uniqu successor t5 transform structur t2 transform simpli merg node u applic us uniqu successor let v denot us successor graph 5u vg obtain remov node u edg v graph g replac everi incom edg w u u correspond edg w v note dataflow solut node u graph g gener obtain dataflow solut node 5u vg howev okay sinc dataflow solut u requir transform t6 t6 transform applic set unod successor set x node said successor exist edg node x node outsid x x set unod successor g graph 6xg obtain g delet node x well edg incid t6 transform rather simpl say node delet node node reachabl node unod similar prune dead oenod discuss 19 2 gener outlin transform essenti captur optim describ choi et al 2 optim howev requir us relax earlier condit partial equival flow graph construct know noth transfer function associ mnode assum know whether transfer function associ mnode constantvalu function exampl problem identifi reach definit variabl x everi mnode constantvalu transfer function sinc gener singl definit x contain node kill definit x let us refer mnode cnode transfer function associ node constantvalu function transform t7 t7 transform applic cnode one incom edg transform simpli delet incom edg t7 transform may preserv meetoverallpath solut sinc creat vertic unreach entri vertex howev preserv maxim fix point solut theorem 9 t2 t4 t5 t6 t7 transform form finit churchross system proof tediou straightforward 2 algorithm luckili transform significantli interact let us denot normal form graph g respect set t2 t4 t5 t6 t7 transform 2t4t5t6t 7 g let t5 g denot normal form g respect set t5 transform t6 g t7 g similarli defin show theorem proof sketch outlin proof omit detail assum graph normal form respect t4 transform word nontrivi size 1 strongli connect set pnode clearli applic t5 transform creat nontrivi strongli connect set pnode henc graph continu normal form respect t4 transform even applic t5 transform similarli graph continu normal form respect t4 transform even applic t6 t7 t2 transform assum graph normal form respect t2 transform one show graph continu normal form respect t2 transform even applic t5 t6 t7 transform similarli graph normal form respect t7 transform continu even applic t6 t5 transform graph normal form respect t6 transform continu applic t5 transform establish t5 t6 t7 t2 t4 g normal form respect transforma tion 2 present algorithm construct partial equival flow graph given graph g step 1 comput outlin earlier step 2 comput outlin earlier step 3 comput simpli delet incom edg everi cnode g 2 step 4 comput perform simpl backward graph travers everi rnode identifi set x node rnode reachabl delet node edg incid upon step 5 comput set upnod g 4 topolog sort order sinc g 4 normal form respect t4 transform cycl pnode henc topolog sort order upnod must exist visit vertic w k w 1 order appli t5 transform w one successor graph g 5 shown normal form respect transform describ earlier exampl figur 4 illustr construct partial equival flow graph use algorithm assum applic t2 t4 transform appli initi graph use algorithm outlin earlier result graph shown figur 4i assum interest dataflow solut node e shown squar vertic figur remain node shown circl unod also assum mnode constant transfer function next step comput partial equival flow graph appli possibl t7 transform produc graph shown figur 4ii appli feasibl t6 transform produc graph figur 4iii examin remain upnod revers topolog sort order appli t5 transform possibl turn t5 transform applic f appli transform produc normal form figur 4v f r f r f e e e e e iv v e figur 4 exampl illustr algorithm construct partial equival flow graph 8 interprocedur extens discuss spars evalu appli intraprocedur analysi analysi singl procedur program howev idea outlin paper easili extend case interprocedur analysi assum input program consist set procedur controlflow graph vertic graph may correspond call procedur assum part input noncal vertic controlflow graph annot mnode pnode vertic repres procedur call howev annot part input clearli procedur whose node pnode elimin call procedur may mark pnode iter applic idea conjunct algorithm intraprocedur case suffic construct spars evalu represent multiprocedur program absenc recurs recurs complic issu slightli defin procedur p pprocedur node procedur p node procedur may directli transit call p pnode defin p mprocedur otherwis set mprocedur program identifi simpl linear time travers call graph initi mark procedur contain mnode mprocedur travers call graph revers identifi procedur may call mprocedur mark mprocedur well done may mark call node mnode call mprocedur pnode otherwis construct spars evalu represent procedur independ use intraprocedur algorithm 9 relat work precursor spars evalu form static singl assign form 5 6 use solv variou analysi problem constant propag redund elimin effici choi et al 2 gener idea defin spars evalu graph cytron ferrant 4 sreedhar gao 16 pingali bilardi 14 15 improv upon effici origin choi et al algorithm construct spars evalu graph discuss rel effici variou algorithm detail soon johnson et al 11 10 defin differ equival flow graph call quick propag graph qpg present linear time algorithm construct duesterwald et al 8 show congruenc partit techniqu use construct equival flow graph briefli compar work differ algorithm represent term follow three attribut simplic work origin motiv desir simpler algorithm construct spars evalu graph one requir domin tree standard prerequisit previou algorithm construct spars evalu graph johnson et al algorithm 10 requir domin tree prerequisit name identif singleentri singleexit region construct program structur tree subsequ work becam awar log n algorithm duesterwald et al 8 gener spars evalu form algorithm base congruenc partit requir domin tree either believ algorithm simpler understand implement previou algorithm construct spars represent cours domin tree program structur tree applic built way algorithm offer particular advantag term implement simplic compact shown compact evalu graph gener smaller spars evalu graph quick propag graph consequ dataflow analysi techniqu benefit even use smaller represent also present quadrat algorithm construct equival flow graph smallest number vertic possibl may interest complic expens analys pointer analysi may worth spend extra time reduc number vertic graph duesterwald et al present ojv j log jv j algorithm construct equival flow graph believ exactli spars evalu graph also describ anoth ojv j log jv lead reduct size graph suggest iter appli algorithm graph reduc lead ojv j 2 log jv algorithm algorithm construct equival flow graph minim number vertic similar spirit construct even smaller graph effici effici compar effici variou algorithm construct ssa form differ equival flow graph somewhat tricki particular situat worstcas complex measur tell us full stori interest problem construct singl equival flow graph given graph compar algorithm easi linear algorithm due pingali bilardi sreedhar gao johnson pingali well linear time algorithm asymptot optim one could argu algorithm smaller constant factor simplic often howev may interest construct multipl equival flow graph given controlflow graph respect differ set mnode previou observ remain less valid even case equival graph desir one spend build map vertic origin graph vertic equival flow graph linear time algorithm perform compar upto constant factor typic controlflow graph jej ojv j assum interest construct multipl partial equival flow graph given controlflow graph problem construct ssa form fall categori true gener ssa form appear partial equival flow graph equival flow graph particular everi subproblem instanc specifi set mnode well set r node dataflow solut requir subproblem need construct partial equival flow graph map everi vertex r vertex equival flow graph algorithm well sreedhar gao algorithm construct partial equival flow graph origin ssa algorithm 5 6 contrast construct partial equival flow graph parallel share linear time graph travers overhead control flow graph aris practic algorithm usual construct partial equival flow graph sub linear time even though worst case algorithm take quadrat time construct partial equival flow graph henc mani believ practic algorithm faster algorithm alway take linear time everi partial equival flow graph see 17 empir evid support fortun work pingali bilardi 14 15 show origin ssa algorithm adapt best world name linear worstcas complex well sub linear behavior graph aris practic finer distinct differ linear time algorithm like signific one could argu differ unlik signific complex analysi problem cost analysi like domin cost construct equival flow graph problem reach definit problem howev simpl linear time solut case cost construct equival flow graph may signific fraction analysi time distinct could signific hand 7 argu construct equival flow graph fastest way solv simpl analysi problem anyway previou work shown equival flow graph use represent improv perform dataflow analysi algorithm well repres dataflow inform compactli paper present linear time algorithm comput equival flow graph smaller previous propos equival flow graph present quadrat algorithm construct equival flow graph consist minimum number vertic also shown problem construct equival flow graph consist minimum number vertic edg nphard shown concept equival flow graph gener partial equival flow graph extend algorithm gener compact represent simpl partit problem reach definit problem partial equival flow graph directli yield desir solut factor form result present give rise sever interest question appear worth pursu signific nphard result practic minimum size equival flow graph construct effici special class graph gener structur program construct graph transform worth incorpor framework r effici flowsensit interprocedur comput pointerinduc alias side effect automat construct spars data flow evalu graph introduct algorithm effici comput oenod onthefli effici method comput static singl assign form effici comput static singl assign form control depend graph analyz larg program effici inform reduc cost data flow analysi congruenc partit fast usual linear algorithm global dataflow analysi algorithm program tree structur comput control region linear time unifi approach global program optim safe approxim algorithm interprocedur pointer alias apt data structur optim control depend compu tation optim control depend comput roman char iot problem linear time algorithm place oenod effici program analysi use dj graph fast algorithm elimin common subexpress detect program compon equival havior tr effici method comput static singl assign form introduct algorithm automat construct spars data flow evalu graph effici comput static singl assign form control depend graph analyz larg program effici inform safe approxim algorithm interprocedur alias dependencebas program analysi effici flowsensit interprocedur comput pointerinduc alias side effect program structur tree linear time algorithm place myampersandphgrnod optim spars represent dataflow analysi spars function store imper program apt effici program analysi use dj graph optim control depend comput roman chariot problem toward complet transform toolkit compil fast usual linear algorithm global flow analysi unifi approach global program optim effici comput phinod onthefli extend abstract reduc cost data flow analysi congruenc partit ctr stephen fink eran yahav nurit dor g ramalingam emmanuel geay effect typest verif presenc alias proceed 2006 intern symposium softwar test analysi juli 1720 2006 portland main usa