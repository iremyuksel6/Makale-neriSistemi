lightweight reason program correct autom verif tool vari wide type properti abl analyz complex algorithm amount necessari user involv paper propos framework stepwis automat verif describ lightweight scalabl program analysi tool combin abstract model check tool guarante true fals answer sound respect origin system also check effect tool implement safetyinject system b introduct recent year seen increas interest computersupport techniqu analyz correct softwar artifact particular interest caus effect potenti lightweight formal method 18 approach verif consist autom check artifact critic properti eg deadlock secur fair often concentr debug instead assur often lightweight method includ model check 5 techniqu automat verifi properti system given system prop erti model checker buildsth reachabl graph exhaust explor statespac system number industri model checker develop includ spin 15 smv 22 muro 10 althoughmodel check start techniqu verifi hardwar effect appli varieti softwar project ex ampl smv use verifi correct mode logic a7 aircraft 25 tca specif 4 spin appli valid remot object invoc corbagiop 20 check java program 14 mani other model check becam part routin vv process develop lucent new server product 16 appli reason user interfac 12 busi process 19 model check offer potenti pushbutton verifi cation howev potenti easili realiz especi check correct program oppos specif protocol softwar artifact first model check mostli limit finitest system ie everi variabl system finit domain sever model checker allow reason infinitest system execut path system certain depth 13 15 howev system guarante system satisfi desir properti check pro gram analyst util abstract comput either automat hand 16 although highli desir properti hold abstract model hold origin model 6 assur difficult obtain differ abstract built class properti analysi 9 given larg number avail verif techniqu potenti complex expens applic interpret result propos layer approach automat verif depict figur 1 given system properti p would like know p hold would like start verif level 1 fairli inexpens term work requir user term comput resourc requir step result one three conclus p definit true definit fals point verif stop analysi yield inform latter case analyst appli techniqu verif properti true expens analysi properti fals verif step 2 verif step 1 step n verif figur 1 framework automat verif level 2 techniqu expens verif level 1 may help determin whether hold analyst proce appli complex expens techniqu 1 p definit prove definit disprov 2 level exhaust resourc exhaust note precis lost level properti conclud definit hold definit hold verif level proceed level k benefit stepwis verif framework outlinedabov allow us categor exist tool base effect verifi properti complex applic complex metric includ effort need human effort need com puter also allow one util verif effort effect paper discuss verif sequenti program fairli complex properti involv tempor logic arithmet valu variabl eg never less b immedi 2a true howev approach build level 1 verifi first comput abstract behavior program analysi use abstract interpret abstract depend choic properti verifi comput automat even though program may finitest model check abstract system analysi yield true properti hold origin system yield fals properti hold yield mayb analysi inconclus case properti verifi use expens techniqu idea verif presenc abstract explor sever research particular jackson 17 propos model check method analyz infinit specif express z vdm approach defin abstract state space abstract state repres possibl infinit equival class concret state dam 9 demonstr abstract reactiv system abstract transit system preserv certain form combin safetyl properti pardo 24 built abstract concret model system conserv verifi properti express calculu abstract model formula prove fals relat state success refin given formula verifi comput resourc exhaust rest paper organ follow section 2 give overview model check abstract interpr tation section 3 discuss theoret goal work introduc new algorithm program verif system proof correct algorithm given appendix design system describ section 4 section 5 demonstr result use abstract model checker analyz safetyinject sy tem conclud paper summari work outlin futur research direct background section recal basic definit abstract interpret model check 21 abstract interpret abstract interpret 8 9 way symbol execut program use abstract instead concret domain familiar dataflow analysi algorithm eg constant propag live variabl exampl abstract interpret let c concret abstract domain spectiv abstract function ff 2 c map set concret valu abstract valu ff invers concret function abstract valid pair function ff fl form galoi connect exampl perform sign analysi replac set integ sign gamma 0 execut program abstract valu exampl fgamma1345g theta f17g ff howev abstract valu alway determin exactli consid follow exampl fgamma1345g theta f17g repres set fgamma 0g interpret result valu abstract domain finit abstract interpretor act dataflow analyz howev may also want use abstract interpretationto reason infinitedomain variabl order achiev tractabl need ensur abstract converg 1 finit represent infinit set val ue one way abstract set interv take minimum maximum valu set left right bound interv exampl 2 ensur converg finit number step finitedomain abstract converg guarante achiev converg infinitedomain abstrac tion 8 introduc abstract binari oper widen ing denot r repres jump abstract valu 0 ri 1 8 defin widen follow exampl 22 model check paper concern withctl model check automat techniqu verifyingproperti express propositionalbranchingtim tempor logic call comput tree logic ctl 5 system defin kripk structur properti evalu tree infinit comput produc model system standard notat indic formula f hold state model formula hold initi state consid hold model kripk structur consist set state transit relat r theta set initi state set atom proposit p label function l must total function ie 8s 2 state n successor add selfloop intuit 2 label function provid list atom propositionswhich true state use ctl boolean express includ variabl arithmet oper set p atom proposit defin follow p 1 p 2 term atom proposit term defin recurs 1 everi identifi everi constant term 2 term 3 1 2 term 1 mod exp mod exponenti function respect exampl follow atom proposit version ctl ctl defin follow 1 everi atom proposit 2 ctl formula logic connect usual mean existenti univers quantifi e use quantifi path oper x mean next step f repres sometim futur u fore ex ax mean hold everi immedi successor current program state ef af mean hold futur along everi path eman current state eu au mean everi comput path start current state continu hold becom true formal exist path note af j atru u ef j etru u use strong also use abbrevi eg ag repres properti hold everi state everi path eman 0 eg ag defin 3 lightweight model check goal work use abstract interpret allevi state explos problem model check ensur properti verifi abstract system properli interpret origin system goal achiev construct abstract model checker threevalu logic return valu true fals mayb analysi result true fals sound use static analysi build abstract system associ line program abstract set valu program variabl attain control reach point along execut path abstract reduc statespac finitest infinit state system comput complet automat section introduc languag construct program describ process build label transit machin present model check algorithm threevalu logic 31 input languag input languag call c sequenti languag syntax similar c languag includ follow construct booleanandinteg type conditionalcon trol structur els loop input output print fprint scan fscan assign function procedur dynam featur recurs pointer provid languag also allow userdefin compound data structur complet grammar languag avail 11 figur 2 give exampl program written c 32 construct label transit system describ transform program represent label transit system start infinitest program infinit set state 0 2 w initi state r w theta w total access rela tion lt lf truth falsiti label function map state set propositionsthat true fals respect state l c c onetoon correspond assign variabl line code fact attempt verifi program express c need give welldefin formal semant ie describ way construct transform program state 23 defin state map set global variabl valu thu state chang occur least one global variabl chang valu goal construct abstract finit kripk structur everi edg repres state chang program order defin set variabl v let vw v set variabl access lexic scope associ state w 2 w g v set variabl access everi point pro gram thu g set global variabl state w program n1tupl v ln correspond line number state program subset valu concret domain v ctl properti program express term global variabl start analysi pars program build abstract syntax tree ast ast intermedi represent structur program interpreta tion next propag inform variabl global local current scope throughout ast reach fixpoint abstract form map concret state w onto abstract state w ff w 2 2 map onto abstract valu ff result abstract state space w ff w ff 2 w ff n1tupl w notic line number set variabl concret abstract state space ff chosen w ff finit abstract state w ff repres one even infinit number concret state due abstract moreov one state associ line code let r ff transit relat abstract state space r ff w ff theta w ff r ff construct follow label function becom concret domain 8w 2 w assumpt galoi connect framework abstract system least mani behavior correspond concret one typic verif abstract system done either conserv optimist former case provid reliabl neg answer l ff lt l ff f lf latter case provid reliabl posit answer either case one side answer trust goal work ensur get reliabl posit reliabl neg answer ie l ff lt l ff f lf case result abstract finitest program pg order construct abstract kripk structur everi transit correspond chang global variabl defin global variabl chang predic p state py true iff 9x x 2 r ff 9g 2 g st gs abstract valu state x construct abstract aggreg state space ff everi element contain one state w ff involv chang global variabl state involv chang global variabl reach w ff via transit closur r ff denot r ff ff defin recurs follow ffl pw ff true w ff 2 ff 1 int b 12 2 int xy 13 els 3 int main 14 4 int 15 5 int c 16 2 7 8 printxi xy 9 20 printb b figur 2 program fragment note valu global variabl within ff refer l ff l ff f label function map ff 2 ff set atom proposit global variabl true fals state final transit state ff e ff ff theta ff thu defin abstract kripk structur k readi 33 model check algorithm present algorithm receiv kripk structur k ff construct correct propertyexpress version ctl describ section 2 determin whether properti hold system mention previou section want ensur analysi yield reliabl posit reliabl neg answer ie analysi conclud properti true hold origin system analysi conclud properti fals hold origin system order introduc third logic valu mayb thu analysi conclud properti mayb hold system unknown whether properti hold concret system algorithm recurs goe structur properti analysi associ subproperti pair set state ye ye ff set state true formal ff 2 repres set state fals defin similarli also defin predecessor function pred 2 ff given set state q return state reach state q one transit algorithm inspir bultanssymbol model checker infinitest system 3 given figur 3 exam ple properti p q hold state ff ff ye set p q properti hold state ff ff set either p q verifi exp note p hold immedi successor state ff exp hold ff immedi successor p may hold ff gamma nop exclud noexp apuq comput recurs follow apuq true state 0 q hold also true predecessor 0 p hold successor 0 apuq fals state ff iff q hold ff either p hold ff one successor lead q implement figur 4 architectur abstract model checker implement abstract model checker amc 26000line c program figur 4 show architectur procedur check 2 3 return qm 2 3 return qm figur 3 model check algorithm softwar ctl formula input languag describ section 2 3 respect abstract interpretor ai receiv program analysi build kripk structur k use process describ section 3 structur togeth set ctl formula becom input model checker check properti return true formula hold program fals formula hold mayb valid formula establish latter two case model checker also return counterexampl moment counterexampl facil includ line number variablevalu map state formula true ai receiv program interpret start input context consist set valu variabl program statement execut state ment produc output context output context store part state abstract valu finit domain variabl boolean enumer type consist set concret valu variabl attain undef undefin 1 howev valu infinitedomain variabl integ abstract section 2 briefli discuss abstract function ff appli set get interv howev bet 1 breviti discuss treatment undef detail pleas refer 11 ter precis associ infinitedomain variabl finit set interv follow interpreta tion current implement ai set consist 5 interv defin ff union set interv let interv assum without loss gener n fag ff fag ff ff ff ng fag ff encount two set contain one interv first union element set less interv case fa 1 amg one interv union result interv set interv oper unionand differ usual mean widen interv defin section 2 oper set interv ff ff r widen similar addit oper includ comparison arithmet defin formal 11 algorithm use ai analyz condit statement depict figur 5 given input abstract statement execut iexpr true fals stmt stmt f respec tive either execut stmt stmt f base return result abstract state call omega calcul get abstract state correspond take els part f respect execut state ment comput union result output con text omega calcul set c class 21 manipul integ tupl relat set describ presburg formula use symbol execut condit express involv interv procedur evalif evalu iexpr iexpr true execut stmt start get return els iexpr fals execut stmt f start get return els iexpr mayb call omega calcul get f execut stmt start get execut stmt f start f get f return f figur 5 algorithm analyz condit statement exampl suppos run ai program fragment depict figur 2 figur 6 show controlflow graph fragment state associ program line number let input context execut state 11 xy fgamma20 52g fgamma5 8g b f13 2g condit xy 0 evalu mayb therefor call omega calcul determin valu xy input context state 12 14 f0 0gand fgamma20 gamma1 1 52g respect valu b output context state f5 5g f26 26g union obtain f5 25g input context state 15 valu execut state 15 state 16 fgamma3 gamma1 1 8gand fgamma3 gamma1 1 1 3 3 respect point reach limit five interv split done instead union interv get fgamma3 8g proceed execut introduc loss inform precis strictli conserv 11 outputvalu state 17 fgamma3 gamma3 gamma1 8g loop execut fixpoint valu variabl achiev order ensur fixpoint occur finit number step chang valu variabl loop 20 time keep track whether decreas increas iter fixpoint achiev widen valu nonconverg variabl increas decreas lead valu 1 gamma1 respect afterward proceed execut loop ensur depend variabl adequ captur tabl 1 list sever valu variabl b xy attain input context state 9 execut main loop program figur 2 first iter valu f13 13g gamma20g respect following19 iter note maximum valu b xy attain creas wherea minimum valu stay thu widen occur 20th iter chang maximum valu variabl 21th iter bring chang thu achiev fixpoint figur 7 show final kripk structur built controlflow graph figur 6 state associ line number statement chang global variabl origin program withth abstract valu global variabl execut state exampl state 10 figur 7 aggreg state 10 11 figur 6 int xy int b 8 10 true 11 xy 0 14 fals 15 a2 true true 19 print xy int int c 7 912 20 print b true fals fals fals 3 main end true fals figur controlflow graph program figur 2 iter b xy tabl 1 execut loop program figur 2 result kripk structur becom input model checker whose algorithm describ section 3 ex figur 7 kripk structur k ff built program fragment figur 2 ampl model check structur depict figur 7 ctl properti ef b 12 amc return fals first properti violat state correspond line 12 program second properti determin true satisfi state correspond line 12 third properti determin mayb mayb hold state correspond line 14 definit hold state 41 perform given programpg let jv j total number variabl global local n number statement pg worst case ai algorithm occur program jv j loop loop widen exactli one variabl go loop 20 time therefor statement pg chang 20 theta jv j time n theta 20 theta jv j chang altogeth furthermor everi state predecessor chang state union abstract valu variabl prede cessor take n step constant proport number interv associ variabl therefor entir comput abstract interpretor take 20 theta jv j theta n theta theta n gamma 1 theta jv j step ojv comput perform model checker let jp j length properti p among ctl mula au complex algorithm q chang valu n time fixpoint reach take step comput q predecessor time verif properti take theta n gamma 1 step therefor total run time model checker check formula p ojp j theta n 2 5 case studi determin effect abstract model checker analyz simplifi version safetyinject system 7 safetyinject embed system monitor water pressur inject coolant reactor core pressur fall certain threshold manual control oper use prevent system inject coolant caus system overridden reset switch prevent system overridden system input valu water pressur output boolean condit signifi whether inject coolant addit maintain intern state reflect water pressur water pressur fall threshold low system pressur level becom low water pressur rais permit system pressur level becom high otherwis level within permit rang implement safetyinjectionsystem 200 line c program 8 global variabl close reflect specif waterpr type integ block reset type boolean inject type boolean overridden type boolean constant low permit toolow permit high pressur type integ system allow enumer type last three constant use indic symbol valu pressur implement also includ 7 function 8 local variabl specif languag system express enough captur complex properti safetyinjectionsi tem 1 agreset pressur 2 agreset 3 agblock reset pressur 6 high 4 permit waterpr permit axwaterpr permit exampl properti 2 state system inject coolant pressur lowand reset button press wherea properti 4 state whenev pressur permit water pressur rais allow thresh old system eventu transit state pressur high verifi properti sun ultrasparcii 4 400 mhz processor 4 gb ram entir verif effort includingbuildingth abstract kripk structur check properti took 392 second user 620 second system modelcheck yield true four properti final kripk structur consist abstract state safetyinject verifi two research group bultan 2 built infinitest symbol model checker use binari decis diagram bdd system linear constraint reason model presburg arithmet model checker also use omega librari togeth abstract interpret achiev finitetim converg analysi properti verifi optimist allow fals posit addit procedur partial converg depend structur program formula verifi approach util abstract statespac reduc tion bultan verifi properti 1 2 abl determin exact size model bharadwaj heitmey 1 analyz scr specif use spin 15 model checker techniqu allow finitedomain variabl includ integ subrang enumer type size concret state space reduc two meth od elimin variabl relev properti verifi scr ensur depend variabl form partial order replac input variabl predic latter approach make verif conserv allow fals neg unabstract system properti 1 2 spin perform onthefli ver ific without build complet state space consist 17 million state wherea combin abstract bring state space 650 state 6 summari futur work paper propos framework stepwis automat verif describ implement cheap particularli precis model checker model checker verifi infinitest sequenti program written subset c ctl formula contain arithmet op erat appli propertyindepend abstract interpret creat abstract kripk structur use extrem compact structur verifi properti loword polynomi time usercr abstract nec essari verif alway converg guarante sound model checker yield true properti hold concret system yield fals properti hold approach limit analysi program appli finitest infinit state specif equal well also believ tighten code model checker make state encod symbol improv run time howev result work limit sever way 1 implement tool handl complex construct input languag includ recur sion userdefin data type dynam memori alloc pointer etc also current limit verif sequenti program 2 tool interact omega librari handl oper integervalu variabl thu reason floatingpointnumb current support 3 one builtinlevel abstract provid system 4 input languag subset c formal semant particular notion state transit poorlydefin chose associ state valu global variabl state transit chang valu global variabl perhap flexibl way determin granular state transit appropri 5 model checker return mayb determin whether properti hold system believ reduc number case verif inconclus improv reason abstract valu andor choos propertyspecif abstract shortterm futur work hope extend modelcheck reason ctl 5 combin branchingtim lineartim oper strictli express ctl would also like address issu state granular either ask user specifi global variabl constitut state add languag construct explicitli state begin end state either via beginstateendst via ad notion time timetick state occur consecut timetick acknowledg would like thank ric hehner radu iosif read earlier version paper mark pichora albert yu daniel hous mani interest discuss acknowledg financi support nserc postgradu scholarship appendix section give proof correct algorithm check au see 11 proof correct algorithm let ff indic model checker return true fals check formula oe state ff abstract model ff assum model state concret pro gram respect express state model checker sound respect ye answer prove 1 2 1 proof induct length path ff state hold ih let set state reach n step assum 8t ff prove formula hold path length n consid case cover base case 2 au hold state ff either 1 occur path eman ff 2 path eman ff first occurr state hold algorithm expand follow case 1 case case 1 start set state true recurs intersect state successor hold result set state never reach ie 2 result set state neither hold ie r model check complet requir specif use abstrac tion verifi system integ constraint boolean predic composit approach symbol model check infinit state program use presburg arithmet decoupl synchron local control effici symbol model check statechart automat verif finitest concurr system use tempor logic specif model checkingand abstract document safeti critic softwar static determin dynam properti program abstract interpret reactiv system muro verif system analyz infinitest program abstract interpret model check graphic user interfac use abstract verisoft tool automat analysi concurr reactiv softwar model check java program use java pathfind model checker spin practic method verifi eventdriven softwar abstract model check infinit spec ific lightweight formal meth od model check manag valid remot object invoc object migrat corba giop use promelaspin omega calcul librari symbol model check abstract dynam semant c automat abstract techniqu proposit calculu model check ing feasibl model check softwar requir case studi tr ctr steve easterbrook marsha chechik benet devereux ari gurfinkel albert lai victor petrovykh anya tafliovich christoph thompsonwalsh chek model checker multivalu reason proceed 25th intern confer softwar engin may 0310 2003 portland oregon marsha chechik benet devereux steve easterbrook ari gurfinkel multivalu symbol modelcheck acm transact softwar engin methodolog tosem v12 n4 p371408 octob