construct compact model concurr java program finitest verif technolog eg model check provid power mean detect concurr error often subtl difficult reproduc nevertheless widespread use technolog develop unlik tool provid autom support extract requir finitest model directli program sourc paper explor extract compact concurr model java code particular show static pointer analysi tradit use comput alia inform optim use greatli reduc size finitest model concurr java program b introduct finitest analysi tool eg model checker automat detect concurr error often subtl difficult reproduc tool appli softwar finitest model program must construct model must accur enough verifi requir yet abstract enough make analysi tractabl paper consid problem construct model concurr java program consid java explos internet applic java stand becom domin languag write concurr softwar new gener programm write concurr applic first time encount subtl concurr error heretofor plagu mostli oper system telephoni switch develop java use monitorlik mechan thread synchron simpl describ difficult use correctli colleagu teach concurr copyright c fl1998 associ comput machineri inc permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit direct commerci advantag copi bear notic full citat first page copyright compon work own other acm must honor abstract credit permit copi otherwis republish post server redistribut list requir prior specif permiss andor fee java program found half student wrote program nest monitor deadlock ideal analysi tool could extract model program use model verifi properti program eg freedom deadlock practic extract concurr model difficult autom complet order obtain model small enough tractabl analysi analyst must assist exist tool specifi aspect program model particular represent certain variabl often necessari make model suffici accur variabl must often abstract restrict make analysi tractabl although model restrict rang variabl repres possibl behavior program thu technic use verifi program properti convent wisdom concurr error present small version system6 9 thu model still use find error test previou work concurr analysi softwar use ada 7 13 12 2 3 8 although aspect method also appli java program java languag present sever new chal lengesopportun 1 due objectori style typic java pro gram variabl need repres field heap alloc object stack static alloc variabl common ada 2 java thread must creat dynam thu imposs gener determin mani thread program creat although ada task may creat dynam mani concurr ada program contain static alloc task 3 java lock mechan synchron access share data exploit reduc size model main contribut paper show static pointer analysi use reduc size finitest model concurr java program method employ virtual coarsen 1 wellknown techniqu reduc size concurr model collaps invis action eg updat variabl local protect lock adjac visibl action static pointer analysi use construct approxim runtim structur heap statement inform use identifi heap object actual local thread lock guard access variabl paper organ follow first provid brief overview java concurr featur section 2 section 3 defin formal model transit system section 4 explain size model reduc virtual coarsen given certain inform runtim heap structur avail explain collect inform use static pointer analysi section 5 section 6 show use heap structur inform appli reduct final section 7 conclud concurr java java essenti concurr featur illustr familiar bound buffer system shown figur 1 java thread instanc class thread subclass thereof creat use alloc ie new constructor thread take paramet object implement interfac runnabl essenti mean object method run thread start call start method thread execut run method object although thread may assign prioriti control schedul paper assum model thread equal prioriti schedul ar captur possibl execut exampl program begin execut static method main main thread creat instanc intbuff creat instanc produc consum point intbuff creat instanc thread point produc consum start thread execut run method produc consum produc consum thread putget integ share buffer two type synchron bound buffer problem first access buffer mutual exclus everi java object implicit lock thread execut synchron statement must acquir lock object name express execut bodi statement releas lock bodi exit lock unavail thread block lock releas acquir lock current object method bodi common idiom may abbrevi simpli place keyword synchron method signatur second type synchron involv wait caller put must wait space buffer caller get must wait buffer nonempti entri precondit oper check fals thread block object execut wait method releas lock method chang state object way precondit might true execut notifyal method wake thread wait object thread must reacquir object lock return wait 3 formal model model concurr java program finitest transit system state transit system abstract state java program transit repres execut code transform abstract state formal transit system pair heap structur thread thread consum produc intbuff int data buf buf public class intbuff protect int data protect int count 0 protect int public intbufferint capac new intcapac alloc array datalength size array capac public void putint x synchron count datalength buffer full datafront count 1 buffer empti public int get synchron count wait wait buffer empti int count datalength 1 notifyal buffer full return x public class produc implement runnabl protect int next 0 next int produc protect intbuff buf public void run true public class consum implement runnabl protect intbuff buf public void run true int public class main public static void mainstr arg new new threadnew producerbufstart new threadnew consumerbufstart figur 1 bound buffer exampl transform state variabl loc1 loc2 locat thread 12 lock state lock 0 free 1 taken x valu program variabl x initi 1 thread 1 1 lock 2 3 unlock 4 thread 2 5 lock state space fragment state loc1 loc2 lock x figur 2 exampl transit system dn set state state assign valu finit set state variabl rang finit domain transit relat defin set guard transform state variabl call guard boolean predic state call transform map state state g true sometim write trace transit system sequenc transit method construct transit system repres java program similar method present 5 construct untim transit system repres ada program state variabl use record current control locat thread valu key program variabl runtim inform necessari implement concurr semant eg whether thread readi run block object transform repres execut bytecod instruct thread depthfirst search state space use enumer reachabl state anal ysi state successor gener readi thread repres thread execut small exampl figur 2 give flavor translat java heap must also repres bound number state model limit number instanc class includ thread may exist simultan paper assum limit provid analyst class c instanc limit kc program attempt alloc instanc class c point kc instanc still access java use garbag collect transit system goe special trap stateth model repres behavior program beyond point discuss introduc tion restrict model still use find error consid bound buffer exampl figur 1 could gener restrict model program repres variabl restrict rang restrict variabl repres content buffer f0 1g variabl repres size buffer f0 1 2g would obtain restrict interest model program ie one would like contain concurr error reduct transit system produc method sketch section 3 much larger requir analys often larg construct instead construct reduc transit system use analysi reduc size transit system use virtual coarsen 1 wellknown techniqu reduc size concurr model amalgam transit sinc use interleav model concurr reduc number transit thread greatli reduc number possibl state elimin interleav collaps transit sequenc reduc transit system construct classifi transform defin visibl invis compos maxim sequenc invis transform given thread visibl transform follow sequenc transit state gener compos transform form exampl figur 2 might replac transform t2 t3 singl transform t2 ffi t3 updat x releas lock could elimin control locat 3 domain loc1 assum requir verifi test specifi stutteringinvari formula f linear tempor logic ltl 11 atom proposit state variabl 2 statement true state transit system use reduc transit system 1 equival origin transit system purpos verif specif 2 2 construct directli program without first construct note reduc model construct specif thu reduct must repeat properti verifi classifi transform invis compos successor transform show chang truth valu f construct appli tempor oper state predic boolean combin atom propo sition let pm state predic f fobserv state denot pf vector boolean give valu transform fobserv chang fobserv trace s0 defin sequenc f observ reduc combin consecut ident ie stutter fobserv easi show set reduc fobserv sequenc determin truth valu f s0 therefor satisfi condit 1 construct reduc transit system set reduc fobserv sequenc origin transit system satisfi condit 2 must without construct must classifi transform vi ibleinvis base inform obtain program code give two case transform repres java code made invis case need inform structur heap runtim appli reduct show collect inform section 5 41 local variabl reduct state variabl access particular thread run exampl program variabl local scope particular thread languag seman tic also state variabl record control locat thread access thread transform access exclus state variabl may made invis provid fobserv understand consid transform figur 3 assum fobserv access variabl local thread whose code repres let 0 repres code thread execut immedi follow code repres replac 0 ffi 0 multipl successor say replac 0 prove reduct chang truth valu f must show result transit system set reduc fobserv sequenc origin transit system state s1 enabl may one sequenc transform repres execut code thread ie thread combin 0 elimin trace occur 0 elimin reduc fobserv sequenc howev sinc execut must produc reduc f observ sequenc execut access variabl t1 independ commut state s1 enabl fobserv trace obtain execut must reduc fobserv sequenc trace obtain execut use techniqu would like determin variabl local particular java thread ie referenc thread program variabl local thread 1 variabl stack alloc ie declar method bodi formal paramet 2 variabl static alloc referenc one thread 3 variabl heap alloc ie instanc variabl object object access one thread exampl variabl next class reduct reduct figur 3 reduc combin 0 produc figur 1 access produc thread case 1 trivial detect case 2 difficult due dynam natur thread creation though follow conserv approxim reason static variabl may consid local access code reachabl 1 main code reachabl singl run method class pass thread alloc alloc outsid loop recurs procedur exampl variabl next static member class produc sinc variabl access code reachabl produc run method sinc one instanc produc creat analysi could determin next local produc thread case 3 difficult clearli object contain variabl access stack static alloc variabl local specif thread case 1 2 heap alloc variabl also local thread determin requir inform access heap object runtim 42 lock reduct propos anoth techniqu virtual coarsen base java lock mechan transform updat variabl x instanc class c may made invis provid fobserv exist object x thread access x hold lock x x may instanc c contain x say lock x protect x intuit behind reduct even though thread may access x current thread releas lock x thu chang x need visibl lock releas correct reduct shown use diagram figur 3 reason similar local variabl reduct assum nonloc variabl access protect lock thread whose code repres must hold lock variabl s1 therefor although exist transform repres code thread access variabl transform sequenc sinc thread would block reach transform assum f refer state share ob ject reduct allow us repres complex updat object two transform bound statement reachabl statement 0 exist path program control flow graph 0 ie thread might execut execut 0 heap structur object programm object salarylock hourslock public class programm protect long hour 80 protect doubl salari 500000 protect object hourslock new object protect object new object public void updatehourslong newhour synchron public void updatesalarydoubl newsalari synchron figur 4 exampl split lock buffer exampl execut put get updat sever variabl yet repres call transform acquir lock transform atom updat state buffer releas lock order appli reduct need determin lock protect variabl clearli instanc variabl class access within synchron method class variabl protect lock object contain nevertheless common variabl protect lock object instanc bound buffer exampl array object referenc instanc variabl data protect lock enclos intbuff object common design pattern known contain 10 object x conceptu 2 nest object place refer x access x within method anoth common design pattern lock protect variabl object split lock 10 class might contain independ set instanc variabl may updat concurr case acquir lock entir instanc would excess limit potenti parallel instead set instanc variabl lock usual instanc root class object exampl given figur 4 two thread could concurr updat programm hour salari gener determin lock protect variabl requir inform structur heap runtim collect inform topic next section 5 refer analysi section describ static analysi algorithm construct approxim runtim heap struc ture collect inform need reduct understand runtim heap structur import problem compil optim sinc accur knowledg alias improv mani standard java allow physic nest object optim one common approach construct direct graph program statement repres finit conserv approxim heap structur control path end statement sever differ algorithm propos differ method approxim algorithm extens simpl algorithm given chase et al 4 use basic approach extend chase algorithm three way first handl chase algorithm sequenti code second distinguish current summari heap node allow us collect inform onetoon relationship object third handl array 51 program refer analysi repres multithread program set control flow graph cfg whose node repres statement whose arc repres possibl control step one cfg thread one cfg main method kc ident cfg run method class c recal kc instanc limit class c paper handl interprocedur anal ysi assum procedur method call inlin limit analysi program static bound recurs polymorph call inlin use switch statement branch base object type tag sinc tag model analysi method call might dispatch explor algorithm requir concept loop block statement let loop innermost enclos loop statement nest within null loop set fs 0 jloop loopsg call loop block analysi model refer variabl valu refer pointer heap object heap object contain fix number field refer heap object model field refer type class instanc number field equal number instanc variabl refer type possibl zero array number field equal zero array primit type one array refer latter case array element repres singl field name java refer manipul four way new alloc return uniqu new refer field select field updat refer check equal last oper irrelev analysi 52 storag structur graph storag structur graph ssg finit conserv approxim possibl pointer path heap particular statement two type node ssg variabl node heap node one variabl node static alloc refer variabl stack alloc refer variabl scope one two heap node alloc eg new c program depend locat statement relat within loop block differ threadcfg ssg contain current node repres current instanc class cthe instanc alloc current iter loop block statement ssg contain summari node repres x f f z f 1c 2c 2c class c class two field c xyz stack variabl method bodi 1 2 3 4 5 figur 5 ssg statement 4 summar instanc class call instanc alloc complet iter loop block heap node fix number field edg may direct edg ssg statement repres possibl refer valu edg direct variabl node field heap node toward heap node gener one edg may leav variabl node heap node field sinc differ path may result differ valu refer even one path may multipl edg leav summari node array field sinc node repres multipl variabl runtim exampl ssg shown figur 5 elid part code relev analysi prepend line number simpl statement identif variabl node shown circl heap node rectangl slot field heap node label name class prefix statement number alloc summari node suffix asterisk thu 2c repres summari node alloc class c statement 2 often omit disconnect node eg summari node alloc loop note link list repres self loop node 2c like chase et al 4 distinguish object class alloc differ alloc heurist base observ object alloc given alloc tend treat similarli exampl employe meet object might contain nest date object alloc respect constructor ie two date alloc distinguish two kind date object analysi could determin date insid employe affect date insid meet updat conserv ssg statement contain follow inform structur heap runtim 1 exist edg node variabl x heap node alloc execut path end ie execut thread cfg x may point object alloc otherwis x point object alloc 2 exist edg field f current heap node alloc b heap node alloc execut path end f field current instanc alloc b may point object alloc otherwis f field current instanc alloc b point object alloc 3 exist edg field f summari heap node alloc b heap node alloc execut path end f field summar instanc alloc b may point object alloc otherwis summar instanc alloc b whose f field point object alloc 4 three case heap node alloc current node refer must current instanc alloc otherwis refer summar instanc alloc note use inform lack edg one graph precis anoth strict subset edg 53 algorithm use modifi dataflow algorithm comput statement conserv ssg edg possi ble initi statement ssg edg worklist initi contain start statement main step statement remov head worklist process possibl updat ssg statement statement cfg edg ad statement ssg successor statement cfg depend statement cfg ad tail worklist one statement depend anoth may refer variabl runtim select static variabl instanc variabl algorithm termin worklist empti process statement employ three oper ssg join step summar first comput pre ssg statement join ssg immedi predecessor cfg ssg join take union edg set anypath analysi pre ssg updat step oper discuss manner reflect semant statement produc postssg final statement last statement loop block postssg summar produc new version statement ssg otherwis postssg new version summar ssg redirect edg tofrom current node alloc within loop block correspond summari node see ssg statement 6 figur 6 step oper use abstract interpret updat ssg abstract represent runtim heap accord statement semant assign refer variabl need consid statement add edg ssg ie postssg equal pressg pointer express lvalu rvalu defin follow lvalu variabl variabl node lvalu field selector express xf set f field node rvalu x rvalu express set heap node point express lvalu case alloc current node alloc semant assign whether left hand side stack variabl local static variabl e1 either stack variabl local static vari abl perform strong updat remov edg node lvaluee1 ad edg node lvaluee1 node rvaluee2 otherwis perform weak updat simpli ad edg nodefield lvaluee1 node rvaluee2 edg ad statement ssg step summar oper also ad ssg statement cfg assum thread may schedul arbitrarili thu statement anoth thread may wit refer valu execut thread alloc new threadx treat assign x special field runnabl thread object reflect inlin constructor thread let x set class object referenc x might belong ie subclass type x alloc process add worklist start statement everi cfg run method class x ie start statement cfg implicitli depend everi thread alloc might start 3 thread cfg run method class c access instanc variabl current object eg express next produc run method figur 1 rvalu set heap node class c point runnabl field heap node class thread ie associ given threadcfg specif thread alloc 54 comput onetoon relationship summar inform gather analysi suffici lock reduct ssg edg summari node alloc summari node alloc b indic object alloc may point object alloc b need know object alloc point differ object alloc b would hold lock object protect variabl access nest b object conserv estim inform ssg summar updat follow edg summari node summari node b mark onetoon point differ b runtim b loop block edg field summari node summari node b first ad ssg summar oper mark onetoon field summari node subsequ updat step oper way anoth edg summari node b would ad edg longer mark onetoon method base observ nest object almost alway alloc loop block enclos object often enclos object con structor given constructor loop bodi alloc object alloc one nest object link object togeth onetoon relationship object record ssg arc current node alloc node summar end loop block inform preserv annot arc summari node fact motiv distinguish 3 technic thread start start method call sinc use thread schedul informa tion assum thread start alloc produc ssg current summar instancesnod 55 exampl consid java sourc figur 6 first ssg figur 6 postssg statement 6 first time process ie summari inform exist second ssg result summar ssg note sinc node 3b 5a summar togeth arc field a2 3b 5a label onetoon 11 sinc 2a current node onetoon relationship field a1 3b 2a would loop ad around code 2a summar last ssg final ssg statement 9 end method statement 7 thread alloc may access alloc statement 2 statement 8 a1 field b may point alloc statement 5 note stack variabl b scope statement 9 thu remov ssg arc 2a 0a ad statement 0 place worklist statement 7 process although shown final ssg statement 18 ssg would contain arc even though refer valu repres appear statement 7 thread schedul inform consid 56 complex given program statement v variabl alloc algorithm must construct ssg contain ov node ov 2 edg run time process statement worst proport total number edg ssg number time statement process fixpoint reach thu worst case run time os 2 v 4 number statement inlin procedur call could produc exponenti blowup number statement despit complex anticip cost refer analysi prohibit first base applic algorithm sever small exampl believ averag complex much lower ssg gener spars mani edg typic ssg would violat java type system could gener analysi also edg ad statement ssg process thu statement typic process time second v refer number model statement variablesin typic analysi fraction program mod ele refer analysi model variabl primit ie nonrefer type need model statement manipul variabl exclus also program requir might involv small subset program class rest program need repres 6 appli reduct section explain use inform collect refer analysi appli local variabl lock reduct class implement runnabl a3 void run 0 new class a1 a2 new class main static void main 2 new 3 new ba inlin constructor 4 5 new 7 new threadastart els 8 x 5a x x 5a a3 0a a3 0a a3 0a 2a 5a 9 final 2a 5a summari first iter 2a 3b a3 a3 a3 a3 a3 3b 3b summari 7thread 3b a3 a3 figur refer analysi exampl 61 local variabl reduct appli local variabl reduct straightforward set heap node ssg local given thread access stack static variabl local thread heap variabl access express form refid ref refer express id name instanc variabl variabl access express local thread node rvalu ref local thread pressg statement note heap variabl may local statement nonloc other common idiom object alloc initi made avail thread eg intbuff object exampl figur 1 refer analysi determin instanc variabl object local object made avail thread 62 lock reduct appli lock reduct complex need determin whether variabl protect lock gener relationship variabl lock protect may elabor determin static analysi propos heurist believ wide applic particular work lock design pattern given 10 heurist assum relationship object contain variabl object contain lock match follow gener pattern either lock object access variabl object vice versa access third object lock variabl object pattern express term three role root lock variabl lock object contain lock variabl object contain variabl root object two object access role must play exactli one object one object may play multipl role express datai bound buffer exampl intbuff object root lock object int array referenc data variabl object express count intbuff object play three role express salari split lock exampl figur 4 programm object play root variabl role object referenc salarylock play role lock consid static variabl field special environ object call env play role variabl root role lock gener pattern includ case lock object variabl object access static variabl case variabl static also fulli qualifi express prepend express access variabl current instanc prepend env static variabl access staticheap variabl want determin whether exist lock protect variabl ie thread access variabl must hold lock static variabl repres variabl node heap variabl field heap node lock heap node ssg essenti use express access variabl lock identifi lock object interpret express abstractli use ssg formal staticheap variabl v want comput protectv set lock protect v v let accessv set program express may access v set construct refer analysi express ev accessv comput protectv ev set lock thread hold ev protect v sinc lock must protect variabl everywher lock summari node variabl must field summari node interpret variabl object protect uniqu lock object given express ev access v comput lock express ev argument enclos synchron statement e defin tripl er root express common prefix e ev lock selector part e sv variabl selector part ev er final selector remov ie ersv refer object contain v v exam ple consid express hour method updatehour figur 4 fulli qualifi express 4 access variabl thishour lock express thishourslock pair yield tripl hourslock note indic lock root object indic variabl root object given ev er sv identifi candid lock ssg follow ssg node n selector ns set node reach n follow field object nsg set ssg node appli selector node may reach object contain variabl v first pressg ev comput set possibl root object ev access v r contain exactli one node node candid root r comput set possibl lock pressg e l contain exactli one node node candid lock includ protectv ev deduc ssg instanc v runtim uniqu instanc held thread note follow immedi sinc r ssg node path r r v might repres multipl object runtim nevertheless still conclud variabl repres v runtim uniqu lock repres follow true 1 variabl repres v runtim uniqu root object repres r hold r current node arc path select sv onetoon arc summari node 2 root object repres r runtim uniqu lock object repres 4 analysi method inlin variabl replac new temporari hold implicit param eter addit simpl propag analysi use allow recognit pattern even multipl selector decompos seri assign eg xfg express hold provid current node arc path select onetoon arc summari node variabl v protect protectv nonempti transform may made invis fobserv variabl might access protect local note inaccuraci refer analysi lead larger model incorrect model determin variabl local protect lock transform access variabl visibl transit system state still repres behavior possibl restrict program 63 exampl consid bound buffer exampl figur 1 ssg statement produc consum run method isomorph heap structur shown top figur would also node stack variabl ssg deduc variabl next produc object local produc thread thu formula f depend next transform increment next may invis also bound buffer exampl variabl data array object instanc variabl intbuff class protect lock intbuff object thu formula depend variabl sequenc transform repres method put get may combin two transform one acquir lock updat variabl releas lock although complet program shown split lock exampl figur 4 alloc programm would produc ssg subgraph isomorph heap structur shown top figur arc summari programm node object node would onetoon analysi could determin instanc variabl hour protect object access via field hourslock 7 conclus propos method use static pointer analysi reduc size finitest model concurr java program method exploit two common design pattern java code data access one thread encapsul data protect lock process extract model sourc code must degre depend sourc languag although present restrict java mani aspect method wide applic could use reduc finitest model program heap data andor monitorlik synchron primit eg ada protect type method current implement part tool intend provid autom support extract finitest model java sourc code although empir data method perform time effect virtual coarsen reduc concurr model well known manual applic method sever small exampl suggest mani transit made invis typic formula arriv java concurr program enter mainstream finitest verif technolog offer power mean find concurr error often subtl difficult reproduc unfortun extract finitest model program requir exist verifi tediou errorpron result widespread use technolog unlik extract compact mathemat model real softwar artifact larg autom method like one describ essenti support extract acknowledg thank due georg avrunin help comment draft paper r formal properti parallel program autom analysi concurr system constrain express toolset composit verif model check counter exampl analysi pointer structur time analysi ada task pro gram protocol verif hardwar design aid use state space reduct method deadlock analysi ada task data flow analysi verifi properti concurr program element style analyz softwar design featur counterexampl detector concurr program java design principl pattern check finit state concurr program satisfi linear specifica tion static infinit wait anomali detect polynomi time tr integr concurr analysi softwar develop enviorn analysi pointer structur autom analysi concurr system constrain express toolset use state space reduct method deadlock analysi ada task data flow analysi verifi properti concurr program composit verif model check counterexampl element style time analysi ada task program check finit state concurr program satisfi linear specif concurr program java protocol verif hardwar design aid ctr jame c corbett matthew b dwyer john hatcliff shawn laubach corina psreanu robbi hongjun zheng bandera extract finitest model java sourc code proceed 22nd intern confer softwar engin p439448 june 0411 2000 limerick ireland gleb naumovich georg avrunin lori clark data flow analysi check properti concurr java program proceed 21st intern confer softwar engin p399410 may 1622 1999 lo angel california unit state klau havelund mike lowri john penix formal analysi spacecraft control use spin ieee transact softwar engin v27 n8 p749765 august 2001 gleb naumovich georg avrunin lori clark effici algorithm comput mhp jonathan aldrich emin gn sirer craig chamber susan j egger comprehens synchron elimin java scienc comput program v47 n23 p91120 may jongdeok choi manish gupta mauricio serrano vugranam c sreedhar sam midkiff escap analysi java acm sigplan notic v34 n10 p119 oct 1999 pramod v koppol richard h carver kuochung tai increment integr test concurr program ieee transact softwar engin v28 n6 p607623 june 2002 jame c corbett use shape analysi reduc finitest model concurr java program acm transact softwar engin methodolog tosem v9 n1 p5193 jan 2000 john whaley martin rinard composit pointer escap analysi java program acm sigplan notic v34 n10 p187206 oct 1999 jongdeok choi manish gupta mauricio j serrano vugranam c sreedhar samuel p midkiff stack alloc synchron optim java use escap analysi acm transact program languag system topla v25 n6 p876910 novemb premkumar devanbu stuart stubblebin softwar engin secur roadmap proceed confer futur softwar engin p227239 june 0411 2000 limerick ireland john penix willem visser seungjoon park corina pasareanu eric engstrom aaron larson nichola weining verifi time partit deo schedul kernel formal method system design v26 n2 p103135 march 2005