experi model simul comput architectur dev use tradit approach teach comput organ usual gener misconcept student simul comput alfa1 design fill gap dev use attack complex design chosen architectur allow definit integr individu compon dev also provid formal specif framework allow reduct test time improv develop process use alfa1 student acquir practic design implement hardwar compon usual achiev comput organ cours b figur 1 organ integ unit risc processor provid 520 integ regist eight global regglob share everi procedur remain 512 divid window 24 regist regblock window includ input output local regist everi procedur execut recent routin begin new regist reserv 8 local 8 output 8 output record call procedur use input special 5bit regist call cwp circular window pointer mark activ window everi time new procedur start cwp decrement figur 2 organ processor regist besid gener purpos regist architectur includ pc processor two program counter pc contain address next instruct store address pc execut present instruct instruct cycl finish copi npc pc ad 4 byte one word npc instruct condit branch npc assign pc npc updat jump address jump condit valid use product divis oper base size memori consid flat neither segment pagin mechan includ likewis multiprogram support base regist point lowest address program access size store maximum size avail program psr processor statu regist store current statu program interpret follow bit content descript reserv neg 1 result last oper neg 22 z zero 1 result last oper zero result last oper overflow result last oper carri one bit 1912 reserv lowest interrupt number servic 6 ps previou state last mode enabl trap 1trap enabl 0trap disabl current window pointer point current regist window tabl 1 content process statu regist wim window invalid mask 32bit regist one bit per window use avoid overwrit window use anoth procedur cwp decrement circuit verifi wimbit activ new window case interrupt rais interrupt servic routin store content window memori usual wimonli one bit 1 mark oldest window tbr trap base regist point memori address store posit trap routin bit content descript base address base address trap tabl 114 trap type trap servic 30 constant 0000 tabl 2 content trap base regist first 20 bit trap base address store base address trap tabl interrupt request receiv number trap servic store bit 114 therefor tbr point tabl posit contain address servic routin last 4 bit 0 guarante least 16 byte store routin instruct set level sparc architectur analyz see instruct fix size 32 bit memori operand may 8 16 32 bit basic loadstor oper classifi accord size sign operand arithmet boolean oper includ add div mul xor xnor shift abl chang psr accord oper code use sever jump instruct avail includ rel jump absolut jump trap call return trap instruct includ movement regist window nop readwrit oper psr multipl use 32bit operand produc 64bit result signific 32 bit store regist remain alur regist integ divis oper take 64bit dividend 32bit divisor produc 32bit result regist store signific bit divi dend one alu input regist store least signific bit dividend divisor integ result store alur regist remaind regist instruct carri alu whose structur depict follow figur includ two multiplex connect alu multiplierdivid unit shifter figur 3 organ alu two execut mode user kernel certain instruct execut kernel mode also base size regist use program run user mode cpu execut supervis control unit receiv signal rest processor use 64 input bit organ 5 group instruct regist psr busbusyin busdackin buserr output sent use 70 line organ 59 group includ readingwrit intern regist activ line alu multiplex also connect pc npc trap control psr regist includ final data address control buse access memori organ use byte address littleendian store word processor issu memori access oper write address data need bu turn address strobe signal interpret memori order start oper memori use address avail analyz rdwr line see oper ask read issu one word 4 byte taken specifi address sent data line write oper address store byte select regist line bsel03 defin byte access word point address regist address wrong err line turn data acknowledg dtack sent oper finish system compon interconnect use bu see figur 4 bu master use bgrant bu grant iack irq acknowledg line connect two devic follow lower upper prioriti devic highest prioriti connect constant 1 signal bgrant line bgrant signal sent lower prioriti devic arriv devic request bu devic finish transfer iack transmit inputoutput oper memori map devic fix set address data written address interpret instruct devic fifteen irq line irq1irq15 provid devic connect line higher prioriti devic connect lower irq figur 4 organ bu final extern cach memori defin gener structur cach control defin figur 5 design implement modul includ origin version alfa 1 defin assign done undergradu student follow procedur present follow section first stage circuit test separ differ algorithm implement final devic integr architectur model develop dev model integr coupl model extens origin architectur explain detail show capabl extens modifi alfa1 figur 5 organ cach memori 3 implement architectur dev model architectur present previou section complet implement use cd first behavior compon care specifi analyz input output time element specif also provid test case compon defin dev follow specif model implement cd includ experiment framework follow test case defin specif final main model built coupl model connect submodel previous defin model follow design present figur 1 detail definit found 49 two implement consid first reproduc basic behavior circuit code transit function implement detail use boolean logic basic build block develop atom model coupl use digit logic concept way two differ abstract level provid depend interest use thoroughli test basic model integr higher level modul complet definit architectur follow section devot present compon implement assign done student show differ abstract level model present exampl modifi alfa1 31 incdec explain earlier use 520 gener purpos regist organ overlap window given time one window activ incdec model compon choos activ window use 5bit cwp regist model part cwp logic shown figur 2 cwp increment decrement valu store dlatch repres anoth dev receiv line op0op4 output transmit line res0res4 atom model defin behavior transit function inform defin follow x receiv port increment els decrement dint passiv res04 differ last output send resp04 port op04 figur 6 behavior transit function incdec model 50 fcod valu use tell valu must increment decrement alu model use oper see extern event arriv holdin function activ macro repres behavior dev time advanc function charg manipul sigma variabl state variabl predefin everi dev model repres remain time next schedul intern event model remain current state time output intern transit function activ holdin macro make time definit easier passiv anoth macro use infinit sigma put model passiv phase holdinpass infinit follow figur show implement function use cd see extern transit function dext receiv five operand input togeth function code accord code paramet increment decrement model keep present valu delay relat circuit oper output function l activ circuit chang state present valu transmit intern transit function dint passiv model intern event infinit delay schedul wait next input constructor allow specifi model name inputoutput port paramet see definit dev atom model simpler use standard program languag explain advantag use dev section 1 case see appli build model dev provid interfac consist four function program modular definit independ simul repeat everi model therefor one focu model develop user concentr behavior extern event output must sent submodel occurr intern event behavior everi model encapsul function togeth elaps time definit test pattern easili creat model activ function incdecincdec const string name string time mainsimulatorinstancegetparamet model incdecexternalfunct const externalmessag msg check input port assign input valu fcod 1 int i0 increment increment va valu use alu int els decrement int i0 i4 decrement v valu use alu int thisholdinact preparationtim schedul delay circuit return model incdecinternalfunct const internalmessag delay consum activ output return model incdecoutputfunct const internalmessag msg res0old0 res1old1 res2old2 sendoutputmsgtim res0 res0 sendoutputmsgtim res1 res1 sendoutputmsgtim res2 res2 sendoutputmsgtim res3 res3 sendoutputmsgtim res4 res4 return figur 7 incdec model definit transit functions50 defin atom model test inject input valu inspect output experiment frame built includ pair inputoutput valu test model automat case build coupl model includ model test defin follow prepar figur 8 incdec coupl model definit 50 definit follow dev specif defin compon case id instanc incdec model extern paramet link defin influence translat function includ inputoutput port model case id model relat top model use inputoutput port defin earlier 32 regglob model defin behavior global regist keep content 8 global regist allow readwrit oper two auxiliari state variabl olda oldb store last output output signal transmit bit chang model defin 01 cin 0 2321 sketch model shown figur 2 see use three select line asel bsel csel choos two output regist regist modifi array 32 integ keep present valu regist boolean line cen c enabl line use allow write oper extern transit function model recept input function store desir oper accord signal receiv also store input valu number regist activ new intern event schedul predefin delay model circuit delay extern event arriv end delay oper cancel model regglobexternalfunct const externalmessag msg switch msgport case cen line turn case reset breset intmsgvalu reset store input line thisholdin activ delay return model regglobinternalfunct const breset int i0 i255 ini0 bcen int i0 i32 return ieth line input enabl store regist number receiv ieth line b input enabl store regist number receiv ieth line c input enabl store regist number receiv reset signal issu 8 regist 32 bit delet write line enabl updat desir regist wait next intern event model reggloboutputfunct const internalmessag msg oldai inselecta32i thissendoutputmsgtim aout oldbi inselectb32i thissendoutputmsgtim bout return regist chang transmit output line regist chang transmit output line figur 9 regglob model definit transit function 50 output function decid regist chang queri olda oldb store previou statu b line regist chang valu sent chosen output b model show interest use intern transit function case consid intern state decid model must react intern transit function see reset line activ case clear content everi regist cen line activ valu chosen regist updat new input 33 basic compon architectur descript complet sever dev model includ gener aspect make brief descript behavior includ definit model transit func tion built previou exampl detail model found 49 circuit check next window use overwritten compon consist window invalid mask regist return valu cwpeth bit wim regist 0 241 rdwr 01 reset 0 1 memori provid three basic oper read write reset reset issu memori initi imag load processor write address bu signal memori use signal address readi readwrit signal issu memori react accord signal use output time relat memori latenc adder receiv two input depend result carri bit turn model use align data readwritten loadstor oper model repres behavior integ arithmeticlog unit capabl execut follow oper add sub addx subx addsub carri xor andn orn xnor negat xor group model includ provid behavior use boolean gate xor receiv binari input produc result accord desir oper rdwr dtack err reset busi 01 bu interpret input signal provid output relat devic receiv 1 bgrantin port need write data memori write 0 bgrantout port smaller prioriti devic abl use bu devic start bu cycl turn busysig nal devic write address access addresslin data written data byte select mask bselto defin byte word use final turn rdwrout line tell write oper issu memori receiv signal execut memori cycl finish dtackout line turn devic issu oper receiv signal dtackin line cycl finish bgrantin still 1 devic abl transfer new data otherwis turn busylin allow new bu oper devic model use condit jump decid branch must execut repres cpu clock period configur model use decid access global regist regist window requir return kind regist regist windowglob number model updat npc model manag action take place interrupt receiv pil processor interrupt line mask interrupt one irq whose number greater pil receiv interrupt must servic see one higher prioriti tf trap found bit turn tt trap type regist load accord highest level interrupt model repres processor regist implement dlatch ein line enabl input clear line reset regist zero model charg make multipl divis turn condit bit model repres 2 4 input multiplex choos receiv 4bit select signal whose bit turn mark input sent output model charg manag regist window model charg implement shifter model extend sign operand 13 22 bit 32 bit compon defin trap must servic base prioriti system one input line defin nonmask trap 7 bit use receiv number trap mask model return bit tell trap must servic 8 bit tell trap type follow tabl show kind prioriti trap avail line descript prioriti trap type instaccexcep instruct access except 5 0x01 illeginst illeg instruct 7 0x02 privinst privileg instruct 6 0x03 winov window overflow 9 0x05 winund window underflow 9 0x06 addrnotalign address align 10 0x07 dataaccexcep data access except 13 0x09 instaccerr instruct access error 3 0x21 dataaccerr data access error 12 0x29 divzero divis zero 15 0x2a datasterr data store error 2 0x2b tabl 3 avail trap accord tabl model analyz higher prioriti trap servic delay send correspond index output port 34 control unit control unit charg drive execut flow processor explain earlier model use sever inputoutput line accord input receiv issu differ output activ differ circuit defin previous show part behavior specif inputoutput set includ size detail found 49 model ucexternalfunct const externalmessag msg els thispassiv els msgport dtack els msgport cclogic els string portnam int portnum namenum msgportnam portnam portnum portnam ir els return model ucinternalfunct const internalmessag return model ucoutputfunct const internalmessag msg see cen line must activ read instruct regist decod instruct els els see branch els transmit output return figur 10 control unit transit function see model activ occurr clock tick case check control unit wait result come memori waitfmc case noth model passiv otherwis regist clock tick finish extern input correspond signal dtack come memori cclogic input arriv regist also recogn input instruct regist store new instruct execut psr updat condit code intern transit function record address strobe wait end memori transfer main task control unit execut output function see descript present input valu queri depend number clock tick instruct cycl differ output line activ 4 digit logic level abstract level sever model detail let student analyz digit logic level circuit previou stage behavior circuit defin use atom mod el case model built use atom model repres basic boolean gate xor model describ previou section use compon integr use digit logic coupl model repres complet circuit replac old atom one modif also done cours assign show extens modifi alfa1 two model implement way explain follow 41 cmp model cmp part address unit detect address fall program boundari model receiv two input line opa opb connect base limit regist result return signal eq valu equal lwif lower b figur 11 sketch address unit model compos sever onebit compar coupl n gener nbit compara tor follow figur show basic compon build block figur 12 onebit compar 50 model formal describ select atom defin correspond build block present previous section 33 andn1 self self andn2 self notn1 andn1 xorn zij built use describ earlier definit coupl model use cd present follow figur opan opbn figur 13 cmp coupl model 50 first defin compon coupl model correspond set inputoutput port includ relat xy set defin earlier final link show model influence defin translat function select function implicitli defin order definit model compon 42 chip selector chip selector cs circuit devot determin address two other model receiv 32bit address address strobe return boolean valu tell address boundari mask model provid two 32bit set max mask min mask contain boundari address compar model defin origin latch redefin use boolean gate input address chip selector check use two compar instanc model defin previou section figur 14 sketch chip selector 50 result obtain transmit port lw eq compar output ore first regist interest see cmp max lw output second regist invert interest see cmp b min circuit enabl result obtain transmit compon masmaxma masminma cmpacmp cmpbcmp and1and and2and oror notnot link a31top opa31cmpa a31top opa31cmpb link a30top opa30cmpa a30top opa30cmpb link out31masmax opb31cmpa out31masmin opb31cmpb link out30masmax opb30cmpa out30masmin opb30cmpb link out0masmax opb0cmpa out0masmin opb0cmpb link inaand2 link eqcmpa inaor lwcmpa inbor link outor inaand1 outnot inband1 link outand1 inband2 link outand2 cstop figur 15 cs coupl model 50 5 simul result present section show result obtain model previous present simu late first case show result valu 20 increment incdec model figur show model input timestamp output valu obtain first step consist give initi valu circuit zero default first event gener output model phase chang prepar time circuit 5 time unit occur 000005000 second input gener chang model output issu simul time 10 new input insert port op2 valu chang output gener simul time 15 follow 2 input regist circuit keep present state last one increment valu regist insert valu fcod port increment valu seen 5 time unit input output figur 16 input output incdec model follow exampl show execut regglob model differ input instant 0 c enabl line activ allow write oper regist case regist 4 select csel21 csel10 csel00 number 0xffffffff use input ter 00000100 regist 2 select csel20 csel11 number 0x55555555 input cin0cin2cin4cin301 cin1 first valu store regist 4 second regist 2 input output reset 1 figur 17 inputsoutput regglob 50 00000200 c enabl deactiv therefor follow oper devot read regist see valu regist 4 sent output asel2 regist 2 sent b bsel1 result valu previous load transmit 0xffffffff 0x55555555 b reset activ tri read regist 4 00000500 obtain valu 0x00000000 next test correspond traplog model see result obtain turn trap bit due expect obtain index highest prioriti trap pend result obtain delay time correspond highest one section 34 data store error whose code result obtain also trap found flag turn instaccexcep 1000 illeginst 1000 privinst 1000 winov 1000 winund 1000 addrnotalign 1000 dataaccexcep 1000 instaccerr 1000 dataaccerr 1000 divzero 1000 datasterr 1000 trapinst 1000 figur 18 execut result traplog model 50 final show two execut exampl part complet program exampl execut pentium processor 133 mhz use linux version cd averag perform model one instruct per second sourc code translat binari use gnu masm assembl linker execut use initi memori imag simul first part follow figur show part program written assembl languag second part present binari code gener togeth address instruct data one word set 0x12345678 r1 st r1 dest sth r1 dest4 sth r1 dest10 stb r1 dest12 stb r1 dest17 stb r1 dest22 stb r1 dest27 unimp initi imag addr memori imag final imag addr memori imag load regist 1 0x12345678 store dest variabl store high halfword store last byte interpret 01001000 store regist 1 address 72 01001100 store high part reg 1 address 76 01010010 store high part reg 1 address 82 01010100 store high byte reg 1 address 84 01011001 store high byte reg 1 address 89 01011110 store high byte reg 1 address 94 01100011 store high byte reg 1 address 99 00000000 unimp 00100000 dest variabl 20 space charactervalu figur 19 store valu memori see piec code copi part number 0x12345678 certain memori address show translat binari code base specif instruct set sparc processor final show memori imag program execut see valu store memori follow instruct defin execut code follow exampl show execut part anoth program see goal place 1 given address shift valu left store result follow address cycl repeat 12 time set 1 r1 cycl sll r1 r2 r3 stb r3 r2dest subcc r2 12 r0 bne cycl inc 1 r2 delay slot unimp initi imag addr memori imag 036 10000111 00101000 01000000 00000010 final imag load regist 1 shift valu store result repeat cycl 12 interpret valu 1 number time r2 variabl dest time set 1 1 take regist 1 shift store r3 store address substract 12 r0 rel jump address 2 word 40 increment 1 unimp destin variabl valu 0x01 shift 12 time figur 20 shift store result memori basic behavior simul comput verifi thorough integr test attack explain earlier circuit defin togeth set inputoutput valu encapsul experiment framework model test oper instruct set check procedur develop use verif facil dev defin 17100 test case mechan consist creat experiment framework execut instruct instruct set execut result store memori memori dump execut obtain memori state execut valu check valu obtain program execut real architectur includ test experiment framework procedur allow us find error deriv coupl model instanc could see divis instruct work properli gener test includ follow sentenc set 274543375 r24 store valu regist 24 set 13908050 r22 second valu store regist 22 valu divid store r10 st r10 dest result store memori unimp valu ascii valu dest word ffffffff result test 100 figur 21 test routin udiv instruct exampl execut test coupl model found error field type expect found dif case destin store valu 19 274543375 divid 13908050 instead found valu 1 allow us see one instruct unexpect behavior way could find error instruct could fix also found error addit instruct condit jump predict final show part execut simul exampl present figur 20 show log file includ messag interchang modul dev framework four kind messag use signal state chang due intern event x use extern event arriv model output done indic model finish task messag initi correspond model messag show type timestamp valu ori gindestin port use transmiss messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag x 000000000 messag x 000000000 messag x 000000000 messag x 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag x 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000000000 root00 top01 top01 mem02 top01 bus03 top01 csmem04 top01 cpu05 top01 c164 top01 dpc65 mem02 top01 bus03 top01 top01 cpu05 ir06 cpu05 pcadd07 cpu05 pcmux08 initi higher level compon memori bu cs etc model repli next schedul event cpu initi compon root00 top01 top01 cpu05 cpu05 npc10 take npc cpu05 1000 pclatch11 send pcinc pcinc13 increment pclatch11 valu schedul activ cpu05 pcinc model root00 top01 top01 cpu05 cpu05 pc12 cpu05 initi address pc12 cpu05 root00 top01 top01 cpu05 cpu05 clock45 clock tick clock45 clck 1000 cpu05 clock45 000100000 cpu05 clck 1000 cu43 root00 top01 top01 cpu05 arriv cu cpu05 cu43 activ compon cu43 1000 cpu05 messag 000000000 messag 000000000 messag 000000000 messag 000000000 messag 000010000 messag 000010000 messag 000010000 messag 000010000 messag 000010000 messag 000010000 messag 000010000 messag 000010000 messag 000010000 messag 000010000 messag 000010000 messag 000010000 messag 000020001 messag 000020001 messag 000020001 messag 000020001 messag 000020001 messag 000020001 messag 000020001 messag 000020001 messag 000020001 messag x 000020001 messag x 000020001 messag x 000020001 messag x 000020001 messag x 000020001 messag x 000020001 messag 000020001 cu43 cpu05 root00 top01 top01 cpu05 cpu05 pclatch11 cpu05 root00 top01 top01 cpu05 cpu05 pcinc13 updat npc cpu05 root00 top01 top01 mem02 memori return first instr mem02 dtack 1000 top01 mem02 top01 figur 22 log file simpl routin execut cycl start initi higher level model memori cpu etc messag arriv cpu model sent lower level compon instruct regist pc adder pc multiplex control unit etc initi cycl finish immin model execut case npc model acti vate transmit address next instruct see 2nd 5th bit return valu mean npc valu see figur 20 program start address 32 valu sent pcinc model charg ad 4 regist updat finish 10000 activ time model schedul use circuit delay moment 4 valu ad npc obtain 3rd 5th bit 1 res3 res5 next pc pc activ valu 010000 32 obtain initi address program follow event arriv clock tick sent processor cpu schedul next tick 100000 time unit transmit signal control unit activ sever compon amux alu addrmux iretc final see simul time 20000 memori return first instruct compar result bit configur address 32 instruct sent cpu store instruct regist follow execut rest instruct cycl complet way abl follow execut flow program analyz log file simplifi analysi result built set script use tk let student choos compon consid way behavior subcompon follow easili student analyz behavior desir subsystem detail 6 conclus present use dev simul simpl comput model base architectur sparc processor includ featur exist simpler cpu tool use comput organ cours analyz understand basic behavior differ level comput system interact level studi experiment evalu system done use dev allow us reusabl model case boolean gate compar multiplex er latch etc dev also allow us provid reusabl code differ configur provid differ machin one run digit logic level instruct set differ perform case depend educ need concept intern transit function use improv definit time properti compon let defin complex synchron mechan nevertheless case time delay repres simpl putoutput relat met goal propos alfa1 public domain develop use cd also public domain built use gnu c therefor toolkit avail use exist comput organ cours describ sever level architectur digit logic level instruct set assembl languag level also attack use public domain assembl gener execut code could run alfa1 easili extend compon instanc includ cach memori includ first version also modifi exist compon implement instanc digit logic version cir cuit thorough test could done use approach base construct experiment framework associ test function experiment framework also built final integr model import achiev relat educ goal whole project design detail assign 3rd year discret event simul cours model formal specifi specif use student comput organ cours build final version architectur student taken previou prerequisit cours program knowledg student abl build compon present final integr plan group undergradu teach assist also develop control unit coupl model repres whole architectur show figur 1 individu integr test also done 2nd year student sever modif show develop cours assign fact show feasibl approach pedagog point view upper level cours report higher success rate detail knowledg subject use alfa1 tool obtain httpwwwscecarletoncawainerusenix differ experi attack use toolkit assembl languag level student use exist assembl build execut run simul complet analysi execut flow instruct level achiev trace execut log file student studi flow program instruct detail start memori imag execut instruct cycl signal flow datapath easili inspect go deeper see behavior circuit implement digit logic level extend chang exist instruct implement chang control unit student experi design instruct set allow practic instruct en code relat instruct definit underli architectur student also includ new compon show cach memori exampl chang exist one implement use digit logic hierarch natur dev provid mean go deeper hierarchi instanc logic gate could implement defin transistor level implement version plan build assembl linker code gener provid gnu sparc plattform execut straightforward nevertheless implement assembl linker interest assign face complet layer view appli cours also debugg alfa1 architectur could built make easier studi assembl languag level present alfa1 extend defin compon inputoutput subsystem sever putoutput devic interfac dma control simul differ transfer techniqu poll interrupt dma consid likewis implement differ cach manag algorithm finish task face present includ definit graphic interfac enhanc use toolkit set script mention section 5 use gather result simul use input display graphic way way studi analysi differ subsystem improv 7 acknowledg want thank anonym refere detail comment made articl also thank prof trevor pearc sce carleton univers help final version sergio zlotnik collabor earli stage project present earlier 51 research partial fund usenix foundat ubacyt project jw10 develop gabriel wainer assist professor comput scienc dept universidad de bueno air argentina r comput architectur quantit approach comput organ design hardwaresoftwar interfac comput organ architectur comput system design architectur structur comput organ simplescalar tool set version 20 interact environ teach comput architectur note p86 assembl languag assembl extens simul intel 80x86 processor famili mp comput system simul provir virtual processor perform simul alpha microprocessor talisman fast accur multicomput simul blockori network simul bone improv parallel architectur simul sharedmemori multiprocessor experi simul declar multiprocessor microprocessor architectur design atla design effici simul use maisi harman master simulink 4 acsl refer manual compani modsim ii languag objectori program simscript simul program languag simul model design execut hardwar descript languag concept principl verilog hardwar descript languag system engin sdl alfa0 simul comput educ tool comput organ crap emul sparc processor emul atari processor objectori simul hierarch modular model dev theori quantiz new extens cd tool tr objectori simul hierarch modular model intellig agent endomorph system structur comput organ 3rd ed introduct simul gpss improv parallel architectur simul sharedmemori multiprocessor executiondriven simul multiprocessor talisman smprof comput organ architectur 4th ed interact environ teach comput architectur use simo machin simul studi complex comput system simplescalar tool set version 20 perform depend evalu scalabl massiv parallel comput system conjoint simul iter design effici simul use maisi gdev hardwar descript languag comput system design architectur simul model design execut master simulink 4 comput architectur quantit approach verilog hardwar descript languag theori model simul perform simul alpha microprocessor microprocessor architectur design atla augmint multiprocessor simul toolkit intel x86 architectur experi simul declar multiprocessor use dev paradigm implement simul processor document chip comput system version 11 proteu highperform parallelarchitectur simul mp comput system simul