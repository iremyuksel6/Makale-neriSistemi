perform consider share virtual memori machin abstractgener speedup defin parallel speed sequenti speed paper gener speedup relat exist perform metric tradit speedup effici scalabl etc care studi term introduc asymptot speed show differ gener speedup tradit speedup lie definit effici uniprocessor process import issu share virtual memori machin scientif applic implement ksr1 parallel comput experiment theoret result show gener speedup distinct tradit speedup provid reason measur studi differ speedup interest relat fixedtim memorybound speedup reveal variou caus superlinear speedup also present b introduct recent year parallel process enjoy unpreced attent research govern agenc industri attent mainli due fact current circuit technolog parallel process seem remain way achiev higher perform howev variou parallel comput algorithm develop perform evalu still elus fact advanc hardwar softwar difficult evalu parallel perform paper target recent develop share virtual memori machin studi gener speedup 1 perform metric relat exist perform metric implement issu distributedmemori parallel comput domin today parallel comput arena machin kendal squar ksr1 intel paragon tmc cm5 ibm sp2 success deliv high perform comput power solv socal grand challeng problem viewpoint process two basic process synchron commun model one sharedmemori model process commun share variabl messagepass model process commun explicit messag pass sharedmemori model provid sequentiallik program paradigm virtual address space separ user logic memori physic memori separ allow extrem larg virtual memori provid sequenti machin small physic memori avail share virtual address combin privat virtual address space distribut node parallel comput global share virtual memori 2 share virtual address space sharedmemori model support share virtual memori requir sophist hardwar system support exampl distributedmemori machin support share virtual address space kendal squar ksr1 1 share virtual memori simplifi softwar develop port process enabl even extrem larg program run singl processor partit distribut across multipl processor howev memori access share virtual memori nonuniform 2 access time local memori remot memori differ run larg program small number processor possibl could ineffici ineffici sequenti process lead mislead high perform term speedup effici gener speedup defin parallel speed sequenti speed newli propos perform metric 1 paper theoret proof experiment result show gener speedup provid reason measur tradit speedup process studi gener speedup relat gener speedup mani metric effici scale speedup scalabl also studi relat 1 tradit messagepass model bound local memori process processor recent technolog advanc messagepass model extend abil support share virtual memori fixedtim memorybound scale speedup analyz variou reason superlin differ speedup also discuss result show main differ tradit speedup gener speedup evalu effici sequenti process singl processor paper organ follow section 2 studi tradit speedup includ scale speedup concept introduc terminolog analysi show tradit speedup fixeds scale size may achiev superlinear share virtual memori machin furthermor tradit speedup metric slower remot memori access larger speedup gener speedup studi section 3 term asymptot speed introduc measur gener speedup analysi show differ similar gener speedup tradit speedup relat differ perform metric also discuss experiment result product applic kendal squar ksr1 parallel comput given section 4 section 5 contain summari 2 tradit speedup one frequent use perform metric parallel process speedup defin sequenti execut time parallel execut time parallel algorithm often exploit parallel sacrif mathemat effici measur true parallel process gain sequenti execut time base commonli use sequenti algorithm distinguish interpret speedup speedup measur commonli use sequenti algorithm call absolut speedup 3 anoth wide use interpret rel speedup 3 use uniprocessor execut time parallel algorithm sequenti time sever reason use rel speedup first perform algorithm vari number processor rel speedup measur variat second rel speedup avoid difficulti choos practic sequenti algorithm implement sequenti algorithm match implementationprogram skill sequenti algorithm parallel algorithm also problem size fix time ratio chosen sequenti algorithm uniprocessor execut parallel algorithm fix therefor rel speedup proport absolut speedup rel speedup speedup commonli use perform studi studi focu rel speedup reserv term tradit speedup speedup rel speedup concept result studi extend absolut speedup problem size point view speedup divid fixeds speedup scale speedup fixeds speedup emphas much execut time reduc parallel process amdahl law 4 base fixeds speedup scale speedup concentr explor comput power parallel comput solv otherwis intract larg problem depend scale restrict problem size scale speedup classifi fixedtim speedup 5 memorybound speedup 6 number processor increas fixedtim speedup scale problem size meet fix execut time scale problem also solv uniprocessor get speedup number processor increas memorybound speedup scale problem size util associ memori increas detail studi memorybound speedup found 6 let p p number processor speedup p processor ffl unitari speedup ffl linear speedup debat machinealgorithm pair achiev truli superlinear speedup seven possibl caus superlinear speedup list fig 1 first four caus fig 1 pattern 7 1 cach size increas parallel process 2 overhead reduc parallel process 3 latenc hidden parallel process 4 random algorithm 5 mathemat ineffici serial algorithm 6 higher memori access latenc sequenti process 7 profil shift figur 1 caus superlinear speedup caus 1 unlik applic scale speedup sinc problem size scale memori time constraint cach hit ratio unlik increas caus 2 fig 1 consid theoret 8 measur superlinear speedup ever attribut caus 3 exist rel speedup sinc sequenti parallel execut use algorithm sinc parallel algorithm often mathemat ineffici caus 5 like sourc superlinear speedup rel speedup good exampl superlinear speedup base 5 found 9 caus 7 explain end section 3 gener speedup introduc virtual memori share virtual memori architectur caus 6 lead extrem high speedup especi scale speedup extrem larg problem run singl processor figur 5 show measur superlinear speedup ksr1 machin measur superlinear speedup due inher defici tradit speedup metric analyz defici tradit speedup need introduc follow definit 2 cost parallel ratio total number processor cycl consum order perform one unit oper work processor activ machin clock rate sequenti execut time written term work sequenti execut amount work theta processor cycl per unit work machin clock rate ratio right hand side eq 1 processor cycl per unit work machin clock rate cost sequenti process work defin arithmet oper instruct transit whatev need complet applic scientif comput number floatingpoint oper commonli use measur work gener work may differ type unit differ oper may requir differ number instruct cycl finish exampl time consum one divis one multipl may differ depend underli machin oper memori refer ratio may differ differ comput influenc work type perform one topic studi 1 paper studi influenc ineffici memori access perform assum one work type increas number processor cycl due ineffici memori access share virtual memori environ memori avail depend system size let w amount work execut processor activ work perform step use processor let work cost parallel p processor system denot c p w elaps time one unit oper work processor activ w delta c p w give accumul elaps time processor activ c p w contain comput time remot memori access time uniprocessor execut time repres term uniprocessor cost c p w cost sequenti process parallel system p processor differ c p 1 w cost sequenti portion parallel process parallel execut time repres term parallel cost tradit speedup defin depend architectur memori hierarchi gener c p w may equal 10 c p w first ratio eq 3 cost ratio give influenc memori access delay second ratio simpl analyt model base degre parallel 6 assum memori access time constant problem size system size vari cost ratio distinguish differ perform analysi method without consider memori influenc gener cost ratio depend memori miss ratio page replac polici data refer pattern etc let remot access ratio quotient number remot memori access number local memori access simpl case assum remot access parallel process remot access ratio sequenti process p gamma 1p time per remot access time per local access 5 equat 5 approxim equal time per remot access time per local access sinc remot memori access much slower local memori access current technolog speedup given eq 3 could consider larger simpl analyt model 4 fact slower remot access larger differ ksr1 time ratio remot local access 75 see section 4 therefor cost ratio 73 w assum remot access ratio superlinear speedup 3 gener speedup parallel comput design solv larg problem singl processor parallel comput design solv larg problem uniprocessor comput power parallel system solv small problem inappropri parallel system solv larg problem singl processor appropri either creat use comparison need metric vari problem size uniprocessor multipl processor gener speedup 1 one metric gener sequenti speed speed defin quotient work elaps time parallel speed might base scale parallel work sequenti speed might base unscal uniprocessor work definit gener speedup measur speed improv parallel process sequenti pro cess contrast tradit speedup 2 measur time reduct parallel process problem size work parallel sequenti process gener speedup tradit speedup point view tradit speedup special case gener speedup histor reason sometim call tradit speedup speedup call speedup given eq 6 gener speedup like tradit speedup gener speedup also divid fix size fixedtim memorybound speedup unlik tradit speedup gener speedup scale problem solv multipl processor fixedtim gener speedup sizeup 1 fixedtim benchmark slalom 11 base sizeup memori access time fix one might alway assum uniprocessor cost c p stabliz initi decreas due initi loop overhead etc assum memori larg enough cach remot memori access consid cost increas slower memori access figur 2 depict typic cost chang pattern eq 1 see uniprocessor speed reciproc uniprocessor cost cost reach lowest valu speed reach highest valu uniprocessor speed correspond stabliz main memori cost call asymptot speed uniprocessor asymptot speed repres perform sequenti process effici memori access asymptot speed appropri sequenti speed eq 6 memorybound speedup appropri memori bound largest problem size maintain asymptot speed choos asymptot speed sequenti speed correspond asymptot cost local access independ problem size use denot correspond asymptot cost w 0 problem size achiev asymptot speed remot access parallel process assum section 2 cs w 0 c p p w 0 3 correspond speedup equal simpl speedup fit cach cost problem size fit main memori fit remot memori execut time increas sequenti insuffici memori figur 2 cost variat pattern consid influenc memori access time gener parallel work w w 0 c p w may equal gener gener equat 7 anoth form gener speedup quotient sequenti parallel time tradit speedup 2 differ eq 7 sequenti time base asymptot speed remot memori need sequenti process cs w 0 smaller c p w therefor gener speedup give smaller speedup tradit speedup parallel effici defin number processor 8 gener effici defin similarli gener effici gener speedup number processor definit gener effici equat 10 11 show differ two effici tradit speedup compar parallel process measur sequenti process gener speedup compar parallel process sequenti process base asymptot cost point view gener speedup reform tradit speedup follow lemma direct result eq7 independ problem size tradit speedup gener speedup lemma 2 parallel work w achiev asymptot speed fixeds tradit speedup fixeds gener speedup lemma 1 simpl analyt model 4 use analyz perform differ tradit gener speedup problem size w larger suggest initi problem size w 0 singl processor speedup 1 may equal one 1 measur sequenti ineffici due differ memori access gener speedup also close relat scalabl studi isospe scalabl propos recent 12 isospe scalabl measur abil algorithm machin combin maintain averag unit speed averag speed defin speed number processor system size increas problem size scale accordingli maintain averag speed averag speed maintain say algorithmmachin combin scalabl scalabl w 0 amount work need maintain averag speed system size chang p p 0 w problem size solv p processor use definit sinc sequenti cost fix eq 11 fix averag speed equival fix gener effici therefor isospe scalabl seen isogeneralizedeffici scalabl memori influenc consed ie c p w independ problem size isogeneralizedeffici isotraditionaleffici case isospe scalabl isoeffici scalabl propos kumar 13 2 lemma 3 sequenti cost c p w independ problem size simpl analysi model 4 use speedup isoeffici isospe scalabl equival follow theorem give relat scalabl fixedtim speedup theorem 1 scalabl 12 equal one fixedtim gener speedup unitari proof let cs w 0 defin eq 7 scalabl 12 equal 1 let defin eq 12 defin w 0 similarli w number processor p p 0 definit gener speedup arithmet manipul similarli eq 13 two equat fix speed equat 13 substitut eq 15 eq 14 equat 16 correspond unitari speedup g 1 equal one work w unitari speedup defin definit 1 fixedtim gener speedup unitari number processor p p 0 correspond problem size w w 0 w 0 scale problem size fixedtim constraint therefor averag speed maintain also sinc equal scalabl 12 equal one 2 follow theorem give relat memorybound speedup fixedtim speedup theorem gener speedup howev base lemma 1 result true tradit speedup uniprocessor cost fix simpl analysi model use theorem 2 problem size increas proport number processor memorybound scaleup memorybound gener speedup linear fixedtim gener speedup linear proof let cs w 0 c p w w w defin theorem 1 let w 0 w scale problem size fixedtim memorybound scaleup respect w 0 w defin accordingli memorybound speedup linear constant 0 combin two equat equat assumpt w proport number processor avail substitut eq 18 eq 17 get fixedtim equal w fixedtim gener speedup linear fixedtim speedup linear follow similar deduct use eq 17 appli fixedtim equal eq 19 eq 20 reduc equat assumpt eq 18 eq 21 lead memorybound gener speedup linear 2 assumpt theorem 2 problem size work increas proport number processor assumpt true mani applic howev true dens matrix comput memori requir squar function order matrix comput cubic function order matrix kind comput intens applic gener memorybound speedup lead larg speedup follow corollari direct result theorem 1 theorem 2 corollari 1 problem size increas proport number processor memorybound scaleup memorybound gener speedup unitari fixedtim gener speedup unitari corollari 2 work increas proport number processor scalabl 12 equal one memorybound gener speedup unitari sinc uniprocessor cost vari share virtual memori machin theoret result applic tradit speedup share virtual memori machin final complet discuss superlinear speedup new caus superlin gener speedup new sourc superlinear speedup call profil shift 11 due problem size differ sequenti parallel process see figur 1 applic may contain differ work type problem size increas work type may increas faster other work type lower cost increas faster superlinear speedup may occur superlinear speedup due profil shift studi 11 4 experiment result section discuss time result solv scientif applic ksr1 parallel comput first give brief descript architectur applic present time result analys 41 machin ksr1 comput discuss repres parallel comput share virtual memori figur 3 show architectur ksr1 parallel comput 14 processor ksr1 32 mbyte local memori cpu superscalar processor peak perform 40 mflop doubl precis processor organ differ ring local ring ring0 connect 32 processor higher level ring ring ring1 contain 34 local ring maximum 1088 processor nonloc data element need local search engin se0 search processor local ring ring0 search engin se0 locat data element within local ring request pass search engin next level se1 locat data done automat hierarchi search engin connect fattreelik structur 14 15 memori hierarchi ksr1 shown fig 4 processor 512 kbyte fast subcach similar normal cach parallel comput subcach divid two equal part instruct subcach data subcach 32 mbyte local memori processor call local cach local ring ring0 32 processor 1 gbyte total local cach call group0 cach access group0 cach provid search engine0 final higher level ring ring1 connect 34 ring0 ring0 connect process ring0 ring0 figur 3 configur ksr1 parallel comput mbyte local memori group0 cach 34 gb group1 cach 512 kb subcach processor search engine0 search engine1 figur 4 memori hierarchi ksr1 ring ring1 connect 34 local ring 34 gbyte total local cach call group1 cach access group1 cach provid search engine1 entir memori hierarchi call allcach memori kendal squar research access processor allcach memori system accomplish go differ search engin shown fig 4 latenc differ memori locat 16 2 cycl subcach 20 cycl local cach 150 cycl group0 cach 570 cycl group1 cach 42 applic regular least squar problem rlsp 17 frequent encount scientif engin applic 18 major work solv equat orthogon factor scheme household transform given rotat effici household algorithm discuss 19 share memori supercomput 20 distribut memori parallel comput note eq 22 also written ffi ffi b1 23 major task carri qr factor matrix b neither complet full matrix spars matrix upper part full lower part spars diagon form special structur b element matrix affect particular step submatrix b transform step column step denot b household transform describ household transform initi matrix b 1 ff 2 3 ii 4 b end calcul fi j updat b j done parallel differ index j 43 time result numer experi report conduct ksr1 parallel comput instal cornel theori center 128 processor altogeth machin period experi perform howev comput configur two standalon machin 64 processor therefor numer result obtain use less 64 processor figur 5 show tradit fixeds speedup curv obtain solv regular least squar problem differ matrix size n matrix dimens 2n theta n see clearli matrix size n increas speedup get better better case speedup 76 56 processor although well known parallel comput speedup improv problem size increas shown fig 5 certainli good reason measur real perform ksr1 problem tradit speedup defin ratio sequenti time parallel time use solv fixeds problem complex memori hierarchi ksr1 make comput speed singl processor highli depend problem size problem big data matrix put local memori 32 mbyte singl comput processor part data must put local memori processor system data access comput processor search engine0 result comput speed singl processor slow significantli due high latenc group0 cach sustain comput speed singl processor 55 mflop 45 mflop 27 mflop problem size 1024 1600 2048 respect hand multipl processor data need local memori processor comput speed suffer less high group0 cach number processor theta theta theta theta theta theta theta figur 5 fixeds tradit speedup ksr1 latenc therefor excel speedup shown fig 5 result signific uniprocessor perform degrad larg problem solv singl processor figur 6 show measur singl processor speed function problem size n household transform algorithm given implement ksr fortran algorithm numer complex 265n speed calcul use cpu time use finish comput seen fig 6 three segment repres significantli differ speed differ matrix size whole matrix fit subcach perform close 7 mflop speed decreas around 55 mflop matrix fit subcach still accommod local cach note howev matrix big access group0 cach search engine0 need perform degrad significantli clear stabl perform level observ two segment larg due high group0 cach latenc content search engin use processor machin therefor access time group0 cach less uniform compar subcach local cach take differ singl process speed differ problem size consider use gener speedup measur perform multipl processor ksr1 seen definit eq 6 gener speedup defin ratio parallel speed asymptot sequenti speed parallel speed base scale problem numer test parallel problem scale memori dorder matric subcach group0 cach theta theta theta theta figur 6 speed variat uniprocessor process ksr1 bound fashion number processor increas initi problem select base asymptot speed 55 mflop fig 6 scale proport accord number processor ie p processor problem scale size fill theta p mbyte memori memori requir unscal problem figur 7 show comparison tradit scale speedup gener speedup tradit scale speedup scale problem solv one p processor valu speedup calcul ratio time one processor p processor gener speedup scale problem solv multipl processor singl processor valu speedup calcul use eq 6 asymptot speed use sequenti speed clear fig 7 show gener speedup give much reason perform measur ksr1 tradit scale speedup tradit scale speedup speedup 20 10 processor excel superlinear speedup result sever degrad singl processor speed rather perfect scalabl machin algorithm final tabl 1 give measur isospe scalabl see eq 12 solv regular least squar problem ksr1 comput speed maintain differ number processor 325 mflop 60 asymptot speed 55 mflop size 2n theta n matrix increas number processor increas start one processor increas processor one may notic 2 tabl 1 mean machinealgorithm pair scale better 2 processor 4 processor number processor gener speedup theta theta theta theta theta theta theta theta theta tradit speedup figur 7 comparison gener tradit speedup ksr1 one processor two processor explain fact one processor matrix small enough data accommod subcach data load subcach whole comput process need data local cach group0 cach therefor data access time one processor significantli shorter two processor involv subcach local cach group0 cach pass messag result signific increas work w necessari case two processor offset extra data access time involv differ memori hierarchi major reason low 1 2 valu number processor increas 2 4 data access pattern case subcach local cach group0 cach involv work w need increas significantli offset extra commun cost go 2 processor 4 processor interest notic scalabl rlspksr1 combin rel low data tabl 1 similar decreas pattern measur comput scalabl burgncub slalomncub burgmaspar slalommaspar combin 12 scalabl decreas along column irregular behavior 1 2 2 4 interest reader may wonder measur scalabl relat measur gener speedup given fig 7 fig 7 demonstr nearli linear gener speedup correspond scalabl given tabl 1 far ideal ideal scalabl would uniti low scalabl expect recal scale speedup given fig 7 memorybound speedup 6 number processor doubl usag memori also doubl tabl 1 measur scalabl rlspksr1 combin result number element matrix increas factor 2 corollari 2 show work w increas linearli number processor unitari memorybound speedup lead ideal scalabl regular least squar applic howev work w cubic function matrix size n memori usag doubl number float point oper increas factor eight perfect gener speedup achiev p p 0 2p averag speed p p 0 eq 12 measur speedup littl lower unitari shown fig 7 less 025 scalabl expect tabl 1 confirm relat except 2 4 reason point earlier scalabl last column notic lower column 56 node involv comput commun pass ring1 slow commun significantli comput intens applic often use achiev high flop rlsp applic comput intens applic tabl 1 show isospe scalabl give credit comput intens applic comput intens applic may achiev high speed multipl processor initi speed also high isospe scalabl measur abil maintain speed rather achiev particular speed implement conduct ksr1 share virtual memori machin theoret analyt result given section 2 section 3 howev gener appli differ parallel platform instanc intel paragon parallel comput virtual memori support swap data memori disk expect ineffici sequenti process caus similar superlinear tradit speedup demonstr ksr1 distributedmemori machin support virtual memori cm5 tradit speedup anoth draw back due memori constraint scale problem often solv singl processor therefor scale speedup unmeasur defin asymptot speed similarli given section 3 gener speedup appli kind distributedmemori machin measur scalabl comput gener speedup defin parallel speed sequenti speed given reason initi sequenti speed use parallel platform measur perform scalabl comput 5 conclus sinc scale principl propos 1988 gustafson research sandia nation laboratori 21 principl wide use perform measur parallel algorithm architectur one difficulti measur scale speedup vari larg problem solv uniprocessor ineffici virtual memori support imposs otherwis overcom shortcom gener speedup propos 1 gener speedup defin parallel speed sequenti speed requir solv larg problem uniprocessor studi 1 emphas fixedtim gener speedup sizeup meet need emerg share virtual memori machin gener speedup particularli implement issu care studi current research shown tradit speedup special case gener speedup hand gener speedup reform tradit speedup main differ gener speedup tradit speedup defin uniprocessor effici uniprocessor speed fix two speedup extend result scalabl studi found differ isospe scalabl 12 isoeffici scalabl 13 also due uniprocessor effici uniprocessor speed independ problem size two propos scalabl part perform studi shown algorithmmachin combin achiev perfect scalabl achiev perfect speedup interest relat fixedtim memorybound speedup reveal seven caus superlinear speedup also list scientif applic implement kendal squar ksr1 share virtual memori machin experiment result show uniprocessor effici import issu virtual memori machin asymptot speed provid reason way defin uniprocessor effici result paper share virtual memori extend gener parallel com puter sinc uniprocessor effici directli relat parallel execut time scalabl benchmark evalu rang applic uniprocessor effici studi wider speedup uniprocessor effici might explor number context acknowledg author grate cornel theori center provid access ksr1 parallel comput refere help comment revis paper r toward better parallel perform metric advanc comput architectur parallel solut partial differenti equat vector parallel com puter valid singleprocessor approach achiev larg scale comput capabl scalabl problem memorybound speedup model speedupn greater n parallel effici greater uniti inflat speedup parallel simul via malloc perform predict scalabl comput case studi design scalabl fixedtim comput benchmark scalabl parallel algorithmmachin combin isoeffici measur scalabl parallel algorithm architectur ksr parallel program fattre univers network hardwareeffici supercomput ksr technic summari solut illpos problem gpst invers algorithm histori match 3d 2phase simul solv linear system vector share memori comput distribut orthogon factor given household algorithm develop parallel method 1024 processor hypercub tr ctr prasad jogalekar murray woodsid evalu scalabl distribut system ieee transact parallel distribut system v11 n6 p589603 june 2000 xianh sun scalabl versu execut time scalabl system journal parallel distribut comput v62 n2 p173192 februari 2002 xianh sun jianp zhu perform predict case studi use scalabl sharedvirtualmemori machin ieee parallel distribut technolog system technolog v4 n4 p3649 decemb 1996 xianh sun wu zhang parallel twolevel hybrid method tridiagon system applic fast poisson solver ieee transact parallel distribut system v15 n2 p97106 februari 2004 xianh sun mario pantano thoma fahring integr rang comparison dataparallel compil system ieee transact parallel distribut system v10 n5 p448458 may 1999