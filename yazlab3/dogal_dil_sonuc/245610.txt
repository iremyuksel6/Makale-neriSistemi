detect strong unstabl predic distribut program abstractthi paper discuss detect global predic distribut program run distribut program result set sequenti trace one process trace may combin form mani global sequenc consist singl run program strong global predic true run true global sequenc consist run present algorithm detect given strong global predic becam true run distribut program algorithm execut line well line moreov algorithm assum underli channel satisfi fifo order b introduct detect global predic fundament problem distribut comput aris design debug test distribut program global predic classifi two type stabl unstabl stabl predic one never turn fals becom true unstabl predic one without properti valu may altern true fals detect stabl predic address literatur mean global snapshot distribut comput chalam85 spekea86 bouge87 stabl properti detect take global snapshot period approach work unstabl predic may turn true two snapshot time snapshot taken entir differ approach requir predic walgar91 coomar91 garwal92 schmat92 garwal94 babmar93 tomgar93 hpr93 earlier present approach detect class unstabl predic call predic garwal94 paper continu investig detect differ class unstabl predic reader refer garwal94 discuss relat work background two type predic discuss paper first type call strong link predic refer causal sequenc local predic second type call strong conjunct predic correspond exist global state local predic true simultan introduc notion overlap interv use detect predic type cooper marzullo coomar91 also describ strong predic detect call predic definit howev deal gener predic ie propos detect definit p p predic defin global state paper restrict p conjunct local predic detect gener predic intract sinc involv combinatori work support part nsf grant ccr 9110605 navi grant n0003991c0082 trw faculti assistantship award ibm agreement 153 explos state space exampl algorithm propos cooper marzullo coomar91 complex ok n k maximum number event monitor process execut n number process fundament differ algorithm algorithm algorithm explicitli check possibl global state wherea algorithm spezialetti kearn spekea89 also discuss notion simultan howev differ one discuss paper use simultan sens possibl consist global state notion closer weak predic discuss garwal94 paper organ follow section 2 present logic specif global predic distribut program describ notion distribut run global clock global sequenc logic section 3 discuss detect link predic section 4 discuss strong conjunct predic give necessari suffici condit strong conjunct predic hold also describ algorithm detect strong conjunct predic section 5 present techniqu decentr algorithm model assum looselycoupl messagepass system without share memori global clock distribut program consist set n process denot fp commun sole via asynchron messag make assumpt order reliabl messag run concern singl run r distribut program process p run gener execut trace i0 finit sequenc local state process p run r vector trace ri trace process p defin relat local preced denot oe im state trace singl process p follow oe im immedi preced trace ri also say use oe irreflex transit closur reflex transit closur oe im state trace ri rj respect defin relat messag sent p result state receiv p j result state figur 1 illustr run also defin causal preced relat transit closur union oe im 1 2 similar lamport happenedbefor relat lamp78 except causal preced defin state rather event say concurr denot sjjt pcx 13 23 pci y3 receivey y2i figur 1 exampl run extend run r r 0 ad artifici state begin end trace ri respect event correspond begin termin execut p addit artifici state model fact process begin execut asynchron thu absenc synchron extern event may possibl one process may termin one yet begin execut let set state sequenc ri g definit impli 8s 2 defin also use sp denot process whose trace occur b global clock global clock c map 0 n set natur number follow constraint use c denot set global clock satisfi constraint interpret cs 2 process sp enter state clock valu cs thu stay state time cs csnext gamma 1 constraint model sequenti natur execut process physic requir messag transmiss requir nonzero amount time definit equival condit cc wide use definit logic clock sinc propos lamportlamp78 shown set c also satisfi convers cc ie reader refer garwal94b proof lead follow pleasant character intuit formula say causal preced run r possibl observ run agre happen c global sequenc global state vector local state definit global state differ chandi lamport includ state channel model channel set messag sent receiv yet sinc set deduc local state requir state channel explicitli includ global state given run r global clock c seqr c defin sequenc global state call global sequenc note g k well defin argument max nonempti total order oe finit set may evalu would mean process p begun execut similarli evalu process p alreadi termin execut kth prefix g ie g 0 denot g k defin findexg ie first index g u global state defin set global sequenc consist run r linearr ie follow theorem give altern character set linearr given g 2 linearr observ restrict attent singl process p would observ ri stutter ri stutter ri finit sequenc state ri may repeat finit number time lemma 1 run r g 2 linearr follow constraint hold restrict p stutter ri proof linearr impli 9c c sinc cs greater 0 6 get g 0 definit c final g c hold see s2 let cc get cs ct impli findexg findexg defin c follow c satisfi cc due s2 earlier papergarwal94 directli defin notion global sequenc paper chosen condit cc base global clock intuit easier justifi two properti global sequenc also deduc s3 say set x concurr state exist global sequenc g goe global state g k local state x occur g k none occur logic global predic describ logic specif global predic three syntact categori logic bool lin form syntax logic follow form lin j e lin lin 3 lin j lin lin bool predic global state bool boolean express defin singl global state system valu determin global state known exampl global state bool x true x could part differ process lin tempor formula defin global sequenc bool true global sequenc true last state g 3 lin mean exist prefix global sequenc lin true prefix also use 2 dual 3 introduc binari oper captur sequenc directli p q mean exist prefix g j global sequenc p true prefix g q true prefix g j form defin run simpli lin qualifi e quantifi set global sequenc run may exhibit given trace process ap mean predic p hold global sequenc ep mean predic p hold global sequenc call formula start strong formula formula start e weak formula intuit behind term strong strong predic true matter fast slow individu process system execut long execut consist run hold execut speed gener trace individu process weak predic true exist least one global sequenc true word predic made true choos appropri execut speed variou processor semant defin paper slightli differ garwal94 garwal94 bool defin true global sequenc true first global state sequenc paper bool requir true last global state current version use easier understand intuit logic garwal94 base futur logic paper base past sinc past known point execut easier evalu formula current state follow exampl strong formula detect algorithm 1 suppos develop algorithm work phase assum system three node three phase algorithm let predic phase ij denot process p phase j follow formula ensur process p 2 phase 3 process phase 2 phase 12 phase 23 phase 22 phase 23 phase 32 phase 23 2 suppos test commit protocol let readi denot local predic process p readi commit follow formula would check certain point execut process readi commit 3 suppos want test distribut minimum span tree algorithm let local predic process p know parent follow formula would indic system reach state node network know parent 3 link predic class predic use detect sequenc event distribut program use lp denot local predic process lp denot predic lp true state assum local predic lp construct local variabl process mean truth lp chang intern event word extern event make local predic chang true fals viceversa thu predic messag sent p q consid valid lp although appear limit predic easili model framework assum intern event record send messag boolean variabl msg sent condit msg sent valid local predic assumpt equival follow 1 2 differ snext a1 say snext differ evalu lp causal relationship state ident also use follow assumpt evalu fals artifici state assumpt also restrict captur intent defin state predic form alp lp j mean global sequenc exist instanc lp true lp j alp mean global sequenc exist instanc lp true lp j true lp k treat left associ oper leav parenthes call formula form lp 1 lp 2 delta delta delta lpm strong link predic follow theorem use design algorithm detect predic note one side proof obviou convers difficult address literatur one main result section theorem 2 let lp 1 lp 2 local predic process j respect run r exist state ri j rj proof s1 conclud global sequenc 2 linearr state g k g l g k s2 know findexg show state exist formula lp 1 lp 2 fals lh rh lp 1 lp 2 true state ri rj respect formula trivial fals consid first state ri lp 1 true call state similarli j defin use last state rj lp 2 true negat left hand side impli 6 j consid state j next state exist a2 may j let defin fsk j nextg note could possibl see fig 2 global state figur 2 link predic case analysi case 1 mean concurr j next definit sinc 6 j get 6 j next a1 impli j next turn impli contradict case 2 sinc concurr j next lemma s3 exist global sequenc g j next occur global state first time predic lp 1 true preced global state lp 2 fals follow global state thu two global state x lp 1 x lp 2 x occur g result gener sequenc two local predic garwal94b intuit behind algorithm detect strong link predic fig follow alp 1 lp 2 true state lp 1 occur happen state lp 2 occur predic process occurr lp 1 would known lp 2 occur lp 2 differ process definit know must messag path second process use messag path inform second process occurr lp 1 var detectflag boolean alway true iff curpr 1 pred list list findex1m predloc predic g predic local process curpr integ initi begin updat predic next one process detect curpr pred list tail pred list curpredmaxcurpr hiscurpr send includ curpr messag figur 3 algorithm strong link predic implement algorithm follow variabl pred list process keep list logic predic local process increas order indic appear strong link predic variabl curpr keep index next local predic strong link predic need detect current known process curpr becom process strong link predic detect show correct algorithm let link 1 predic link 1 defin true also use sx refer valu variabl x state follow lemma describ assert variabl curpr lemma 3 local state proof show assert true initi state maintain program sinc curpr initi 1 assert trivial true initi state process induct case let oe im assum assert hold show true consid two case case 1 event execut receiv sinc assert hold link scurpr hold lp scurpr true linkt scurpr hold oe im also easi see scurpr maximum j linkt hold increment scurpr assert maintain case 2 messag receiv sent state u part proof follow observ link impli linkt j assert hold u maintain take max scurpr ucurpr theorem 4 termin algorithm exist process detectflag true lp 1 lp 2 delta delta delta lpm true proof first show strong link predic true detect algorithm let strong link predic true mean termin exist state link 1 true lemma 3 scurpr follow process state detectflag set convers assum sdetectf lag true ie scurpr 1 lemma 3 mean link m1 hold theorem 2 happen lp 1 algorithm requir extra messag requir messag contain valu curpr henc messag grow size olog bit number local predic link predic algorithm also use detect dp disjunct local predic differ detect predic strong link predic index may occur pred list one process miller choi mill88 also propos similar algorithm link predic algorithm process p send predic marker along channel direct away p detect local predic thu algorithm assum underli commun channel fifo note assumpt also exploit stop program consist state use algorithm similar chandi lamport chalam85 4 strong conjunct predic conjunct predic form interest class predic logic strong conjunct predic true system alway reach global state given local predic true state formal strong conjunct predic local predic practic speak strong conjunct predic use good desir predic ie predic programm would like true point program exampl case distribut twophas commit protocol master decid commit transact must true program global state slave readi commit program execut commit global state slave process readi occur program error section present condit necessari suffici strong conjunct predic hold one main result paper condit use notion interv interv defin sequenc consecut state trace begin state design ilo end state design ihi conveni assum ilo ihi distinct ilo oe ihi restrict model interv singl state suffici stutter state set interv belong differ process trace said overlap repres overlapi follow hold intuit notion overlap interv mean interv lo order interv assum n lp local predic differ process lp 1 lp 2 anoth local predic lp 1 lp 2 belong process use lp denot local predic lp true entir interv follow lemma show exist overlap interv suffici ensur global sequenc go global state lp proof use definit overlap interv know mean lo 0 must appear hi 0 global sequenc therefor everi possibl global sequenc state greater equal lo 0 less equal hi 0 state boolean express lp true henc strong conjunct predic show condit also necessari oblig show condit violat exist global sequenc strong conjunct predic fals proof exist global sequenc construct global sequenc construct properti go global state lp true call global sequenc pure formal definit 6 global sequenc construct pure global sequenc concaten togeth multipl pure global subsequ let g global sequenc run consist global state x consist global state ie x first global state g last global state g h global sequenc global state global state z easi see g concaten h also global sequenc x z construct pure global sequenc use intermedi state satisfi certain properti let x global state denot firstx mtupl interv k x first interv rk end state xk lp k true firstx may exist process p k lp k never becom true xk global state call consist use consist global state descript intermedi consist global state use construct pure global sequenc satisfi admiss properti definit 7 x admiss intermedi global state either firstx exist exist k l k xlo 6 l xhi lp k xk word exist two interv k l overlap k xlo 6 l xhi lp k true state xk readi show lemma 8 proof global state x b c acd bcd ace bce figur 4 ix firstx let ix global state x set mtupl interv lp true th trace see fig 4 local state xi show none mtupl interv satisfi overlap condit exist global sequenc distribut program never mtupl x aim construct pure global sequenc g start x global state built pure global sequenc start x remain task build pure global sequenc x stop initi choos start show pure global sequenc x jixj thu continu manner reach global state z point global sequenc pure start state admiss assumpt either firststart exist exist k l k startlo 6 l starthi moreov lp k fals k a2 suppos given admiss global state x jixj 0 first interv rj lp j true end state xj x admiss firstx exist jixj 0 exist k l k xlo 6 l xhi lp k xk defin local state l xhinext state exist a2 may l construct global sequenc x anoth admiss global state defin minimum consist global state global state exist set consist cut ideal lattic matt89 ideal grow ad one element time djr93 first show lp k never true xk yk suffici show know k xlo 6 l xhi appli a1 twice follow k xloprev 6 l xhinext thu exist consist global state z contain zk k xloprev minimum consist global state get yk k xloprev impli lp k never true xk yk thu global sequenc x pure see figur 5 x ik il ik il figur 5 illustr proof strong conjunct predic still need show admiss firsti exist done otherwis know exist k 0 l 0 k 0 ylo 6 l 0 yhi see fig 5 admiss state done otherwis yk 0 insid interv k 0 k 0 yloprev 6 find consist global state z yloprev minimum state k 0 ylo yk 0 z exist thu k 0 a1 equival k 0 show admiss l ylo 6 l 0 yl second conjunct clearli true definit show first conjunct k 0 l xhi l xhi oe l ylo follow k 0 l ylo therefor l ylo l 0 yhi inconsist k 0 ylo 6 l 0 yhi thu first conjunct l ylo 6 l 0 yhi also hold see necessari suffici condit strong conjunct predic hold interv delimit lo 0 local predic transit fals true transit true fals must overlap point discuss role a2 consid scenario two process lp 1 lp 2 true throughout execut p 1 p 2 respect p 1 p 2 never commun exist overlap interv lp 1 lp 2 howev may seem reader global sequenc global state lp 1 lp 2 true global sequenc exist global state satisfi strong conjunct predic obtain run one process complet start clearli unless execut process synchron manner sequenc proper global sequenc a2 lp 1 lp 2 fals initi state process begun execut final state process finish execut 41 algorithm detect strong conjunct predic describ algorithm check whether interv local predic hold overlap algorithm execut two kind process noncheck process checker process base slight modif timestamp vector propos fidgefidge88 mattern matt89 process detect local predic record timestamp interv associ predic interv sent checker process use decid strong conjunct predic becam true noncheck process local lcmvector timestamp process messag id last messag p anybodi causal relationship p j lcmvectorj process p j next messag id p j use time local predic process chang fals true current valu lcmvector rememb interv lo next truetofals transit denot fig 6 process send store lcmvector interv lo current lcmvector interv hi checker process debug messag next observ process requir send interv everi time local predic detect interv need sent messag activ sinc last time interv sent lcmvector chang valu messag sent receiv show suffici send lcmvector messag receiv irrespect number messag sent let predic firstlmri true iff local predic true first time sinc last messag receiv begin trace say scpi true 1 interv differ process make strong conjunct predic true theorem 5 theorem 9 9i proof symmetri suffici prove exist j 1 scpj 1 first interv trace p 1 lp j 1 true sinc proof oblig show scpj 1 suffici show overlapj 1 k 1 lo k hi j 1 therefor moreov messag receiv j 1 hi 1 hi last causal messag made k lo 1 hi true must arriv j 1 hi therefor also true k lo j 1 hi henc conclud overlapj 1 k process p id var lcmvector array 1n 0maxmid init 8ii 6id last causal msg rcvd process 1 n respec current interv record lo hi 0maxmidend firstflag boolean init true local pred boolean express local pred test process 2 send send prog midgen upon receiv prog mid msg firstflag true upon local pred firstflag current intervallo lcmvector upon local pred firstflag current intervalhi lcmvector send dbg current interv checkerproc firstflag fals figur algorithm strong conjunct process noncheck process p id domin space complex algorithm due array lcmvector main time complex involv detect local predic sequenti debugg worst case one debug messag gener program messag receiv worst case messag complex om r number program messag receiv give algorithm checker process detect strong conjunct predic use debug messag sent process checker process separ queue process involv strong conjunct predic incom debug messag process enqueu appropri queue ensur checker process get messag process fifo order requir comput var queue record lo hi timevectorend chang newchang set f12mg upon recvelem p k chang chang 6 oe begin newchang fg chang j 12m begin newchangednewchang fig newchangednewchang fjg end chang newchang chang deleteheadq end figur 7 algorithm strong conjunct checker process check lcmvector u less vector v differ process j interv process p p j vector pair x respect overlapi j iff xlo proof proof follow fact state time vector u v thu task checker process reduc check order lcmvector determin interv overlap lemma use term interv vectorpair interchang follow lemma show checker process avoid check possibl combin interv lemma 11 let x two vector pair head respect queue overlap least one elimin consider check see strong conjunct predic satisfi proof order strong conjunct predic true must exist set interv one queue overlap other set let two interv x head queue overlap mean either xlo 6 yhi ylo 6 xhi assum former without loss gener show elimin case let x 0 anoth interv queue x overlap impli x xlo yhi contradict checker process receiv debug messag contain timestamp pair process execut algorithm fig 7 element queue interv comparison done hi 0 lo 0 interv checker process reduc number comparison delet vectorpair head queue whose hi lcmvector greater lo lcmvector vectorpair head queue checker process detect strong conjunct predic true find set interv head queue pairwis overlap algorithm requir om 2 p comparison number queue length p 5 decentr algorithm show techniqu decentr algorithm set interv pair interv overlap follow hold denot predic overlap aim show condit check decentr manner need concept greatest lower bound set interv let x set interv interv x defin pair vector xlo xhi xlo xhi defin order v element set follow easili check x v partial order partial order x u x follow theorem show process find overlapx decompos smaller set theorem 12 let xy z set interv clearli true z x need show let zg sinc overlapi overlapz z belong x prove overlapi z need show lo z show first conjunct overlapx get particular definit z conclud lo z hi show p 1 hold x ie z belong either z true overlapi overlapz let us assum without loss gener 2 z 2 z need show ylo zhi true ylo lo z hi zhi first last inequ follow definit z middl inequ follow overlapi z use theorem notion hierarchi algorithm check strong conjunct predic decentr follow may divid set process two group group checker process check strong conjunct predic within group find one send greatest lower bound interv higher process hierarchi process check last conjunct theorem clearli argument gener hierarchi depth 6 applic main applic result debug test distribut program incorpor algorithm distribut debugg hoagla92 onlin debugg abl detect global state sequenc global state distribut comput architectur distribut debugg shown figur 8 applic process attach two process gdb process monitor process gdb sequenti debugg use detect local predic monitor process respons attach vector time inform messag also report central coordin process whenev interv detect monitor process also detect strong link predic use algorithm outlin earlier one coordin process system receiv inform monitor process check strong weak conjunct predic coordin also provid singl userinterfac programm distribut debugg run cluster sun workstat run suno applic process gdb applic process gdb coordin userinterfac checker algorithm scp monitor monitor vector clock slp algorithm figur 8 architectur distribut debugg also use algorithm implement trace analyz distribut program chin91 analyz monitor distribut program gather enough inform form distribut run user ask whether global predic becam true conclus discuss detect global predic distribut program earlier algorithm detect global predic propos chandi lamport work stabl predic algorithm detect even unstabl predic reason time space messag complex paper emphas conjunct predic disjunct predic reason disjunct predic quit simpl detect disjunct predic form alp 1 lp form elp 1 lp turn simpl case consid express equival detect disjunct predic alp 1 lp suffici process p monitor lp process find local predic true disjunct predic true also discuss predic form 2bool predic dual discuss garwal94 algorithm given paper detect predic form a3bool bool conjunct local predic would great interest algorithm gener detect predic bool boolean express local predic acknowledg would like thank bryan chin moham gouda greg hoagland jay misra michel raynal alex tomlinson comment earlier version work would also like thank bryan chin implement offlin version algorithm greg hoagland incorpor algorithm distribut debugg also thank anonym refere meticul review earlier version paper r consist global state distribut system fundament concept mechan distribut debug tool heterogen distribut sy tem repeat snapshot distribut system synchron commun implement csp distribut snapshot determin global state distribut system offlin debugg distribut program consist detect global predic reachabl analysi distribut execut partial order parallel debug detect unstabl predic distribut program use induct prove properti distribut program detect weak unstabl predic distribut program detect strong unstabl predic distribut program global event global breakpoint distribut system debugg distribut program detect atom sequenc predic distribut comput time clock order event distribut system virtual time global state distribut system debug concurr program breakpoint halt distribut program detect causal relationship distribut comput search holi grail effici distribut snapshot simultan region framework consist monitor distribut system detect relat global predic distribut system unstabl predic detect distribut program tr ctr sridhar alagar subbarayan venkatesan techniqu tackl state explos global predic detect ieee transact softwar engin v27 n8 p704714 august 2001 hsienkuang chiou willard korfhag enf event predic detect distribut system proceed thirteenth annual acm symposium principl distribut comput p91100 august 1417 1994 lo angel california unit state punit chandra ajay kshemkalyani distribut algorithm detect strong conjunct predic inform process letter v87 n5 p243249 15 septemb loonbeen chen ichen wu effici distribut onlin algorithm detect strong conjunct predic ieee transact softwar engin v28 n11 p10771084 novemb 2002 ajay kshemkalyani finegrain modal classif global predic ieee transact parallel distribut system v14 n8 p807816 august alexand tomlinson vijay k garg detect relat global predic distribut system acm sigplan notic v28 n12 p2131 dec 1993 jeanmichel hlari achour mostefaoui michel raynal communicationinduc determin consist snapshot ieee transact parallel distribut system v10 n9 p865877 septemb 1999 guy dumai hon f li distribut predic detect seriesparallel system ieee transact parallel distribut system v13 n4 p373387 april 2002 craig chase vijay k garg detect global predic techniqu limit distribut comput v11 n4 p191201 octob 1998 vijay k garg method observ global properti distribut system ieee parallel distribut technolog system technolog v5 n4 p6977 octob 1997 jm hlari mostefaoui r h b netzer raynal communicationbas prevent useless checkpoint distribut comput distribut comput v13 n1 p2943 januari 2000 ashi tarafdar vijay k garg predic control synchron distribut comput lookahead journal parallel distribut comput v64 n2 p219237 februari 2004 scott stoller detect global predic distribut system clock distribut comput v13 n2 p8598 april 2000 punit chandra ajay kshemkalyani causalitybas predic detect across space time ieee transact comput v54 n11 p14381453 novemb 2005 felix c grtner fundament faulttoler distribut comput asynchron environ acm comput survey csur v31 n1 p126 march 1999