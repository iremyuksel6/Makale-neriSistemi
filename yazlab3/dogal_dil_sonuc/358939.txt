data prefetch mechan expand gap microprocessor dram perform necessit use increasingli aggress techniqu design reduc hide latenc main memori access although larg cach hierarchi proven effect reduc latenc frequent use data still uncommon mani program spend half run time stall memori request data prefetch propos techniqu hide access latenc data referenc pattern defeat cach strategi rather wait cach miss initi memori fetch data prefetch anticip miss issu fetch memori system advanc actual memori refer effect prefetch must implement way prefetch time use introduc littl overhead secondari effect cach pollut increas memori bandwidth requir must also taken consider despit obstacl prefetch potenti significantli improv overal program execut time overlap comput memori access prefetch strategi divers singl strategi yet propos provid optim perform follow survey examin sever altern approach discuss design tradeoff involv implement data prefetch strategi b introduct metric microprocessor perform increas dramat rate past decad trend sustain continu architectur innov advanc microprocessor fabric technolog contrast main memori dynam ram dram perform increas much leisur rate shown figur 1 expand gap microprocessor dram perform necessit use increasingli aggress techniqu design reduc hide larg latenc memori access 16 chief among latenc reduc techniqu use cach memori hierarchi 34 static ram sram memori use cach manag keep pace processor memori request rate continu expens main store technolog although use larg cach hierarchi proven effect reduc averag memori access penalti program show high degre local address pattern still uncommon scientif dataintens program spend half run time stall memori request 25 larg dens matrix oper form basi mani applic typic exhibit littl local therefor defeat cach strategi poor cach util applic partial result demand memori fetch polici cach polici fetch data cach main memori processor request word found absent cach situat illustr figur 2a comput includ memori refer satisfi within cach hierarchi repres upper time line main memori access time repres lower time line figur data block associ memori refer r1 r2 r3 found cach hierarchi must therefor fetch main memori assum referenc data word need immedi processor stall wait correspond cach block fetch data return main memori cach forward processor comput may proceed year performance101000 system figur 1 system dram perform sinc 1988 system perform measur specfp92 dram perform row access time valu normal 1988 equival sourc internet spectabl ftpftpcstorontoedupubjddspect note fetch polici alway result cach miss first access cach block sinc previous access data store cach cach miss known cold start compulsori miss also referenc data part larg array oper like data replac use make room new array element stream cach data block need later processor must bring main memori incur full main memori access latenc call capac miss mani cach miss avoid augment demand fetch polici cach addit data prefetch oper rather wait cach miss perform memori fetch data prefetch anticip miss issu fetch memori system advanc actual memori refer prefetch proce parallel processor comput allow memori system time transfer desir data main memori cach ideal prefetch complet time processor access need data cach without stall processor increasingli common mechan initi data prefetch explicit fetch instruct issu processor minimum fetch specifi address data word brought cach space fetch instruct execut address simpli pass memori system without forc processor wait respons cach respond fetch manner similar ordinari load instruct except aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa3010a b c time aaaa aaaa aaaa aaaa aaaa aaaa comput memori acesss cach hit cach miss prefetch figur 2 execut diagram assum prefetch b perfect prefetch c degrad prefetch referenc word forward processor cach figur 2b show prefetch use improv execut time demand fetch case given figur 2a latenc main memori access hidden overlap comput memori access result reduct overal run time figur repres ideal case prefetch data arriv request processor less optimist situat depict figur 2c figur prefetch refer r1 r2 issu late avoid processor stall although data r2 fetch earli enough realiz benefit note data r3 arriv earli enough hide memori latenc must held processor cach period time use processor time prefetch data expos cach replac polici may evict cach use occur prefetch said useless perform benefit deriv fetch block earli prematur prefetch block may also displac data cach current use processor result known cach pollut note effect distinguish normal cach replac miss prefetch caus miss cach would occur prefetch use defin cach pollut howev prefetch block displac cach block referenc prefetch block use ordinari replac miss sinc result cach miss would occur without prefetch subtl side effect prefetch occur memori system note figur 2a three memori request occur within first 31 time unit program startup wherea figur 2b request compress period 19 time unit remov processor stall cycl prefetch effect increas frequenc memori request issu processor memori system must design match higher bandwidth avoid becom satur nullifi benefit prefetch particularli true multiprocessor bu util typic higher singl processor system also interest note softwar prefetch achiev reduct run time despit ad instruct execut stream figur 3 memori effect figur 2 ignor comput compon run time shown seen three prefetch instruct actual increas amount work done processor sever hardwarebas prefetch techniqu also propos requir use explicit fetch instruct techniqu employ special hardwar monitor processor attempt infer prefetch opportun although hardwar prefetch incur instruct overhead often gener unnecessari prefetch softwar prefetch unnecessari prefetch common hardwar scheme specul futur memori access without benefit compiletim inform specul incorrect cach block actual need brought cach although unnecessari prefetch affect correct program behavior result cach pollut aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa prefetch overhead prefetch figur 3 softwar prefetch overhead consum memori bandwidth effect data prefetch must implement way prefetch time use introduc littl overhead secondari effect memori system must also taken consider design system employ prefetch strategi despit obstacl data prefetch potenti significantli improv overal program execut time overlap comput memori access prefetch strategi divers singl strategi yet propos provid optim perform follow section altern approach prefetch examin compar rel strength weak 2 background prefetch form exist sinc midsixti earli studi 1 cach design recogn benefit fetch multipl word main memori cach effect block memori transfer prefetch word surround current refer hope take advantag spatial local memori refer hardwar prefetch separ cach block later implement ibm 370168 amdahl 470v 33 softwar techniqu recent smith first allud idea survey cach memori 34 time doubt use later porterfield 29 propos idea cach load instruct sever risc implement follow shortli thereaft prefetch restrict fetch data main memori processor cach rather gener applic techniqu move memori object memori hierarchi actual need processor prefetch mechan instruct file system commonli use prevent processor stall exampl 3828 sake breviti techniqu appli data object resid memori consid nonblock load instruct share mani similar data prefetch like prefetch instruct issu advanc data actual use take advantag parallel processor memori subsystem rather load data cach howev specifi word place directli processor regist nonblock load exampl bind prefetch name valu prefetch variabl bound name locat processor regist case time prefetch issu although nonblock load discuss form bind prefetch examin data prefetch receiv consider attent literatur potenti mean boost perform multiprocessor system interest stem desir reduc particularli high memori latenc often found system memori delay tend high multiprocessor due ad content share resourc share bu memori modul symmetr multiprocessor memori delay even pronounc distributedmemori multiprocessor memori request may need satisfi across interconnect network mask signific memori latenc prefetch effect mean speed multiprocessor applic due emphasi prefetch multiprocessor system mani prefetch mechan discuss studi either larg exclus context sever mechan may also effect singl processor system multiprocessor prefetch treat separ topic prefetch mechan inher system 3 softwar data prefetch contemporari microprocessor support form fetch instruct use implement prefetch 33137 implement fetch simpl load processor regist hardwir zero slightli sophist implement provid hint memori system prefetch block use inform may use multiprocessor data prefetch differ share state exampl although particular implement vari fetch instruct share common characterist fetch nonblock memori oper therefor requir lockupfre cach 21 allow prefetch bypass outstand memori oper cach prefetch typic implement way fetch instruct caus except except suppress prefetch insur remain option optim featur affect program correct initi larg potenti unnecessari overhead page fault memori except hardwar requir implement softwar prefetch modest compar prefetch strategi complex approach lie judici placement fetch instruct within target applic task choos program place fetch instruct rel match load store instruct known prefetch schedul practic possibl precis predict schedul prefetch data arriv cach moment request processor case figur 2b execut time prefetch match memori refer may vari memori latenc uncertainti predict compil time therefor requir care consider schedul prefetch instruct program fetch instruct may ad programm compil optim pass unlik mani optim occur frequent program tediou implement hand prefetch schedul often done effect programm studi indic ad prefetch direct program substanti improv perform 24 howev program effort kept minimum program contain mani prefetch opportun compil support may requir whether handcod autom compil prefetch often use within loop respons larg array calcul loop provid excel prefetch opportun common scientif code exhibit poor cach util often predict array referenc pattern establish pattern compiletim fetch instruct place insid loop bodi data futur loop iter prefetch current iter exampl loopbas prefetch may use consid code segment shown figur 4a loop calcul inner product two vector b manner similar innermost loop matrix multipl calcul assum fourword cach block code segment caus cach miss everi fourth iter attempt avoid cach miss ad prefetch direct shown figur 4b note figur sourc code represent assembl code would gener compil simpl approach prefetch suffer sever problem first need prefetch everi iter loop sinc fetch actual bring four word one cach block cach although extra prefetch oper illeg unnecessari degrad perform assum b cach block align prefetch done everi fourth iter one solut problem surround fetch direct condit test modulo true overhead explicit prefetch predic howev would like offset benefit prefetch therefor avoid better solut unrol loop factor r r equal number word prefetch per cach block shown figur 4c unrol loop involv replic loop bodi r time increas loop stride r note fetch b c figur 4 inner product calcul use prefetch b simpl prefetch c prefetch loop unrol softwar pipelin direct replic index valu use calcul prefetch address chang i1 ir code segment given figur 4c remov cach miss unnecessari prefetch improv possibl note cach miss occur first iter loop sinc prefetch never issu initi iter unnecessari prefetch occur last iter unrol loop fetch command attempt access data past loop index boundari problem remedi use softwar pipelin techniqu shown figur 4d figur extract select code segment loop bodi place either side origin loop fetch statement prepend main loop prefetch data first iter main loop includ ip segment code refer loop prolog epilog ad end main loop execut final inner product comput without initi unnecessari prefetch instruct code given figur 4 said cover loop refer refer preced match prefetch howev one final refin may necessari make prefetch effect exampl figur 4 written implicit assumpt prefetch one iter ahead data actual use suffici hide latenc main memori access may case although earli studi 4 base assumpt klaiber levi 20 recogn suffici gener solut loop contain small comput bodi may necessari initi prefetch iter data referenc known prefetch distanc express unit loop iter mowri et al 25 later simplifi comput l l averag memori latenc measur processor cycl estim cycl time shortest possibl execut path one loop iter includ prefetch overhead choos shortest execut path one loop iter use ceil oper calcul design err conserv side thu increas likelihood prefetch data cach request processor return main loop figur 4d let us assum averag miss latenc 100 processor cycl loop iter time 45 cycl 3 figur 5 show final version inner product loop alter handl prefetch distanc three note prolog expand includ loop prefetch sever cach block initi three iter main loop also main loop shorten stop prefetch three iter end comput chang necessari epilog carri remain loop iter prefetch loop transform outlin fairli mechan refin appli recurs nest loop sophist compil algorithm base approach develop automat add fetch instruct optim pass compil 25 vari degre success bernstein et al 3 measur runtim twelv scientif benchmark without use prefetch powerpc 601 base system prefetch typic improv runtim less 12 although one benchmark ran 22 faster three other actual ran slightli slower due prefetch instruct overhead santhanam et al 31 found six ten specfp95 benchmark program ran 26 98 faster pa8000bas system prefetch enabl three four remain specfp95 program show less 7 improv runtim one program slow 12 compil must abl reliabl predict memori access pattern prefetch normal restrict loop contain array access whose indic linear function loop indic loop rel common scientif code far less gener applic attempt establish similar softwar prefetch strategi applic hamper irregular referenc pattern 92223 given complex control structur typic gener applic often limit window reliabl predict particular datum access moreov cach block access less chanc sever success cach block also request data structur graph link list use final compar high tempor local mani gener applic often result high cach util therebi diminish benefit prefetch even restrict wellconform loop structur use explicit fetch instruct exact perform penalti must consid use softwar prefetch fetch instruct add processor overhead requir extra execut cycl also fetch sourc address must calcul store processor ideal prefetch address retain need recalcul match load store instruct alloc retain regist space prefetch address howev compil less regist space alloc activ variabl addit fetch instruct therefor said increas regist pressur turn may result addit spill code manag variabl spill main memori due insuffici regist space problem exacerb prefetch distanc greater one sinc impli either maintain address regist hold multipl prefetch address store address memori requir number address regist avail compar transform loop figur 5 origin loop seen softwar prefetch also result signific code expans turn may degrad instruct cach perform final softwar prefetch done static unabl detect prefetch block prematur evict need refetch prolog prefetch main loop prefetch comput comput figur 5 final inner product loop transform 4 hardwar data prefetch sever hardwar prefetch scheme propos add prefetch capabl system without need programm compil intervent chang exist execut necessari instruct overhead complet elimin hardwar prefetch also take advantag runtim inform potenti make prefetch effect 41 sequenti prefetch prefetch scheme design fetch data main memori processor cach unit cach block note howev multipl word cach block form data prefetch group consecut memori word singl unit cach exploit principl spatial local implicitli prefetch data like referenc near futur degre larg cach block effect prefetch data limit ensu cach pollut effect cach block size increas amount potenti use data displac cach make room new block sharedmemori multiprocessor privat cach larg cach block may also caus fals share occur two processor wish access differ word within cach block least one access store although access logic appli separ word cach hardwar unabl make distinct sinc oper whole cach block access therefor treat oper appli singl object cach coher traffic gener ensur chang made block store oper seen processor cach block case fals share traffic unnecessari sinc processor execut store refer word written increas cach block size increas likelihood two processor share data block henc fals share like aris sequenti prefetch take advantag spatial local without introduc problem associ larg cach block simplest sequenti prefetch scheme variat upon one block lookahead obl approach initi prefetch block b1 block b access differ simpli doubl block size prefetch block treat separ regard cach replac coher polici exampl larg block may contain one word frequent referenc sever word use assum lru replac polici entir block retain even though portion block data actual use larg block replac two smaller block one could evict make room activ data similarli use smaller cach block reduc probabl fals share occur obl implement differ depend type access block b initi prefetch b1 smith 34 summar sever approach prefetchonmiss tag prefetch algorithm discuss prefetchonmiss algorithm simpli initi prefetch block b1 whenev access block b result cach miss b1 alreadi cach memori access initi tag prefetch algorithm associ tag bit everi memori block bit use detect block demandfetch prefetch block referenc first time either case next sequenti block fetch smith found tag prefetch reduc cach miss ratio unifi instruct data cach 50 90 set tracedriven simul prefetchonmiss less half effect tag prefetch reduc miss ratio reason prefetchon miss less effect illustr figur 6 behavior algorithm access three contigu block shown seen strictli sequenti access pattern result cach miss everi cach block prefetchonmiss algorithm use access pattern result one cach miss employ tag prefetch algorithm hp pa7200 5 serv exampl contemporari microprocessor use obl prefetch hardwar pa7200 implement tag prefetch scheme use either direct undirect mode undirect mode next sequenti line prefetch direct mode prefetch direct forward backward distanc determin prepostincr amount encod load store instruct content address regist autoincr cach block associ new address prefetch compar base case prefetch pa7200 achiev runtim improv rang 0 80 10 specfp95 benchmark program 35 although perform found applicationdepend two program ran 20 faster prefetch enabl note one shortcom obl scheme prefetch may initi far enough advanc actual use avoid processor memori stall sequenti access stream result tight loop exampl may allow suffici lead time use block b request block b1 solv problem possibl increas number block prefetch demand fetch one k k known degre prefetch prefetch k 1 subsequ block aid memori system stay ahead demandfetch prefetch demandfetch prefetch demandfetch prefetch demandfetch prefetch demandfetch prefetch demandfetch prefetch prefetched0 demandfetch prefetch prefetch prefetch demandfetch prefetch demandfetch prefetch prefetch demandfetch prefetch prefetch prefetched1 prefetch prefetch prefetch c b figur 6 three form sequenti prefetch prefetch miss b tag prefetch c sequenti prefetch 2 rapid processor request sequenti data block prefetch block b access first time cach interrog check block b1 bk present cach miss block fetch memori note scheme ident tag obl prefetch although increas degre prefetch reduc miss rate section code show high degre spatial local addit traffic cach pollut gener sequenti prefetch program phase show littl spatial local przybylski 30 found overhead tend make sequenti prefetch unfeas valu k larger one dahlgren stenstrm 11 propos adapt sequenti prefetch polici allow valu k vari program execut way k match degre spatial local exhibit program particular point time prefetch effici metric period calcul cach indic current spatial local characterist program prefetch effici defin ratio use prefetch total prefetch use prefetch occur whenev prefetch block result cach hit valu k initi one increment whenev prefetch effici exce predetermin upper threshold decrement whenev effici drop lower threshold shown figur 7 note k reduc zero prefetch effect disabl point prefetch hardwar begin monitor often cach miss block b occur block b1 cach restart prefetch respect ratio two number exce lower threshold prefetch effici simul share memori multiprocessor found adapt prefetch could achiev appreci reduct cach miss ratio tag prefetch howev simul runtim comparison show slight differ two scheme lower miss ratio adapt sequenti prefetch found partial nullifi associ overhead increas memori traffic content jouppi 19 propos approach k prefetch block brought fifo stream buffer brought cach buffer entri referenc brought cach remain block move queue new block prefetch tail posit note sinc prefetch data place directli cach scheme avoid cach pollut howev miss occur cach desir block also found head stream buffer buffer flush therefor prefetch block must access order brought buffer stream buffer provid perform benefit k k time upper threshold lower threshold prefetch effici figur 7 sequenti adapt prefetch palacharla kessler 27 studi stream buffer replac secondari cach primari cach miss occur one sever stream buffer alloc servic new refer stream stream buffer alloc lru order newli alloc buffer immedi fetch next k block follow miss block buffer palacharla kessler found eight stream buffer perform simul studi paramet stream buffer hit rate percentag primari cach miss satisfi stream buffer typic fell 50 90 howev memori bandwidth requir found increas sharpli result larg number unnecessari prefetch gener stream buffer help mitig effect small histori buffer use record recent primari cach miss histori buffer indic miss occur block b block b 1 stream alloc block b prefetch buffer use select stream alloc polici bandwidth requir reduc expens slightli reduc stream buffer hit rate stream buffer describ palacharla kessler found provid econom altern larg secondari cach eventu incorpor cray t3e multiprocessor 26 gener sequenti prefetch techniqu requir chang exist execut implement rel simpl hardwar compar softwar prefetch sequenti hardwar prefetch perform poorli nonsequenti memori access pattern encount howev scalar refer array access larg stride result unnecessari prefetch type access pattern exhibit spatial local upon sequenti prefetch base enabl prefetch stride irregular data access pattern sever elabor hardwar prefetch techniqu propos 42 prefetch arbitrari stride sever techniqu propos employ special logic monitor processor address referenc pattern detect constant stride array refer origin loop structur 21332 accomplish compar success address use load store instruct chen baer scheme 7 perhap aggress propos thu far illustr design assum memori instruct refer address 1 2 3 three success loop iter prefetch initi assum stride seri array access first prefetch address 3 predict valu observ address 3 prefetch continu way equal longer hold true note approach requir previou address use memori instruct store along last detect stride record refer histori everi memori instruct program clearli imposs instead separ cach call refer predict tabl rpt hold inform recent use memori instruct organ rpt given figur 8 tabl entri contain address memori instruct previou address access instruct stride valu entri establish stride state field record entri current state state diagram rpt entri given figur 9 rpt index cpu program counter pc memori instruct execut first time entri made rpt state set initi signifi prefetch yet initi instruct execut rpt entri evict stride valu calcul subtract previou address store rpt current effect address illustr function rpt consid matrix multipli code associ rpt entri given figur 10 exampl load instruct array b c consid assum array begin address 10000 20000 30000 respect simplic one word cach block also assum first iter innermost loop state rpt given figur 10b instruct address repres pseudocod mnemon sinc rpt yet contain entri instruct stride field initi zero entri place initi state three refer result cach miss second iter stride comput shown figur 10c entri array refer b c place transient state newli comput stride match previou stride state indic instruct referenc pattern may transit tent prefetch issu block address effect address alreadi cach rpt entri refer array place steadi state previou current stride match sinc entri stride zero prefetch issu instruct although refer array hit cach due demand fetch previou iter refer array b c result cach miss third iter entri array refer b c move steadi state tent stride comput previou iter confirm prefetch issu second iter result cach hit b c refer provid prefetch distanc instruct tag previou address stride state pc effect address prefetch address figur 8 organ refer predict tabl one suffici discuss seen rpt improv upon sequenti polici correctli handl stride array refer howev describ rpt still limit prefetch distanc one loop iter remedi shortcom distanc field may ad rpt specifi prefetch distanc explicitli prefetch address would calcul effect address addit distanc field requir method establish valu given rpt entri calcul appropri valu chen baer decoupl mainten rpt use prefetch engin rpt entri maintain direct pc describ prefetch initi separ pseudo program counter call lookahead program counter lapc allow preced pc differ pc lapc prefetch distanc sever implement issu aris addit lookahead program counter interest reader refer 2 complet descript 8 chen baer compar rpt prefetch mowri softwar prefetch scheme 25 found neither method show consist better perform simul share memori multiprocessor instead found perform depend individu program characterist four benchmark program upon studi base softwar prefetch found effect certain irregular access pattern indirect refer use calcul prefetch address rpt may abl establish access pattern instruct use indirect address instruct may gener effect address separ constant stride also rpt less effici begin end loop prefetch issu rpt access pattern establish mean prefetch issu array data least first two iter chen baer also note may take sever iter rpt achiev prefetch distanc complet mask memori latenc lapc use final rpt alway prefetch past array bound incorrect predict necessari stop subsequ prefetch howev loop steadi state rpt abl dynam adjust prefetch distanc achiev better overlap memori latenc softwar scheme array access pattern also softwar prefetch incur instruct overhead result prefetch address calcul fetch instruct execut spill code initi steadi transient predict correct stride predict incorrect stride predict incorrect predict stride updat initi start state prefetch transient stride transit tent prefetch steadi constant stride prefetch stride 0 predict prefetch figur 9 state transit graph refer predict tabl entri dahlgren stenstrm 10 compar tag rpt prefetch context distribut share memori multiprocessor examin simul runtim behavior six benchmark program conclud rpt prefetch show limit perform benefit tag prefetch tend perform well better common memori access pattern dahlgren show array stride less block size therefor captur tag prefetch polici addit found scalar refer show limit amount spatial local could captur tag prefetch polici rpt mechan memori bandwidth limit howev conjectur conserv rpt prefetch mechan may prefer sinc tend produc fewer useless prefetch softwar prefetch major hardwar prefetch mechan focu regular array referenc pattern notabl except howev harrison mehrotra 17 propos extens rpt mechan allow prefetch data object connect via pointer approach add field rpt enabl detect indirect refer stride aris structur link list spars matric joseph grunwald 18 studi use markov predictor drive data prefetch dynam record sequenc cach miss refer hardwar tabl prefetch attempt predict previou pattern miss begun repeat float a100100 b100100 c100100 tag previou address stride state ld bik 20000 0 initi ld ckj 30000 0 initi ld aij 10000 0 initi b tag previou address stride state ld bik 20004 4 transient ld ckj 30400 400 transient ld aij 10000 0 steadi c tag previou address stride state ld bik 20008 4 steadi ld ckj 30800 400 steadi ld aij 10000 0 steadi figur 10 rpt execut matrix multipli current cach miss address found tabl prefetch like subsequ miss issu prefetch request queue prevent cach pollut wast memori bandwidth prefetch request may displac queue request belong refer sequenc higher probabl occur 5 integr hardwar softwar prefetch softwar prefetch reli exclus compiletim analysi schedul fetch instruct within user program contrast hardwar techniqu discuss thu far infer prefetch opportun runtim without compil processor support note approach advantag research propos mechan combin element softwar hardwar prefetch gornish veidenbaum 15 describ variat tag hardwar prefetch degre prefetch k particular refer stream calcul compil time pass prefetch hardwar implement scheme prefetch degre pd field associ everi cach entri special fetch instruct provid prefetch specifi block cach set tag bit valu pd field cach entri hold prefetch block first k block sequenti refer stream prefetch use instruct tag block b demand fetch valu pd field k b ad block address calcul prefetch address pd field newli prefetch block set k b tag bit set insur appropri valu k propag refer stream prefetch nonsequenti refer pattern handl ordinari fetch instruct zheng torrella 39 suggest integr techniqu enabl prefetch irregular data structur accomplish tag memori locat way refer one element data object initi prefetch either element within referenc object object point referenc object array element data structur connect via pointer therefor prefetch approach reli compil initi tag memori actual prefetch handl hardwar within memori system use programm prefetch engin propos chen 6 extens refer predict tabl describ section 42 chen prefetch engin differ rpt tag address stride inform suppli program rather dynam establish hardwar entri insert engin program enter loop structur benefit prefetch program prefetch engin function much like rpt prefetch initi processor program counter match one tag field prefetch engin vanderwiel lilja 36 propos prefetch engin extern processor engin gener processor execut program prefetch data cpu share secondlevel cach producerconsum relationship establish two processor engin prefetch new data block cach previous prefetch data access comput processor processor also partial direct action prefetch engin write control inform memorymap regist within prefetch engin support logic integr techniqu design take advantag compiletim program inform without introduc much instruct overhead pure softwar prefetch much specul perform pure hardwar prefetch also elimin result fewer unnecessari prefetch although commerci system yet support model prefetch simul studi use evalu techniqu indic perform enhanc pure softwar hardwar prefetch mechan 6 prefetch multiprocessor addit prefetch mechan sever multiprocessorspecif prefetch techniqu propos prefetch system differ uniprocessor least three reason first multiprocessor applic typic written use differ program paradigm uniprocessor paradigm provid addit array referenc inform enabl accur prefetch mechan second multiprocessor system frequent contain addit memori hierarchi provid differ sourc destin prefetch final perform implic data prefetch take ad signific multiprocessor system tend higher memori latenc sensit memori interconnect fu patel 12 examin data prefetch might improv perform vector multiprocessor applic studi assum vector oper explicitli specifi programm support instruct set vector program describ comput term seri vector matrix oper compil analysi stride detect hardwar requir establish memori access pattern instead stride inform encod vector refer made avail processor cach associ prefetch hardwar two prefetch polici studi first variat upon prefetchonmiss polici k consecut block follow cach miss fetch processor cach implement prefetchonmiss differ present earlier prefetch issu scalar vector refer stride less equal cach block size second prefetch polici refer vector prefetch similar first polici except prefetch vector refer larg stride also issu vector refer block b miss cach block b b fetch fu patel found prefetch polici improv perform prefetch case alliant fx8 simul speedup pronounc smaller cach block assum sinc small block size limit amount spatial local nonprefetch cach captur prefetch cach offset disadvantag simpli prefetch block contrast studi fu patel found sequenti prefetch polici effect valu k 32 appar conflict earlier studi found sequenti prefetch degrad perform k 1 much discrep may explain note vector instruct exploit prefetch scheme use fu patel case prefetchonmiss prefetch suppress larg stride specifi instruct avoid useless prefetch degrad perform origin polici although vector prefetch issu prefetch larg stride referenc pattern precis mechan sequenti scheme sinc abl take advantag stride inform provid program compar two scheme found applic larg stride benefit vector prefetch expect program scalar unitstrid refer domin prefetchonmiss polici tend perform slightli better program lower miss ratio result vector prefetch polici offset correspond increas bu traffic gornish et al 14 examin prefetch distribut memori multiprocessor global local memori connect multistag interconnect network data prefetch global local memori larg asynchron block transfer achiev higher network bandwidth would possibl wordatatim transfer sinc larg amount data prefetch data place local memori rather processor cach avoid excess cach pollut form softwarecontrol cach assum respons translat global array address local address data place local memori softwar prefetch singleprocessor system loop transform perform compil insert prefetch oper user code howev rather insert fetch instruct individu word within loop bodi entir block memori prefetch loop enter figur 11 show block prefetch may use vectormatrix product calcul figur 11b iter origin loop figur 11a partit among nproc processor multiprocessor system processor iter 1 nproc th c also note array c prefetch row time although possibl pull prefetch c entir array fetch local memori enter outermost loop assum c larg prefetch entir array would occupi local memori avail block fetch given figur 11b add processor overhead origin comput manner similar softwar prefetch scheme describ earlier although blockori prefetch oper requir size stride inform significantli less overhead incur wordori scheme sinc fewer prefetch oper need assum equal problem size ignor prefetch loop given figur 11 gener n1 block prefetch compar 12 c hprefetch would result appli wordori prefetch scheme although singl bulk data transfer effici divid transfer sever smaller messag former approach tend increas network congest sever messag transfer combin increas request rate prefetch induc network content lead significantli higher averag memori latenc b figur 11 block prefetch vectormatrix product calcul set six numer benchmark program gornish note prefetch increas averag memori latenc factor 53 127 prefetch case implic prefetch local memori rather cach array figur 11 prefetch gener scheme requir data must readonli prefetch use coher mechan provid allow write one processor seen processor data transfer also restrict control depend within loop bodi array refer predic condit statement prefetch initi array done two reason first condit may test true subset array refer initi prefetch entir array would result unnecessari transfer potenti larg amount data second condit may guard referenc nonexist data initi prefetch data could result unpredict behavior honor data control depend limit amount data prefetch averag 42 loop memori refer six benchmark program use gornish could prefetch due constraint togeth increas averag memori latenc suppress prefetch limit speedup due prefetch less 11 five six benchmark program mowri gupta 24 studi effect softwar prefetch dash dsm multiprocessor architectur studi two altern design consid first place prefetch data remot access cach rac lie interconnect network processor cach hierarchi node system second design altern simpli prefetch data remot memori directli primari processor cach case unit transfer cach block use separ prefetch cach rac motiv desir reduc content primari data cach separ prefetch data demandfetch data prefetch cach avoid pollut processor cach provid overal cach space approach also avoid processor stall result wait prefetch data place cach howev case remot access cach remot memori oper benefit prefetch sinc rac place system bu access time approxim equal main memori simul run three scientif benchmark found prefetch directli primari cach offer benefit averag speedup 194 compar averag 170 rac use despit significantli increas cach content reduc overal cach space prefetch primari cach result higher cach hit rate prove domin perform factor softwar prefetch singl processor system benefit prefetch applicationspecif speedup two arraybas program achiev speedup nonprefetch case 253 199 third less regular program show speedup 130 7 conclus prefetch scheme divers help categor particular approach use answer three basic question concern prefetch mechan 1 prefetch initi 2 prefetch data place 3 prefetch prefetch initi either explicit fetch oper within program logic monitor processor referenc pattern infer prefetch combin approach howev initi prefetch must issu time manner prefetch issu earli chanc prefetch data displac use data higher level memori hierarchi displac use prefetch issu late may arriv actual memori refer therebi introduc processor stall cycl prefetch mechan also differ precis softwar prefetch issu fetch data like use hardwar scheme tend data specul manner decis place prefetch data memori hierarchi fundament design decis clearli data must move higher level memori hierarchi provid perform benefit major scheme place prefetch data type cach memori scheme place prefetch data dedic buffer protect data prematur cach evict prevent cach pollut prefetch data place name locat processor regist memori prefetch said bind addit constraint must impos use data final multiprocessor system introduc addit level memori hierarchi must taken consider data prefetch unit singl word cach block contigu block memori program data object often amount data fetch determin organ underli cach memori system cach block may appropri size uniprocessor smp larger memori block may use amort cost initi data transfer across interconnect network larg distribut memori multiprocessor three question independ exampl prefetch destin small processor cach data must prefetch way minim possibl pollut cach mean precis prefetch need schedul shortli actual use prefetch unit must kept small prefetch destin larg time size constraint relax prefetch mechan specifi natur wish compar scheme unfortun compar evalu variou propos prefetch techniqu hinder wide vari architectur assumpt test procedur howev gener observ made major prefetch scheme studi concentr numer arraybas applic program tend gener memori access pattern although compar predict yield high cach util therefor benefit prefetch gener applic result automat techniqu effect gener program remain larg unstudi effect prefetch mechan must perform well common type memori referenc pattern scalar unitstrid array refer typic domin applic prefetch mechan captur type access pattern sequenti prefetch techniqu concentr exclus access pattern although compar infrequ larg stride array referenc pattern result poor cach util rpt mechan sacrific scalar perform order cover stride referenc pattern softwar prefetch handl type referenc pattern introduc instruct overhead integr scheme attempt reduc instruct overhead still offer better prefetch coverag pure hardwar techniqu final memori system must design match ad demand prefetch impos despit reduct overal execut time prefetch mechan tend increas averag memori latenc result effect increas memori refer request rate processor therebi introduc congest within memori system particularli problem multiprocessor system buse interconnect network share sever processor despit applic system constraint data prefetch techniqu produc signific perform improv commerci system effort improv extend known techniqu divers architectur applic activ promis area research need new prefetch techniqu like continu motiv increas memori access penalti aris widen gap microprocessor memori perform use complex memori hierarchi 8 r perform evalu comput system memori hierarchi effect onchip preload scheme reduc data access penalti compil techniqu data prefetch powerpc softwar prefetch design hp pa 7200 cpu effect programm prefetch engin onchip cach effect hardwarebas data prefetch high perform processor perform studi softwar hardwar data prefetch scheme data access microarchitectur superscalar processor compilerassist data prefetch effect hardwarebas stride sequenti prefetch sharedmemori multiprocessor fix adapt sequenti prefetch sharedmemori multiprocessor data prefetch multiprocessor vector cach memori stride direct prefetch scalar processor compilerdirect data prefetch multiprocessor memori hierarchi integr hardwaresoftwar scheme sharedmemori multiprocessor compar evalu latenc reduc toler techniqu data prefetch mechan acceler gener comput prefetch use markov predictor improv directmap cach perform addit small fullyassoci cach prefetch buffer architectur softwarecontrol data prefetch lockupfre instruct fetchprefetch cach organ spaid softwar prefetch pointer callintens environ compilerbas prefetch recurs data structur toler latenc softwarecontrol prefetch sharedmemori multiprocessor design evalu compil algorithm prefetch cray t3e architectur overview evalu stream buffer secondari cach replac expos io concurr inform prefetch softwar method improv cach perform supercomput applic perform impact block size fetch strategi data prefetch hp pa8000 prefetch unit vector oper scalar comput sequenti program prefetch memori hierarchi cach memori cach enough data prefetch techniqu hide memori latenc data prefetch engin mip r10000 superscalar microprocessor intellig icach prefetch mechan speed irregular applic sharedmemori multiprocessor memori bind group prefetch tr softwar prefetch toler latenc softwarecontrol prefetch sharedmemori multiprocessor architectur softwarecontrol data prefetch data prefetch multiprocessor vector cach memori data access microarchitectur superscalar processor compilerassist data prefetch effect onchip preload scheme reduc data access penalti prefetch unit vector oper scalar comput abstract design evalu compil algorithm prefetch direct prefetch scalar processor cach coher largescal sharedmemori multiprocessor evalu stream buffer secondari cach replac perform studi softwar hardwar data prefetch scheme speed irregular applic sharedmemori multiprocessor compil techniqu data prefetch powerpc effect programm prefetch engin onchip cach compilerbas prefetch recurs data structur compilerdirect data prefetch multiprocessor memori hierarchi prefetch use markov predictor data prefetch hp pa8000 depend base prefetch link data structur perform impact block size fetch strategi improv directmap cach perform addit small fullyassoci cach prefetch buffer cach memori expos io concurr inform prefetch cach arent enough mip r10000 superscalar microprocessor limit bandwidth affect processor design effect hardwarebas data prefetch highperform processor branchdirect stridebas data cach prefetch lockupfre instruct fetchprefetch cach organ studi branch predict strategi effect hardwarebas stride sequenti prefetch sharedmemori multiprocessor distribut prefetchbuffercach design high perform memori system softwar method improv cach perform supercomput applic ctr nathali drach jeanluc bchennec olivi temam increas hardwar data prefetch perform use secondlevel cach journal system architectur euromicro journal v48 n45 p137149 decemb 2002 alexand gendler avi mendelson yitzhak birk pabbas multiprefetch mechan intern journal parallel program v34 n2 p171188 april 2006 address mode driven low power data cach embed processor proceed 3rd workshop memori perform issu conjunct 31st intern symposium comput architectur p129135 june 2020 2004 munich germani binni gill dharmendra modha sarc sequenti prefetch adapt replac cach proceed usenix annual technic confer 2005 usenix annual technic confer p3333 april 1015 2005 anaheim ca ismail kadayif mahmut kandemir guilin chen studi interact prefetch cach line turnoff proceed 2005 confer asia south pacif design autom januari 1821 2005 shanghai china ismail kadayif mahmut kandemir feihui li prefetchingawar cach line turnoff save leakag energi proceed 2006 confer asia south pacif design autom januari 2427 2006 yokohama japan avir shrivastava eugen earli nikil dutt alex nicolau aggreg processor free time energi reduct proceed 3rd ieeeacmifip intern confer hardwaresoftwar codesign system synthesi septemb 1921 2005 jersey citi nj usa vladmihai panait amit sasturkar wengfai wong static identif delinqu load proceed intern symposium code gener optim feedbackdirect runtim optim p303 march 2024 2004 palo alto california resit sendag ying chen david j lilja impact incorrectli specul memori oper multithread architectur ieee transact parallel distribut system v16 n3 p271285 march 2005 franois fabret h arno jacobsen franoi llirbat joo pereira kenneth ross denni shasha filter algorithm implement fast publishsubscrib system acm sigmod record v30 n2 p115126 june 2001 jike cui mansur h samadzadeh new hybrid approach exploit local lrfu adapt prefetch acm sigmetr perform evalu review v31 n3 p3743 decemb jean christoph beyler philipp clauss perform driven data cach prefetch dynam softwar optim system proceed 21st annual intern confer supercomput june 1721 2007 seattl washington wang kuanch li kuojen wang ssuhsuan lu design implement effect prefetch strategi dsm system journal supercomput v37 n1 p91112 juli 2006 kenneth ross conjunct select condit main memori proceed twentyfirst acm sigmodsigactsigart symposium principl databas system june 0305 2002 madison wisconsin weidong shi hsienhsin lee mrinmoy ghosh chenghuai lu alexandra boldyreva high effici counter mode secur architectur via predict precomput acm sigarch comput architectur news v33 n2 p1424 may 2005 brendon cahoon kathryn mckinley simpl effect array prefetch java proceed 2002 joint acmiscop confer java grand p8695 novemb 0305 2002 seattl washington usa kenneth ross select condit main memori acm transact databas system tod v29 n1 p132161 march 2004 lui ramo jo lui briz pablo e ibez victor vial data prefetch cach hierarchi high bandwidth capac proceed 2006 workshop memori perform deal applic system architectur p3744 septemb 1620 2006 seattl washington sangyeun cho lei jin manag distribut share l2 cach oslevel page alloc proceed 39th annual ieeeacm intern symposium microarchitectur p455468 decemb 0913 2006 zhen yang xudong shi feiqi su jihkwon peir overlap depend load addressless preload proceed 15th intern confer parallel architectur compil techniqu septemb 1620 2006 seattl washington usa gokul b kandiraju anand sivasubramaniam go distanc tlb prefetch applicationdriven studi acm sigarch comput architectur news v30 n2 may 2002 david siegwart martin hirzel improv local parallel hierarch copi gc proceed 2006 intern symposium memori manag june 1011 2006 ottawa ontario canada alireza adltabatabai richard l hudson mauricio j serrano sreeniva subramoney prefetch inject base hardwar monitor object metadata acm sigplan notic v39 n6 may 2004 jun yan wei zhang hybrid multicor architectur boost singlethread perform acm sigarch comput architectur news v35 n1 p141148 march 2007 weidong shi hsienhsin lee acceler memori decrypt authent frequent valu predict proceed 4th intern confer comput frontier may 0709 2007 ischia itali trishul chilimbi martin hirzel dynam hot data stream prefetch generalpurpos program acm sigplan notic v37 n5 may 2002 jacob leverich hideho arakida alex solomatnikov amin firoozshahian mark horowitz christo kozyraki compar memori system chip multiprocessor acm sigarch comput architectur news v35 n2 may 2007 mahjur h jahangir h gholamipour perform trace local refer perform evalu v60 n14 p5172 may 2005 kristof beyl erik h dholland gener cach hint improv program effici journal system architectur euromicro journal v51 n4 p223250 april 2005