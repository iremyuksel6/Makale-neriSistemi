autom techniqu provabl safe mobil code present gener framework provabl safe mobil code reli formal definit safeti polici explicit evid complianc polici attach binari concret realiz framework proofcarri code evid safeti formal proof gener certifi compil type assembl languag evid safeti given via type annot propag throughout compil process type intermedi languag valid evid establish via small trust type checker either directli binari indirectli proof represent logic framework b introduct integr softwar compon form reliabl system longstand fundament problem comput scienc problem manifest numer guis 1 dynam add servic oper system without compromis integr 2 exploit exist softwar compon build new applic 3 support safe exchang program untrust environ 4 replac compon run system without disrupt oper question modular wish treat softwar compon black box safe integr larger system without fear use compromis malici otherwis integr composit system put term wish ensur behavior system remain predict even addit new compon three main techniqu propos solv problem safe compon 1 runtim check untrust compon monitor execut time ensur interact compon strictli limit typic techniqu includ isol separ hardwar address space softwar fault isol 1 method impos seriou perform penalti interest safeti moreov often larg semant gap lowlevel properti guarante check eg address space isol highlevel properti requir eg black box abstract 2 sourcelanguag enforc compon requir written design languag known assum ensur black box abstract techniqu suffer requir compon written design safe languag restrict oner lack widelyus safe languag one must assum languag properli defin also implement correct practic never case 3 person author attempt made enforc safeti rather compon underwritten person compani will underwrit safeti digit signatur scheme may use authent underwritten code practic entiti will make assur correct code miss care analysi meant safe code exchang rather yet anoth propos one might achiev vaguelydefin notion safe integr content safe compon integr fundament matter proof integr compon larger system code recipi wish know compon suitabl wellbehav compliant specifi safeti polici word must appar compon satisfi safeti specif govern runtim behavior check complianc safeti specif form program verif seek prove program compli given safeti polici view matter verif question aris code produc code recipi respons check complianc safeti polici problem familiar method impos burden recipi code produc insist recipi employ runtim check compli produc linguist restrict simpli trust produc right thing argu exactli wrong way around maxim flexibl wish exploit compon mani differ sourc unreason expect code recipi will compli strictur mani dispar method rather argu respons code produc demonstr safeti presum produc interest recipi use code moreov produc respons current practic notwith stand underwrit safeti product framework shift burden proof recipi produc impos burden proof produc consum know requir oblig fulfil one method reli trust produc sign binari affirm safeti compon suffer obviou weak recipi must trust produc integr also must trust tool produc use verifi safeti compon even best intent unlik method foolproof consequ produc like make warrant consum like reli code receiv much better method one propos requir produc provid formal represent proof code compliant safeti polici produc carri proof easili suppli proof consum moreov recipi use tool check valid proof ensur realli genuin proof given code compli safeti specif importantli much easier check proof find proof therefor code recipi need trust proof checker method effect much simpler tool requir find proof first place messag paper approach fact made work practic explor two relat techniqu implement approach safe compon exchang proofcarri code type object code case mobil code annot formal warrant safeti easili check code recipi produc warrant explor construct certifi compil produc suitablyannot object code compil could use code produc gener certifi object code two point kept mind read paper 1 tool techniqu logic type theori semant indispens 2 method implement avail today first compon system safe mobil code safeti infrastruc ture safeti infrastructur piec system actual ensur safeti mobil code execut form trust comput base system mean consum mobil code instal depend therefor must work properli defect trust comput base open possibl secur hole system fundament concern design trust comput base small simpl larg andor complic code base like contain bug bug like result exploit secur hole us confid safeti infrastructur trust compon must small simpl enough like correct design safeti infrastructur consist three part first one must defin safeti polici second one specifi accept evid complianc safeti polici supplier mobil code requir also suppli evid complianc accept form third one must build softwar capabl automat check whether purport evid safeti actual valid 21 safeti polici first task design safeti infrastructur decid properti mobil code must satisfi consid safe paper consid rel simpl safeti polici consist memori safeti controlflow safeti type safeti 1 memori safeti properti program never derefer invalid pointer never perform unalign memori access never read write memori locat grant access properti ensur integr data avail program also ensur program crash due memori access 2 controlflow safeti properti program never jump address contain valid code never jump code grant access properti ensur program jump code allow eg lowlevel system call also ensur program crash due jump 3 type safeti properti everi oper program perform perform valu appropri type strictli speak properti subsum memori controlflow safeti sinc memori access jump program oper also make addit guarante exampl ensur allow system call made use appropri valu therebi rule attack buffer overrun code system addit guarante provid type safeti often expens obtain use dynam mean static mean discuss paper provid addit cost stronger safeti polici also possibl includ guarante integr data store stack 2 limit resourc consumpt 34 polici specifi allow trace program oper 5 howev polici evid complianc discuss next section complic therebi requir greater expens produc verifi evid possibl reduc confid system correct thu choic safeti polici practic system involv import tradeoff also worth observ stronger polici alway better rule mani program exampl polici reject program provid great safeti cheap implement entir useless safeti infrastructur therefor import design safeti polici allow mani program possibl still provid suffici safeti 22 evid complianc safeti polici establish properti mobil program must satisfi order permit execut host howev imposs gener code consum determin whether arbitrari program compli polici therefor requir supplier mobil code assist consum provid evid code compli safeti polici evid may think certif safeti packag togeth mobil program two togeth refer certifi code upon obtain certifi code code consum automat verifi valid evid execut program code second task design safeti infrastructur decid form evid complianc must take decis made light sever consider 1 sinc evid safeti must transfer network along program code certifi wish evid small possibl order minim commun overhead evid must check run program code desir verif evid fast possibl clearli smaller evid lead faster check also speed evid verif care design form evid 3 discuss evid verifi essenti part trust comput base must work properli potenti secur hole system us confid verifi work properli must simpl mean structur evid check must also simpl thu simplic desir aesthet point view also essenti system work 4 final complet confid system provid desir safeti must prove mathemat rigor program carri accept evid safeti realli compli safeti polici proof heart safeti guarante system provid proof feasibl structur evid must built mathemat foundat light consider discuss two differ form evid complianc may take explicit proof employ proofcarri code infrastructur 6 type annot employ type assembl languag infrastructur 72 explicit proof direct way provid evid safeti provid explicit formal proof program question compli safeti polici strategi employ proofcarri code pcc requir formal languag safeti proof express languag design accord follow criteria effect decid effici decid given object repres valid safeti proof compact proof small encod gener represent languag permit proof differ safeti properti ideal openend new safeti polici develop without chang trust comput base simplic proof represent languag simpl possi ble sinc must trust mathemat properti implement proof checker approach use lf logic framework 8 satisfi requir logic framework gener metalanguag represent logic infer rule deduct variou logic theori specifi lf high level abstract simpli state valid axiom rule infer provid gener sinc separ theori requir reason safeti properti arithmet memori updat access underli mechan check proof also simpl sinc base pure depend type calculu whose properti deepli investig 910 proof logic design reason safeti properti repres term lf check proof valid reduc check represent logic framework welltyp carri effect even larg proof object experi certifi compil 11 decis procedur 12 yield proof whose represent 1 mb yet still check hand proof lf compact without addit techniqu redund elimin follow gener techniqu 13 necula 14 develop optim represent fragment lf call suffici use pcc applic experiment result obtain far valid practic proof compress techniqu 11 safeti polici discuss current research 15 aim extend improv method obtain compress without compromis simplic trust comput base type annot second way provid evid safeti use type annot approach type disciplin impos mobil program architect system prove theorem state program satisfi type disciplin necessarili satisfi safeti polici well 7 howev determin whether program satisfi type disciplin involv find consist type scheme valu program type scheme infer gener therefor approach program requir includ enough type annot type checker reconstruct consist type scheme type annot constitut evid safeti provid taken conjunct theorem state welltyp program compli safeti polici princip advantag type annot approach explicit proof approach sound type system establish contrast valid explicit proof establish sound system proof rule practic proof rule freeli custom account safeti requir applic main drawback type annot program violat type sy tem invari typeabl type system therefor accept safeti infrastructur even actual safe explicit proof invari built possibl work around case hold idea use type guarante safeti mean new mani modern highlevel languag eg ml modula3 java reli type system ensur legal program safe languag even use safeti infrastructur exampl spin oper system 16 requir oper system extens written modula3 therebi ensur safeti drawback use highlevel languag ensur safeti program check safeti compil rather therebi requir entir compil includ trust comput base discuss confid one safeti architectur invers relat size trust comput base type assembl languag tal infrastructur resolv problem employ type safe lowlevel languag tal type disciplin impos execut code therefor program code check safeti exact code execut need trust compil compil faulti gener unsaf execut execut reject type checker princip exercis develop type system execut code isol lowlevel abstract satisfi two condit ffl abstract independ type checkabl whatev extent type check abstract depend surround code data depend type code data addit inform reflect type ffl atom oper abstract singl machin instruct exampl consid function call highlevel languag usual provid builtin notion function function certainli type check indepen dentli dealt singl machin instruct rather function call process use separ call return instruct interven code mean atom return address store access storag modifi even disregard satisfi second condit tal correspond abstract code block code block invok use simpl jump instruct function compos code block write code block explicit extra input contain return address decomposit correspond wellknown practic highlevel languag program continuationpass style 17 first condit satisfi requir code block specifi type input function highlevel languag specifi type argument result without specif would imposs check safeti jump without inspect bodi jump target exampl consid tal code comput factori code exhibit mani complex tal type system serv give flavor tal program exhaust exampl appear morrisett et al 72 codefr1intr2fr1intgg mov r31 set accumul loop jmp loop loop codefr1intr2fr1intgr3intg bz r1done check done branch zero mul r3r3r1 sub r1r11 jmp loop done codefr1intr2fr1intgr3intg mov r1r3 move accumul result regist jmp r2 return caller code type code block written fr1 1 indic code may call regist fact code block given type fr1int r2fr1intgg indic fact call must given r1 integ argument r2 code block return address call must given integ return valu r1 call fact set accumul regist type int r3 jump loop loop comput factori finish branch done move accumul return address regist r1 return caller final return caller extra regist r2 r3 forgotten match precondit r2 mention r1 altern type assembl languag one also strike compromis high lowlevel languag exploit type intermedi languag safeti 18 use type intermedi languag enlarg trust comput base sinc part compil must trust loosen second condit type system execut code provid spectrum possibl design closer intermedi languag satisfi second condit lesser amount compil need trust moreov discuss section 3 type intermedi languag valuabl autom certif even end result type execut 23 autom verif sinc play central role provabl safe mobil code elabor mechan verifi safeti certif explicit proof discuss proofcarri code infrastructur employ lf logic framework terminolog logic framework judgment object knowledg may evid virtu proof typic safeti properti requir judgment truth proposit predic logic equal two integ lf judgment object logic repres type logic framework proof term proof p judgment j represent p type j write represent function adequaci theorem represent function guarante properti invers whenev term type j proof p j direct critic togeth mean reduc problem check valid proof p verifi represent p welltyp pcc check complianc safeti polici reduc type check represent safeti proof logic framework techniqu allow differ safeti polici sinc proof repres term lf infer rule repres function proof premis proof conclus repres complet logic system need introduc one type constant basic judgment one term constant infer rule collect constant declar call signatur 1 particular safeti polici consist verif condit gener extract proof oblig binari signatur lf express valid proof principl verif condit mean differ polici express differ signatur basic engin verifi evid lf type checker chang differ polici howev trust correct lf signatur repres polici inconsist signatur exampl would allow arbitrari code pass safeti check type check lf syntaxdirect therefor practic quit effici 13 especi avoid check inform static shown redund 14 current touchston compil pcc discuss section 31 use small effici type checker lf term written c relat project proofcarri code 1920 certifi decis procedur 12 use twelf implement 2123 inform logic framework see 24 type annot case safeti polici express form type rule check complianc immedi reduc type check case care design languag annot type check practic gener complic safeti properti annot requir safeti properti fix tradeoff space time type annot easier type check problem one extrem consist type annot mean type check undecid extrem full type deriv repres exampl logic framework quit similar proof pcc approach safeti polici consid far difficult find appropri compromis extrem compact permit fast type check 25 worth note case explicit proof type annot verif method type check proofcarri code alway confus digit signatur use certifi authent type check lf logic framework optim elimin redund work type assembl languag algorithm type check vari safeti properti enforc although basic natur syntaxdirect code travers remain 3 autom certif certif safeti obtain principl may use mean dispos without restrict limit freedom assur checkabl safeti certif alway possibl determin mechan whether given certif underwrit safeti given program sinc code recipi alway check valid safeti certif need reli mean certif produc two factor determin hard construct safeti certif program 1 strength assur wish make program stronger assur harder obtain certif 2 complex program languag lowlevel languag harder certifi safeti program practic matter easier construct safeti certif like code certif wide use main techniqu consid build safeti certif build certifi compil safe highlevel languag ml java typesaf languag ada modula certifi compil gener object code compar often superior qualiti ordinari compil certifi compil goe beyond convent compil method augment object code checkabl safeti certif warrant complianc object code safeti properti sourc languag way abl exploit safeti properti semant welldefin highlevel languag without trust compil ensur integr code transit produc consum key build certifi compil propag safeti invari sourc languag intermedi stage compil final object code mean compil phase respons preserv invari input output moreov ensur checkabl invari phase must annot program enough inform code recipi reconstruct proof invari way code recipi check safeti code without reli correct compil common case compil contain error purport safeti certif may may valid recipi detect mistak sinc compil phase constru recipi code produc preced stage compil check integr verifi claim invari stage prove invalu aid compil writer 1118 31 construct evid safeti explor two main method propag safeti invari compil 1 translat type intermedi languag 26 safeti invari captur type system intermedi languag compil type system design ensur welltyp express safe enough type inform attach intermedi form ensur may mechan check type correct type intermedi form selfcertifi sens attach type inform serv checkabl certif safeti 2 compil proofcarri code 11 safeti invari directli express logic assert execut behavior convent intermedi code sound logic ensur assert correctli express requir safeti properti code safeti object code check combin verif condit gener automat theorem prove equip theorem prover mean gener formal represent proof may gener checkabl safeti certif object code two method mutual exclus current explor integr use depend type allow assert blend type singl typetheoret formal techniqu robust appli highlevel languag 2728 well lowlevel languag 29 therebi provid ideal basi use certifi compil 32 type intermedi languag give sens type inform might attach intermedi code give exampl deriv represent list level sourc languag two method creat list 1 nil stand empti list 2 consh construct nonempti list head h tail valu assign type accord follow rule 2 1 nil type list 2 h type int type list consht type list varieti oper manipul list includ car cdr oper follow type 1 l type list carl type int 2 l type list cdrl type list behavior oper govern follow transit oper semant languag 1 carconsht reduc h 2 cdrconsht reduc one task compil decid represent list memori gener code car cdr consist represent typic somewhat simplemind approach repres list 1 pointer 2 tag region memori contain 3 pair consist head tail list tag field distinguish empti nonempti list pointer identifi address node heap represent depict follow compound term ptrtagconspairh interest individu construct express may thought primit type intermedi languag specif 2 simplic consid list integ 1 ptrv type list v type nilvoidconsintlist bracket express defin tag nil con type associ data valu none case nil pair case con 2 tagtv type v type particular tagconspairht type nilvoidconsintlist h type int type list 3 l type l r type r particular intlist h type int type list correspond represent may gener code say carl behav follow 1 derefer pointer l valu l must pointer type list 2 check tag object heap ensur con must either con nil type dereferenc pointer nilvoidconsintlist 3 extract underli pair project first compon must two compon type tag valu intlist express formal type intermedi languag gener code car oper defin term primit oper perform three step safeti code ensur type rule associ oper type correct program misinterpret data exampl treat head list float point number fact integ typedirect compil 26 one perform transform type intermedi languag make use type inform guid tran lation ensur type preserv transform stage typedirect compil compil phase translat program code also type way translat program translat type far push subject ongo research tilt compil abl propag type inform rtl regist transfer languag level point type propag abandon recent develop type assembl languag tal 72 demonstr feasibl propag type inform x86like assembl code integr tilt tal subject ongo research propag type inform safeti wellbehav type system one prove sound theorem relat execut behavior program type one consequ sound theorem type system imposs welltyp program incur type error memori error control error welltyp program safe cours everi safe program welltyp type suffici condit safeti necessari one howev may readili check type correct program use lightweight wellunderstood method techniqu typedirect compil demonstr rich varieti program certifi use type intermedi languag whether demand met use method remain seen 33 logic assert explicit proof anoth approach code certif explor 3011 use combin logic assert explicit proof certifi compil touchston work augment intermedi code logic assert track type rang valu check valid assert twostep process 1 verif condit gener vcgen program symbol evalu propag implic logic assert instruct program result set logic implic must hold program consid properli annot 2 theorem prove implic gener vcgen verifi use combin automat theorem prove techniqu includ constraint satisfact procedur simplex proof search techniqu firstord logic form trust comput base must includ vcgen procedur theorem prover use check verif condit addit specif safeti polici describ condit safe execut well pre postcondit procedur suppli host oper system requir certifi code reduc size trust comput base may regard combin vcgen theorem prove kind postprocess phase valid annot program check formal represent proof valid verif condit attach code achiev use certifi theorem prover 1112 seek prove theorem also provid explicit represent proof whenev one found proof obtain much simpler check find inde proof checker need integr trust comput base theorem prover need trust protect tamper gain understand involv consid array subscript oper safe languag given array length n integ oper subai check whether 0 retriev ith element high level atom oper compil intermedi code defin term primit oper along follow line 0 return ai1 unsaf access els f signal error note refer length array assum integ array repres pointer sequenc word first contain array length rest content annot code logic assert obtain follow int array 0 return ai1 els f signal error assert array correspond invari mention practic much lowerlevel type system employ 11 simpl matter check given assert correct case observ role condit test enabl theorem prover verifi index oper ai1 memorysaf stray beyond bound array mani case runtim test redund compil abl prove runtim test must come true therefor elimin exampl highlevel code simpl loop follow expect individu bound check elid int i0 ilengtha f sum subai call site sub compil abl prove 0 n length propag code sub find condit test elimin compil prove test must alway true lead follow code int i0 ia f sum ai1 given annot perform verif condit gener theorem prove check requir precondit unsaf array subscript oper inde true ensur program safe execut howev rather place addit burden programm instead attach formal represent proof fact assert int i0 ia f sum ai1 proof term checkabl wit valid given assert check code recipi practic wit term lf calculu proof check simpli anoth form type check see section 23 4 experiment result mention earlier implement sever system test demonstr idea certifi code type intermedi languag certifi com piler certifi theorem prover result experi system confirm sever import claim gener framework safeti certif code present paper 1 approach certifi code pcc tal allow highli optim code verifi safeti mean compromis need made high perform safeti 2 variou approach certifi compil explor type intermedi languag logic assert scale x vs gnu gcc gnu gcc o4 233 382 351 297 244 262 550 292 317 dec cc o4 292 368 352 279 244 276 688 1152 392 cert comp 264 389 352 386 193 220 400 916 348 blur sharpen qsort simplex kmp unpack bcopi edg gmean100003000050000tim ms proof check ms 77 235 163 1203 96 925 36 147 prove ms 810 2570 1270 12720 1080 19120 250 1430 vc gener ms 63 209 115 739 84 706 35 97 code gener ms 2710 8180 5600 43400 3480 18850 1360 6970 blur sharpen qsort simplex kmp unpack bcopi edge50001500025000 binari size byte proof 1372 4532 2748 20308 1874 17260 620 2218 code 320 1248 576 3792 496 2528 128 640 blur sharpen qsort simplex kmp unpack bcopi edg fig 1 comparison gener objectcod perform touch stone gcc dec cc optim compil height bar show speedup object code rel unoptim code produc gcc languag realist scale complex furthermor provid automat mean obtain code certifi hold standard safeti properti type safeti memori safeti control safeti 3 need includ annot andor proof code undu burden furthermor check certif perform quickli reliabl order support claim give better feel practic detail system present result experi 41 touchston certifi compil touchston certifi compil imper program languag clike syntax although sourc program look much like c program languag compil touchston made safe strong static type system elimin pointer arithmet ensur variabl initi although languag make restrict c still rich power languag sens allow recurs pro cedur alias variabl switch statement dynam alloc data structur inde straightforward translat mani practic c sourc program languag compil touchston 31 given sourc program touchston gener highli optim nativ code target program dec alpha architectur attach proof type memori control safeti figur 1 show result collect benchmark program compil touchston gnu gcc c compil dec cc c compil benchmark program obtain standard unix util applica xspeedup vs gnu gcc gnu gcc o4 233 382 351 297 244 262 550 292 317 dec cc o4 292 368 352 279 244 276 688 1152 392 cert comp 264 389 352 386 193 220 400 916 348 blur sharpen qsort simplex kmp unpack bcopi edg gmean100003000050000tim ms proof check ms 77 235 163 1203 96 925 36 147 prove ms 810 2570 1270 12720 1080 19120 250 1430 vc gener ms 63 209 115 739 84 706 35 97 code gener ms 2710 8180 5600 43400 3480 18850 1360 6970 blur sharpen qsort simplex kmp unpack bcopi edge50001500025000 binari size byte proof 1372 4532 2748 20308 1874 17260 620 2218 code 320 1248 576 3792 496 2528 128 640 blur sharpen qsort simplex kmp unpack bcopi edg fig 2 breakdown time requir gener proofcarri code binari tion xv gzip program edit complet straightforward way replac use pointer arithmet arrayindex syntax recal clike languag compil touchston support pointer arithmet bar figur gener first compil program gnu gcc compil optim turn touchston gnu gcc dec cc use compil program optim turn bar figur show rel speed improv produc optim compil rel unoptim code figur show touchston compil gener object code compar speed produc gcc cc compil fact superior gcc overal result particularli surpris one consid touchston oblig guarante array access pointer derefer safe touchston must sometim perform arraybound nullpoint check wherea gcc cc compil fact touchston abl optim away almost arraybound nullpoint check gener proof convinc code recipi array pointer access still safe figur 2 provid breakdown time requir compil benchmark program pcc binari bar figur divid four part bottommost part show convent compil time time requir gener dec alpha assembl code plu invari annot requir underli pcc system touchston highli aggress optim compil bit slower typic compil howev averag compar compil time dec cc compil optim enabl second part show time requir gener verif condit final third fourth part show time requir proof gener proof check respect one see littl time requir verificationcondit gener proof check import two step must also perform recipi gener code fact two part small indic code recipi fact littl work earli measur touchston compil show proof 2 4 time larger code size 31 sinc time experiment result obtain made consider progress reduc size proof without increas time effort requir check reduct lead proof size order 10 40 size code addit experi new represent refer oracl string represent type program describ reduc proof size consist less 5 code size cost make proof check 50 slower hope abl describ techniqu show effect futur report 42 cedilla system special j compil experiment result shown admittedli less convinc due rel small size test program recent howev spun commerci enterpris build industrialstrength implement proofcarri code system enterpris call cedilla system incorpor essenti experi technolog transfer sens attempt take idea result directli laboratori commerci practic cedilla system shown idea present paper scale fullscal languag shown clearli optim nativecod compil full java program languag call special j 32 success compil 300 realworld java applic includ rather larg one sun staroffic applic suit hotjava web browser oper special j similar touchston special j produc optim target code annot invari make possibl construct proof safeti verificationcondit gener use extract verif condit certifi theorem prover gener proof attach target code see simpl exampl process consid follow java program public class bcopy1 f public static void bcopyint src f int int sourc program compil special j target program intel x86 architectur shown figur 3 includ target program numer data structur support java object model runtim system core output howev nativ code bcopi method shown code larg convent except insert sever invari mark special ann macro annot hint compil help automat proof gener job gener code constrain object code way howev serv import engin purpos describ ann local annot simpli say compil method use three local case regist alloc need spill space stack local two formal paramet return address hint use prove memori safeti prover could principl analyz code reverseengin inform much easier compil commun alreadi know sinc one engin goal simplifi much possibl size trust comput base better compil gener inform leav check problem pcc infrastructur ann unreach annot come fact safeti polici specifi array access must alway bound null pointer must never dereferenc java failur result runtim except ann local bcopi 6arrays6bcopy1aiai globl bcopi 6arrays6bcopy1aiai bcopi 6arrays6bcopy1aiai cmpl 0 4esp srcnull je l6 movl 4esp ebx movl 4ebx ecx testl ecx ecx l0 jg l22 ret l22 xorl edx edx initi cmpl 0 8esp dstnull je l6 movl 8esp eax movl 4eax esi dstlength l7 ann invann dom loop csubneq eax csubb edx ecx rm mem lf cmpl esi edx idstlength movl 8ebx edx 4 edi srci movl edi 8eax edx incl edx cmpl ecx edx il jl l7 ret ann invann dom loop lf true lf ret l13 call jv throwbadarrayindex ann unreach nop call jv thrownullpoint ann unreach nop fig 3 special j output code safeti polici exampl requir proof except never thrown therefor compil point place must never reach execut proof gener need reverseengin sourcecod array access pointer derefer end binari first ann inv annot far interest annota tion note special j compil optim tight loop ffl requir null check hoist note null check dst hoist loop entri loop may never enter hoist first iter ffl bound check src hoist note hoist bound check dst would exot optim case dst long enough loop must copi far throw except proof gener must still prove memori safeti must prove insid loop nullpoint derefer outofbound memori access essenti proof gener need go reason compil went hoist check outsid loop therefor help proof gener compil output relev loop invari discov perform codehoist optim case discov ffl src regist ebx null csubneq ebx 0 ffl dst regist eax null csubneq eax 0 csub prefix denot result pentium comparison thing loop invari specifi ffl regist modifi loop rb ffl memori safeti loop invari rm mem pseudoregist rm denot comput memori rm mem mean unsaf oper perform memori target code gener special j cedilla system proof gener read output proof code satisfi safeti polici first step gener logic predic call verif condit simpli vc whose logic valid impli safeti code import vc use produc recipi code recipi guarante right safeti proof provid oppos proof unrel irrelev properti explain earlier proof verif condit express languag call logic framework lf space prevent us includ entir vc bcopi exampl howev follow excerpt illustr main point note x0 dst paramet x1 src paramet x2 pseudoregist repres current state heap x3 variabl csubb x3 sel4 x2 add x1 4 csubneq x0 csubneq x1 csubb x3 sel4 x2 add x0 4 saferd4 add x1 add imul x3 safewr4 add x0 add imul x3 add x1 add imul x3 csublt add x3 1 sel4 x2 add x1 4 csubneq x1 csubneq x0 csubb add x3 1 sel4 x2 add x1 4 excerpt vc say given loopinvari assumpt ffl csubb x3 sel4 x2 add x1 4 ie srci bound ie dst nonnul ie src nonnul given bound check emit dst well addit assumpt outsid loop shown snippet proof requir establish safeti read src array write dst array furthermor given addit loopentri condit proof requir reestablish loop invari x0 correspond eax dst sourc x1 ebx src sourc x2 rm memori pseudoregist x3 edx sourc note srclength sel4 x2 add x1 4 length store byteoffset 4 array object safeti polici henc vc specifi enforc requir datastructur layout proof gener read vc output proof tini excerpt proof shown ass10 pf csubb x3 sel4 x2 add x1 4 ass12 pf csubneq x1 0 ass13 pf csubb x3 add x0 4 andi szint below1 ass10 proof shown concret syntax lf develop elf system 2221 small snippet proof one see assumpt mark ass identifi label use bodi proof logic infer rule impi case stand implicationintroduct rule specifi declar lf languag includ pcc system part definit safeti polici final binari encod proof made attach target code proof includ data segment standard binari coff format case proof take 71 total object file note current use unoptim binari encod proof proof token 16 bit long huffman encod produc averag token size 35 bit huffmanencod binari expect 22 size nonhuffmanencod binari case would make size proof approxim 45 byte less 2 object file huffman encod would inde effect mean reduc size proof found represent oracl string even better job without incur cost decompress case current exampl oracl string represent proof requir less 6 byte hope report detail represent futur report 5 conclus futur work present gener framework safeti certif code reli formal definit safeti polici explicit evid complianc attach mobil code evid may take form formal safeti proof proofcarri code type annot type assembl languag case one establish mathemat rigor certifi code tamperproof execut safe without addit runtim check oper system protect boundari experi approach shown overhead accept practic time valid certif space repres use advanc techniqu logic framework type theori also sketch certif obtain automat use certifi compil theorem prover approach type intermedi languag propag safeti properti guarante highlevel sourc languag throughout compil process lowlevel code safeti remain verifi layer typecheck certifi compil touchston use logic assert throughout compil similar manner except valid logic assert must assur theorem prove practic class safeti polici consid sinc compil provid inform necessari guarante proof alway found final certifi theorem prover need part trust comput base sinc produc explicit proof term check independ implement logic framework key technolog underli approach safeti type theori use modern program languag design implement idea type system guarante program safeti modular highlevel languag old one see main contribut demonstr practic work system touchston tilt compil twelf logic framework techniqu type theori equal appli intermedi lowlevel languag machin code order support provabl safe mobil code certif gener automat r effici softwarebas fault isol acm symposium principl program languag type system express secur polici safe kernel extens without runtim check system f type assembl languag framework defin logic equival canon form lf type theori gener proof decis procedur empir studi runtim behavior higherord logic program effici represent valid logic proof algorithm equal unif presenc notat definit definit interpret higherord program languag semant model type machin instruct proofcarri code system descript twelf metalog framework deduct system elf metalanguag deduct system logic program lf logic framework realist type assembl languag til typedirect optim compil ml elimin array bound check depend type depend type practic program depend type assembl languag design implement certifi compil certifi compil java tr logic program lf logic framework framework defin logic effici softwarebas fault isol extens safeti perform spin oper system safe kernel extens without runtim check proofcarri code system f type assembl languag elimin array bound check depend type design implement certifi compil depend type practic program proofcarri authent resourc bound certif semant model type machin instruct proofcarri code type system express secur polici certifi compil java algorithm equal unif presenc notat definit stackbas type assembl languag elf system descript logic framework effici represent valid proof definit interpret higherord program languag depend type assembl languag compil proof higherord rewrit depend type lambda calculu ctr andr pang stewart sean seefri manuel chakravarti plug haskel proceed 2004 acm sigplan workshop haskel septemb 2222 2004 snowbird utah usa mike jochen anteneh addi anteneh lori l pollock lisa marvel enabl control adapt program transform dynam evolv mobil softwar valid acm sigsoft softwar engin note v30 n4 juli 2005