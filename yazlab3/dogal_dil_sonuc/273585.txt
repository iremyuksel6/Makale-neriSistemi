local refer lu decomposit partial pivot paper present new partit algorithm lu decomposit partial pivot new algorithm call recurs partit algorithm base recurs partit matrix paper analyz local refer new algorithm local refer known wide use partit algorithm lu decomposit call rightlook algorithm analysi reveal new algorithm perform factor thetasqrtmn fewer io oper cach miss rightlook algorithm n order matrix size primari memori analysi also determin optim block size rightlook algorithm experiment comparison new algorithm rightlook algorithm show implement new algorithm outperform similarli code rightlook algorithm six differ risc architectur new algorithm perform fewer cach miss algorithm test benefit strassen matrixmultipl algorithm b introduct algorithm partit dens matric block oper entir block much possibl key obtain high perform comput hierarch memori system partit matrix block creat tempor local refer algorithm reduc number word must transfer primari secondari memori paper describ new partit algorithm lufactor partial pivot call recursivelypartit algorithm paper also analyz number data transfer popular partit lufactor algorithm socal rightlook algorithm use lapack 1 perform characterist popular partit lufactor algorithm particular crout leftlook algorithm use nag librari 4 similar rightlook algorithm analyz analysi two algorithm lead two interest conclus first simpl systemindepend formula choos block size right look algorithm almost alway optim second recursivelypartit algorithm gener asymptot less memori traffic memori rightlook algorithm even block size right look algorithm chosen optim numer experi indic recursivelypartit algorithm gener fewer cach miss run faster rightlook algorithm recursivelypartit algorithm comput lu decomposit partial pivot nbym matrix transfer thetanm word primari secondari memori size primari memori rightlook algorithm hand transfer least word number word actual transfer convent algorithm depend paramet r chosen optim part research perform author postdoctor fellow ibm tj watson research center postdoctor associ mit laboratori comput scienc work mit support part arpa grant n000149410985 xerox palo alto research center 3333 coyot hill road palo alto ca 94304 toledo lapack new algorithm optim sens number word transfer asymptot number transfer partit block algorithm matrix multipl solut triangular system least number column small compar size primari memori right look algorithm achiev perform matrix larg row fill primari memori recursivelypartit algorithm algorithm advantag convent algorithm blocksiz paramet must tune order achiev high perform sinc recurs like perform better memori system two level exampl comput system two level cach cach virtual memori understand main idea behind new algorithm let us look first convent rightlook lu factor algorithm algorithm decompos input matrix dnre block r column start leftmost block column algorithm iter factor block r column use column orient algorithm block factor algorithm updat entir trail submatrix paramet r must care chosen minim number word transfer memori r larger mn mani word must transfer block column factor r small mani trail submatric must updat updat requir entir trail submatrix read secondari memori main insight behind recursivelypartit algorithm need updat entir trail submatrix block column factor factor first column matrix algorithm updat next column right enabl proceed second column factor must appli updat first two column proceed algorithm updat two column proce four column factor use updat four word algorithm look way right everi time column factor shall see shortsight approach pay anoth point view new algorithm recurs algorithm know larger r number column block smaller number data transfer requir updat trail submatric algorithm therefor choos largest possibl size m2 mani column fit within primari memori factor recurs use algorithm rather factor use naiv column orient algorithm left m2 column factor use updat right m2 column subsequ rest paper organ follow section 2 describ analyz recursivelypartit algorithm section 3 analyz blockcolumn rightlook algorithm actual perform lapack rightlook algorithm perform recursivelypartit algorithm compar section 4 sever highend workstat section 5 conclud paper discuss result relat research 2 recursivelypartit lu factor recursivelypartit algorithm effici convent partit algorithm also simpler describ analyz section first describ algorithm analyz complex algorithm term arithmet oper term amount data transfer memori execut local refer lu decomposit 3 algorithm algorithm factor nbym matrix nbyn permut matrix p nbym unit lower triangular matrix l ls upper triangl zero mbym upper triangular matrix u treat block matrix 11 21 21 22 11 squar matrix order m2bym2 1 perform pivot scale 11 21 u 11 return 2 els recurs factor 11 21 u 11 3 permut 0a 0 12 22 4 solv triangular system l 11 5 00 0gamma l 21 6 recurs factor p 2 00 l 22 u 22 7 permut l 0 p 2 8 return 11 12 21 22 u 11 u 12 complex analysi hard see algorithm numer equival convent columnori algorithm therefor algorithm name numer properti convent algorithm perform number float point oper nm fact variant lufactor algorithm discuss paper essenti differ schedul algorithm dataflow graph analyz number word must transfer primari secondari memori n size primari memori denot eas exposit assum number column power two denot number word algorithm must transfer memori iorp n denot number word must transfer solv nbyn triangular linear system right hand side solut overwrit right hand side iot n denot number word must transfer multipli multipli nbygammam matrix mbyk matrix add result nbyk matrix iomm n k sinc factor algorithm use matrix multipl solut triangular linear system subroutin number io perform depend 4 toledo number io perform subroutin partit algorithm solv triangular linear system perform iot m3 m3 m3 io actual number io perform smaller sinc real crossov point m2 m3 incorpor improv bound analysi complic analysi littl effect final outcom number io perform standard matrixmultipl algorithm iomm n n m3 m3 bound matrix multipl hold valu n analysi assum use convent triangular solver matrix multipl rather socal fast strassenlik algorithm asymptot bound fast matrixmultipl algorithm better 5 analyz recursivelypartit algorithm use induct initi analysi take account permut row algorithm perform shall return permut later section recurr govern total number word transfer algorithm first prove induct 12 m2 m3 iorp n 2nm1 lg base case true assum claim true m2 25m 2 3nm prove induct iorp n 2nm mp m3 m2 m3 claim true base case m3 sinc m2 m3 sinc m2 1 assum claim true m2 iorp n 2nm mp m3 local refer lu decomposit 5 m3 m3 mp m3 m3 nm 2p m3 m3 mp m3 nm 2p m3 m3 mp m3 nm 2p m3 mp m3 bound number word transfer due permut comput number permut column undergo algorithm column permut either factor step 2 permut step 7 permut step 3 factor step 6 follow column permut 1 time word brought secondari memori total number io requir permut 2n bound achiev read entir column primari memori permut primari memori follow theorem summar main result section theorem 21 given matrix multipl subroutin whose io perform satisfi equat 22 subroutin solv triangular linear system whose io perform satisfi equat 21 recursivelypartit lu decomposit algorithm run comput word primari memori comput lu decomposit partial pivot nbym matrix use iorp n 2nm mp m3 io 3 analysi rightlook lu factor put perform recursivelypartit algorithm perspect analyz perform columnblock rightlook algorithm first describ algorithm analyz number data transfer io perform 6 toledo bound obtain asymptot tight focu lower bound term constant number io requir solut triangular linear system smaller number io requir updat trail submatrix rank r updat matrix ignor triangular solv analysi rightlook lu algorithm factor nbym matrix algorithm factor r column everi iter kth iter decompos pa 4 11 12 13 21 22 23 11 squar matrix order squar matrix order r kth iter algorithm perform follow step 1 factor 22 2 permut 23 33 23 33 3 permut 4 solv triangular system l 22 u 5 updat 33 u number io requir factor nbyr matrix use columnbi column algorithm nr 2when nr2 nr simplifi analysi ignor rang half matrix fit within primari memori less entir matrix use one level recurs lead thetanr io rang use fact m3 m3 rs r m3 r 2t rs m3 tr m3 2t r m3 3 local refer lu decomposit 7 bound 2t rs underestim rs ignor small slack analysi number io algorithm perform depend relat r dimens matrix size memori r small nr updat trail submatrix domin number io algorithm perform updat trail submatrix requir least io particular first m2r updat requir least r larger factor mr block r column requir least r nr 2 nmrio number io requir rankr updat depend valu r mn r m3 total number io perform rankr updat least therefor number io perform algorithm least nmr minim optim valu r lie exact valu might deviat slightli rang sinc express deriv number io lower bound substitut optim valu r find algorithm perform least nm 15 gamma4 nm 15 io rang valu perform m3 valu m3 yield better perform r yet larger r m3 rankr updat requir io particular first m2r updat requir least m3 nm 2p m3 m3 nm 2p m3 8 toledo io total number io rang includ updat factor block column therefor least nm 2p m3 m3mn number io minim choos smallest possibl m3 matrix larg compar size main memori n 2 3 also possibl choos r mn case total number io least nm 2p m3 analysi summar follow valu r close maxmn optim almost case except truli huge matric matric m3 better combin result obtain follow theorem theorem 31 given matrix multipl subroutin whose io perform satisfi equat 31 subroutin solv triangular linear system whose io perform satisfi equat 32 rightlook lu decomposit algorithm run comput word primari memori comput lu decomposit partial pivot nbym matrix use least iorl n m3 io first case r mn lead better perform column fit within primari memori although lower bound asymptot tight valu 14 lower bound actual constant higher 4 experiment result implement test recurs partit algorithm 1 goal experi determin whether recurs partit algorithm effici rightlook algorithm practic result experi clearli show recursivelypartit algorithm perform less io faster least comput experi conduct result experi complement analysi two algorithm analysi show recursivelypartit algorithm perform less io right look algorithm valu n analysi stop short demonstr one algorithm faster anoth three respect first bound analysi exact second analysi count total number fortran 90 implement avail onlin anonym ftp theorylcsmitedu pubpeoplesivandgetrf90f code compil mani fortran 77 compil lude compil ibm silicon graphic digit remov recurs keyword use compil option enabl recurs see 11 detail local refer lu decomposit 9 io algorithm distribut io within algorithm signific final analysi use simplifi model twolevel hierarch memori captur subtleti actual memori system experi show even though analysi exact respect recursivelypartit algorithm inde faster three set experi present section first set present analyz detail experi ibm rs6000 workstat goal set experi establish recursivelypartit algorithm faster rightlook algorithm second set experi show less detail recursivelypartit algorithm outperform lapack rightlook algorithm wide rang architectur goal second set experi establish robust perform recursivelypartit algorithm third set experi show use strassen matrix multipl algorithm speed recursivelypartit algorithm seem speed right look algorithm technic detail experi oper system ver sion compil version compil option omit paper detail fulli describ technic report 11 detail experiment analyz first set experi perform ibm rs6000 workstat 665 mhz power2 processor 14 128 kbyte 4way set associ level1 datacach 1 mbyte direct map level2 cach 128bitwid main memori bu power2 processor capabl issu two doubleprecis multiplyadd instruct per clock cycl lapack right look lufactor subroutin dgetrf recurs partit algorithm compil ibm xlf compil version 32 algorithm use bla ibm engin scientif subroutin librari essl squar matric also measur perform lufactor subroutin dgef essl interfac subroutin allow factor squar matric code style data structur use recursivelypartit algorithm one use lapack par ticular permut repres algorithm sequenc exchang case array contain matrix factor alloc static align 16byte boundari lead dimens matrix equal number row pad perform algorithm assess use measur run time cach miss time measur use machin realtim clock resolut one cycl number cach miss measur use power2 perform monitor 13 perform monitor hardwar subsystem processor capabl count cach miss processor event realtim clock perform monitor oblivi time share minim risk measur influenc process ran experi user use machin connect network later verifi measur valid compar real timeclock measur user time report aix getrusag system call experi experi basi measur report base averag 10 execut code two variant recursivelypartit algorithm two version differ way permut appli submatric one version permut appli use lapack auxiliari subroutin dlaswp sub tabl perform million oper per second mflop number cach miss per thousand float point oper cmkflop five lufactor algorithm ibm rs6000 workstat squar matric figur lapack dgetrf block size r best run time upright letter block size smallest number cach miss ital minimum number cach miss gener coincid minimum run time see text full descript experi subroutin mflop cmkflop mflop cmkflop lapack dgetrf row exchang 178 176 581 565 170 168 545 529 recursivelypartit row exchang 201 376 186 414 lapack dgetrf permut column 201 199 294 281 198 195 311 302 recursivelypartit permut column 222 161 223 159 essl dgef 228 215 221 342 routin also use lapack rightlook algorithm permut row submatrix exchang row use vector exchang subroutin dswap level1 bla second version permut row matrix appli entir sequenc exchang one column anoth differ amount swap inner outer loop chang suggest fred gustavson first experi whose result summar tabl 41 design determin effect complex hierarch memori system partit algorithm four fact emerg tabl 1 recurs partit algorithm perform less cach miss deliv higher perform rightlook algorithm essl subroutin perform less cach miss lapack recurs partit algorithm achiev best close best perform 2 permut one column time lead less cach miss faster execut exchang row true rightlook algorithm recursivelypartit algorithm probabl result advantag stride1 access column column permut larg stride access row row exchang 3 perform term time cach miss algorithm except recursivelypartit column permut wors lead dimens matrix power 2 perform recursivelypartit algorithm column permut improv less half percent degrad perform power 2 probabl caus fact cach fulli associ 4 run time depend measur number cach miss complet seen fact essl dgef perform cach miss recurs partit algorithm faster fact block size lead minimum number cach miss dgetrf lead best run time discrep caus sever factor mea sure includ miss conflict level2 cach tlb miss instruct schedul four case tabl minimum run time achiev valu r higher number lead minimum number cach miss exampl row exchang perform least number cach miss fastest run time achiev may mean local refer lu decomposit 11 500 1000 1500 2000160200240 mflop order matrix rl optim r r64 500 1000 1500 2000246cach reload per kflop order matrix rl optim r rl r64 fig 41 perform mflop left number cach miss per kflop right lu factor algorithm ibm rs6000 workstat graph depict perform recursivelypartit pr rightlook rl algorithm squar matric optim valu r select experiment power 2 2 256 dash line repres perform recursivelypartit algorithm column permut cp caus discrep miss level2 cach larger level1 cach therefor may favor larger block size sinc column fit summari experi show although implement detail memori system influenc perform algorithm recursivelyparti tion algorithm still emerg faster rightlook one implement similar way second set experi design assess perform algorithm wide rang input size perform number cach miss algorithm present figur 41 squar matric rang order 200 2000 level1 cach larg enough store matrix order 128 follow point emerg experi 1 begin matric order 300 recursivelypartit algorithm column permut faster algorithm row exchang still faster lapack dgetrf row exchang measur perform dgetrf column permut experi 2 perform dgetrf optim block size r essenti except although optim block size clearli lead smaller number cach miss 3 recursivelypartit algorithm perform less cach miss essl dgef input size faster first experi experi indic caus phenomenon specul caus better instruct schedul fewer miss level2 cach next experi design determin sensit perform rightlook algorithm block size r use column permut strategi prove effici previou experi experi consist run algorithm rang block size squar matrix order 1007 rectangular 62500by64 matrix factor rectangular mflop block size r cach reload per kflop block size r fig 42 perform mflop left number cach miss per kflop right rightlook algorithm column permut function block size r order squar matrix use 1007 note yax start zero block size r reload per kflop block size r fig 43 perform mflop left number cach miss per kflop right rightlook algorithm column permut function block size r dimens matrix 62500 64 comparison perform recurs partit algorithm problem 118 mflop 1103 cmkflop matrix aris subproblem outofcor lu factor algorithm factor block column fit within core specif dimens matric chosen minim effect conflict memori system result result shown figur 42 show minimum number cach miss occur higher best perform achiev even higher valu r 55 perform sensit choic r howev valu 50 70 yield essenti perform 201 mflop result matric shown figur 43 show minimum number cach miss occur best perform occur happen coincid exactli sensit r greater squar case especi optim valu last experi set present figur 44 design determin whether discrep optim block size term level1 cach miss local refer lu decomposit 13 mflop block size r cach reload per kflop block size r fig 44 perform mflop left number cach miss per kflop right rightlook algorithm column permut function block size r order squar matrix use 1007 machin use bigger level1 cach level2 cach machin use experi compar figur 42 comparison perform recursivelypartit algorithm problem machin 229 mflop 0650 cmkflop optim block size term run time caus level2 cach experi repeat last experi squar matric order 1007 except experi conduct machin 256bitwid main memori bu 256 kbyte level1 cach level2 cach two machin ident respect discrep optim block size figur 44 smaller discrep figur 42 experi show discrep caus sole level2 cach possibl determin whether smaller discrep experi due lack level2 cach larger level1 cach robust experi second set experi show perform advantag recurs partit algorithm demonstr first set experi limit singl comput architectur experi accomplish goal show recurs partit algorithm outperform right look algorithm wide rang architectur experi set compar perform recurs partit algorithm perform lapack rightlook two size squar matric larger matric fit within main memori size chosen minim impact cach associ result measur report repres averag best 5 10 run minim effect process system block size rightlook algorithm lapack default use follow machin configur ffl 665 mhz ibm rs6000 workstat power2 processor 128 kbyte 4way set associ datacach 1 mbyte direct map level cach 128bitwid bu use bla ibm essl ffl 25 mhz ibm rs6000 workstat power processor 64 kbyte 4way set associ datacach 128bitwid bu use bla ibm essl ffl 100 mhz silicon graphic indi workstat mip r4600r4610 14 toledo tabl run time second lu factor algorithm sever machin machin matrix order tabl show run time recursivelypartit rp algorithm rightlook rl algorithm row exchang column permut measur avail mark na amount main memori insuffici factor larger matrix core see text full descript experi row column row column exchang pivot exchang pivot machin rl rp rl rp rl rp rl rp ibm power 2281 1907 1787 1686 1461 1434 1358 1297 cpufpu pair 16 kbyte direct map data cach 64bitwid bu use sgi bla machin 32 mbyte main memori experi includ matric order ffl 250 mhz silicon graphic onyx workstat 4 mip r4400r4010 cpufpu pair 16 kbyte direct map data cach per processor 4 mbyte level2 cach per processor 2way interleav main memori system 256bitwid bu experi use one processor use sgi bla ffl 150 mhz dec 3000 model 500 alpha 21064 processor 8 kbyte direct map cach 512 kbyte level2 cach use bla dec dxml ieee float point limit amount physic memori alloc process prevent us run experi matric order ffl 300 mhz digit alphaserv 4 alpha 21164 processor 8 kbyte level1 data cach 96 kbyte onchip level2 cach 4 mbyte level2 cach experi use one processor use bla dec dxml ieee float point result report tabl 42 show recurs partit algorithm consist outperform rightlook algorithm result also show permut column almost alway faster exchang row experi use strassen algorithm perform updat trail submatrix use variant strassen algorithm 10 improv perform recurs partit algorithm replac call dgemm level3 bla subroutin matrix multiplyadd call dgemmb public domain implement 2 variant strassen algorithm 3 replac call dgemm call strassen matrixmultipl subroutin ibm essl gave similar result dgemmb use strassen algorithm dimens input matric greater machinedepend constant author dgemmb set constant 192 ibm rs6000 workstat recursivelypartit algorithm column permut replac avail onlin httpwwwnetliborglinalggemmw local refer lu decomposit 15 dgemm dgemmb reduc factor time power2 machin 299 second 1007 2218 second 2014 factor time convent matrix multipl algorithm report first line tabl 42 305 2345 second run time reduc 1827 1668 second matrix order 4028 chang would effect rightlook algorithm sinc matric multipli least one dimens r smaller 192 experi similar experi carri bailey lee simon 2 show strassen algorithm acceler lapack rightlook lu factor cray ymp largest improv perform howev occur larg valu r use fastest factor matrix order exampl obtain valu like caus poor perform machin cach cray ymp cach ibm power2 chine cach increas r 64 512 caus factor time convent matrix multipl algorithm increas 308 second 54 sec ond replac matrix multipl subroutin dgemmb reduc solut time less 2 second 5 conclus recursivelypartit algorithm use instead rightlook algorithm deliv similar better perform without paramet must tune paramet choos mean possibl poor choic henc new algorithm robust section 4 show perform rightlook algorithm sensit r best perform alway coincid block size caus smallest number cach miss choos r especi difficult machin two level memori recurs algorithm hand natur choic hierarch memori system two level recurs partit algorithm provid good opportun use fast matrix multipl algorithm strassen algorithm sinc signific fraction work perform recurs partit algorithm use multipli larg matric benefit use strassen algorithm larg rightlook algorithm perform work sever multipl smaller matric benefit strassen algorithm smaller analysi rightlook algorithm section 3 show block size r chosen valu r optim two except singl row larg fit within primari memori valu m3 lead better perform column fit within primari memori r set mn minim memori traffic extrem case sourc difficulti choos good valu r hierarch memori system two level experi perform rightlook algorithm matric row column sensit choic r sensit larg squar matric typic case least one row fit within primari memori rightlook algorithm optim choic r perform factor theta data transfer recurs partit algorithm experi factor led signific differ number cach miss run time conclus valu often close optim show systemindepend way choos r comparison model implement ilaenv lapack blocksizeselect subroutin use fix valu 64 toledo lapack user guid advis systemdepend tune r could improv perform viewpoint lapack design seem r systemdepend paramet whose role hide low bandwidth secondari memori system updat trail submatric analysi show true role r balanc number data transfer two compon algorithm factor block column updat trail submatric design outofcor lu decomposit code often propos use block column row algorithm mani propos choos r mn entir block column fit within primari memori 4 6 7 15 approach work well column short larg number fit within primari memori perform algorithm would unaccept column fit within primari memori research 7 8 9 suggest algorithm use less primari memori necessari store column might difficulti implement partial pivot analysi paper show possibl achiev low number data transfer even singl row column fit within primari memori wombl et al 15 present recursivelypartit lu decomposit algorithm without pivot claim without proof pivot incorpor algorithm without asymptot increas number io algorithm perform suggest recurs algorithm would difficult implement implement instead partit leftlook algorithm use toledo gustavson 12 describ recursivelypartit algorithm ofcor lu decomposit partial pivot algorithm use recurs larg submatric switch leftlook variant smaller submatric would still fit within main memori depend size main memori algorithm factor matrix 23 amount time use outofcor leftlook algorithm fix block size 6 acknowledg thank rob schreiber read sever earli version paper comment thank fred gustavson ramesh agarw help suggest thank anonym refere sever help comment r use strassen algorithm acceler solut linear system gemmw portabl level 3 bla winograd variant strassen matrixmatrix multipli algorithm note matrix multipl page environ solv system larg dens linear equat matrix comput fortran page gaussian elimin optim local refer lu decomposit partial pivot design implement solar power2 perform monitor power2 next gener risc system6000 famili beyond core make parallel comput io practic tr ctr bradley c kuszmaul cilk provid best overal product high perform comput hpc challeng award prove proceed nineteenth annual acm symposium parallel algorithm architectur june 0911 2007 san diego california usa florin dobrian alex pothen design ioeffici spars direct solver proceed 2001 acmiee confer supercomput cdrom p3939 novemb 1016 2001 denver colorado sivan toledo eran rabani larg electron structur calcul use outofcor filterdiagon method journal comput physic v180 n1 p256269 juli 20 2002 kang su gatlin larri carter architecturecogniz divid conquer algorithm proceed 1999 acmiee confer supercomput cdrom p25e novemb 1419 1999 portland oregon unit state zizhong chen jack dongarra piotr luszczek kenneth roch selfadapt softwar numer linear algebra lapack cluster parallel comput v29 n1112 p17231743 novemberdecemb bjarn stig andersen jerzi waniewski fred g gustavson recurs formul choleski factor matrix pack storag acm transact mathemat softwar tom v27 n2 p214244 june 2001 rezaul alam chowdhuri vijaya ramachandran cacheoblivi dynam program proceed seventeenth annual acmsiam symposium discret algorithm p591600 januari 2226 2006 miami florida matteo frigo volker strumpen memori behavior cach oblivi stencil comput journal supercomput v39 n2 p93112 februari 2007 vladimir rotkin sivan toledo design implement new outofcor spars choleski factor method acm transact mathemat softwar tom v30 n1 p1946 march 2004 alexand tiskin communicationeffici parallel gener pairwis elimin futur gener comput system v23 n2 p179188 februari 2007 lar arg michael bender erik demain bryan hollandminkley j ian munro cacheoblivi prioriti queue graph algorithm applic proceed thiryfourth annual acm symposium theori comput may 1921 2002 montreal quebec canada jack dongarra victor eijkhout piotr uszczek recurs approach spars matrix lu factor scientif program v9 n1 p5160 januari 2001 siddhartha chatterje alvin r lebeck praveen k patnala mithuna thottethodi recurs array layout fast matrix multipl ieee transact parallel distribut system v13 n11 p11051123 novemb 2002 michael bender ziyang duan john iacono jing wu localitypreserv cacheoblivi dynam dictionari proceed thirteenth annual acmsiam symposium discret algorithm p2938 januari 0608 2002 san francisco california dror ironi gil shklarski sivan toledo parallel fulli recurs multifront spars choleski futur gener comput system v20 n3 p425440 april 2004 isak jonsson bo kgstrm recurs block algorithm solv triangular systemspart onesid coupl sylvestertyp matrix equat acm transact mathemat softwar tom v28 n4 p392415 decemb 2002 richard vuduc jame w demmel jeff bilm statist model empir searchbas perform tune intern journal high perform comput applic v18 n1 p6594 februari 2004