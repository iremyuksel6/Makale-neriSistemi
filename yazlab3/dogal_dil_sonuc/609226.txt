gener reific techniqu objectori reflect languag comput reflect gain interest practic applic wit use reflect java program environ recent work reflect middlewar reflect system offer mani differ reflect program interfac socal metaobject protocol mop design subject number constraint relat among other express power effici secur properti sinc constraint differ one applic anoth would desir easili provid speciallytailor mopsin paper present gener reific techniqu base program transform enabl select reific arbitrari part objectori metacircular interpret reific process fine granular individu object runtim system reifi independ furthermor program transform appli differ interpret definit result reflect implement provid differ mop directli deriv origin interpret definit b introduct comput reflect possibl softwar system inspect modifi runtim gain interest practic applic modern softwar frequent requir strong adapt condit met order fit heterogen evolv comput environ reflect allow instanc host servic determin dynam enabl modif interact protocol runtim concret java program environ java reli heavili use reflect implement javabean compon model remot method invoc mechan furthermor adapt prime requir middlewar system sever group therefor research reflect middlewar coi99bc00 reflect system offer mani differ reflect program interfac socal metaobject protocol mop 1 design mop subject number constraint relat among other express power effici secur properti instanc use reflect extend version c 2001 kluwer academ publish higherord symbol comput 141 2001 appear use term mop sens kiczal et al kic91 page 1 metaobject protocol interfac languag give user abil increment modifi languag behavior implement well abil write program within languag debug purpos may requir mop provid access execut stack howev secur concern stack access must frequent restrict java exampl allow modifi untyp stack secur properti essenti reli type inform sinc constraint differ one applic anoth abl provid speciallytailor mop particular set constraint moreov constraint may chang overal softwar life cycl henc develop speciallytailor mop lightweight process tradit approach develop mop meet goal instead provid specif mop hardli modifi see discuss relat work section 9 consid instanc singleprocessor applic distribut case distinct task perform messag send side receiv side exampl sender side local call replac remot one instead reli proxi receiv side incom messag synchron mani exist mop allow behavior messag sender modifi henc distribut strategi implement use reflect system system see instanc coda aff95 provid access sender right start therefor introduc overhead local applic paper present reific mechan objectori interpret base program transform techniqu use gener transform appli compil time class nonreflect interpret definit mechan use transform differ subset metacircular interpret order gener increasingli reflect interpret also appli differ interpret definit order automat get differ reflect interpret result reflect implement provid differ mop directli deriv origin interpret definit paper structur follow section 2 briefli introduc smith semin reflect tower upon work base sketch architectur transform system section 3 provid overview metacircular interpret java gener reific techniqu formal defin applic nonreflect interpret exemplifi section 4 section 5 devot reflect program detail reific techniqu work present sever applic section 6 complement section 4 present technic postpon sake readabl section 7 discuss correct transform sketch formal correct proof section 8 illustr refin definit nonreflect interpret produc express reflect interpret section 9 discuss relat work fi nalli section 10 conclud discuss futur work code occur paper refer freeli avail prototyp implement call metaj metaj enabl execut reflect program exampl present provid platform experiment techniqu 2 overview reific process opinion smith definit reflect smi84 remain key refer clean semant foundat gener paper propos one method transpos techniqu domain objectori languag section first introduc smithlik reflect present architectur reific method level 0 level 1 level 2 level 3 interpret program program interpret interpret interpret program interpret program figur 1 smithlik reflect tower 21 smithlik reflect smith semin work reflect 3lisp defin reflect notion reflect tower figur 1 left hand side tower show userwritten ie level 0 program doublesquar box interpret defin oper semant simpl classic exampl reflect program deal introduct debug trace trace gener requir interpret modifi two step perform runtim provid access represent current interpret chang represent comput creat extra interpret layer mean reific oper reifi level 1 interpret becom part program illustr includ doubl squar box get second tower three level program modifi standard semant languag defin level 1 interpret get interpret gener trace execut see third tower final nonstandard semant interpret interpret requir extra interpret level introduc illustr fourth tower fourth tower would requir exampl trace interpret abstract level smith reflect model well reific techniqu two essenti properti potenti infinit tower reflect interpret interpret level n interpret actual code interpret level n 1 22 make objectori interpret reflect order get first intuit reific techniqu consid follow simpl exampl intend reflect use color inform repres class color ad pair runtim use reflect could dynam modifi inherit graph pair inherit color achiev pair extend object pair extend color 4 reific oper applic reific oper express yield access represent valu denot express exampl express pair denot correspond class object say c interpret memori see figur 7 4pair return instanc say ie object type instanc interpret memori repres c inspect modifi default superclass pair replac color assign field extendslink newli instanti pair contain color inform crucial approach reifi represent base definit c parser javajjt runtim system expassignjava reflect interpret reflectiveprogjava java2expvisitorjava parser javajjt runtim system expassignjava nonreflect interpret progjava java2expvisitorjava instancejava baseclassjava instancejava gener reflect interpret program transform figur 2 system architectur achiev system architectur shown figur 2 nonreflect java interpret repr sent box top take nonreflect program progjava input program pars syntax tree evalu accord requir reflect capabl languag design 2 transform subset class nonreflect interpret basic transform gener two class origin class exampl file classjava repres class nonreflect interpret becom baseclassjava differ version classjava reflect one reflect interpret reli nonreflect interpret order build level reflect tower core issu approach tower level shown figur 1 effect built runtim basi verbatim definit nonreflect interpret smith model origin definit classjava input reflect interpret figur 2 behavior reflect interpret deriv nonreflect one furthermor approach select complet transform applic class nonreflect interpret definit implement one version system architectur parser implement mean javacc jjtree version 08pre2 03pre6 respect metaj oper jdk version 116 12 3 simpl nonreflect interpret implement nonreflect metacircular interpret subset java provid support essenti objectori imper featur class object field meth od local variabl assign statement implement featur primit 2 note build reflect interpret transform write reflect program two differ task former perform languag design latter applic programm class expid extend exp privat string id expidstr id data evalenviron local return localelookupthisid figur 3 class expid class expassign extend exp privat exp lh privat exp rh expassignexp lh exp rh data evalenviron local data data return d2 figur 4 class expassign type loop construct could integr reifi similarli java program repres abstract syntax tree node denot java syntact construct implement correspond class exampl variabl assign statement method call class instanti express respect encod class expid expassign expmethod expnew class defin evalu method data evalenviron local take valu local variabl local return valu express wrap data object particular expid see figur 3 hold name variabl evalu method yield valu current associ variabl local environ expassign node see figur store two subexpress assign evalu method evalu locat righthand side express follow valu repres lefthand side express final perform assign expmethod see figur 5 repres method call receiv express exp method name methodid argument express arg method call evalu proce evalu receiv construct environ argument valu look method definit appli expnew see figur 6 encod class name classid constructor argument express evalu fetch class definit global environ instanti possibl call constructor suggest interpret defin class provid runtim system implement oper semant exampl class class see figur 7 repres class refer superclass extendslink list field datalist list method methodlist provid method instanti class instanti access list method includ super class methodlist etc method repres class expmethod extend exp privat exp exp receiv privat string methodid method name privat explist arg argument expmethodexp exp string methodid explist arg data evalenviron local evalu lh receiv instanc evalu argument get new local environ environ lookup appli method return mapplyargs figur 5 class expmethod class expnew extend exp privat string classid class name privat explist arg constructor argument expnewstr classid explist arg data evalenviron local get class creat instanc instanc call non default constructor exist igetinstancelinkmethodlistmemberthisclassidbooleanvalu environ lookup appli method return new figur class class class extendslink superclass datalist datalist field list methodlist methodlist classclass el datalist dl methodlist ml class getextendslink return thisextendslink implement java new oper instanc instanti comput complet method list incl superclass methodlist methodlist figur 7 class class class method privat stringlist arg paramet name privat exp bodi method bodi methodstringlist arg exp bodi data applyenviron args instanc name argument argseaddthi new eval bodi definit method return thisbodyevalargs figur 8 class method class method see figur 8 mean list argument name arg bodi express bodi method appli bind argument name valu includ evalu bodi class includ instanc contain refer instancelink class list field valu provid field lookup method lookup methodlist data implement mutabl memori cell field datalist environ map identifi valu etc architectur interpret follow standard design objectori interpret present gamma et al ghjv95 interpret design pattern instanti design pattern follow correspond hold client interpret main method method interpretcontext evalenviron reific techniqu describ paper applic interpret architectur note interpret may implement mani differ runtim system 4 gener reific code transform section give overview gener reific scheme class class formal defin underli program transform sake readabl postpon discuss technic section 6 appli detail class instanc 41 overview gener reific scheme reific object chang semant object chang represent provid access chang represent exampl possibl modifi superclass class runtim nonreflect interpret although refer repres inherit relat exist memori underli implement reifi represent class provid access refer intern represent expos access structur allow semant program chang eg mean dynam class chang note form structur reific interpret memori subsum tradit notion structur behavior reflect illustr purpos consid class pair two field fst snd implement interpret memori class c denot instanc class c order reifi pair choos class reifiabl basic reifiabl entiti two differ represent exemplifi figur 9 either base represent reifi represen tation sinc reific object chang behavior object provid method interfac represent common interfac implement use dispatch object 3 class denot pair dispatch object point current activ represent either base represent baseclass figur 9a reifi represent instanc denot 4pair figur 9b dispatch object provid method reifi trigger 4 switch base represent reifi one call reifi creat new tower level dispatch object execut incom method call accord activ represent base represent activ dispatch simpli deleg incom method call reifi represent activ dispatch object interpret method call whether object access dispatch object reifi represent irrelev modif object access path pair visibl access path 4pair properti commonli refer causal connect level 3 dispatch techniqu close bridg state pattern introduc gamma et al ghjv95 denot methodlist dispatch object class instanc datalist methodlist extendlink activ represent instanc b pair pair pair pair pair differ represent figur 9 reific class pair obvious two path provid differ interfac consid exampl problem keep track number pair instanc use static field countinst field could access either paircountinst 44pairstaticdatalistlookup 4 last express outermost reific oper necessari order call lookup data list object cf fourth item order conclud overview briefli mention import properti reific scheme sinc reflect provid object repres intern structur use userlevel program everi reific oper return instanc eg one figur 9b impli reific reifi entiti requir instanc reifiabl 4exp yield access represent valu denot exp ie object interpret memori class instanc method 5 refer dispatch object activ represent access user program call reific oper may modifi refer ensur tower structur mess user program scope reific process limit individu object interpret memori exampl reific class reifi list method methodlist superclass three categori object coexist runtim reifi object nonreifi 4 metaj allow static field could extend easili deal exampl 5 4 strict oper syntax extens would necessari reifi express eg ast repres 14 rather valu denot express eg integ 5 class name type f1 field f1 type fn field fn nametyp f1 arg f1 type fn arg fn bodi type m1 method m1 type m11 arg m11 type 1k arg 1k bodi m1 figur 10 origin class definit reifiabl one nonreifi one program access object reifi one use restrict exactli nonreflect case 4pairextendslink exampl refer class repres superclass pair therefor valid oper refer new 4pairextendslink 6 well access static field member class structur behavior superclass chang must reifi first impli access nonreifi object reifi one safe 42 formal definit gener reific scheme base implement techniqu outlin gener reific scheme automat program transform appli arbitrari class call name follow definit origin interpret shown figur 10 class consist number field method must constructor argument field transform set class time space complex linear number class transform consist two main step 1 introduc class basenam see figur 11 defin base represent origin class name class similar origin class name 2 redefin class name see figur 12 implement correspond dispatch object class provid method interfac origin class name implement method reifi creat reifi represent switch base represent reifi one figur 11 show gener base class figur section use differ style convent verbatim text schema variabl text substitut ba sical origin class renam field refer ad rememb reifiabl entiti implement dispatch object point current represent refer field initi constructor point back represent dispatch object mandatori distinguish dispatch object represent use access 6 current parser metaj allow express new requir class identifi howev parser could easili extend deal express allow notat paper class basenam type f1 field f1 type fn field fn name refer basenametyp f1 arg f1 type fn arg fn name refer bodi type m1 method m1 type m11 arg m11 type 1k arg 1k figur gener base class field method base class denot dispatch object 7 transform implement substitut match keyword follow anyth dot thisrefer gener dispatch class shown figur 12 two field represent point either base represent reifi represent boolean field isreifi discrimin activ represent constructor creat base represent object method method signatur origin version base represent activ ie isreifi fals method call deleg base represent reifi represent activ ie isreifi true method call interpret correspond call express pars parserjava2exp local environ built argseadd method argument field represent dispatch object method call evalu eval note sake clariti code intent naiv actual implement version could optim exampl call parser could replac correspond syntax tree method reifi build reifi represent base represent evalu newexpress correspond class clone order build new tower level everi reifi object copi class way behavior reifi object special independ share requir applic programm achiev explicitli manipul refer final reifi represent instal current represent refer return seri experi led us share strategi previou version transform clone class share led cycl depend relationship reflect overlap reific particular reific class class introduc 7 typic problem wrapperbas techniqu introduc two differ ident object class name object represent boolean isreifi nametyp f1 arg f1 type fn arg fn new basenamearg f1 arg fn type m1 method m1 type m11 arg m11 type 1k arg 1k thisisreifi reifiedrepmethod m1 arg m11 arg 1k environ argseaddreifiedrep thisrepresent argseaddarg m11 arg m11 data return resultread els return basenam thisrepresentationmethod m1 arg m11 arg 1k instanc reifi thisisreifi baserepfield fn environ argseaddbaserepfield f1 thisrepresentationfield f1 argseaddbaserepfield fn thisrepresentationfield fn argseaddaclass aclass return instancethisrepresent figur 12 gener dispatch class nontermin altern experi one copi class per level case reific without modif object could alreadi chang behavior gener reific techniqu base two assumpt 1 syntact construct repres appropri express interpret execu tion assum express evalu use method evalargs args contain current environ ie valu free variabl current express 2 assum textual definit reifiabl class pars interpret creation time store class object global environ mainglobal object cloneabl way reifi creat extra interpret layer base actual interpret definit note simpl assumpt formal definit enabl transform perform automat java oper new return object ie instanc therefor order let user build runtim entiti instanc class method provid famili deific 8 oper one entiti oper invers gener reific oper exampl reflect program r class denot deific oper class righthand side express return class dispatch object front instanc creat new note deific oper function invert reific oper chang represent object back unreifi structur eg baseclass case class dispatch object engend structur reflect tower implement access user particular reific oper deific oper encapsul field represent isreifi dispatch object well field refer base class user program arbitrarili chang tower structur howev user type system develop avoid creation meaningless structur r class new method 43 exampl make class instanc reifiabl illustr definit transform appli class instanc see figur 14 use exampl reflect program next section class implement object interpret exampl pair object two field fst snd implement instanc field datalist contain two memori cell label fst snd field instancelink point class contain method class pair method lookupdata call whenev field pair access sake concis show method instanc lookupmethod applic transform defin instanc yield two class ba seinstanc see figur 15 dispatch class instanc see figur 16 pair implement dispatch instanc shown figur 13 default unreifi represent baseinst say b 1 whose datalist field contain field label fst snd see 8 prefer term deific iyl95 equival term reflect wf88 absorpt meu98 dispatch object instanc dispatch object instanc denot activ represent instanc b baseinst datalist instancelink instanc differ represent dispatch object instanc figur 13 reific object pair class instanc public class instancelink ref class public datalist datalist field list instanceclass instancelink datalist datalist field access data lookupdatastr name return thisdatalistlookupnam figur 14 origin class instanc class baseinst class instancelink datalist datalist instanc refer baseinst class instancelink datalist datalist instanc refer data lookupdatastr name return thisdatalistlookupnam figur 15 class baseinst figur 13a pair reifi see figur 13b repres instanc point baseinst say b 2 note contrast reific class shown figur 9 reifi represent instanc reifiabl instanc henc second dispatch instanc figur 13b sinc reific base actual definit origin instanc datalist b 2 contain three field instancelinkdatalist contain fst snd refer definit method lookupdata dispatch object call method lookupdataof b 1 long pair reifi reifi definit lookupdata instanc interpret order prove feasibl approach appli reific techniqu differ class defin objectori featur java interpret result prototyp metaj imper featur nonreflect interpret tackl analog way could exampl redefin sequenti oper order count number execut step given method say one way achiev reific occurr exp reifi dynam chang class class perform profil within eval method anoth solut would replac exp node reifi node includ profil reflect program section express sever classic exampl reflect program framework detail exampl reflect interpret work help reader understand system work exampl highlight import featur design sinc reific scheme reli origin interpret definit metaobject protocol correspond reflect interpret ie interfac reflect system quit easi apprehend consist class reifiabl metaj reific oper 4 deific oper r figur 17 class pair defin main new instanc pair creat interpret object pair repres instanc see figur 13a gener reific method provid access represent instanc name metapair denot 4pair figur 13b basic use reflect objectori languag consist class instanc object represent boolean isreifi instanceclass instancelink datalist datalist new baseinstanceinstancelink datalist data lookupdatastr name thisisreifi interpret lookup method call pass alreadi evalu valu environ argseaddnam name argseaddreifiedrep thisrepresent data unpack result return dataresultread els return baseinstancethisrepresentationlookupdatanam data reifi thisisreifi copi base class baseinst creat initi new represent environ argseaddbaserepinstancelink thisrepresentationinstancelink argseaddbaserepdatalist thisrepresentationdatalist argseaddaclass aclass return new figur dispatch class instanc class pair string fst string snd pairstr fst string snd class printablepair extend pair string tostr return thisfst class instancewithtrac extend instanc method lookupmethodstr name trace methodcal systemoutprintlnmethod return thisinstancelinkmethodlistlookupnam class main void main pair new pair1 2 invari reific instanc test exist super class metaclassgetextendslink null systemoutprintlnclass pair superclass class chang methodcal semant instanc metametapairsetinstancelinkinstancewithtrac instanc class deific systemoutprintlnr instancemetapairfst figur 17 exampl reflect program reifi object chang intern represent without modifi behavior see exampl 1 anoth simpl use introspect let us consid problem test exist super class given class exampl 2 class pair repres class interpret reifi enabl method getextendslink call metaj reflect program limit introspect intern state interpret also modifi aka intercess third exampl main show behavior instanc modifi chang class dynam imagin would like print pair use method call tostr defin class printablepair extend origin class pair implement method tostr pair made printabl dynam chang class pair printablepair rememb field instancelink instanc hold class repres instanc see figur 15 afterward object pair understand method tostr fourth exampl deal method call trace debug purpos class instanc interpret defin method method lookupmethodstr name return effect method call within inherit hierarchi interpret lookup follow appli thu method call trace introduc defin class instancewithtrac special class instanc interpret method lookupmethod print name paramet order instal trace method call instanc pair standard behavior defin interpret class instanc note class access interpret definit integr part reflect system built top reflect interpret replac instancewithtrac reific pair provid access instanc whose field instancelink denot class pair sequenc two reific oper pair provid access instanc whose instancelink denot class instanc link set class instanc withtrac method call object pair print name method therefor tostr print third exampl final note towerbas reflect scheme make easi trace trace code requir number level may creat sequenc call 4 fifth rather artifici exampl illustr deific deifi metapair metaclass order creat instanc class base level deific reifi represent metapair show baselevel oper perform result ob ject case class deific restor origin class pair advanc exampl illustr approach reli capac reifi arbitrari part underli interpret discuss section 43 reific exp allow behavior sequenc oper chang way could instanc stop program execut everi statement debug purpos handl numer overflow except reexecut current statement block higherprecis data represent furthermor reific control stack would allow java trycatchmecan except handl extend retri variant 6 nut bolt gener reific section 4 present essenti part gener reific mechan howev actual implement fullfledg reflect system requir sever intricaci handl current section motiv problem must handl sketch solut develop indepth understand technic refer reader metaj sourc code class expid extend exp field constructor data evaloriginalenviron local definit eval data evalenviron local localemembermetalevelbooleanvalu return thisevaloriginallocal els thisidequalsthi return new datainst localelookupthisreadrefer els return evaloriginallocal figur class expmethod extend exp data evalenviron local instanc localemembermetalevelbooleanvalu return thisevaloriginallocal els evalu lh object part object instanceof reifiabl reifiabl ogetisreifi evalu receiv evalu argument get new local environ environ new environmentnul null null argseaddmetalevel new lookup method appli return mapplyargs els instanceof datalist thismethodidequalslookup environ return new datadatalist els deleg case figur 19 class expmethod first reflect interpret reifi object repres dispatch object reifi represent basic reifi object two differ ident techniqu bound represent rather dispatch object pars express reifiedrep method m1 arg m11 dotsarg 1k dispatch object see figur 12 howev statement return interpret denot dispatch object otherwis userlevel program could expos reifi represent interpret class expid charg identifi evalu includ therefor modifi account havior figur 18 method eval distinguish two case mean environmenttag metalevel 9 first interpret initi interpret entri point nonreflect evalu necessari second interpret initi dispatch object reflect interpret requir first case evalorigin call method definit eval nonreflect interpret second case identifi dispatch object current represent return rememb field refer point back base represent dispatch object mechan use link reifi represent dispatch object field must set method reifi class instanc provid field 10 second rememb scope reific limit singl object interpret memori mean interpret involv reifi nonreifi object exampl reific instanc reifi neither field list datalist class denot stancelink particular instanc reifi interpret method lookupdata repeat figur 14 data lookupdatastr namereturn thisdatalistlookupnam requir thisdatalist interpret call lookupnam deleg thisdatalist denot nonreifi object abstract term dispatch object introduc interpret layer call eval layer elimin scope current reifi object left scheme implement expmethodev see figur 19 two problem method expdataev expnewev modifi similarli mean reific scheme appli four class expid expmethod expdata expnew 11 howev method provid much express power restrict fix relationship certain syntact construct runtim system runtim mechan still modifi exemplifi section 5 order weaken restrict design implement variant 12 reific scheme requir expid expdata modifi unfortun advantag come price field refer expos modifi reific case 7 discuss correct transform complet treatment correct techniqu beyond scope paper howev section discuss briefli work relat semant reflect system sketch essenti properti constitut skeleton formal correct proof techniqu 9 dispatch object insert tag local environ 10 sake simplic code shown figur 12 16 mention field refer 11 restrict part reflect system reifi seem inher reflect wf88 variant also bundl metaj distribut semant reflect program system complex research domain almost exist bodi research work domain reflect function program languag wf88dm88mul92mf93 even context foundat problem still exist exampl seem imposs give clean semant avoid introduc nonreifi compon wf88 logic program languag must consider weaken order obtain consist theori reific mul92 one formal studi reflect nonfunct set done malenf et al mdc96 work deal reflect prototypebas languag focus lookup appli mop formal mean rewrit system approach thu restrict serv basi correct concern gener semant account imper languag difficult defin function case particular transposit result obtain function case approach requir work anticip simpler transform set arbitrari reflect imper system order prove correct scheme basic properti satisfi would equival nonreflect interpret nr reflect interpret gener appli transform nr ie sinc transform tr oper individu class properti tackl establish equival arbitrari class say c nonreflect interpret transform counterpart essenti transform introduc extra interpret layer evalu method c program interpret introduc transform satisfi properti properti proven induct structur ast represent p note formul properti intent simplist parameter contextu inform global environ store appli dispatch class see figur 12 fold interpret code deleg code thenbranch dispatch method rewritten use properti left right thenbranch equal correspond elsebranch henceforth condit becom useless dispatch object becom simpl indirect suppress case method reifi rewrit lead express new name creat copi nonreifi represent final strongli believ transform typesaf although formal prove everi welltyp interpret transform welltyp reflect interpret obvious wronglytyp user program may crash nonreflect interpret way reflect program may crash reflect interpret instanc confus reflect level tri access field previous suppress use intercess special type system static analysi method safe reflect program develop gener altern metaobject protocol alreadi mention set reifi class along definit determin mop think key properti approach provid basi systemat develop speciallytailor mop section modifi messagesend part nonreflect interpret order provid finergrain mop distinguish sender receiv messag class instanc add two new method data sendmsg msg return msgtoreceivemsg data receivemsg msg return msgtolookupmethodmsgmethodid class expmethod extend exp data evalenviron local evalu receiv argument args new code determin sender build send messag instanc new msgself thismethodid args return selfsendmsg figur 20 altern origin interpret class instancewithsendertrac extend instanc data sendmsg msg systemoutprintlnmethod call return figur 21 userdefin extens instanc origin interpret expmethodev evalu method call implement composit lookupmethodappli behavior receiv method call modifi easili chang definit lookupmethod illustr trace insert section 5 howev modif concern sender method call see coda aff95 motiv make sender explicit context distribut program much difficult implement chang would requir modif instanc expmethod abstract syntax tree ie occurr oper inde check whether object context nonstandard behavior solut problem modifi nonreflect interpret reflect version provid mop enabl explicit access sender method call intuit split messag send two part sender side receiv side first introduc new class msg fourtupl method call contain sender receiv method name methodid correspond argument valu args two method deal messag ad definit instanc origin interpret send receiv see figur 20 final expmethodev redefin creat send messag receiv new version nonreflect interpret made reflect appli program transform user exampl introduc trace messag sender see figur 21 way trace introduc previou section exampl highlight three advantag approach mop precis defin applic programm provid minim mop tailor need languag design extend mop compil time without anticip chang 9 relat work comparison reflect system inher difficult wide varieti conceptu complex reflect model implement exampl detail definit clo mop requir book kic91 thorough comparison clo alreadi fill book chapter coi93 consequ restrict comparison three basic properti reflect model obey first second character smithlik approach third fundament goal construct speciallytailor mop 1 tower potenti infinit tower reflect interpret 2 interpret interpret level n interpret code interpret level n 1 3 select complet part runtim system almost syntax tree see section 6 interpret level n reifi access represent level first reflect system base notion reflect tower provid potenti infinit number level notabl except openc chi95 iguana gc96 whose mop provid one metalevel second approach semanticsbas follow smith semin work reflect 3lisp smi84 function languag also case prototypebas languag 3kr mae87 agora meu98 objectori approach reflect includ obj vlisp coi87 smalltalk bri89 riv96 classtalk bri89 clo kic91 metaxa gol97 semanticsbas sens second properti cite feed higherlevel interpret code lowerlevel interpret instead differ level repres appropri pointer structur proceed allow effici implement semant foundat moreov reflect languag monolith entiti modular approach consist three simpl part nonreflect interpret oper 4 oper r third approach enabl languag design precis select mechan languag reflect except iguana openc reflect system cite characterist final note approach share gener notion complet 3lisp 3kr agora program model defin interpret almost featur made reifiabl primit 3lisp reifi instanc asai et al amy96 also start complet model interest approach reflect function languag restrict reifiabl entiti order allow optim partial evalu contrast remain reflect system describ base reflect featur underli interpret implement ad hoc mop notion complet therefor make sens conclus futur work paper present program transform techniqu gener reflect object orient interpret nonreflect one techniqu allow speciallytailor mop produc quickli new mop develop scratch refin exist one exemplifi section 8 compar gener mop speciallytailor one could tune instanc toward better effici secur properti best knowledg result framework reflect objectori languag first one satisfi three basic properti mention section 9 consequ approach cleanli distinguish reifiabl nonreifi entiti thu help understand reflect program prototyp implement call metaj metaj avail futur work present gener reific techniqu objectori reflect languag provid basi explor metaprogram design space optim techniqu formal reflect system first system level design space mop explor defin refin differ nonreflect interpret exemplifi section 8 yield taxonomi reflect mechan user level prolifer reflect dialect requir appropri design program tool includ librari userfriendli reflect oper program analys type system second reflect deepli relat interpret dispatch object introduc new interpret layer call method eval special techniqu like partial evalu bn00 prime candid effici improv furthermor userwritten reflect program may use reflect capabl provid reflect interpret eg make use bound number reflect level case optim techniqu present asai et al amy96 could use merg interpret level third sinc reflect program rather complex task base formal semant eg defin ensur secur properti believ transform could use gener speciallytailor reflect semant nonreflect one final firmli believ reific techniqu also appli part applic instead interpret order make reflect preliminari result found relat paper author ds00 acknowledg thank anonym refere numer construct comment editor olivi danvi work report also benefit remark kri de volder shigeru chiba jan vitek improv mani discuss colleagu nouri bouraqadi mathia braux thoma ledoux r duplic partial evalu better understand reflect languag program explicit metaclass smalltalk metaobject protocol c first class object objvlisp model objectori program clo perspect intens extens reflect tower lightweight select introduct reflect capabl applic design pattern design implement meta architectur java use metaobject support optimis aperto oper system sun microsystem art metaobject protocol concept experi comput reflect semant introspect reflect prototypebas languag toward theori reflect program languag httpwww prototypebas program mlisp representationindepend dialect lisp reduct seman tic smalltalk reflect languag reflect semant lisp mysteri tower reveal nonreflect descript reflect tower tr ctr gregori sullivan aspectori program use reflect metaobject protocol commun acm v44 n10 p9597 oct 2001 manuel clavel jo mesegu miguel palomino reflect membership equat logic manysort equat logic horn logic equal rewrit logic theoret comput scienc v373 n12 p7091 march 2007