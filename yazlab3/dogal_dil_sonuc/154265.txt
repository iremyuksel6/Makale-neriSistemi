mutat analysi use mutant schemata mutat analysi power techniqu assess improv qualiti test data use unit test softwar unfortun current autom mutat analysi system suffer sever perform problem paper present new method perform mutat analysi use program schemata encod mutant program one metaprogram subsequ compil run speed substanti higher achiev previou interpret system preliminari perform improv 300 report method addit advantag easier implement interpret system simpler port across wide rang hardwar softwar platform use compil runtim support system use develop andor deploy b introduct program 1 test execut test input examin result output error intent test process increas confid correct test code howev test poorli con duct adhoc manner confid may misplac poorli select test data adequ exercis program must deem low qualiti systemat test techniqu establish test data adequaci criteria seek measur qualiti test data use exercis given program one power test techniqu use adequaci criterion mutat test 11 13 14 mutat test test set analyz determin qualiti measur call mutat adequaci score process call mutat analysi unfortun convent method perform mutat analysi requir interpret mani slightli differ version pro gram signific problem autom mutat analysi system base convent method slow labori build usual unabl complet emul intend oper environ softwar test principl reason convent mutat analysi system slow interpr tive one studi note current implement mutat tool unaccept slow suitabl test rel small program 16 thu convent system prove use experiment mutat test widespread practic use mutat analysi stymi enorm comput use word program denot softwar test may complet program smaller unit procedur requir convent system con vention interpret system also labori build test softwar written specif lan guag interpreterbas system must incorpor compil characterist runtim semant languag certain languag ada formid undertak sinc dialect differ often exist degre complianc languag standard becom problem also subtl chang program behavior may occur sinc program test longer run intend oper environ paper present new method perform mutat analysi suffer problem rather mutat intermedi form program must interpret mutant schema gener msg method enabl us encod mutat one sourcelevel program program compil compil use develop execut oper environ compiledprogram speed sinc mutat system base mutant schemata need provid runtim semant en viron significantli less complex easier build interpret system well portabl section 2 provid background mutat test introduc mutant schema gener msg method section 3 present experiment result section 4 relat work review section 5 conclus present section 6 mutat test background mutat analysi whitebox test techniqu base notion qualiti test set relat abil test set differenti program test set margin differ presum incorrect altern program say test case differenti two program caus two program produc differ output process perform mutat analysi test set rel given program p begin run p everi test case program comput incorrect result test set fulfil oblig program must chang determin correct result oracl problem 24 common test techniqu discuss assum p comput correct result everi test case set altern program pro duce altern program p known mutant p form modifi singl statement p accord predefin modif rule modif rule g call mutagen oper mutagen 2 syntact chang call mutat origin program plu mutant program collect known program neighborhood n p 7 mutant run test case test case mutant produc result differ origin program say test case kill mutant indic test case abl detect fault repres mutant kill dead mutant run addit test case mutant although syntact differ function ident origin program call equival mutant although progress made automat identifi mutant equival 4 18 remain timeconsum manual task sinc test case kill equival mutant must remov consider assess test data qualiti ratio dead mutant remain undifferenti live mutant indic test set qualiti mutat analysi measur use express test set qualiti mutat adequaci score ms percentag potenti kil labl mutant actual kill equival theta 100 mutant total number mutant program neighborhood subscript mutat adequaci score ms set mutagen g reflect influenc number type mutant produc practic howev standard set mutagen use common subscript omit major comput cost mutat analysi incur run mutant program test case number mutant gener program roughli proport number data refer time number data 2 terminolog vari also sometim call mutant oper mutat oper mutat transforma tion mutat rule 25 acre 1 use term mutagen biolog mutagen substanc factor simpli call mutagen object 9 typic larg number exampl 385 mutant get gener procedur newton shown figur 1 find squar root use newton method 6 epsilon 0001 7 newguess number 20 9 newguess sqrtnumbersqrt20 figur 1 newton squar root procedur 3 msg method approach mutat analysi base program schemata program schema templat partial interpret program schema defin baruch katz 5 syntact resembl program contain free identifi call abstract entiti place program variabl datatyp identifi constant program state ment schema creat via process ab straction schema instanti form complet program provid appropri substitut abstract entiti devis new form partial interpret program schema mutant schema 23 mutant schemata use repres program neighborhood mutant schema two com ponent metamut metaprocedur set repres syntact valid ie compil construct use mutant schemata significantli speed mutat analysi 31 mutat analysi use mutant schemata essenc new method lie creation special parameter program call metamut deriv program test p metamut compil use standard compil use compil p run compiledspe run metamut function altern program found n program neighborhood p explain metamut repres function collect mutant must take closer look mutat analysi recal program p mutant p form result singl modif statement thu mutant newton differ origin one mutat statement way statement alter dictat set g mutagen modif rule use discuss use mutagen oper defin imscu system 19 rule typic current use 2 15 consid arithmet oper replac aor rule state occurr arithmet oper replac possibl arithmet oper oper also replac special oper leftop rightop leftop return left operand right ignor rightop return right operand appli rule assign statement line 9 newton yield follow six mutat mutat gener repres arithop metaoper abstract entiti gener represent recast syntact valid statement aorr function perform one arithmet oper third argument 62 ex ampl use identifi locat chang point program function voke aorr exampl metaprocedur function correspond abstract entiti schema statement chang reflect gener form said meta mutat metamut syntact valid chang embodi chang 9 origin svr number newguess sqrt svr sqrt newguess sqrt svr newguess newguess sqrt svr epsilon newguess sqrt figur 2 newton line 9 mutat mutat produc appli standard mutagen repres metamut figur 2 show mutat line 9 result appli complet set imscu mutagen follow statement dr embodi altern gener metamut p list mutant descriptor produc list detail altern oper use chang point program use list metamu tant dynam instanti function mutant p driver har invok metamut direct mutant instanti driver take care administr matter manag test case input output handl except compar mutant output origin program output record result driver also comput report statist current statu mutant primarili mutat score common driver use metamut metaprocedur syntact valid represent abstract entiti found mutant schemata categor either meta oper metaoperand metaoper procedur perform one class altern opera tion metaoper implement use case structur runtim global paramet select altern oper perform paramet valu set base inform contain mutant descriptor list aorr routin exampl metaoper procedur simplifi version aorr function given figur 3 begin aorr case rang figur 3 simplifi version arithemet oper function creat metaoper procedur straightforward tediou task mani metaoper procedur ident form differ type declar formal paramet return valu natur number metaopera tor procedur need function 1 g set mutagen 2 l languag p sometim 3 p program metaoper depend g l said intrins languag support userdefin type fortran meta oper intrins gener independ particular program place g oe mutat n substanti ae oe instanti p execut figur 4 model msg method static metaprocedur librari metaoper depend g l p said p deriv stronglytyp languag modula2 ada allow program userdefin type p deriv metaoper languag intrins metaprocedur librari must augment p deriv metaoper routin gener use inform p specif program test metaoperand procedur refer one set program variabl actual variabl referenc determin runtim via paramet similar metaoper procedur meta operand procedur uniqu program p must gener anew program although implement detail metaoperand procedur influenc avail featur l scope rule type check rule avail pointer nest rule case scheme use array use conceptu model appli msg method given figur 4 work backward ie right left mutat adequaci score obtain result execut mutant test set mutant p obtain use list mutant descriptor repeatedli instanti metamut form result substanti ie impart materi form program neighborhood n program neighborhood obtain appli mutagen g program p 32 gener metamut current develop complet system perform mutat test use mutant schemata section give detail system process gener metamut program p begin construct decor abstract syntax tree abstract syntax tree ast nonleaf node repres oper children node repres operand 3 decor tree attribut type inform attach node system attribut grammar use direct pars program ast construc tion result ast decor type inform use symbol tabl develop pars program semant rule specifi attribut grammar figur 5 show statement correspond ast mutagen express tree transform procedur mutagen g appli decor abstract syntax tree use locat type inform content node children ast transform replac node content metaprocedur call leaf node replac metaoperand interior node replac metaoper metaprocedur invoc site chang point identifi chang point number mutagen caus structur tree alter exampl accommod unari oper insert mutat ast augment creat new node certain arc node repres hexagon rewritten ast right hand side figur 6 travers revis ast inform need gener metamut program obtain 4 experiment result preliminari step implement full msg system wish establish empir approach yield faster mutat analysi interpret approach manual gener metamut newton procedur shown figur 1 abridg list metamut given figur 8 also manual gener list mutant descriptor use imscu muta gen 385 mutant produc addit rudimentari librari metaprocedur driver develop implement make work msg mutat analysi system compar speed newton metamu tant test newton mothra environmenta convent interpret system 15 fortran version newton prepar see figur 7 run mothra slight differ imscu mothra muta gen 364 mutant fortran version program real real real real real figur 5 statement correspond decor abstract syntax tree c find squar root use newton method c return end figur 7 fortran version newton use unix cshell builtin time command benchmark comparison reveal mutat analysi perform direct execut meta mutant 41 time faster interpret ex ecut strong indic msg significantli increas perform mutat test expect even dramat improv futur system 5 relat work larg number mutant program must gener run earli design mutat analysi system consid individu creat compil link run mutant difficult slower use interpret system 6 8 consid like cost compil larg number mutant would prohibit interpreterbas system develop mothra recent comprehens 11 15 convent interpreterbas mutat analysi system sourc code translat intern form suitabl interpret execut mutat mutant mutant gener program produc patch appli intern form creat desir altern program translat program plu collect patch repres program neighborhood run mutant test case interpret dynam appli appropri patch interpret execut result altern intern form program number attempt overcom perform problem made approach attempt limit number mutant must run select mutat 21 subset possibl mutagen use result fewer mutant creat preliminari result suggest select mutat may provid almost test coverag nonselect mutat certain condit run sampl oir oir oir oir oe put get get aorr figur transform abstract syntax tree mutant 22 also suggest research determin statist appropri sampl size continu extrem case howev necessari run almost mutant approach use nonstandard comput architectur explor unfor tunat full util high perform comput requir awar special requir well adapt softwar work done adapt mutat system vector processor 17 simd 16 hypercub mimd machin 10 20 howev fact architectur nonstandard limit appeal approach avail develop envi ronment test softwar design one oper environ machin oper system compil etc anoth fraught risk approach squar address primari factor caus convent system slow interpret execut yet note previous appar overhead compil mani mutant program outweigh benefit increas execut speed compilerintegr 12 program mutat seek avoid excess compil overhead yet retain benefit compil speed execut method program test compil special compil compil process proce effect mutat note code patch repres mutat prepar execut particular mutant requir appropri code patch appli prior execut patch inexpens mutant execut compiledspe unfortun craft need special compil expens undertak modifi exist compil reduc burden somewhat task still technic demand moreov new comput oper system envi ronment task must repeat 6 conclus paper present novel way perform mutat test use program schemata mutat analysi system base msg method exhibit sever advantag interpret sy tem obviou advantag msg mutat system faster interpreterbas sy tem msg system allow mutant execut compil speed without recompil store mutant separ although larg number metaprocedur function call must process mutant run compil program thu execut machin languag speed addit improv execut speed msg system significantli cheaper build interpret system much implement difficulti mutat system design intermedi languag build parser build interpret problem exacerb languag dynam memori fea ture userdefin type complic control featuresinde much reason mothra find squar root use newton method var newguess use putr target begin initi local variabl default valu 0 newguess 00 epsilon 00 dr putrcrrgetr403459 number dr putroiraorroiraorroirgetr41 11 dr putrcrrgetr443761 dr putroiraorroirgetr4514oirgetr461531662 dr putroirgetr491963 6 newguess sqrt number sqrt 20 dr putroiraorroiraorroirgetr5020 oiraorroirgetr5121 oirgetr5222423524 dr ew san75 oilrorroirgetr5629 crrgetr5739933 dr putroiroirgetr58303166 11 end ew end ew san75 ew 8 ew 11 end ew end end newton figur 8 newton metamut abridg minor initi code getr putr metaprocedur routin omit origin statement includ comment test fortran program fortran77 featur sinc msg method leav problem provid runtim semant environ preexist compil runtim librari msg system smaller easier build allow us quickli develop mutat tool varieti languag msg system also provid realist test sinc msg method produc compil program languag program test test take place use compil environ use program test henc program test oper environ use retain origin oper behavior import advantag msg mutat system innat portabilti msg system oper sourcelevel easili move machin machin compil compil exampl network comput system differ architectur exampl sun3 sun4 could util simpli recompil msg system differ type machin architectur independ also make heterogen distribut comput implement easier lastli sinc abil compil run program p provid exist llanguag compil possibl msg system incomplet yet provid partial function although driver must substanti com plete metaprocedur need written metamut transform mechan defin unimpl mutagen result p sourc text pass compil unalt contrast interpreterbas system virtual entir translat runtim interpret must finish program execut test characterist schemabas system encourag increment implement also allow greater freedom experi mutagen oper although much faster interpret sy tem msg system may somewhat slower compilerintegr method compilerintegr system burden metaprocedur function call overhead execut speed mutant ident singl program exhibit fault mutat feel portabl eas construct msg system far outweigh execut speed differ unless mutat system use object code patch built compil start modifi preexist compil unlik practic interest note msg method orthogon mani approach discuss section 5 exampl schemabas mutat could perform concert compil integr method similarli mutant sampl strategi could use regardless underli mutat analysi mechan msg system could implement weak mutat addit reason believ msg system could success adapt run distribut comput environ r heurist determin equival program mutat partial interpret schema csp program privat correspond two notion correct relat test design prototyp mutat system program test mutat analysi program test extend overview mothra softwar test environ hint test data se lection help practic programm test program aid compil fortran languag system mutationbas softwar test high perform softwar test simd machin mutant unif improv vectoriza tion use compil optim techniqu detect equival mutant instruct mutat system clemson uni versiti system document mutat test softwar use mimd com puter experiment evalu select mutat test nontest program tr compil principl techniqu tool partial interpret schema csp program high perform softwar test simd machin fortran languag system mutationbas softwar test highperform mutat test experiment evalu select mutat mutationbas softwar test use program schemata ctr vladimir n fleyshgakk stewart n weiss effici mutat analysi new approach proceed 1994 acm sigsoft intern symposium softwar test analysi p185195 august 1719 1994 seattl washington unit state zuhoor alkhanjari martin woodward haider ali ramadhan critic analysi pie testabl techniqu softwar qualiti control v10 n4 p331354 decemb 2002 yuseung jeff offutt yongra kwon mujava mutat system java proceed 28th intern confer softwar engin may 2028 2006 shanghai china jeff offutt yuseung yongra kwon experiment mutat system java acm sigsoft softwar engin note v29 n5 septemb 2004 jefferson offutt ammei lee gregg rothermel roland h untch christian zapf experiment determin suffici mutant oper acm transact softwar engin methodolog tosem v5 n2 p99118 april 1996 kamel ayari salah bouktif giuliano antoniol automat mutat test input data gener via ant coloni proceed 9th annual confer genet evolutionari comput juli 0711 2007 london england j offutt lee empir evalu weak mutat ieee transact softwar engin v20 n5 p337344 may 1994 z alkhanjari r woodward haider ali ramadhan n kutti effici critic slice fault local softwar qualiti control v13 n2 p129153 januari 2005