effici bulkload gridfil abstractthi paper consid problem bulkload larg data set gridfil multiattribut index techniqu propos rectilinear partit algorithm heurist seek minim size gridfil need ensur bucket overflow empir studi synthet data set data set drawn comput fluid dynam applic demonstr algorithm effici abl handl larg data set addit present algorithm bulkload data set larg fit main memori util sort entir data set creat gridfil without incur overflow b introduct develop scientif databas support retriev subset comput fluid dynam cfd data set retriev subset requir visual data explor data two threedimension thu requir multiattribut index specif interest partial qualifi fulli qualifi point queri gridfil well known multiattribut index techniqu 5 basic idea partit attribut rang subrang therebi induc multidimension rectilinear partit entir multiattribut space enough partit chosen ensur tupl share subrang dimens fit disk page point queri satisfi two disk access one fetch pointer data page one fetch data page data wish store contain file creat cfd simul size data set anticip extens use data set requir provid fast organ new data fast retrivi exist data two dimension data typic larg set tupl form current data set measur ten megabyt project 23 order magnitud larger soon although specif concern cfd data set larg physic orient data set common output wide spectrum scientif comput paper show quickli load entir data file gridfil index structur term bulk load note similar function requir relat databas reload relat chang platform recoveri reorgan relat databas relat analog data set work main contribut paper 1 partit algorithm requir two four order magnitud less cpu time known algorithm partit data gridfil block provid experiment result partit algorithm 2 effici algorithm aggreg underutil logic gridbucket achiev better disk uti lizat provid experment result demonstr util aggreg phase 3 complet algorithm bulkload larg data set significantli larger main memori guarante bucket overflow rest paper organ follow next section relat work prior effort section 3 present gener problem detail provid exampl section 4 present exist partit algorithm new algorithm aggreg algorithm section 5 experiment compar execut time two algorithm varieti data set includ highli skew cfd data set also demonstr effect aggreg techniqu section 6 present two phase bulkload algorithm end conclus plan futur work previou work bulkload b tree 6 investig recent bulkload grid file consid singl paper awar li rotem srivastava 2 main emphasi bulkload parallel grid file ie grid file distribut across multipl site share noth environ defin logic partit gridfil among site databas system physic partit portion gridfil locat one site bucket compos portion gridfil solut base dynam program logic partit physic partit parallel gridfil physic partit object function minim bucket overflow concern physic partit singl site although modifi version algorithm could use logic partit li et al algorithm optim partit one dimens given specif number partit fix partit dimens like equal space detail fix partit lack li et al paper algorithm dynam find number partit find partit much quickli directli address issu select fix partit uniformli distribut data may suffici assum equal space partit case data skew show dynam program approach ineffici consid larg grid file li et al recogn problem suggest sampl 7 8 acceler algorithm howev sampl may introduc overflow handl may signific bucket overflow addit bucket must creat grid directori split number overflow within bucket larger bucket capac multipl new bucket need creat grid directori split multipl time earlier work inadequ assess risk sampl focus probabl block overflow rather say averag number block overflow averag total number overflow tupl problem specif given li et al ie given fix partit fix number partit dynam program formul excel approach propos better reformul problem find smallest number partit total overflow zero freedom introduc allow arbitrari number partit enabl us use fast heurist algorithm instead expens dynam program algorithm possibl larger number bucket result increas number partit reduc via low cost aggreg algorithm thu partit algorithm capabl handl much larger grid file still guarante overflow achiev good bucket util although data set larg fit main memori data must first sort furthermor consid extens data set earlier work better understand effect posit skew cluster data typic cfd data set partit algorithm modif rectilinear partit algorithm develop nicol4 purpos loadbalanc irregular dataparallel comput two principl differ algorithm earlier one number subrang dimens consid fix present context upper limit number tupl bucket 3 gener problem descript consid algorithm issu let us first examin gener problem exposit twodimension case algorithm gener immedi higher dimens also assum attribut rang partit number subrang rigor necessari address one would choos desir relationship number subrang dimens let set tupl 1 2 q attribut 1 2 index attribut q rest tupl specif data set 1 2 x coordin q array 35 float point valu repres physic quantiti pressur densiti direct deriv inform chemic composit eas exposit assum domain 1 2 integ 2 algorithm extend straightforward fashion realvalu attribut gener rang empir result report base extens let f n theta n frequenc matrix entri contain number tupl coordin e use follow notat number tupl data set number partit dimens maximum number tupl bucket hold number uniqu coordin valu dimens vector cut dimens specif c 1 vector horizont cut c 2 vector vertic cut p theta p occup matrix result appli cut vector c 1 c 2 total seek pair c overflow equal zero whose number cut minim make concept intuit left hand side figur 1 partit data set horizont 26 partit c divid domain 9 bin note dash line c slightli offset clearli show occup bin case bin 1 contain point 11 22 bin 2 contain 13 14 bin 3 contain 28 bin 4 contain 42 51 72 bin 5 contain 43 53 74 bin 6 contain 39 bin 7 contain 93 bin 9 contain 88 thu occup matrix ij figur 1 partit exampl left total overflow equal 1 right total overflow equal 0 assum 2 total overflow partit 2 bin 4 5 contain 3 point move posit second cut c 1 posit 6 e let c shown right hand side figur 1 total overflow would zero 4 algorithm descript describ algorithm li et al implement earlier algorithm present 41 detail provid detail lack li et al paper wish show weve made everi effort optim perform dynam program solut section 42 give partit algorithm 43 describ method aggreg underutil bucket 41 dynam program solut dynam program equat describ precis one given li et al 2 reword formul describ specif optim algorithm solv equat assum alreadi partit horizont dimens ie c 1 fix task find vector c 2 minim total overflow let ri j n theta j f obtain restrict 2 2 j consid column bin result partit horizont c 1 let ov 1 j sum member column bin overflow exampl matrix left figur 1 ov 1 2 sinc middl bin 4 tupl overflow observ two bin reduc overflow might consid partit ri vertic l gamma 1 cut therebi creat p theta l submatrix bin attend total overflow valu may mani way partit column j ri l minimum possibl total overflow cost among possibl principl optim 1 assert 1 particular interest valu tov partit achiev cost solut equat aid precomput valu ov 1 j deriv op time follow c 1 partit f p submatric k column sum entri column indic 1 j inclus pair column indic j r k comput singl subtract ov 1 j comput op time set valu comput time proport n logp slightli comput sort dimens accommod tupl set spars rel n theta n project data set onto coordin axi sort essenti work theta array contain nonzero indic describ paper may thought ordin posit data project axi take advantag spars structur still comput proport logp dynam program equat express recurs column index j number cut l approach unravel recurs j inner index l outer one specif start solv tov 1 1 j 1 j given solv tov 1 1 j 2 j l 1 solv tov 1 1 j l must make comparison actual must make one comparison everi nonzero column f column l gamma 1 1 tupl set spars rel n theta n complex inner loop recurs op n 2 outer loop execut give complex op 2 n 2 addit complex initi precalcul thu total complex op 2 data set spars rel n theta n complex reduc op 2 u 2 number uniqu attribut valu dimens 2 addit logt sort tupl need maintain spars represent rest paper assum data set spars rel n theta n spars data set especi relev sinc coordin unstructur cfd data set real asymptot complex omaxfp 2 u 2 henceforth call algorithm dp algorithm speed algorithm increas precalcul store valu 8j complex op u 2 precalcul ov 1 proport op u 2 2 thu includ term storag cost signific henc limit applic optim exampl u 2 5000 space requir store ov 1 j 95 megabyt henceforth call algorithm dp2 algorithm describ calcul optim overflow cost partit given fix partit c 1 far differ work li et al provid detail implement dynam program problem come first contribut paper determin fix partit determin number partit assum number partit dimens thu result squar gridfil directori presum exist algorithm given fix set cut one dimens find good set cut dimens paper li et al provid one neglect specifi origin fix cut set follow nicol 4 use algorithm basi iter method given fix cut one dimens find good cut treat new cut fix find better one previous fix dimens iter maintain termin mechan trigger initi fix cut uniformli space gridfil applic idea applic cutfind algorithm attempt find cut yield zero overflow bucket termin partit session defin either overflowfre cutset discov specifi number iter use 20 cutset discov sole paramet partit session number partit p dimens partit session may view probe determin whether quickli discov overflowfre partit use cut dimens overal strategi intellig search p find smallest valu quickli determin desir partit cut assign might use approach result later report use dynam program solut li et al algorithm report within framework skew data set may advantag number partit dimens differ aggreg phase describ later minim poor effici use squar region futur intend investig nonsquar region given squar region strict lower upper bound number partit need dimens thu binari search find minim number partit p lowerbound p upperbound total overflow equal zero practic found faster start number partit equal 2 theta lowerbound total overflow greater zero keep doubl number partit partit valu found total overflow zero conduct binari search valu upper bound previou valu lower bound 42 rectilinear partit come second contribut work altern rectilinear partit algorithm like li et al optim cut one dimens given fix set cut discuss follow take c 1 fix step algorithm seek defin column bucket whose width wide possibl without bucket column assign b tupl defin first column seek largest index j ov 1 1 nondecreas j may identifi binari search use precalcul r k j candid j requir op time comput ov 1 1 j henc op log u 2 time requir defin first column second column comput exactli first take index start point ie identifi largest j 2 ov 1 j 1 process continu either p fewer adjac overflowfre column discov place last column suffer overflow former case partit session termin latter case may freez newli discov cut choos new cut dimens complex one partit session sever compon first ot log cost sort tupl dimens time optim one dimens first comput new r k 1 j valu take ot logp time follow op 2 log u 2 cost alloc cut sinc partit session iter bound number time asymptot complex origin rectilinear applic 4 shown converg unchang cut set given suffici mani iter algorithm would converg found prudent back away larger number partit small number iter fail find suitabl partit origin rectilinear partit problem shown nphard three dimens proof suffic show intract find minim p squar overflowfre partit exist tractabl rectilinear partit problem two dimens still unknown inform consid essenti differ partit algorithm li et al uninterest partit overflow expend comput energi minim nonzero overflow given c 1 possibl find c 2 yield overflowfre partit algorithm find none exist algorithm determin quickli contrast previou algorithm seek find c 2 minim overflow uninterest whether minim overflow two three whether zero nonzero distinct permit us find overflowfre partit substanti less work previou algorithm seen empir result 43 aggreg third contribut algorithm aggreg adjac bucket low util partit phase bucket may low util two adjac bucket 50 util smaller may combin singl bucket even though gridfil directori contain two pointersthey ident follow partit appli aggreg scheme base observ let b equal bucket capac first assum grid directori size 2 theta 2 view four equal quadrant label nwnesesw defin procedur canmergeab return logic true neither b alreadi merg group level j sum util less 100 defin procedur mergeab j merg b one bucket level j use canmerg merg defin recurs function function aggregatea j follow g1a g1c g1b figur 2 aggreg exampl 1 consist 1 theta 1 gridfil alreadi merg group level return 2 partit four quadrant nwnesesw 3 sum util four quadrant less 100 aggreg one bucket return 4 canmergenwnej canmergeswsej call mergenwnej mergeswsej 5 canmergenwswj canmergenesej call mergenwswj mergenesej 6 canmergenwnej call mergenwnej 7 canmergeswsej call mergeswsej 8 canmergenwswj call mergenwswj 9 canmergenesej call mergenesej 10 call aggregatenwj1 aggregatenej1 aggregateswj1 aggregatesej1 assum grid file directori initi 2 theta 2 aggreg accomplish call aggreg exampl consid grid directori left hand side figur 2 bucket capac 10 entri directori number tupl bucket merg whole one bucket merg two halv merg nw sw quadrant call aggreg strategi two remain quadrant practic restrict power two although current partit algorithm assum grid equal number partit dimens present aggreg algorithm gener case without loss gener assum shape grid directori n row column find largest 2 n let g1 subdirectori grid directori compos first 2 row let g2 subdirectori compos complement origin directori first aggreg g1 let div n number squar 2 theta 2 subdirectori fit g1 one squar subdirectori appli squar region aggreg algorithm left appli algorithm recurs two region right hand side figur 2 show exampl 13 theta 20 grid directori subdirectori g1 compos g1a g1b g1c squar power two region aggreg polici appli g1a g1b entir aggreg polici call recurs g1c g2 algorithm could improv yield slightli better bucket util fast prove suffici need far depend use gridfil differ aggreg strategi use gridfil read cfd databas buddysystem pair approach need facilit split futur insert tupl necessari case region aggreg bucket need rectangular henc could allow aggreg result improv bucket util yet develop algorithm calcul aggreg sinc algorithm suffici need date hand gridfil use transact process environ tupl might later insert buddi pair must preserv 5 experiment comparison section present experiment result two partit algorithm present run time bucket util result experi make attempt get smooth curv collect confid interv figur result one experiment run thu often nois presum use workstat job experi run sparc 10 workstat saniti check code made run algorithm profil make sure time spent section code expect run time rp algorithm domin startup cost creat precalcul r k 1 j sort record data set paper 40 run time spent creat r k 1 j 20 time sort data point note even high cost creat r k 1 j overal algorithm significantli faster r k 1 j precalcul contrast run time dp algorithm domin actual partit sinc op 2 u 2 section 51 present result singl partit given fix partit dimens follow section present result assum number partion initi partit known section 52 present result uniformli distribut synthet data set section 53 present result highli skew cfd data set section 54 present bucket util result experi demonstr util aggreg phase 51 fix partit given first compar dp dp2 rp algorithm assum fix partit exist one dimens conduct experi sinc exact scenario li et al propos algorithm note fix partit obtain specifi li et al 2 consid data set 5000 tupl x coordin tupl chosen uniform distribut 1 2000 obtain initi horizont partit equal space cut within domain tabl 1 present result number partit dimens vari 12 5 assum bucket capac 50 tupl column head second record amount cpu time use partit column head overflow total number tupl fit within bucket capac column head blocksov number block overflow overflow blocksov number ident dp dp2 algorithm sinc algorithm find exact partit differ run time first note rp algorithm one two order magnitud faster dp dp2 algorithm valu p convers dynam program algorithm minim total overflow better larg number partit thu specif problem object function formul li et al dynam program algorithm propos satisfi object function better rectilinear partit algorithm expens significantli comput premis work better partit suffici larg number partit ensur overflow note although dp algorithm smaller number tupl overflow result larger number bucket overflow number partit less 11 block overflow rp algorithm use last column partit wherea dp algorithm use overflow block spread partit space consid case number partit 10 rp algorithm use 10 overflow block 10 block 106 106 101 111 94 94 108 112 113 106 tupl alloc sinc 50 tupl fit per block new block need creat one hand dp algorithm use 40 overflow block 68 tupl requir 40 new block creat henc total overflow good indic optim partit propos better metric would number new block need hold overflow continu use total tupl overflow paper sinc algorithm dynam find number partit need make overflow zero 52 number partit given uniformli distribut data assum number partit known initi fix partit given first consid run time algorithm uniformli distribut data x coordin tupl chosen uniform distribut 1 n n depend experi report experi allow duplic data set point sinc cfd data duplic point verifi inclus duplic result similar rel perform first consid rel perform algorithm number tupl vari rp algorithm dp dp2 second overflow blocksov second second overflow blocksov 9 620e01 1672 9 159e02 113e02 950 76 7 630e01 2958 7 122e02 894e01 2550 43 tabl 1 cpu time overflow fix partit given figur 3 4 plot comput time second versu number tupl relat assum coordin valu uniformli distribut 1 2000 note yaxi logarithm top bottom plot comput time dp dp2 rp algorithm rememb dp2 algorithm dp algorithm except precomput store ov 1 j8i 8j plot figur 3 assum 50 tupl fit per page plot figur 4 assum 300 tupl per page page size 8192 byte tupl size would 164 27 byte respect tupl size 164 byte may typic size transact process system tupl data set usual around 2432 byte number tupl increas run time dp algorithm becom long practic use relat 40000 164 byte tupl 64 megabyt byte tupl 12 megabyt henc reason expect suffici memori partit data set least 40000 tupl 40000 164 byte tupl figur 3 dp algorithm requir 26600 second 74 hour 100000 tupl requir 77200 second 214 hour time clearli prohibit dp2 algorithm requir 3000 second 50 minut 6070 second 101 minut 40000 100000 tupl respect requir 15 megabyt space hold precomput ov 1 j rp algorithm requir 12 40 second 40000 100000 tupl respect thu rp algorithm practic algorithm rp algorithm 2000 250 time faster dp dp2 algorithm 40000 tupl differ solut time unexpect given complex dp dp2 rp algorithm omaxfp 2 u 2 log tg log tg respect consid number uniqu attribut valu data set impact rel perform polici figur 5 plot comput time second versu maximum attribut domain data set 40000 tupl assum 300 tupl fit per page note yaxi logarithm curv top bottom dp dp2 rp algorithm run dp2 algorithm storag space precalcul ov megabyt thu point plot maximum domain valu 5000 higher increas maximum domain valu increas number uniqu attribut valu data set dp dp2 algorithm highli sensit number uniqu valu data set convers rp algorithm rel insensit number uniqu valu maximum domain valu 2000 rp algorithm 450 110 time faster dp dp2 algorithm maximum domain valu 10000 rp algorithm 17000 time faster dp algorithm experi section assum maximum domain valu 2000 mani cfd data set number uniqu valu almost equal number tupl thu even 10000 small valu consid tupl size effect rel perform two algorithm figur 6 plot comput time second versu number tupl per page assum 40000 tupl attribut domain maximum 2000 yaxi logarithm number tupl per page decreas henc tupl size increas dp algorithm requir significantli comput convers rp algorithm rel insensit size tupl thu rp algorithm remain viabl algorithm wide rang tupl size degrad dp algorithm tupl size increas easi predict complex algorithm tupl size increas number tupl per bucket decreas henc number partit p increas would expect runtim rp algorithm increas also sinc complex rp algorithm op 2 logu max major run time rp algorithm spent sort tupl creat r k 1 j thu obscur sensit tupl size figur 7 plot ratio comput time dp dp2 algorithm rel rp algorithm tupl size increas ratio increas 53 number partit given unstructur cfd data consid run time algorithm highli skew data use actual data set unstructur grid cfd simul term grid use describ way coordin data set connect data set compos xy realvalu coordin data set comput model cross section airflow around aircraft wing 3 figur 8 plot data set set 1034 point x restrict rang plot sinc major data central region plot whole rang would make difficult distinguish point area high concentr 94 1034 point plot vertic horizont line partit line result run rp algorithm data set note one vertic line includ plot seen partit fix equal space partit would bad choic figur 9 plot partit comput time versu number tupl three differ data set smallest data set 1034 tupl dp dp2 algorithm requir 2370 650 time comput rp algorithm partit data set 3959 tupl dp dp2 algorithm requir 38817 5629 time comput rp algorithm thu dp algorithm especi impract highli skew data sinc dp algorithm requir 42 hour 3959 tupl data set run 15895 tupl data set rp algorithm requir 66 second partit 15895 tupl data set four order magnitud differ comput time surpris light result experi plot figur 5 unstructur grid data set number uniqu attribut valu almost equal number tupl henc number tupl set increas rp algorithm dp algorithm bucket util bucket util partit preaggreg postaggreg partit preaggreg postaggreg 1000 5 800e01 870e01 5 800e01 800e01 5000 12 694e01 794e01 12 694e01 781e01 10000 20000 80000 48 694e01 731e01 47 724e01 737e01 100000 53 712e01 727e01 52 740e01 743e01 tabl 2 averag bucket util number tupl vari number partit need increas number uniqu attribut valu rp algorithm experi much increas comput time data set get larger sinc major time spent precalcul r k 1 j initi sort data 54 bucket util aggreg effect present averag bucket util previou experi aggreg phase complet tabl 2 present util uniformli distribut data experi figur 3 column label partit number partit direct smallest number algorithm return total overflow zero overal averag bucket util quit good would result insert tupl one time littl differ util dp rp algorithm addit aggreg phase significantli improv bucket util bucket util alreadi good experi run time aggreg phase minim less 2 rp runtim henc worth aggreg even modest improv tabl 3 present util uniformli distribut data experi figur 6 littl differ bucket util two algorithm averag bucket util tend decreas number tupl per page decreas 5 tupl fit per page bucket util 28 aggreg better 70 thu aggreg phase consider improv util case util poor runtim dp algorithm 5 10 tupl per page excess henc present aggreg result paramet skew data aggreg phase result substanti save disk space tabl 4 present util unstructur grid cfd data set three differ grid averag bucket util without aggreg poor improv significantli aggreg thu highli skew data aggreg essenti achiev good bucket util note tupl data dp algorithm sinc comput time 3959 tupl data set requir hour rp algorithm dp algorithm tupl bucket util bucket util perpag partit preaggreg postaggreg partit preaggreg postaggreg 200 15 889e01 889e01 15 889e01 889e01 100 22 826e01 826e01 22 826e01 826e01 tabl 3 averag bucket util tupl per page vari rp algorithm dp algorithm bucket util bucket util partit preaggreg postaggreg partit preaggreg postaggreg tabl 4 averag bucket util unstructur grid cfd data 6 twophas bulk load algorithm descript section describ two phase algorithm bulk load data set significantli larger avail buffer space suppos data set contain tupl suppos maximum tupl contain memori time appli rp algorithm approach two step first partit set group size fewer set contain point within rectangl xy plane howev collect set need rectilinear second step appli rp individu set merg individu grid file creat step elabor upon given find smallest perfect squar integ r r partit data set r group follow sort data set xcoordin valu may easili divid set r group r success element sort order serv partit data set along xaxi strip tupl strip may sort along yaxi point may separ group success point effectu divid strip rectangl rectangl contain permit number point remain appli rp group write bucket data disk one possibl partit group separ defin final grid file union separ defin gridfil recogn cut defin group one side data domain must propag r1 group caus split grid directori consid differ approach group partit build global grid file initi empti upon read group identifi set cut global grid file affect group treat immut seek find minimum number addit cut need avoid overflow requir simpl modif rp algorithm anoth optim first strip attribut index data set two phase algorithm appli coordin without requir io whole tupl partit set coordin creat overal grid directori bucket could fill make second pass data set may result faster load time tupl size larg data set henc grid directori extrem larg anoth optim use two level directori scheme suggest 5 top level directori one entri r subdirectori note would mean point access could requir three disk access instead two 7 conclus futur work propos implement new rectilinear partit rp algorithm physic partit gridfil propos rp algorithm significantli faster recent propos dynam partit dp algorithm li et al 2 number overflow rp permit necessarili larger dp algorithm minim howev argu minim number addit block creat due overflow actual better measur one rp algorithm find better solut dp algorithm consid use greedi algorithm dp algorithm kernel loop seek minim size grid file need achiev overflow synthet data set uniformli distribut integ rp algorithm two three order magnitud faster dp algorithm actual cfd data set whose index attribut highli skew real rpbase algorithm three four order magnitud faster dpbase algorithm also develop effici aggreg algorithm improv bucket util grid file result bulk load use rp dp partit algorithm algorithm minim overhead yield substanti improv bucket util bucket util partit poor aggreg phase necessari achiev reason bucket util index data highli skew also propos two phase bulk load algorithm sever optim load data set significantli larger avail buffer space algorithm guarante bucket overflow propos possibl altern sampl base method yet investig perform algorithm futur plan experiment compar two phase algorithm insert one tupl time sampl base method also intend consid sophist aggreg techniqu partit differ number partit attribut r fundament comput algorithm algorithm load parallel grid file algebra turbul model unstructur adapt mesh rectilinear partit irregular data parallel comput grid file adapt symetr multikey file structur time space optim btree probalist method queri process sampl issu parallel databas system tr ctr dora cai ruth aydt robert j brunner optim data load multiterabyt sky survey repositori proceed 2005 acmiee confer supercomput p42 novemb 1218 2005 apostolo papadopoulo yanni manolopoulo parallel bulkload spatial data parallel comput v29 n10 p14191444 octob rundenstein merg rtree effici strategi local bulk insert geoinformatica v6 n1 p734 march 2002 gisli r hjaltason hanan samet speed construct pmr quadtreebas spatial index vldb journal intern journal larg data base v11 n2 p109137 octob 2002