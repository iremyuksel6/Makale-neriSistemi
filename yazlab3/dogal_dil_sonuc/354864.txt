design evalu switch cach architectur ccnuma multiprocessor abstractcach coher nonuniform memori access ccnuma multiprocessor provid scalabl design share memori continu suffer larg remot memori access latenc due compar slow memori technolog larg data transfer latenc interconnect network paper propos novel hardwar cach techniqu call switch cach improv remot memori access perform ccnuma multiprocessor main idea implement small fast cach crossbar switch interconnect medium captur store share data flow memori modul request processor store data act cach subsequ request thu reduc need remot memori access tremend implement cach crossbar switch need effici robust yet flexibl chang cach protocol design implement detail cach embed switch architectur caesar use wormhol rout virtual channel present explor design space switch cach model caesar detail execut driven simul analyz perform benefit result show caesar switch cach capabl improv perform ccnuma multiprocessor 45 percent reduct remot memori access applic serv remot read request variou stage interconnect observ improv execut time high 20 percent applic conclud switch cach provid costeffect solut design high perform ccnuma multiprocessor b introduct allevi problem high memori access latenc share memori multiprocessor employ processor small fast onchip cach addit larger offchip cach symmetr multiprocessor smp system usual built use share global bu howev content bu memori heavili constrain number processor connect bu build high perform system scalabl sever current system 1 10 12 13 employ cach coher nonuniform memori access ccnuma architectur system share memori distribut among node system provid closer local memori sever remot memori local memori access latenc toler remot memori access gener execut bring perform applic drastic reduc impact remot memori access latenc research propos improv cach strategi 14 18 27 within cluster multiprocessor cach techniqu primarili base data share among multipl processor within cluster nayfeh et al 18 explor use share l2 cach benefit share work set processor within cluster anoth altern use network cach remot data cach 14 27 network cach reduc remot access penalti serv capac miss l2 cach provid addit layer share cach processor within cluster hp exemplar 1 implement network cach configur partit local memori sequent numaq 13 dedic 32mb dram memori network cach dash multiprocessor 12 provis network cach call remot access cach recent propos moga et al14 explor use small sram instead dram network cach integr page cach use 32kb sram chip reduc access latenc network cach tremend goal reduc remot memori access latenc implement global share cach abstract central processor ccnuma system observ network cach provid abstract limit processor within cluster explor implement issu perform benefit multilevel cach scheme incorpor current ccnuma system embed small fast sram cach within switch interconnect network call switch cach captur share data flow interconnect provid futur access processor reus data scheme consid multilevel cach scheme without inclus properti studi applic behavior indic enough spatial tempor local request processor benefit small switch cach recent studi mohapatra et al 15 use synthet workload show increas buffer size crossbar switch beyond certain valu much impact network perform applicationbas studi 4 confirm observ hold true ccnuma environ run sever scientif applic thu think larg amount buffer current switch spider 7 overkil better util buffer accomplish organ switch cach sever issu consid design cach techniqu includ cach design issu technolog organ cach coher issu switch design issu arbitr messag flow control issu appropri rout strategi messag layout etc first issu design analyz cach organ larg enough hold reusabl data yet fast enough oper time request pass switch second issu involv modifi directorybas cach protocol handl addit cach layer switch element cach block system properli invalid write third issu design buffer arbitr switch guarante certain cach action within switch delay period exampl read request travel switch cach must incur addit delay even case switch cach hit request must pass home node updat directori gener memori read oper final issu deal messag header design enabl request encod network rout etc contribut paper detail design perform evalu switch cach interconnect employ caesar cach embed switch architectur caesar switch cach made small sram cach oper speed wormhol rout crossbar switch virtual channel switch design optim maintain crossbar bandwidth throughput time provid suffici switch cach throughput improv remot access perform perform evalu switch cach interconnect conduct use six scientif applic present sever sensit studi cover entir design space identifi import paramet experi show switch cach offer great potenti use futur ccnuma interconnect applic rest paper organ follow section 2 provid background remot access characterist sever applic ccnuma environ build motiv behind propos global cach approach switch cach framework cach protocol present section 3 section 4 cover design implement crossbar switch cach architectur call caesar perform benefit switch cach framework evalu analyz great detail section 5 sensit studi variou design paramet also present section 5 final section 6 summar conclud paper memori interconnect network memori network interfacerout network interfacerout remot memori node xs figur 1 ccnuma system memori hierarchi applic characterist motiv sever current distribut share memori multiprocessor adopt ccnuma architectur sinc provid transpar access data figur 1 show dispar proxim access time ccnuma memori hierarchi system load store issu processor x serv cycl upon l1 l2 cach hit less hundr cycl local memori access incur hundr cycl due remot memori access latenc store memori write transact hidden use weak consist model stall time due load read transact memori sever degrad applic perform 21 global cach benefit trace analysi reduc impact remot read transact would like exploit local share pattern processor figur 2 plot read share pattern six applic processor use cach line size 32 byte six applic use evalu floydwarshal algorithm fwa gaussian elimin gauss gramschmidt gs matrix multipl mm success relax sor fast fourier transform fft xaxi repres number share processor x yaxi denot number access block share x number processor figur observ four six applic fwa gauss gs mm multipl processor read block two consecut write block share read form major portion 35 80 applic read miss take advantag readshar pattern across processor fwa b sor c gauss gs e fft f mm figur 2 applic read share characterist introduc concept ideal global cach central access processor first request serv memori data sent back repli messag store global cach sinc cach access processor subsequ request data item satisfi global cach low latenc two question aris ffl time lag two access differ processor block defin tempor read share local processor somewhat equival tempor local uniprocessor system question rais particularli relat size organ global cach gener would translat longer time lag bigger size requir global cach ffl given block held central locat mani request satisfi cach block call term attain read share estim perform improv employ global cach metric give indic requir size global cach answer question instrument simul gener execut trace inform regard cach miss fed trace trace analysi tool share identifi local analyz order evalu potenti global qwhuduulydo7lphsffohv fwa b gs c gauss sor e fft f mm figur 3 tempor local share access cach sila gener two differ set data tempor read share local figur 3 attain share figur 4 data set interpret follow tempor read share local figur 3 depict tempor read share local function differ block size point fxyg data set indic probabl two read transact differ processor block occur within time distanc x lower ie averag interarriv time two consecut read request block seen figur applic inher tempor reus cach block processor interarriv time two consecut share read transact differ processor block found less 500 processor cycl pcycl 6080 share read transact applic ideal indic potenti atleast one extra request satisfi per global cach block attain read share figur 4 explor probabl multipl request satisfi global cach techniqu term attain share degre point fxyg data set indic block held x cycl global cach averag number subsequ request per block serv figur depict attain read share degre applic base resid time block global cach resid time cach block defin amount time block held cach replac invalid invalid avoid note resid time directli relat sever cach design issu cach size block size associ qwhuduulydo7lphsffohv fwa b gs c gauss sor e fft f mm figur 4 attain share degre figur 2 observ fwa gs gauss high read share degre close number processor system case 16 processor howev found attain share degre vari accord tempor local applic gauss attain share degre 10 global cach resid time 2000 processor cycl gs requir resid time 5000 fwa requir time 7000 mm applic share degre approxim four five wherea attain share degre much lower sor fft much interest sinc low percentag 12 share block access see figur 2 22 interconnect global cach section 21 identifi need global cach improv remot access perform ccnuma system section explor possibl use interconnect medium central cach locat ffl make interconnect medium suitabl candid central cach interconnect topolog benefici incorpor central cach scheme commun share memori system occur transact consist request repli request repli travers one node anoth network node node c interconnect overlap path cach potenti figur 5 cach potenti interconnect medium interconnect network becom global yet distribut medium entir system keep track transact occur node global share framework effici employ network element coher cach data potenti network cach strategi illustr figur 5 path two read transact memori modul emerg differ processor overlap point network common element network act small cach repli memori later request recent access block x potenti find block cach common rout element illustr shade circl benefit scheme twofold processor point view read request get servic latenc much lower remot memori access latenc secondli memori reliev servic request hit global interconnect cach thu improv access time request sent memori modul exampl observ incorpor scheme interconnect requir signific amount path overlap processor memori request repli follow path request order provid intersect rout flow request repli depend entir upon topolog interconnect ideal topolog system global bu howev global bu scalabl medium bu content sever affect perform number processor increas beyond certain threshold con sequent multipl bu hierarchi fattre structur consid effect solut scalabl problem tree structur provid next best altern hierarch cach scheme 3 switch cach framework section present new hardwar realiz ideal global cach solut improv remot access perform share memori multiprocessor 31 switch cach interconnect network topolog play import role determin path sourc destin system treebas network like fat tree 11 heirarch bu network 23 3 multistag interconnect network min 17 provid hierarch topolog suitabl global cach addit min highli scalabl provid bisect bandwidth scale linearli number node system featur min make attract scalabl high perform interconnect commerci system exist system butterfli 2 cm5 11 ibm sp2 21 employ bidirect min illinoi cedar multiprocessor 22 employ two separ unidirect min one request one repli paper switch cach interconnect bidirect min take advantag inher tree structur note howev logic tree also embed popular direct network like mesh hypercub 10 12 baselin topolog 16node bidirect min bmin shown figur 6a gener nnode system use bmin compris nk switch element 2k theta 2k crossbar log k n stage connect bidirect link chose wormhol rout virtual channel switch techniqu preval current system sgi origin10 share memori system commun node accomplish via readwrit transact coher requestsacknowledg readwrit request coher repli processor memori use forward link travers switch similarli readwrit repli data coher request memori processor travers backward path shown bold figur 6a separ path enabl separ resourc reduc possibl deadlock network time rout switch provid ident path request repli processormemori pair essenti develop switch cach hierarchi bmin tree structur enabl hierarchi shown figur 6b basic idea cach strategi util tree structur bmin path overlap request repli coher messag provid coher share data intercon nect incorpor small fast cach switch element bmin serv share processor switch element use term switch cach differenti cach processor cach exampl bmin employ switch cach serv invalid respons ack writeback request bidirect min structur rout processorcach interfac memori interfac b multipl tree structur bmin processorcach interfac memori interfac c switch cach bmin servic memori switch cach servic switch cach differ level figur switch cach interconnect multipl processor shown figur 6c initi share read request processor p block serv remot memori j repli data flow interconnect network block captur save switch cach switch element along path subsequ request block share processor p j p k take advantag data block switch cach differ stage thu incur reduc read latenc 32 cach protocol incorpor processor cach multiprocessor introduc wellknown cach coher problem mani hardwar cachecoher system employ fullmap directori scheme 6 scheme node maintain bit vector keep track sharer block local share memori space everi write ownership request sent home node invalid sent sharer block ownership grant correspond acknowledg receiv process node cach employ threestat msi protocol keep track state cach line incorpor switch cach come requir cach remain coher data access remain consist system consist model reach 2 state write initi anoth processor expect state share dirti uncach readrepli readrepli invtyp invalid share readrepli readrepli switch cach state diagram add sharer directori vector send invalid requestor increment ackcount wait addit ack protocol b chang directori protocol switch hit read figur 7 switch cach protocol execut adopt sequenti consist model paper basic cach scheme repres state diagram figur 7 explain follow switch cach store block share state system block read processor cach dirti state cach switch effect switch cach need employ 2state protocol state block either share valid transit block one state anoth shown figur 7a illustr differ block invalid inv type block replac readrepli figur show valid state conceptu separ two state invalid present respect read request read request messag enter interconnect check switch cach along path event switch cach hit switch cach respons provid data send repli requestor origin messag mark switch hit continu destin memori ignor subsequ switch cach along path sole purpos inform home node anoth sharer read block messag call mark read request request necessari maintain fullmap directori protocol note memori access need mark request repli gener destin memori mark read request find block two state share transient see figur 7b directori state share request updat share vector directori howev possibl write initi cach line differ processor invalid write yet propag switch cach present due fals share applic allow data race condit exist occur mark read request observ transient state physic address swc hit dest bit flit req age 4bit 2bits1 addr contd src 4bit 6bit 6bit 8bit figur 8 messag header format directori event directori send invalid processor request read wait addit acknowledg commit write read repli read repli origin two differ sourc name memori node owner cach dirti state read repli enter interconnect follow backward path read repli origin memori node check switch cach along path line present switch cach data carri read repli written cach state cach line mark share messag origin owner cach repli whose home node request node ident allow check switch cach along way repli find line absent cach enter data cach home node request repli ignor switch cach repli allow enter switch cach subsequ modif block owner visibl interconnect network thu path owner request coher overlap write request invalid request respons coher explain next summari read repli nonident home node request node enter data switch cach alreadi present write writeback coher messag request flow switch check switch cach invalid cach line present cach switch cach coher maintain somewhat transpar messag format messag format network interfac request repli coher messag prepar sent network wormholerout network messag made flow control digit flit flit 8 byte cavallino 5 messag header contain rout inform data flit follow path creat header format messag header shown figur 8 implement cach techniqu requir header consist 3 addit bit inform two bit reqtyp encod denot switch cach access type follow cach line switch cach present mark read header gener repli messag 4w 4w 4w forward link input backward link input forward link output link output backward input block input block input block input block arbit crossbar 4w rout tabl 4w 4w 4w 4w figur 9 convent crossbar switch line switch cach invalid cach line present cach switch cach process requir note descript cach protocol read request encod sc read request read repli whose home node requestor id differ encod sc write coher messag write ownership request writeback request encod sc inv request request encod sc ignor request addit bit requir mark sc read request earlier switch cach hit request call mark read request use avoid multipl cach servic request discuss mark request updat directori avoid memori access 4 switch cach design implement crossbar switch provid excel build block scalabl high perform interconnect crossbar switch mainli differ two design issu switch techniqu buffer manag use wormhol rout switch techniqu input buffer virtual channel sinc preval current commerci crossbar switch 5 7 begin present organ design altern 4 theta 4 crossbar switch cach later subsect extens requir incorpor switch cach modul larger 8 theta 8 crossbar switch present 4w 4w 4w forward link input backward link input forward link output link output backward input block input block input block input block rout tabl crossbar 4w arbit input block switch cach modul 4w 4w 4w 4w 4w 4w 4w forward link input backward link input forward link output link output backward input block input block input block input block crossbar 4w rout tabl 4w 4w 4w 4w switch cach modul arbit input block arbitrationindepend b arbitrationdepend figur 10 crossbar switch cach organ 41 switch cach organ base bidirect crossbar switch four input four output shown figur 9 input link crossbar switch two virtual channel thu provid 8 possibl input candid arbitr arbitr process age techniqu similar employ sgi spider switch 7 arbitr cycl maximum 4 highest age flit select 8 possibl arbitr candid flit size chosen 8 byte 4w link similar intel cavallino 5 thu take four link cycl transmit flit output one switch input next buffer crossbar switch provid input block link input block organ fix size fifo buffer virtual channel store flit belong singl messag time virtual channel also partit base destin node avoid outoford arriv messag origin sourc destin also provid bypass path incom flit directli transmit output input buffer empti organ switch cach particularli interest maxim perform serv flit within cycl requir oper base crossbar switch thu organ depend highli delay experienc link transmiss crossbar switch process present two differ altern organ switch cach modul within convent crossbar switch arbitrationindepend organ base crossbar switch oper similar sgi spider 7 arbitrationdepend organ base crossbar switch oper similar intel cavallino 5 arbitrationindepend organ switch cach organ base link switch process delay similar experienc sgi spider intern switch core run 100 mhz link transmiss oper 400mhz switch take four 100mhz clock move flit input link transmitt output link hand transmit 8byte flit singl 100 mhz clock four 400 mhz clock figur 10a show arbitrationindepend organ switch cach organ arbitr independ switch cach perform critic oper parallel arbitr oper begin arbitr cycl maximum four input flit store input link regist transmit switch cach modul order maintain flow control requir switch cach process perform parallel arbitr transmiss delay switch 4 cycl arbitrationdepend organ switch cach organ base link switch process delay similar experienc intel cavallino 5 intern switch core link transmiss oper 200mhz take 4 cycl crossbar switch pass flit input output transmitt 4 cycl link transmit one flit one switch anoth figur 10b show arbitrationdepend organ switch cach organ arbitr depend perform critic oper end arbitr cycl parallel output link transmiss end everi arbitr cycl maximum four flit pass crossbar input buffer output link transmitt also transmit switch cach sinc output transmiss take four 200mhz cycl switch cach need process maximum four flit within 4 cycl organ advantagesdisadvantag arbitrationindepend organ cach oper switch core frequenc remain independ link speed hand organ lack arbitr inform could use complet oper orderli manner issu affect 4 theta 4 switch drawback evid studi design larger crossbar switch arbitrationdepend organ benefit complet arbitr phase use result inform time complet switch cach process howev organ cach requir run link transmiss frequenc order complet critic switch cach oper intel cavallino possibl run switch core switch cach link transmiss speed final note case repli messag switch cach modul store anoth input block shown figur 10 two virtual channel per input block crossbar switch size expand 4 also case maximum number switch cach input 4 request process time limit 4 switch cach cycl cach size byte cach access time direct cach size byte cach access time direct 32byte cach line b 64byte cach line figur 11 cach access time fo4 42 cach design area access time issu access time area occupi sram cach depend sever factor asso ciativ cach size number wordlin number bitlines25 16 section studi impact cach size associ access time area constraint aim find appropri design paramet crossbar switch cach cach access time cacti model 25 quantifi relationship cach size associ cach access time ran cacti model measur switch cach access time differ cach size set associ valu order use measur technolog independ manner present result use delay measur techniqu known fanoutoffour one fo4 delay signal pass invert drive load capacit four time larger input known 8 kbyte data cach cycl time 25 fo4 9 figur 11 show result obtain fo4 unit figur 11 xaxi denot size cach curv repres access time particular set associ find direct map cach lowest access time sinc direct index method use locat line howev direct map cach may exhibit poor hit ratio due map conflict switch cach setassoci cach provid improv cach hit ratio longer cycl time due higher data array decod delay current processor employ multiport set associ l1 cach oper within singl processor cycl chosen 2way set associ design base crossbar switch cach maintain balanc access time hit ratio howev also studi effect vari set associ switch cach perform cach output width also import issu primarili affect data readwrit delay studi wilton et al 25 increas data array width increas number sens amplifi requir organ cach also make signific differ term 32byte cach line b 64byte cach line figur 12 cach rel area chip area narrow cach provid data multipl cycl thu increas cach access time averag read request exampl cach 32byte block width 64 bit decreas cach throughput one read four cycl within rang 64 256 bit data output width know 64 bit provid worst possibl perform scenario design switch cach use 64bit output width show overal perform affect paramet cach rel area order determin impact cach size set associ area occupi onchip cach use area model propos mulder et al16 area model incorpor overhead area driver sens amplifi tag control logic compar data buffer differ organ technolog independ manner use regist bit equival rbe one rbe equal area bit storag cell use area model obtain measur differ cach size associ figur 12 show result obtain rel area xaxi denot size cach curv repres differ set associ valu small cach size rang 512 byte 4kb find amount area occupi direct map cach much lower 8way set associ cach figur find increas associ 1 2 lower impact cach area increas 2 4 observ think 2way set associ cach design would suitabl organ term cach area cach access time measur earlier 43 cach embed switch architectur caesar section present hardwar design crossbar switch cach call caesar cach embed switch architectur block diagram caesar implement shown figur 13 4 theta 4 switch maximum 4 flit latch switch cach regist 4w 4w f 4w f 4w 4w r u switch cach modul cach access control switch cach modul arbit crossbar select sourc linkbuff inform process incom flit flit transmit crossbar header vector input block block info updat read header cach data unit cach tag unit snoop regist ri buffer wr buffer figur 13 implement caesar arbitr cycl oper caesar switch cach divid 1 process incom flit 2 switch cach access 3 switch cach repli gener 4 switch cach feedback section cover design implement issu oper detail process incom flit incom flit store regist belong differ request type request type flit identifi base 2 bit r 1 r 0 store header header flit request contain relev inform includ memori address requir process read invalid subsequ flit belong messag carri addit inform essenti switch cach process write request switch cach requir header flit address inform data flit written cach line final ignor request need discard sinc requir switch cach process addit type request requir process mark read request read request swc hit bit set header inform switch cach serv previou switch cach classifi type flit enter cach switch cach process broken two basic oper first oper perform flit process unit propag appropri flit switch cach mention earlier flit need enter cach read header invalid header write flit thu process unit mask ignor flit mark read flit data flit invalid read request done read r 1 r 0 bit header vector swc hit bit util header inform subsequ data flit messag switch cach maintain regist store bit flit requir cach process pass request queue one everi cycl request queue organ two buffer ri buffer set wr buffer shown figur 13 ri buffer hold header flit read invalid request wr buffer store write flit organ num vc theta k2 differ buffer multipl buffer requir associ data flit correspond header data flit write request accumul buffer request readi initi cach line fill oper second oper complet process incom flit follow unmark read header flit need snoop cach gather hitmiss inform inform need within 4 cycl switch delay link transmiss abl mark header set last bit swc hit perform snoop oper cach tag read header also copi snoop regist shown figur 13 requir two snoop regist maximum two read request enter cach singl arbitr cycl switch cach access figur 14 illustr design cach subsystem cach modul shown figur 2way set associ sram cach cach oper frequenc intern switch core set associ cach organ use two subarray tag data cach output width 64 bit thu requir 4 cycl data transfer read line tag array dual port allow two independ request access tag time describ switch cach access oper associ access delay request switch cach broken two type request snoop request regular request snoop request read request requir snoop cach determin hit miss outgo flit transmit next switch arbitr independ switch cach organ figur 10a take minimum four cycl move flit switch input output thu need snoop oper within last cycl mark messag link transmiss similarli arbitr depend organ figur 10b take 4 cycl transmit 64bit header 16bit output link header load 64bit 4w output regist messag format figur 8 phit contain swc hit bit mark transmit fourth cycl thu requir cach access complet within maximum 3 cycl figur 13 copi first read snoop regist perform flit process unit complet one cycl dedic one port tag array primarili snoop request snoop cach take addit cycl complet sinc maximum 2 read header arriv switch cach singl arbitr cycl complet snoop oper cach within 3 cycl note figur 14 snoop oper done parallel pend request ri buffer qsize gen repli data buffer header bit directori 0 queue statu send replyrepli unit request address address write data data inout data inout hitmiss block info input block figur 14 design caesar cach modul wr buffer snoop oper complet hitmiss inform propag output transmitt updat read header output regist snoop oper result switch cach miss request also dequeu ri buffer regular request regular request request chosen either ri buffer wr buffer request process maximum 4 cycl absenc content request ri buffer handl fcf basi avoid depend violat read invalid request buffer howev candid cach oper ri buffer well one wr buffer absenc address depend request buffer progress order switch cach depend exist two request need make sure cach state correct preserv identifi two type depend request ri buffer request wr buffer ffl invalid ri buffer cach line x write wr buffer cach line x preserv consist simplest method discard write cach line thu avoid incorrect cach state thu invalid enter switch cach write address pend write request wr buffer compar invalid parallel cach line invalid ffl read ri buffer cach line x write wr buffer cach line map cach entri write occur first cach line x replac event read request serv sinc occurr rare remedi send read request back home node destin satisfi typic remot memori read request switch cach repli gener invalid write cach gener repli switch cach read request need servic read cach line cach send repli messag request processor read header contain inform requir send repli request read header cach line data directli fed repli unit shown figur 14 repli unit gather header begin cach access modifi sourcedestin requestrepli inform header parallel cach access entir cach line read repli packet gener sent switch cach output block repli messag switch cach act messag enter switch form flit get arbitr appropri output link progress use backward path request processor switch cach feedback anoth design issu caesar switch select queue size section identifi method preserv crossbar switch throughput block request violat correct shown figur 13 14 finit size queue exist input switch cach ri buffer wr buffer repli unit virtual channel queue switch cach output block limit size buffer get full two option process readwrit request first option block request space avail buffer second option probabl wiser one allow request continu path memori perform switch cach depend chosen scheme buffer size extrem limit final invalid messag process switch cach sinc requir maintain coher messag need block ri buffer get full modif requir arbit make possibl quit simpl implement block flit input switch cach need inform arbit statu queue end cycl switch cach inform crossbar statu queue form free space avail queue modif arbit perform requir block minor depend free space queue appropri request base r 1 r 0 block other travers switch normal fashion 44 design 8 theta 8 crossbar switch cach previou section present design implement 4 theta 4 cach embed crossbar switch current commerci switch sgi spider intel cavallino six hitmiss way bankbank select addrdata pair 1 way way way bankbankbankqs gen repli repli unit queue statu repli addrdata pair address 1 address figur 15 design caesar bidirect input ibm sp2 switch 8 input 8 output section present extens earlier design incorpor switch cach modul 8 theta 8 switch maintain base paramet switch core frequenc core delay link speed link width flit size main issu expand switch number input switch cach modul doubl 4 8 thu arbitr cycl maximum four read request come switch requir snoop oper switch cach within 4 cycl switch core delay link transmiss depend switch cach organ shown figur 10 shown figur 13 take one cycl move flit snoop regist thu requir complet snoop oper 4 request within 2 cycl mark header flit last cycl depend snoop result order perform four snoop two cycl propos use multiport caesar cach modul multiport implement either duplic cach interleav two independ bank sinc duplic cach consum tremend amount onchip area propos use 2way interleav caesar caesar shown figur 15 interleav split cach organ two independ bank current processor mip r10000 26 use even odd address bank cach howev problem remain four even address four odd address request still requir four cycl snoop due bank conflict propos interleav bank base destin memori use outgo link id 8 theta 8 switch four outgo link transmit flit switch toward destin memori viceversa cach bank serv request flow two link thu partit request base destin memori arbitrationindepend organ figur 10a possibl four incom read request direct memori modul result bank conflict howev arbitr depend organ figur 10b conflict get resolv arbitr phase guarante arbitr flit flow differ link 8 theta 8 switch would advantag use arbitr depend organ thu assur maximum 2 request per bank arbitr cycl result snoop oper four request complet requir two cycl final note bit rout tag need identifi bank cach interleav organ chang aspect ratio cach 25 may affect cycl time cach wilson et al24 show increas cycl time measur use fanoutoffour bank interleav cach singl port cach minim 2way interleav implement also doubl cach throughput sinc two request simultan access switch cach repli unit need provid twice buffer space store data cach similarli header flit two read request also need store shown figur 15 buffer connect output differ bank gather cach line data perform evalu section present detail perform evalu switch cach multiprocessor base executiondriven simul 51 simul methodolog evalu perform impact switch cach applic perform ccnuma multiprocessor use modifi version rice simul ilp multiprocessor rsim 19 rsim execut driven simul share memori multiprocessor accur model current processor exploit instructionlevel parallel section present variou system configur correspond modif rsim conduct simul run base system configur consist 16 node node consist 200mhz processor multiprocessor system processor processor memori speed 200mhz access time 40 issu 4way interleav 4 cach network l1 cach 16kb switch size 8x8 line size 32byte core delay 4 set size 2 core freq 200mhz access time 1 link width 16 bit l2 cach 128kb xfer freq 200mhz line 32byte flit length 8byte set size 4 virtual ch 2 access time 8 buf length 4 flit switchnetwork cach switch cach 128bytes8kb network cach 4kb applic workload fwa 128x128 ge 128x128 gs 96x128 mm 128x128 tabl 1 simul paramet capabl issu 4 instruct per cycl 16kb l1 cach 128kb l2 cach portion local memori directori storag local bu interconnect compon l1 cach 2way set associ access time singl cycl l2 cach 4way set associ access time 8 cycl raw memori access time 40 cycl take 50 cycl submit request memori subsystem read data memori bu system employ fullmap threestat directori protocol 6 msi cach protocol maintain cach coher system use releas consist model modifi rsim employ wormhol rout bidirect min use 8 theta 8 switch organ 2 stage shown earlier figur 6 virtual channel also ad switch element simul behavior commerci switch like cavallino spider input link switch provid 2 virtual channel buffer capabl store maximum 4 flit singl messag crossbar switch oper similar descript section 41 detail list simul paramet also shown tabl 1 figur percentag reduct memori read evalu switch cach modifi simul incorpor switch cach switch element switch cach system improv base system follow respect switch element bidirect min employ variabl size cach model function caesar switch cach present section 4 sever paramet cach size set associ vari evalu design space switch cach select numer applic investig potenti perform benefit switch cach interconnect applic floydwarshal allpairshortestpath algorithm gaussian elimin ge qr factor use gramschmidt algorithm gs multipl 2d matric mm success overrelax grid sor sixstep 1d fast fourier transform fft splash 20 input data size shown tabl 1 share characterist discuss section 21 52 base simul result subsect present analyz result obtain extens simul run compar three system base system base network cach nc switch cach sc base system employ cach techniqu beyond l1 l2 cach simul system nc enabl 4kb switch cach switch element stage 0 min note stage 0 stage close processor stage 1 stage close remot memori shown figur 6 sc system employ switch cach switch element min main purpos switch cach interconnect serv read request travers memori enhanc perform reduc number read miss serv remot memori figur 16 present reduct number read miss memori appl hit distribut share gs 6902 3098 194 237 ge 5955 4045 158 266 tabl 2 distribut switch cach access employ network cach nc switch cach sc base system base order perform fair comparison compar sc system 2kb switch cach stage overal 4kb cach space nc system 4kb network cach figur 16 show network cach reduc remot read miss 620 applic except fft multipl layer switch cach capabl reduc number memori read request upto 45 fwa gs ge applic tabl 2 show distribut switch cach hit across two stage st0 st1 network tabl note high percentag request get satisfi switch cach present lowest stage interconnect note howev three six applic roughli 3040 request switch cach hit stage close memori st1 also interest note number request satisfi store block switch cach tabl 2 present data share defin number differ processor request serv block encach switch cach find share degre rang 10 27 across applic applic high overal read share degre fwa gs ge find degre share approxim 17 stage closer processor 4 16 processor connect switch mani read request find block first stage get satisfi subsequ stage thu find higher approxim 25 read share degre stage closer remot memori applic mm applic overal share degre approxim 4 see figur 2 data typic share four processor physic connect switch first stage network thu request 882 get satisfi first stage attain read share degre 18 final sor fft applic read share request satisfi first stage network figur 17 impact averag read latenc figur applic execut time improv figur 17 show improv averag memori access latenc read applic use switch cach interconnect applic figur consist three bar correspond base nc sc system averag read latenc compris processor cach delay bu delay network data transfer delay memori servic time queue delay network memori modul shown figur employ network cach improv averag read latenc atmost 15 applic switch cach multipl stage interconnect find averag read latenc improv high 35 fwa gs ge applic read latenc reduc 7 matmul applic sor fft unaffect network cach switch cach due neglig read share ultim paramet perform execut time figur 18 show execut time improv bar figur divid comput synchron time read stall time write stall time releas consist system find write stall time neglig howev read stall time base system compris high 50 overal figur 19 impact cach size number memori read figur 20 impact cach size execut time execut time use network cach find read stall time reduc maximum 20 fwa gs ge applic thu translat improv execut time 10 use switch cach multipl stage interconnect observ execut time improv high 20 three applic execut time mm applic compar network cach sor fft unaffect switch cach 53 sensit studi sensit cach size order determin effect cach size perform vari switch cach size mere 128 byte larg 8kb figur 19 20 show impact switch cach size number memori read overal execut time cach size increas find switch cach size 512 byte provid maximum perform improv 45 read 5hso qy figur 21 effect cach size evict rate figur 22 effect cach size switch cach hit across stage 20 execut time three six applic mm sor applic requir larger cach addit improv mm applic attain perform improv 7 execut time switch cach size 2kb increas cach size neglig impact perform sor found reduct number memori read contrari neglig amount share applic shown figur 2 upon investig found switch cach hit come replac l2 cach word block switch cach access highli processor whose initi request enter block switch cach switch cach act victim cach applic use switch cach affect perform fft applic figur 21 investig impact cach size evict rate type switch cach fwa applic xaxi figur repres size cach byte block switch cach evict either due replac due invalid bar figur divid two portion repres amount replac versu invalid switch cach figur normal number evict system 128 byte figur 23 effect line size number memori read switch cach first observ figur reduct number evict cach size increas note number evict remain constant beyond cach size 1kb small cach also observ roughli 1020 block switch cach invalid other replac word block invalid process switch cach sinc alreadi evict replac due small capac cach size increas find fraction invalid increas sinc fewer replac occur larger cach 8kb switch cach find roughli 50 block invalid cach next look impact cach size amount share across stage figur 22 show amount hit obtain stage network fwa applic bar divid two segment repres stage switch cach denot stage number note stage0 stage closest processor interfac figur interest note small cach equal amount hit obtain stage network hand cach size increas find higher fraction hit due switch cach closer processor interfac 6070 st0 benefici fewer hop requir network access data therebi reduc read latenc consider sensit cach line size earlier section analyz data line section vari cach line size studi impact switch cach perform figur 23 24 show impact larger cach line 64 byte switch cach perform three applic ge vari cach size 256 byte 16kb compar perform base system line 64 byte cach line note result normal base system 64 byte cach line found number memori read figur 24 effect line size execut time figur 25 effect associ switch cach hit reduc 37 45 increas cach line size base system howev use switch cach still signific impact applic perform 1kb switch cach reduc number read request serv remot memori high 45 execut time high 20 summari switch cach perform depend highli cach line size highli read share applic good spatial local sensit set associ section studi impact cach set associ applic perform figur 25 show percentag switch cach hit cach size associ vari find set associ impact switch cach perform believ frequent access block need resid switch cach short amount time observ earlier trace analysi higher degre associ tri prolong resid time reduc cach conflict sinc requir higher resid time switch cach perform neither improv hinder figur 26 effect applic size execut time sensit applic size anoth concern perform switch cach rel small data set use faster simul order verifi switch cach perform chang drastic larger data set use fwa applic increas number vertic 128 192 256 note data set size increas squar number vertic base system execut time increas factor 23 46 respect 512 byte switch cach execut time reduc 17 128 vertic 13 192 vertic 10 256 vertic summari believ switch cach requir small cach capac provid suffici perform improv larg applic frequent access read share data 6 conclus paper present novel hardwar cach techniqu call switch cach improv remot memori access perform ccnuma multiprocessor detail trace analysi sever applic show access share block great deal tempor local thu remot memori access perform greatli improv cach share data global cach make global cach access processor system interconnect seem best locat sinc abil monitor internod transact system effici yet distribut fashion incorpor small cach within switch element min share data captur flow memori processor design switch cach framework sever issu dealt main hindranc global cach techniqu maintain cach coher organ cach techniqu hierarch fashion util inher tree structur bmin cach kept coher transpar fashion regular processor invalid sent home node control infor mation maintain fullmap directori inform read request hit switch cach mark allow continu path memori sole purpos updat directori cach techniqu also kept noninclus thu devoid size problem multilevel inclus properti import issu design switch cach incorpor cach within typic crossbar switch spider cavallino manner request delay switch element detail design cach embed switch architectur caesar present analyz size organ cach depend heavili switch transmiss latenc present dualport 2way set associ sram cach organ 4 theta 4 crossbar switch cach also propos linkbas interleav cach organ scale size caesar modul 8 theta 8 crossbar switch simul result indic small cach size 1 kb byte suffici provid 45 reduct memori servic thu 20 improv execut time applic relat fact applic lot tempor local share access current switch spider maintain larg buffer underutil share memori multiprocessor seem organ buffer switch cach improv perform realiz paper studi use switch cach store recent access data share state reus subsequ request processor system addit request applic also signific amount access block dirti state improv perform request directori embed within switch element provid share data switch cach ownership inform switch directori perform ccnuma multiprocessor significantli improv latenc hide techniqu data prefetch forward also util switch cach reduc risk processor cach pollut use switch cach along latenc hide techniqu improv applic perform ccnuma multiprocessor tremend r overview hpconvex exemplar hardwar butterfli parallel processor overview version 1 perform multistag bu network distribut share memori multiprocessor impact switch design applic perform share memori multiprocessor cavallino teraflop router nic new solut coher problem multicach sy tem scalabl pipelin interconnect distribut endpoint rout sgi spider chip tutori recent trend processor design reclimb complex curv high frequenc clock distribut sgi origin ccnuma highli scalabl server network architectur connect machin cm5 stanford dash multiprocessor sting ccnuma comput system commerci mar ketplac effect sram network cach cluster dsm perform model finitebuff multistag interconnect network area model onchip memori applica tion design analysi cach coher multistag interconnect network impact sharedcach cluster smallscal sharedmemori mul tiprocessor rsim refer manual version 10 splash stanford parallel applic share memori sp2 high perform switch perform cedar multistag switch network hierarch cachebu architectur share memori multiprocessor design high bandwidth onchip cach enhanc access cycl time model onchip cach mip r10000 superscalar microprocessor reduc remot conflict miss numa remot cach versu coma tr ctr takashi midorikawa daisuk shiraishi masayoshi shigeno yasuki tanab toshihiro hanawa hideharu amano perform snail2 sssmin connect multiprocessor cach coher mechan parallel comput v31 n34 p352370 marchapril 2005