object class algollik languag mani objectori languag use practic descend algol motiv studi theoret issu underli languag via theori algollik languag shown basic framework theori extend cleanli elegantli concept object class moreov clear correspond emerg class abstract data type whose theori correspond existenti type equat hoarelik reason method relat parametr provid power formal tool reason algollik objectori program 2002 elsevi scienc usa b introduct objectori program first develop context algollik languag form simula 67 17 major objectori languag use practic claim either direct indirect descent algol thu seem entir appropri studi concept objectori program context algollik languag paper effort formal object class use algollik languag develop theoret underpin formal framework adopt technic notion algollik languag defin reynold 51 ideal algol reynold type lambda calculu base type support statemanipul express command etc type lambda calculu framework give mathemat flavor ideal algol set within broader program languag research yet base type statemanipul make remark close practic program languag combin give us ideal set studi variou program languag phenomena relev practic languag like c modula3 java etc reynold also argu 50 appendix objectori program concept implicit ideal algol essenti idea class correspond new oper gener instanc everi time invok obviat need separ class concept idea echo other 46 2 contrast take posit signific benefit directli repres objectori concept formal system instead encod construct effect class obtain correspond new oper properti class exhibit new oper thu class form special form new oper independ interest paper defin languag call ia extens ideal algol objectori program studi semant formal properti import idea come light class abstract data type whose theori correspond existenti type 35 sens ia ideal algol sol polymorph lambda calculu howev sol faith encod polymorph lambda calculu 45 ia constrain ideal algol correspond encod preserv equival thu ia proper extens relat work number paper 19 1 11 18 discuss objectori type system languag side effect clear contribut type system make reason principl program relat direct object encod pierc turner 44 studi encod object abstract type bear similar parametr semant paper recent work along line 12 fisher mitchel 20 also relat class data abstract work assum function set object idea deal state work specif state object includ 5 28 29 30 address subtyp issu 3 6 address selfrefer issu major develop research algollik languag collect 43 tennent 58 give gentl introduct concept 1994 2 languag ia languag ia extens ideal algol class thu type lambda calculu base type correspond imper program phrase base type includ ffl comm type command statetransform ffl expffi type statedepend express give ffityp valu ffl valffi type phrase directli denot ffityp valu without statedepend rang collect data type integ boolean whose valu storabl vari abl type like expffi comm call phrase type distinguish data type valu arbitrari phrase type storabl variabl 1 collect phrase type type short given follow syntax fi rang base type expffi comm valffi except cl type remain type structur simpli type lambda calculu record type sub type see instanc mitchel 34 ch 10 detail basic subtyp includ collect type call statedepend type ffl standard record subtyp width well depth subtyp interpret subtyp coercion 34 sec 1042 paramet pass mechan ia callbynam usual type lambda calculu second coercion make avail algol notion callbyvalu express argument suppli valu need type cl type class describ behavior type object object abstract encapsul intern state repres field provid extern visibl oper call method class defin field method collect object call instanc distinct class instanc aris object state class stateless observ differ instanc would littl point make classinst distinct class repres abstract mathemat concept behavior instanc repres concret physic realiz behavior defin class use notat form class field c1 method init variou compon descript follow ffl type type instanc class call signatur class identifi field term denot class respect field ffl term type defin method class 1 possibl postul data type refer pointer ref everi phrase type whose valu storabl variabl obtain essenti express objectori programm desir unfortun theoret understand refer welldevelop omit main present mention issu relat sec 43 ffl commtyp term initi field admittedli complex term form repres quit close term form class typic program languag moreov see much detail clear typetheoret basi noteworthi defin nontrivi class without first primit class need defin field assum singl primit class mu tabl variabl via constant x instanc varffi variabl xget statedepend express give valu store x xputk command store valu k x 2 often use abbrevi signatur type variabl assum subtyp ing whose coercion interpret correspond field select note type varffi differ class varffi valu type varffi need gener instanc varffi instanc follow trivial class instanc type varint class field method init skip instanc class alway give 0 get messag noth respons put messag yet type varint essenc type object mere give signatur type method wherea class defin behavior tighter integr class type would certainli desir return issu sec 41 exampl nontrivi class consid follow class counter object class finc comm val expintg field cnt method init counter state variabl keep count inc method increment count val method return count definit inc method could also written cnt cnt use subtyp varffi use explicit coercion clariti assum new variabl come initi specif initi valu init ffi also possibl use modifi primit cl varffi allow explicit initi via paramet one would want varieti combin class follow product combin make pair object essenti primit cl 1 theta cl 2 cl 1 theta 2 instanc class c1 c2 pair consist instanc c1 instanc c2 use combin abound instanc follow combin motiv work fudget 14 instanc f1 f2 pair b instanc f1 b b instanc f1 two object thu interlink creation time use mutual recurs common data structur program languag array record also give rise class combin array data structur regard combin type array array c n equival nfold product c c view partial function integ cobject record construct record c1 essenti like c1 delta delta delta cn except instanc record instead tupl creat instanc class use notat new c valu type signatur class c exampl new counter b creat instanc counter bind execut command b scope extend far right possibl often delimit parenthes beginend bracket type newc illustr physic natur object reconcil mathemat charact algol new c regard valu type mathemat natur algol would prohibit state object entir exampl construct form let new counter ainc print aval would useless would equival fireduct new counterinc print new counterv therebi impli everi use give new counter state propag higher order type newc give rise problem insight due reynold 51 use sever languag 37 56 21 formal system assum standard treatment type lambda calculu aspect ia type rule cl type shown fig 1 note one rule introduct cl type one elimin show singl field class term simplic obvious field c x method init cl intro cl elim figur 1 type rule cl type cl 1 theta cl 2 cl 1 theta 2 figur 2 essenti constant ia limit combin class use instanti multipl class signific initi command restrict act field x allow alter arbitrari nonloc object method term hand act nonloc object use instanc obtain effect static field languag like c java class term free identifi call constant class restrict initi command free identifi x motiv reason consider programm typic want assum order instanc declar insignific initi global effect order would becom signific howev restrict state rule stringent one would want initi command abl least read global variabl appendix outlin gener type system base idea 50 48 allow readonli free identifi import constant ia shown fig 2 constant express valu type omit constant skip denot donoth command denot sequenti composit letval oper sequenc evalu express anoth express command precis letvalef evalu e current state obtain valu x evalu f x note would make sens letval e f type valffi 0 infix oper variant letval defin exampl command cntput cntget 1 definit counter class involv sequenc letval oper extend higher type follow letval fst letval thu statedepend type defin appendix letval oper coercion serv interpret subtyp valffi equat calculu type lambda calculu part ia standard cl type construct follow law new class field c x method init new c x j class field c x method x init skip fl new c1 x new c2 new c2 new c1 x fi law specifi effect introelim combin j law specifi effect elimintro combin elim implicit elimin field declara tion fl law allow one reorder new declar note import initi free global effect fl law hold interact new declar variou constant axiomat follow equat axiom new c x new c x new c g 2 new c x gx ae new c x letval e z h x z oe ae letval e z new c x h x z oe new c x p f x g presenc nontermin first equat must weaken inequ new c x skip v skip equat state new oper commut oper ia comput independ new instanc move scope notic deriv second equat set famou equat new c x 6 discuss variou paper semant local variabl 31 32 40 compil implicitli use kind equat enlarg contract scope local variabl elimin dead variabl formal introduc class featur abl gener class 50 appendix reynold suggest encod class correspond new oper involv cl class field c x method init new c x pm new 3 note axiom equat lambda calculu equat schema symbol c never substitut term captur bound identifi instanc equat 2 substitut term x occur free instanc class counter would encod tunat arbitrari function type satisfi axiom new list mean reynoldss encod give fulli abstract translat ia ideal algol treatment seen formal properti intrins new oper class 22 specif ideal framework specifi class ia specif logic reynold 52 specif logic theori within type firstord intuitionist logic henc name somewhat misnom use intuitionist connect 8 9 type includ ideal algol addit base type assert assert statedepend classic logic formula atom formula specif logic includ ffl hoar tripl fpg fqg command assert p q ffl noninterfer formula b b term arbitrari type note assert form logic within logic one use classic reason even though outer logic intuitionist noninterfer formula b mean intuit b access common storag locat except readonli fashion definit properti use possibleworld semant 41 use symmetr noninterfer predic 38 somewhat easier use origin reynoldss version proof rule noninterfer predic free identifi b respect 2 b b passiv type 3 b either b constant type passiv type give expffityp valu constant type give valffityp valu see appendix discuss effect noninterfer predic best illustr proof rule state two noninterf command freeli reorder survey articl tennent 58 detail descript specif logic handl ia extend specif logic cl type new formula form inst c x oex c class x identifi bound formula oex formula mean instanc x class c satisfi formula oex exampl follow specif variabl class inst varffi x inst queue q 8xi valint 8g expint comm g q figur 3 equat specif queue class inst queue q 9elem list valint assert 8k valint 8s list valint ftrueg qinit felem g figur 4 hoaretripl specif queue thu hoar logic axiom assign becom axiom variabl class one also write equat specif class exampl consid specif counter inst counter x quantifi function identifi g play role con version function convert express command less trivial exampl equat specif queue class shown fig 3 structur similar counter specif specif logic allow use equat reason reason via hoaretripl choic matter prefer hoarelik reason better understood often simpler illustr show fig 4 hoaretripl specif queue specif assert exist elem predic repres abstract intern state queue list use mllike notat list note logic facil specif logic allow us specifi exit abstract function would implementationdepend exampl fig 5 show implement queue class use unbound array 4 show meet hoaretripl specif pick predic queuestat repres queue element list array element f 1 r note predic incorpor represent invari represent function america terminolog 5 fact america theori class specif implicit specif logic 4 use unbound array abstract finess technic bound clearli specif implement queue modifi deal bound queue class queue field unboundedarray varint method init f 0 r figur 5 implement queue specif logic also abl express histori proper tie recommend liskov wing 30 exampl formula state counter valu increas time inst counter x use instspecif formul follow proof rule new declar inst c x oex new c g x occur free undischarg assump tion term formula gamma state prove properti newc g need prove g x x arbitrari instanc c assum specif oex fact x interfer anyth unless c interfer term term whatev typic usag rule free identifi gx noninterfer assumpt aris fact x new instanc rule infer instspecif inst c z z oem inst class field c z init method x oex z occur free undischarg assump tion term formula oegamma instspecif alway adequ captur entir behavior class instanc sinc specifi behavior instanc arbitrari state miss specif initi state final state transforma tion addit axiom involv newterm necessari captur aspect exampl counter class satisfi follow initi axiom new counter x gxval hx new counter x g0 hx specifi initi valu counter 0 final axiom new counter x gx hxinc new counter x gx hskip state increment oper done dealloc redund denot semant ia bring import properti class object consid two style semant parametr semant along line 42 highlight data abstract aspect class objectbas semant along line 49 highlight classinst relationship 31 parametr semant point reynold 53 parametr fundament data abstract sinc class incorpor data abstract one expect parametr play role interpret follow present 42 sec 2 discuss particular ignor recurs curri function later discuss 42 handl featur immedi applic type oper small collect set ffl set part set assign set x 2 set set x ffl relat part rel assign binari relat normal write set rel simpli use context disambigu notat similarli nari type oper n type variabl defin type oper constant type variabl type product function space constructor standard exampl function space constructor relat part relat part constant type k ident relat denot delta k defin quantifi type oper univers quantifi 8 existenti quantifi 9 ffl type oper 8z x z repres parametr polymorph function p compon pz 2 formal set part consist sindex famili fpzgz2 relat z relat part written 8s r r x defin z gz2 ffl oper 9z x z repres data abstract implement abstract type z oper type x z defin formal consid impl mentat pair form hz pi z 2 two implement said similar hz pi hz exist relat relat term simul set part 9z x z consist equival class implement equival relat write equival class hz pi hjz pji relat part 9s r relat r x least relat basic refer parametr reynold 53 plotkin abadi 45 defin logic reason parametr notion existenti quantif 35 parametr semant mention idea simul relat abstract type implement date back milner 33 appear variou sourc includ 9 27 25 36 54 type ia interpret type oper sens paramet type oper state set typic captur state involv represent object relat part oper specifi two valu type relat chang represent interpret note mean class data abstract involv state set z intern state instanc compon type q theta z method class compon type z initi state two implement intern state set z z 0 similar henc equival relat z z 0 initi state relat method preserv accord relat exampl consid follow class altern counter st method mean counter counter2 calcul follow two implement similar simul relat int int given gamman preserv two implement henc two abstract equival class equal thu parametr semant give extrem use proof principl reason equival class interpret term follow term function write compon q semant algol phrase 42 import point recal paper sec 32 fact parametr make avail certain expand function expand everi valu v 2 q uniqu expand valu qthetaz act way v use abbrevi notat v qthetaz q denot expand q zv exampl expand command leav z compon unchang expand function play crucial role interpret instanc declar inherit also signific interpret con stant constant valu q valu form qobtain expand valu unit state set need specifi interpret constant unit state set semant class construct follow field c x method init q fst pz mq z hjz class definit build abstract type illustr counter new oper open abstract type pass client procedur p represent method suit class thu instanc creat note normal case p abstract x mean lambdaz bodi term use expand state set q theta z everi time class c instanti new z compon ad state set fashion thu everi open abstract type give rise new instanc state compon interfer other compar oper object encod propos pierc turner other 44 12 note treat object abstract type wherea treat class abstract type thu bureaucrat open close code appear model finess messag send model simpli field select record nevertheless idea abstract type appear model implic common explor class constant follow interpret init hjz1 theta z2 0 varffi class denot state set ffi get put oper oper combin two class join state set method suit individu class expand oper combin state set theorem 1 parametr model satisfi equival axiom sec 21 plain parametr semant describ handl equal relat gener fashion implement data abstract normal allow abstract valu repres multipl concret represent context mean equal relat abstract state gener equal relat concret state correspond partial equival relat per concret state 24 exampl queue implement fig 5 empti queue repres state f r equal second axiom equat specif fig hold implement left hand side give state right hand side give state remedi modifi parametr semant parametr per semant type carri notion equal 5 formal type new set call pertyp pair x set ex per x repres notion equal x idea modifi work pertyp see appendix b per semant influenc reason program follow suppos obtain packag hhz delta z 9z x z mean class p preserv per ez sens p thu liberti make per ez preserv p use equal relat represent exampl queue class fig 5 state set z consist tripl ha f ri int int f r 2 int pick equival relat ez given ha f ri ez ha map f repres intuit portion array f 1 r contain meaning valu verifi axiom queue interpret comm per 5 seem possibl obtain inform semant plain parametr semant quantifi type oper map per per gener inc val1 val2 inc inc figur trace set counter object theta z viz eq theta ez eq theta ez eq per q respect variabl like g verif problemat second axiom two side equat denot respect state transform clear equival relat eq theta 32 objectbas semant objectbas semant 49 39 see also 4 treat object state machin describ pure observ behavior observ behavior given term event trace whose structur determin type object similar process describ semant csp cc sinc intern state appear denot prove equival two class reduc prove equal trace set look formal definit consid exampl figur 6 depict trace set counter object initi state event object inc denot success complet inc method vali denot complet val method result integ node thought state event state transit note val event chang state wherea inc event take object state higher val valu discuss purpos label node integ might well integ given val trace set describ mathemat recurs definit paramet cnt function label state note label anyth make often make sens use label correspond state implement instanc anoth descript trace set use neg integ label descript correspond class counter2 obviou two trace set formal proof would use simul relat defin 9 show fix point induct follow note descript virtual differ class instanc class determin trace set share instanc class specif equat class directli verifi trace set exampl equat xinc gxval counter class verifi note state n objectbas semant describ 47 39 make idea work ideal algol simplic consid version ideal algol syntact control interfer function appli argument interfer start notion coher space 22 simpl form event structur 59 coher space pair jaj countabl set reflexivesymmetr binari relat jaj element jaj thought event object particular type relat call coher relat state whether two event possibl observ object state free object space gener coher space set sequenc jaj trace defin state carri sequenc event two trace must coher event posit condit appli posit two event lead distinct state coher condit futur event element coher space pairwis coher subset x jaj element object space denot trace set object function appropri object space call regular map turn describ simpli term linear map f b actual defin multipleargu linear map need semant linear jbj whenev everi linear map denot multipleargu regular coher space event variou ideal algol type shown figur 7 trace set object type element sinc statefre descript object virtual differ ja1 theta a2 figur 7 coher space event ia type object class differ class use repeatedli gener new instanc trace class sequenc object trace one instanc gener therefor defin mean term x1 multipleargu linear map regard vector trace 2 j 1 j record j 2 pi x linear map set pair j indic produc event result term carri event trace object free identifi interpret interferencecontrol algol term 49 interpret class term follow field c x method init mean class term say trace set c must trace s0s1 s0 repres effect initi command method term map trace s1 2 j j trace 2 jj possibl trace new class mean new c p find trace support c p readi accept object trace cours c support mani trace p use one trace theorem 2 objectbas model satisfi equival axiom sec 21 adapt version ia syntact control interfer 4 modular issu section briefli touch upon higherlevel modular issu relev objectori program work need understand issu 41 type class objectori languag notion type class fuse one arrang feasibl ia class firstclass valu equal decid exampl class array c n array c 0 n 0 equal n n 0 equal comparison neither feasibl desir howev tighter integr class type achiev use opaqu subtyp modula3 also call partial abstract type 21 exampl counter class may defin newtyp counter finc comm val expintg class counter client program know counter subtyp correspond signatur type counter type cl counter class counter hand insid abstract boundari abstract type counter regard equal signatur type specifi requir partial abstract type exampl specif 8x counter state everi valu type counter instanc class monoton increas reveal block type counter get proof oblig demonstr use type counter satisfi specif exampl use reveal block defin class counter counter2 job show instanc monoton increas note partial abstract type correspond america 5 call type 42 inherit type lambda calculu record inherit model literatur adapt illustr show recurs record model 13 15 46 class use selfrefer defin type cl instead cl method suit parameter self combin close cl close class field c f method fix f init skip convert selfreferenti class c class whose instanc ordinari object let c type cl defin deriv class record type extens use construct form class field c f method self f self init recordcombin oper 16 oper qualifi type indic record field get updat need coher subtyp exampl suppos defin variant counter class provid set method protect fashion type protect counter counter phi fset valint commg protect counter class counter counter fieldsvarint cnt method self defin deriv class issu warn whenev counter reach specifi limit protect counter warn counter class counter counter field counter f method self f self withset print limit reach f selfset kg init skip note close counter close warn counter type cl counter instanc satisfi specif counter includ histori properti set method caus problem inaccess client proof principl selfreferenti class deriv fixedpoint induct inst c f 8x oex oefx inst close c x oex exampl lim satisfi inst close c x 8k valint 8p expint assert 43 dynam object typic languag algol famili provid dynam storag via hoar 26 concept refer pointer object creat dynam storag access refer treat data valu becom storabl variabl modern languag like modula3 treat refer implicitli assum everi object automat refer seem prefer make refer explicit reason principl much harder yet wellunderstood provid dynam storag ia stipul everi type data type ref oper refer roughli follow rule newref sound gener sinc refer store variabl export scope refer local variabl obey stack disciplin local variabl deallo cate refer would becom dangl refer correct type rule newref given appendix knowledg semant dynam storag rather incomplet semant model exist 55 56 yet clear integr reason principl present 5 conclus reynoldss ideal algol quintessenti foundat system algollik languag extend object class hope provid similar foundat objectori languag base algol paper shown standard theori algol includ equat calculu specif logic major semant model extend objectori set fact much alreadi implicit algol theori perhap form access specialist among issu leav open futur work thorough studi inherit model reason principl refer investig callbyvalu algollik languag acknowledg pleasur acknowledg peter ohearn initi encourag develop work well continu feedback bob tennent hongseok yang anonym refere fool 5 provid valuabl observ led improv present thank martin abadi explain intricaci per semant research support nsf grant ccr9633737 appendix reflect type class type rule section 21 initi command class restrict local field class restrict lead clean reason principl fl law equat 26 restrict practic instanc counter class parameter initi valu n typecheck restrict init command free occurr n reason relax restrict allow initi command read storag locat write kind restrict also use context eg defin function procedur read global variabl modifi 58 56 use dynam storag involv similar restrict class use instanti dynam storag object refer local store defin gener notion use formal restrict reflect type class set type term 1 2 3 terminolog motiv fact class interpret reflect subcategori semant categori 48 defin sever reflect type class base follow intuit constant type involv valu stateindepend neither read write storag loca tion valu call variou qualif applic 56 pure 37 chast 57 dualli statedepend type involv valu necessarili depend state valu passiv type read storag locat write one sens const c valu dynam type access dynam storag via refer add three new type constructor const pa dyn identifi valu properti even gener type valu type const type valu built use constanttyp inform outsid regard constant valu defin follow class least reflect class satisfi respect condit 1 constant type includ valffi const type 2 statedepend type includ expffi comm close const pa dyn type constructor 3 passiv type includ valffi expffi const pa type 4 dynam type includ valffi const dyn type said use everi free occurr x subterm type particular say constantli use passiv use dynam use three kind usag introduct rule const pa dyn follow constantlyus occurr const passiv use dynam use derefer oper treat use mean everi identifi gamma use elimin type constructor use subtyp type const pa const dyn note close term given type const exampl counter class section 2 type const cl counter applic class definit type rule class modifi follow field c x method init passiv use allow free identifi gamma use readonli fashion parametr interpret cl type must modifi cl z rest theori remain except equat 2 becom condit noninterfer c new c x applic refer use follow rule creat refer rule ensur class instanti dynam store use locat local store instanc use either avoid dangl refer problem b semant specif section consid issu interpret specifi cation rais two issu first noninterfer formula specif requir sophist functor categori interpret 57 41 whose relationship parametr interpret yet wellunderstood howev possibl interpret restrict version specifi cation 8quantifi identifi restrict interfer free identifi note queue specif fig 3 form second issu discuss section 31 equal relat specif must gener enough refin implement allow equal relat refin implemen tation defin parametr per semant ia basic idea bainbridg et al 7 see also 8 adapt predic polymorph context per e set x symmetr transit relat differ equival relat need reflex domain e defin x 2 dome note e reduc total equival relat dome set equival class e denot qe see 34 sec 56 discuss per type new set call pertyp pair set ex per x per specifi notion equal type ordinari relatin call satur relat type oper pair htper rel map pertyp satur relat pertyp oper product function space follow r theta assum small collect pertyp interest pertyp oper oper inst c x oe 9hz hp z0ii figur 8 interpret specif inherit product sum function space constructor notion defin type quantifi follow ffl pertyp oper 8z x z map pertyp x pertyp h set consist famili index z 2 per equat two famili p p 0 satur relat z z 0 relat part oper map satur relat ffl pertyp oper 9z x z map pertyp x pertyp h given relat part oper map satur relat r x compar plain parametr semant section 31 note per take place ident relat theorem 5 everi type oper type pertyp satur relat r satur relat proof similar 8 interpret ia exactli plain parametr semant except type oper understood pertyp oper interpret specif shown fig 8 judgment form q j mean formula oe free hold state set q environ j 2 domgamma q r imper object calculu theori object logic objectori program linear share state design objectori program languag behaviour subtyp functori polymorph refin concurr objectori program mathemat foundat program semant eleventh annual confer compar object encod semant multipl inherit fudget graphic user interfac lazi function languag denot semant inherit inherit subtyp algolbas simul languag calculu concurr object interpret type oop languag state relationship class proof type theoret aspect objectori program abstract data type softwar valid data refin refin record handl axiomat approach binari logic relat applic data refin reason refin objectori specif languag modular specif verif objectori program behavior notion subtyp axiomat oper equival presenc side effect toward fulli abstract semant local variabl algebra definit simul program foundat program languag abstract type existenti type refin calculu call name syntact control interfer revisit object interfer yoneda embed semant local variabl semant analysi specif logic simpl typetheoret foundat objectori program logic parametr polymorph object closur abstract semant objectori languag global state consid unnecessari semant interferencefre imper program passiv independ global state consid unnecessari introduct objectbas semant syntact control interfer essenc algol ideal algol specif logic type abstract parametr poli morphism behavior correct data represent categor model local name assign applic languag semant analysi specif logic denot semant introduct event structur tr semant multipl inherit structur interpret comput program commun sequenti process understand type data abstract polymorph event structur abstract type existenti type object closur abstract semant objectori languag commun concurr proof type inherit smalltalk80 denot definit toward fulli abstract semant local variabl sound complet axiomat oper equival program memori semant analysi specif logic behaviour correct data represent inherit subtyp call name assign lambda calculu theoret aspect objectori program two semant model objectori languag behavior notion subtyp parametr local variabl denot semant interpret type oop languag posit subtyp imper object calculu algollik languag v2 assign applic languag relationship class object data abstract semant dynam variabl algollik languag simula algolbas simul languag syntact control interfer theori object refin calculu modular specif verif objectori program data refin refin compar object encod logic parametr polymorph reason refin objectori specif languag imper firstord calculu object extens logic objectori program calculu concurr object introduct event structur design objectori program languag behaviour subtyp abstract denot semant inherit ctr bernhard reu thoma streicher semant logic object calculi theoret comput scienc v316 n13 p191213 28 may 2004 uday reddi hongseok yang correct data represent involv heap data structur scienc comput program v50 n13 p129160 march 2004 bernhard reu jan schwinghamm denot semant program logic object mathemat structur comput scienc v16 n2 p313358 april 2006 matthew parkinson gavin bierman separ logic abstract acm sigplan notic v40 n1 p247258 januari 2005 anindya banerje david naumann ownership confin ensur represent independ objectori program journal acm jacm v52 n6 p894960 novemb 2005