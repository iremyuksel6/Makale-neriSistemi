type signatur legaci fortran subroutin current develop methodolog framework revers engin fortran77 program use electriciteacut de franc first step construct algebra specif faith repres fortran code construct specif must decid coher set profil type signatur specif fortran subprogram propos analysi dynam alias formal actual subprogram argument order deriv profil mani exampl real fortran code analysi give satisfactori result array treat indivis instead must take account fragment array may realli access subprogram therefor implement analysi extens pip code parallelis tool provid us precis analysi interprocedur array dataflow b introduct much softwar current use electricit de franc edf though give entir satisfactori result written 15 20 year ago replac exist system new softwar redevelop scratch expens riski timeconsum respons problem develop methodolog framework revers engin fortran77 sourc code use formal method 10 algebra specif code differ level abstract creat compar propos start analysi sourc code creation specif lowest level ab straction believ step partial autom first specif must suffici close sourc code inspir complet confid specifi exactli particular subprogram code must specifi function howev specifi work financ electricit de franc contrat detud r321k2924er292 ot r32l02 appear acm sigplansigsoft workshop program analysi softwar tool engin paste99 toulous franc sep 1999 cation must lowlevel prevent structur present easier understand code aid mainten engin understand code locat implement particular aspect algebra specif function call op erat oper profil declar sort argument result ie profil specifi type signatur function order construct algebra specif fortran code must decid profil oper specifi fortran subprogram task address articl sever characterist fortran77 languag complic task declar fortran subprogram tell us declar paramet global variabl ie variabl common block declar visibl realli defin use 1 fortran callbyaddress semant mean pass singl array element subprogram enabl access rest array element onward pass element first array part array pass subprogram situat aris tran77 program make extens use array builtin datastructur 2 simul data structur fortran77 builtin type support userdefin type typecorrrect enforc compil program may even respect declar type mean base profil use specif declar subprogram paramet type risk identifi true paramet true type also restrict fortran small set type case subprogram librari routin belong particular applic program lose inform glean analysi variabl actual use instanti formal paramet inde result fortran impoverish type system programm typic construct subprogram paramet certain declar type integ say realli design instanti subset program variabl type eg variabl number line electr network number 1 defin use use static analysi sens mean respect assign new valu variabl read valu variabl rest paper assum familiar notion static analysi see chapter 10 1 2 apart chain charact version ing node exampl revers engin read code first time may clear paramet repres particularli sinc fortran variabl name limit six charact situat would like abl track valu paramet may take find subprogram may pass via variabl differ name build understand necessarili valu involv rep resent word use type variabl arbitrari name dont know type would like start find consist set type signatur subprogram finergrain base declar type type signatur profil oper specifi sub program specif sort name type detect way hope correspond close declar type programm conceptu view code propos static analysi fortran code order automat obtain precis definit variabl realli defin use subprogram thu group variabl set correspond sort set fortran variabl creat defin sort contain least possibl valu variabl defin profil oper specifi subprogram follow section discuss approach compar convent type infer explain hypothes base treatment array region use pip tool section 3 give detail descript analysi propos section 4 describ current implement section 5 discuss possibl extens relat work compar section 6 follow conclus discuss approach 21 convent type infer want analysi distinguish integ line number integ nodenumb also integ array use store link list line number integ array use store number node connect one end line inde array vari sort valu store sort index valu element may also constrain taken togeth realis data structur link list moreov given array order simul dynam memori alloc effect referenc though compos sever contigu subarray store differ inform want abl distinguish differ part propos make distinct describ exactli array fragment access put sort array fragment access way subprogram use mostli function languag usual perform program alreadi partial type mean type declar set basic type typeconstructor predefin type variabl assign untyp term type infer rule use unifi type term find consist type function declar function applic program includ involv primit oper assign test equal arithmet oper arithmet oper usual given predefin nonpolymorph type signatur function whose type signatur known consid polymorph default particular take function argument treatment array propos classic polymorph type infer certainli incap give differ type differ array fragment moreov wide use arithmet opera tion classic polymorph type infer seem incap make distinct differ integ differ whole integ array describ inde order avoid result close declar fortran type arithmet oper util oper integ integ array must consid polymorph hand subsort polymorph seem suffici describ fortran program analys far found exampl subprogram take subprogram argument 3 parametr polymorph subprogram oper list regardless type element list compar convent type infer basic type propos ignor type declar type formal paramet defin fortran subprogram use equival one rule convent type infer one function ap plicat instead explain infer term unif type term use rule prefer describ infer relat paramet type enabl us explain differ occurr appear paramet alway type 22 treatment polymorph contrast convent type infer propos analysi restrict analysi subprogram call synthesis declar subprogram propos analys call builtin fortran arithmet oper test equal assign analysi call subprogram specif manag electr network enabl us make distinct differ integ variabl integ array variabl describ section 21 howev util subprogram may use carri oper arbitrari integ array oper one profil take subprogram account could consid sort linenumb nodenumb subsort sort integ differ sort integ array distinguish subsort sort integ array would allow implicit coercion subsort supersort necessari howev would mean make analysi result much complic order give consist profil routin go contribut understand variabl repres often call util subprogram violat declar type fact embodi subsort relat program trick desir includ specif fact prefer limit analysi much less complex case profil defin flat set sort 3 case would abl specifi subprogram firstord algebra specif languag attempt take possibl subsort relat account implicit coercion algebra specif certainli contain subsort relat leav part revers engin therefor propos tri recogn util subprogram may present code analys elimin code analysi carri 4 choic subprogram elimin cours subject determin granular sort subsequ detect howev experi util subprogram easili determin studi callgraph program contain far call subprogram specialis one 23 reus variabl analysi reli hypothesi success valu fortran variabl sort reus variabl save memori uncommon old fortran code success valu complet differ natur get bad result one solut space discuss modifi infer rule heurist propos longer consid ident two occurr region valu may modifi two disadvantag solut obvious may unnecessarili give differ sort success valu variabl realiti alway keep sort artifici split lot variabl set 24 treatment array would like detect array fragment subject particular treatment subprogram analys aris loop subprogram travers array fragment even everi element fragment access array fragment use realis data structur within fragment differ array element may use repres differ thing instead give sort individu array element may access whole array case loop dont travers whole array would like give sort travers fragment pip tool perform static analysi fortran code set access element describ convex array region 4 25 array region pip pip tool automat parallelis fortran77 program develop ecol de mine de pari 6 parallelis depend precis analysi carri interact intra interprocedur array data flow pip characteris variabl realli access block code recurs propag inform pip array region defin linear limit upper lower valu index access element dimens array thu describ indic possibl access element convex polyhedron parameteris scalar program variabl 4 elimin call certain subprogram must done care invalid result automat analysi problem alreadi present analysi program may includ chain call involv thousand subprogram unless find way elimin dont realli interest us pip region necessarili exact descript set element realli access ffl obtain static analysi suffer limit static analysi ie inabl elimin imposs execut path ffl oper use propag combin region block code alway give exact result nonconvex result may approxim convex polyhedron nonlinear function scalar variabl limit may overapproxim pip exact region exactli describ set element access either ffl possibl execut path ffl particular execut path pip express condit linear function scalar program variabl region may includ element actual access call may pip region describ upwardli expos use region describ definit valu may use exit code block redefin pip combin region array code block one summari region respect describ analysi use concept array region 3 analysi propos 31 central rule detect set variabl correspond sort base follow simpl rule express intuit actual paramet instanti formal paramet subprogram p specifi sort formal paramet profil oper specifi let us describ interpret appli rule 32 exampl use exampl formal paramet call ipco ipc certain subprogram one real program analys callgraph subprogram annot extract fortran subprogram declar call shown figur 1 33 formal paramet region borrow pip terminolog call access mode variabl subprogram may must use may execut definit variabl subprogram call access mode definit subprogram may subsequ use outsid subprogram overwritten defin true output paramet subprogram ffl scalar variabl may access mode figur 1 annot callgraph subprogram exampl sub besti1 sub prefixna1 sub prxploipco ipc icco icc nrlo nrle sub prchenipcoicconrl sub camatna1 sub cacontna1nrlo nrle sub casdegipco icco nrle figur 2 formal paramet region exampl ffl array element may access mode instruct loop loop use array index valu doesnt vari success loop iter ffl array fragment true output paramet subprogram call instruct loop loop array fragment doesnt vari success loop iter ffl array fragment may travers mode loop ie access array element fragment loop vari success loop iter convex envelop element array may referenc mode case nest loop take fragment travers outermost loop true input paramet similar definit except array fragment true output paramet everi element may defin subprogram alreadi true input param eter ad true input paramet defin inexact outexact inapprox outapprox region respect result pip analysi modifi ffl calcul summari region one separ region array access code block nonetheless integr region individu loop iter access one region whole loop ffl distinguish region exact limit call exact region limit overapproxim call approx extend notion array region scalar variabl region 0 dimens defin region output paramet outexact outapprox region subprogram region input paramet inexact inapprox region addit necessari copi may nonconvex region region case sever ident exact paramet region keep one exact descript true paramet howev case sever ident approx region keep copi approx region may describ two differ array fragment two differ true paramet inde paramet region may describ fragment realiti empti static analysi identifi ie true paramet realli exist true paramet includ fragment variabl declar paramet subprogram common block call global paramet analysi base instanti formal paramet actual paramet global paramet instanti variabl may name differ differ subprogram instanc static alias like use equival statement global variabl access subprogram declar argument may even name ie declar caller note say use global variabl analysi global paramet may use actual paramet call anoth subprogram moreov analysi carri variabl static alia analys variabl thu sort easili detect ad variabl set true formal paramet true paramet less global paramet formal paramet region defin accordingli formal paramet region exampl shown figur 2 region enclos contain name subprogram name array bracket valu indic differ dimens repres phi1 come mode precis limit exact approx fi nalli brace list constraint index valu inapprox region besti1 prefix prxplo exist prchen may read valu ipco ipc previous written prxplo pip unabl determin case 34 actual paramet region given subprogram p 2 one true formal paramet describ region f callsit p2 subprogram p 1 actual paramet region callsit translat f namespac set declar paramet variabl declar common block local p 1 carri pip case array array formal paramet belong actual paramet may declar differ differ dimens even fortran type consequ region exact express term indic formal array may approx express term indic actual array 3 region parameteris store valu variabl start block code calcul howev valu variabl parameteris region may chang execut subprogram compar region parameteris store therefor defin actual paramet region entrypoint actual paramet region call subprogram p2 p1 express term store callsit reexpress pip term store entrypoint p 1 callsit loop actual paramet vari differ iter loop actual paramet arbitrari iter loop describ region parameteris store entrypoint case pip calcul new region loop contain actual paramet region differ iter region reexpress term store entrypoint caller except exactregion parameteris variabl chang valu execut loop actual paramet region call loop reexpress term entrypoint caller also pip sometim unabl reexpress exact region term store entrypoint approxim approx region 35 instanti dynam alia relat let us call instanti pair formal paramet region actual paramet region entrypoint defin binari relat region instanti link pair region instanti two variabl gener said dynam alias share address memori virtu call subprogram mean dynam alias differ possibl name variabl defin anoth binari relat region dynam alia link region simultan addressspac memori particular path callgraph follow dynam alia relat includ instanti moreov instanti r1 r2 call site subprogram p 2 subprogram p3 p2 call p1 r2 may also formal paramet region instanti call p2 p 1 dynam alia relat fact transit closur instanti ie 5 instanti byf dynam aliasf dynam aliasr1 r2 dynam aliasr2 r3 neither instanti dynam alia symmetr let us call alia list list contain greatest possibl number region element except first instanti one element except last instanti one point execut program first element list instanti ie subprogram deepest callgraph call element alia list simultan share space memori list differ name variabl alia list exampl shown figur 3 last actual paramet region list also formal paramet region ie neither caller shown figur mode call prchen loop actual paramet region express term store entrypoint prxplo two alia list one element fact region prchen give rise approx region prxplo 36 sort relat consid group variabl set sort defin binari symmetr relat sort region relat includ dynam alia relat two region dynam alia relat two possibl name variabl consid possibl implicit coercion must therefor put set pair element alia list thu sort relat subprogram formal paramet region f call two callsit callsit result differ alia list ident f differ f belong alia list howev initi rule section 31 say element alia list sort word sort transit direct dynam alia 5 follow firstord logic formula suppos univers quantif variabl exampl rule give sort element two alia list start region casdeg ipco moreov actual paramet precis describ exact region instanti two differ formal paramet actual paramet region belong two alia list start differ ident region onward paramet describ region share space memori variabl alia list success altern execut point suppos valu store address alway sort infer element alia list sort case exact region sort thu transit direct exactasam exampl rule give sort element pair alia list end exact region besti1na1 fact make infer irrespect mode region concern let us make sort reflex exact region irrespect sort equival relat exact region howev approx region instanti differ formal paramet region sure array fragment describ approx region case make infer exact region sort transit case although paramet one sort approx region two differ sort describ two differ paramet creat set contain greatest possibl number region region sort element set exact region set equival class sort set region repres sort subprogram profil construct give set name subprogram find set formal paramet region belong case sever ident approx formal paramet gion instanc region belong differ set sort exampl shown figur 4 37 overlap region infer make sort two region overlap extent situat resum tabl shown figur 5 show possibl way two region overlap case inclus one region anoth approx region make infer may realli inclus array fragment describ true partial overlap one region approx howev case inclus one region anoth exact one know realli inclus paramet case obviou explan proper inclus smaller region belong subsort larger one howev take subsort relat account gener would significantli complic figur 3 alia list exampl figur 4 sort exampl conserv treatment approx region figur 5 relat sort infer case overlap region overlap relat exact exact approx exact exact approx approx approx anomali figur sort exampl use heurist approx region analysi result could decid incorpor subsort supersort case give region sort howev exampl case seen program analys due util routin see section 22 supersort exist pure oper purpos save line code prefer therefor leav revers engin analys case case approx region exactli limit exact region suppos sort approx region subsort sort exact region proceed propos altern approach case explain partial overlap two exact region alert revers engin appar anomali 4 current implement first implement analysi realis new pip phase run three real legaci fortran program 1000 3500 25500 line code respect aim first tent implement enabl us quickli valid idea real code base alreadycalcul pip region trial obtain nearli one sort everi two region includ scalar analys program number differ callsit subprogram util routin small implement analysi nonetheless fail recogn mani pair region describ array fragment 1 approxim implement algorithm describ modif pip analysi describ section 33 carri 2 program give mani approx region analysi extrem conserv never conclud approx region describ array fragment anoth region howev result provid implement enabl us refin analysi 5 less conserv analysi treat approx region differ region array sort give result conserv code contain mani approx region result explos number appar differ sort program analys mani array access made index valu depend valu anoth array element recurs calcul loop contain access put limit array fragment case requir knowledg limit valu anoth array andor induct reason pip describ array access approx region one approach look heurist suggest two region describ true paramet even though exact make infer follow signal need revers engin check hand hypothesi base exampl seem reason suppos array fragment may sometim describ exact region one access point approx region anoth heurist work well code analys follow exact region approx region array lower limit lower limit array upper limit approx region greater equal exact region suppos two region describ array fragment heurist appli care ffl two differ candid exact region approx region heurist appli ffl region calcul take differ region calcul one approx paramet region r1 use anoth approx paramet region r2 heurist must appli r2 first ffl decid appli first implic heurist must propag back far possibl region recalcul result appli heurist exampl shown figur 6 note inapprox region besti1 prefix prxplo elimin revers engin must check hand whether precondit input variabl valu prchenn1 bound 1 prxplon call prxpl0 thu whether loop prxpl0 travers first ns element ipco ipc 6 comparison work relat work includ ffl work alia analysi although mostli address program written c array access notabl featur rather analysi pointer pose problem work 12 9 compar type infer lackwit system 8 aim work describ 12 9 flowinsensit pointer alia analysi c program 12 consid differ name differ subprogram memori locat pointer also differ name access path obtain c use pointer dereferenc structur field access defin relat two name may assign valu pointer subprogram call involv pointer refer memori locat point execut transit reflex symmetr closur relat gener equival relat name enabl partit code studi decid independ code fragment whether appli flowsensit pointer alia analysi use type infer nonstandard type system effici way realis flowinsensit pointer alia analysi c program type system type repres set variabl locat locat may point pointer type compo nent repres locat may point variabl type pointer locat type type compon type system thu repres graph storag shape graph type equal standard structur equal compon would obtain tag type 8 appli c program mlstyle 7 type infer type tag aim detect variabl represent ie type type infer rule give type two variabl one assign valu one instanti subprogram call howev ml formal paramet may polymorph sever type exploit similar alia analysi type infer use nonstandardtyp infer alia analysi use alia analysi determin nonpolymorph type formal subprogram paramet order construct algebra specif analysi specif adapt fortran base array region 7 conclus motiv work describ paper revers engin legaci fortran77 code order construct algebra specif fortran code need determin consist set type signatur sub program reli fortran declar analys actual paramet use subprogram call determin finergrain type formal paramet subprogram base oper use read write valu may take case formal paramet array valu assum whole array type therefor use static analysi characteris array region array fragment may realli travers subprogram determin type region travers fragment alway precis characteris repres must take account region overapproxim adopt conserv respons approxim region result mani type detect decid type merg use heurist check user first approxim version analysi implement extens pip tool offer precis interprocedur analysi array data flow acknowledg would like thank jerom ryckbosch edf give reallif problem work pip team ecol de mine particular beatric creusillet francoi irigoin fabien coelho corinn ancourt pierr jouvelot help thank also supervisor michel bidoit patient reread articl r array region analys applica tion interprocedur array region analys effici comput singl static assign form control depend graph semant interprocedur parallelis overview pip project theori type polymorph pro gram program understand tool base type infer experi revers engin use algebra specif algebra specif program decomposit pointer alias step toward practic analys tr compil principl techniqu tool semant interprocedur parallel algebra specif effici comput static singl assign form control depend graph pointsto analysi almost linear time program decomposit pointer alias interprocedur array region analys ctr ari van deursen leon moonen document softwar system use type scienc comput program v60 n2 p205220 april 2006