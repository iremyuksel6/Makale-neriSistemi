factor edgevalu binari decis diagram factor edgevalu binari decis diagram form extens edgevalu binari decis diagram associ addit multipl weight edg fevbdd use repres wider rang function concis result comput complex certain oper significantli reduc compar evbdd addit introduct multipl edg weight allow us directli repres socal complement edg use obdd thu provid one one map obdd fevbdd applic integ linear program logic verif propos evbdd also benefit extens also present complet matrix packag base fevbdd appli packag problem solv chapmankolmogorov equat b introduct past decad drastic increas integr vlsi chip taken place cons quentli complex circuit design risen dramat today circuit design reli sophist computeraid design cad tool goal cad tool automat transform descript algorithm behavior domain one physic domain ie layout mask chip product divid process four differ level system behavior logic layout logic level behavior circuit describ boolean function effici algorithm appli level depend larg chosen data structur origin represent sum product form factor form represent predomin today popular data structur boolean function order binari decis diagram obdd provid compact canon represent wake success introduct concept function graph obdd variou function graph propos constrain boolean function use denot arithmet function function graph use state reduct finit state machin logic verif higherlevel specif addit appli problem outsid cad integ linear program matrix represent sinc introduct obdd r e bryant 5 sever differ form function graph propos function decis diagram fdd present altern obdd repres boolean function 3 order kroneck function decis diagram okfdd introduc 10 gener obdd fdd multitermin binari decis diagram mtbdd 9 propos repres integ valu function extend function finit set 2 edgevalu binari decis diagram evbdd 121314 provid compact mean repres function recent binari moment diagram bmd bmd 7 introduc permit effici wordlevel verif arithmet function includ multipli 62bit word size paper present factor edgevalu binari decis diagram fevbdd extens evbdd associ addit multipl weight edg fevbdd use repres wider rang function concis result comput complex certain oper significantli reduc compar evbdd addit introduct multipl edg weight allow us directli repres complement edg use obdd paper also describ use fevbdd applic integ linear program logic verif matrix represent manipul 2 review edgevalu binari decis diagram edgevalu binari decis diagram propos lai et al 121314 offer direct extens concept obdd associ socal edg valu ev everi thenedg obdd capabl repres pseudoboolean function integ valu function applic proven success area formal verif integ linear program spectral transform function decomposit definit 21 evbdd tupl hc fi c constant valu f root direct acycl graph e consist two type vertic ffl nontermin vertex f 2 v repres quadrupl child f child e f evi variablef 2 fx binari variabl ffl singl termin vertex f 2 valu 0 denot 0 nontermin vertex f child child e f ev 0 two nontermin vertic f g g furthermor exist index function follow hold everi nontermin vertex child f also nontermin must child e f nontermin must definit 22 evbdd hc fi denot arithmet function c f function f denot evi termin node 0 repres constant denot arithmet function definit 21 22 provid graphic represent pseudoboolean function consequ integ variabl encod binari nbit integ variabl shown evbdd form canon represent function definit 23 given evbdd hc fi repres fx function f variabl x assign valu fx equal either 0 1 function evbddev defin c f termin node 0 child e fi f boolean arithmet tabl 1 arithmet equival boolean function boolean function repres evbdd use integ 0 1 denot boolean valu true fals boolean oper implement arithmet oper shown tabl 1 method describ lai et al convert obdd represent boolean function correspond evbdd represent proven function graph obdd v evbdd denot function f share topolog except termin node 1 absent evbdd edg connect redirect singl termin node 0 addit shown boolean oper execut evbdd time complex ojf j delta jgj boolean oper obdd concept complement edg realiz evbdd done obdd gener oper appli defin implement arbitrari arithmet oper evbdd represent two arithmet function f g gener time complex oper two evbdd flatten evbdd respect flatten evbdd defin exactli manner mtbdd oper addit subtract scalarmultipl etc time complex appli drastic reduc exploit certain properti scalar multipl c delta f done time complex ojhc f f ij simpli multipli edg valu c oper op addit fulfil addit properti reduc time complex ojhc f base evbdd concept structur evbdd sevbdd develop 14 sevbdd allow model condit express vector main use lie field formal verif 3 factor edgevalu binari decis diagram factor edgevalu binari decis diagram fevbdd extens evbdd associ addit multipl weight trueedg 1 fevbdd offer compact represent linear function sinc common subfunct differ affin transform express singl subgraph addit allow notion complement edg transfer obdd fevbdd definit 31 fevbdd tupl hc w f rulei c w constant valu f root direct acycl graph e consist two type vertic rule set weight normal rule appli graph ffl nontermin vertex f 2 v repres 6tupl 2 child f child e f ev w binari variabl ffl singl termin vertex f 2 valu 0 denot 0 definit branch lead 0 associ weight nontermin vertex f child two nontermin vertic f g g furthermor exist index function follow hold everi nontermin vertex child f also nontermin must child e f nontermin must definit 32 fevbdd denot arithmet function c f function f denot termin node 0 repres constant denot arithmet function definit 33 given fevbdd repres variabl x assign valu fx equal either 0 1 function fevbddev defin 1 gcd rule requir also multipl weight associ elseedg 2 use ration rule hold w node thu repres nontermin vertex 5tupl hvariablef child f child e f ev w c f f termin node 0 figur exampl construct variou function graph base differ decomposit function f given tabular form figur 1 2 9 3 y3 2 z equat 2 form directli correspond function decomposit mtbdd add tabular form equat 3 4 reflect structur decomposit rule evbdd fevbdd respect differ function graph shown figur 1 figur goe figur 3 goe figur 4 goe represent sign integ base fevbdd present figur 2 represent wordlevel sum product given figur 3 4 lemma 31 given two fevbdd gener use weight normal rule f g nonisomorph hold exist assign f 2 f0 1g n c f w f delta f 6 c g w g delta g assign proof case 1 c f 6 c g let case 2 c definit nonisomorph hold 9f consequ assign f case 3 c assum hold f g nonisomorph assign f impli w f g consequ f g isomorph contradict origin assumpt thu hold 9f c f g 2 theorem 31 two fevbdd gener use weight normal rule ie rule denot function ie c f g isomorph proof suffici c f g isomorph 8f directli definit isomorph fevbddev necess c f 6 c g let hold fevbddevalhc f let f arbitrari assign fevbddevalh0 hold fevbddevalhc f g isomorph hold definit isomorph fevbddev follow c f w f delta val 6 c g w g delta val f g nonisomorph lemma 31 hold noww prove lemma last condit f isomorph g need show f g isomorph 9f 2 f0 1g n fevbddevalh0 without loss gener assum indexvariablef indexvariableg let prove lemma induct k base g termin node furthermor g isomorph induct hypothesi assum hold induct show hypothesi hold case 1 ev f 6 ev g let fx ngammak hold ev g w f let f arbitrari assign fx ngammak hold fevbddevalh0 deltafevbddevalh0 g isomorph hold fevbddevalh0 val thu ev f w f g nonisomorph lemma 31 applic almost ident prove given ev w e f f e g e nonisomorph subcas 1 f g nonisomorph induct hypothesi see exist f fevbddevalh0 let f 0 defin f 0 subcas 2 otherwis f e g e nonisomorph similar argument let definit reduc fevbdd ev isomorph f e ev f 6 0 let fx ngammak fevbddevalh0 g independ first n gamma k bit ev let f assign fx ngammak indexvariableg furthermor let f fevbddevalh0 val f 6 0 fevbddevalh0 correspond subgraph f topvari x ngammak g isomorph hold val val g graph nonisomorph appli reason proof lemma 31 oth erwis f f e nonisomorph least one isomorph g f nonisomorph induct hypothesi exist assign f 1 f 0 hold fevbddevalh0 shown fevbdd form canon represent function specif weight normal rule uniqu determin node weight new node comput base descend propos two basic rule use guarante canon fevbdd given two fevbdd rule node weight w hc w f rulei comput follow 1 gcd rule 2 ration rule make new nodex hc f comput new weight guarante uniqu return tabl 2 make new node weight normal rule cf tabl appli whenev new node gener use make new node routin cf tabl 2 routin enforc canon function graph well uniqu routin find add preserv uniqu node new node actual creat quick hash tabl lookup perform node alreadi member tabl store node uniqu id return otherwis new node entri hash tabl creat new node uniqu id return thu guarante everi node store hash tabl although gcd rule requir multipl weight associ true elseedg case might rule choic function rang pure integ gcd rule avoid deal fraction particularli valuabl sinc arithmet oper fraction significantli time consum built hardwar routin integ furthermor restrict integ use gcd rule bring clear advantag memori effici even though need store addit weight memori consumpt per node less use ration rule requir use fraction everi fraction intern repres one integ numer one norm weightev w f case gcd els ifw 6 els returnsign case ration return els ifw 6 return els return ev break tabl 3 norm weight denomin cours soon applic requir use fraction ration rule prefer nevertheless gcd rule still applic sinc defin gcd u 31 oper done obdd 5 evbdd 14 provid gener algorithm appli implement arbitrari arithmet oper two fevbdd cf tabl 4 appli take two fevbdd rule g well oper op argument fevbdd base weight normal rule algorithm recurs branch top variabl ie variabl least index f g reach termin case termin case depend oper op exampl op termin case comput effici algorithm improv significantli take advantag comput cach recurs process start quick lookup comput cach perform success result op return immedi without comput entri cach uniqu identifi key consist operand oper op whenev new result comput store comput cach gener complex oper perform appli okhc ik mention improv comput complex appli make use properti specif oper adapt concept addit properti propos evbdd lai et al 14 extend socal affin properti fevbdd definit 34 oper op appli said satisfi affin properti factor w defin arbitrari valu 3 3 similar ration rule altern defin affin properti follow benefit affin properti remain check termin case iftermin return result op alreadi avail comput cach ifcomp tabl lookuphc rule g iophc an w an an rule an return hc an w an an rule an perform recurs comput op child g rulei els f child f rulei child e f rulei els f ge store result comput cach comp tabl inserthc return tabl 4 appli oper satisfi affin properti addit subtract scalar multipl logic bit shift main advantag affin properti lie reduc comput complex appli sinc separ comput part result gener constant c f c g two subgraph h0 w rulei hit ratio comput cach drastic increas separ influenc constant alway store result concept appli everi recurs step constant valu never pass next recurs level unfortun still pass multipl weight w f w g sinc separ function f g achiev improv hit ratio extract common divisor w w f w g promot w 0 f w 0 g advantag case reduc problem perform alreadi comput problem 0 quantifi influenc gcd extract worst case comput complex oper satisfi affin properti given ojhc f evbdd correspond fevbdd respect scalar multipl logicalbit shift offer better comput complex sinc comput time independ size function graph scalar multipl requir weight root node multipli case evbdd multipli everi edg weight scalar task complex ojf j sinc multipl satisfi affin properti basic requir use origin version appli multipl two function high percentag reconverg branch follow approach tend improv cach effici ojhc call multipli everi call requir three call appli ad separ term first addit costli sinc first term alway constant howev second third addit potenti costli addit addit properti two properti bound properti domainreduc properti introduc lai et al 14 12 done addit properti properti easili adapt fevbdd 32 represent boolean function boolean function repres fevbdd encod boolean valu true fals integ 1 0 respect basic boolean oper easili repres use arithmet oper thu easili repres boolean function use fevbdd although could implement boolean oper base correspond arithmet function far better term comput complex directli use appli boolean oper need provid necessari termin case applyhc boolean op case boolean conjunct oper exampl termin case 1 2 3 ifhc convert boolean function obdd fevbdd represent adapt algorithm suggest lai 14 addit concept multipl weight allow us directli repres call complement edg need take care case algorithm 1 convert termin node 0 h0 0 0 rulei 1 h1 0 0 rulei 2 nontermin node hx ei obdd e alreadi convert fevbdd follow convers rule appli 3 branch lead fromnod hx ei e complement edg perform complement comput e respect achiev multipli weight c c e w w e gamma1 later ad 1 c c e four basic convers rule list convers rule complet case fevbdd sinc also variat multipl weight either 1 gamma1 case howev handl exactli accord norm weight rule present explicitli list done evbdd 14 shown follow theorem hold theorem 32 given obdd represent v boolean function complement edg allow fevbdd topolog except termin node 1 absent fevbdd v 0 edg connect redirect termin node 0 theorem 33 given two obdd f g complement edg allow correspond fevbdd time complex boolean oper fevbdd use appli ojfj delta exampl fevbdd repres boolean function complement edg given figur 5 fevbdd repres four output function 3bit adder topolog except termin edg correspond obdd depict figur shown exampl fevbdd success extend use evbdd repres boolean function inher offer way repres complement edg furthermor boolean oper perform constant time sinc requir manipul weight root node figur 5 goe 33 logic verif purpos logic verif formal prove actual implement satisfi condit defin specif done formal show equival combin circuit ie descript design specif intend behaviour gener implement repres array boolean function f b specif given wordlevel function fw order transform bitlevel represent wordlevel use encod function encod binari input signal circuit set input signal partit sever subset binari signal x everi array x encod use encod function encod provid wordlevel interpret binari input signal common encod function signedinteg onescompl twoscompl correspond fevbdd shown figur 2 thu implement describ array boolean function f b specif given wordlevel function fw x verif done prove equival encod binari output signal circuit ie array boolean function wordlevel function encod input signal encod f b strategi logic verif first propos lai et al use evbdd 1214 sinc fevbdd describ bitlevel wordlevel function success appli logic verif although wordlevel oper repres fevbdd space complex certain oper becom exponenti applic limit small wordlength evbdd fevbdd represent wordlevel multipl exponenti fevbdd howev offer signific save memori consumpt evbdd seen figur 4 wordlevel multipl two threebit integ evbdd contain 28 intern node wherea fevbdd represent requir 10 node gener evbdd denot multipl two nbit integ n node correspond fevbdd contain n node ratio evbdd node fevbdd node n1 seen ratio save number node fevbdd represent order n exampl 16bit multipli requir 1114095 evbdd node 65551 fevbdd node even take account fevbdd node requir 20 byte versu 12 byte per evbdd node save remain signific evbdd133 mbyte fevbdd 13 mbyte done evbdd 14 fevbdd also extend structur fevbdd allow model condit express vector 34 integ linear program algorithm fgilp solv integ linear program ilp problem base evbdd propos lai et al 15 fgilp realiz ilp solver base function graph use mix branchandboundimplicitenumer strategi shown approach success compet branchandbound strategi requir solut correspond linear program problem latter strategi one wide appli commerci program ilp problem formul follow minim subject x integ sinc evbdd fevbdd allow binari decis variabl encod shown figur 2 appli 32bit integ exampl repres evbdd fevbdd node sinc fevbdd form extens evbdd also appli fevbdd solv ilp problem expect reduct memori requir fgilp use fevbdd due fact differ multipl integ variabl x appear equat 5 6 use evbdd repres multipl x build evbdd everi differ coeffici ij sinc scalar multipl evbdd perform multipli edg weight factor use fevbdd howev store fevbdd repres x multipl x easili realiz associ correspond multipl edg weight dangl incom edg lead x exampl store 6x 7x 5x requir 96 node use evbdd node appli fevbdd 35 implement arbitrari precis arithmet introduct multipl weight combin ration rule weight normal make necessari extend valu rang edg weight integ domain ration domain done way futur expans domain complex domain easili achiev oper edg weight access standard interfac invok specifi function execut request oper depend current mode thu fevbdd code remain fulli independ select domain chang anoth mode easili switch integ domain ration domain exampl mean still use fast routin singl precis integ necessari multipl precis integ realiz array integ arithmet oper implement base algorithm multipl precis arithmet given knuth 11 multipl precis fraction implement array two multipl precis integ one integ repres numer one denomin enforc packag numer denomin remain rel prime numer sign achiev comput greatest common divisor gcd numer denomin divid numer denomin gcd oper perform whenev input given intern data guarante remain normal form form strictli enforc oper thu ration valu alway uniqu repres numer denomin gcd comput fast euclid algorithm binari gcd algorithm 11 multiprecis fraction use binari gcd algorithm sinc work fast integ multipl word length reli subtract right shift requir divis oper singl word precis fraction employ classic version euclid algorithm sinc divis execut effici singl word integ basic arithmet oper fraction realiz follow ffl multipl ffl divis u ffl addit 351 symbol oper finit field fevbdd constrain integ valu function one alreadi see use ration rule easili repres function ration function valu complex valu also feasibl addit use symbol comput even though valu rang extend use ration complex edg weight decis variabl still binari thu want repres linear function contain variabl valu rang encod binarili done integ gener approach lead mean repres function finit field fevbdd propos add 2 case fevbdd gener repres function phi fi denot oper finit field ite oper act switch either select subfunct denot true elseedg contrari add approach exploit relationship subgraph 4 matrix represent manipul matric success repres use mtbdd 8 9 add 2 implement basic matrix oper addit multipl given popular class matric effici repres mtbdd evbdd class walsh matric gener recurs rule 41 represent matric basic idea use function graph repres matric encod row column posit matrix element use binari variabl 8 theta 8 matrix exampl requir 3 binari variabl row anoth 3 column basic view problem repres theta n matrix repres function finit set element posit finit set r element binari variabl give row posit call row design x 2 fx g one denot column posit call column design 2 fy g impos variabl order row column design mix togeth order g chosen variabl order subtre function graph directli correspond submatric given matrix seen figur 6 base correspond pseudoboolean function denot matrix given easili fm xy figur 6 goe furthermor order allow matric repres compactli submatric ident mtbdd transform affin transform 4 fevbdd sinc concept squar matric ie vertic size keep mani algorithm effici simpl consid squar matric maxmn make nonsquar matric squar easili pad row column fill zero significantli increas memori consumpt store matrix sinc pad block uniform therefor repres node alreadi mention mtbdd offer compact memori effici represent matric featur ident subblock requir differ termin node distinct matrix element fevbdd far better concept fevbdd allow two subblock repres subgraph differ affin transform element introduc special class matric alway repres fevbdd linear size class matric size correspond mtbdd evbdd bmd like exponenti definit 41 recursivelyaffin matrix recurs gener use follow rule 1 begin 1 theta 1 matrix integ ration constant valu 2 everi recurs step new matrix n1 creat base previou result n arbitrari integ ration number 4 affin transform transform form figur 7 show gener structur fevbdd correspond recurs step build recurs affin matrix everi recurs step structur shown figur 7 ad alreadi construct fevbdd figur 7 goe seen figur 7 need 3 node repres recursivelyaffin matrix size n x n exampl recurs affin matrix build figur 8 fevbdd matrix given 9 5 26 22 64 figur 8 goe import class matric belong famili recursivelyaffin matric set walsh matric hadamard order 17 matric use comput spectral transform boolean function recurs defin follow figur 9 show fevbdd evbdd represent walsh matrix h h 3 seen figur 9 size fevbdd represent 2 delta n n denot order walsh matrix size evbdd represent 4 figur 9 goe gener speak employ function graph mtbdd fevbdd repres spars matric offer follow advantag 1 comparison normal spars data structur function graph provid uniform log 2 n access time n number real element store function graph exampl nonzero element spars matrix 2 function graph may abl beat sparsematrix data structur term worst space complex howev recombin isomorph subgraph may give consider practic advantag function graph data structur particularli valid fevbdd sinc subgraph repres matric gener affin transform matrix repres subgraph 42 oper oper matric divid two major group first group compris termwis oper scalar multipl addit etc second group form matrix multipl matrix transpos matrix invers termwis oper easili implement base function graph simpli use appli comput termwis oper matric obvious possibl sinc applyop perform oper op everi singl function valu ie work termwis manner matrix specif oper transposit requir tailor algorithm matrix multipl clearli nontermwis oper sinc requir comput scalar vector product row left matrix column right matrix get valu singl matrix element product matrix therefor present two differ recurs procedur perform matrix multipl function graph first method propos mcgeer 9 algorithm direct link common convent method matrix multipl everi recurs step problem divid four subproblem termin case reach step operand expand regard pair row column design expans even take place function graph actual depend current pair intern variabl need scale step necessari second method let matrix multipl denot matrix addit method formal state written term matrices4 h xy h xy f xz f xz5 4 g zy g zy zy g zy5 comput perform everi recurs step obvious method requir eight call matrix multipli four call matrix add everi recurs step ie everi intern variabl pair second method propos bahar 2 unlik previou method expand top variabl two operand ffx g process matrix multipl follow variabl order impos decid whether top variabl f g select top variabl expans depend charact expans variabl var one follow comput made everi recurs step approach expand intern variabl actual encount function graph f g requir keep track miss z variabl f g sinc everi z expans step correspond perform matrix addit p give number omit z expans two recurs step scale result 2 p return use cach alway store unscal result scale entri accordingli read cach anoth method propos clark 9 basic idea take product first comput sum matrix packag implement second method appear superior two 2 implement two differ version method version 1 pass valu edg weight everi recurs step matrix multipli okfk delta kgk complex done multipl two fevbdd suggest second version function graph high ratio reconverg branch eg recursivelyaffin matric follow f oper rowadd coladd gener matric 0i complex ojf j second version requir ojf j delta jgj call matrix multipli everi recurs call matrix multipli also requir three call matrix add improv cach effici matrix multipl consider operand repres fevbdd high ratio reconverg branch outweigh ad overhead three call matrix add case better use origin approach sinc requir addit overhead matrix transposit perform exchang role column row design belong expans level maintain impos variabl order node function graph exchang suffici interpret row column design vice versa transposit done ojf matrix invers done perform gaussian elimin origin matrix ident matrix time word solv system linear equat use pivot row transform step requir gaussian elimin consist 19 ffl select partial pivot everi step j ja pj ffl normal select row multipli row invers pivot 1 ffl swap row j p accord pivot select subtract multipl pivot row j row j oper except row swap implement effici time ojaj ojaj delta jrj r denot fevbdd repres pivot row row swap perform matrix multipl matrix permut matrix p therefor complex permut matric obtain denot permut matrix swap row j repres ident matrix ij design matrix rs rs gener partial pivot done order improv numer accuraci gaussian elimi nation sinc implement reli fraction arbitrari precis alway use exact valu numer stabil issu order avoid unnecessari row swap perform partial pivot hold step j addit basic matrix oper fast search oper specif matrix element implement algorithm search valu posit minim maxim absolut maxim element given matrix develop approach make use min max field associ everi node comput complex find valu posit minim maxim element n theta n matrix olog 2 dne explain basic idea behind algorithm case search maxim element given fevbdd node f two successor f f e easili determin edg lead maxim element base valu max min field f f e simpli recomput max field f select successor origin gener max field f valu maxim minim element interest comput directli min max field top node f without comput valu evbdd fevbdd rang gcd ration integ 12 byte 20 byte 24 byte fraction tabl 5 memori requir per node 43 experiment result appli fevbdd base matrix packag problem solv chapmankolmogorov equat 18 aris comput global state probabl fsm though memori consumpt invers routin rel low 8m invert 64x64 matrix run time high due sever factor first algorithm gaussian elimin pure sequenti wherea fevbdd recurs defin consequ comput cach matrix invers exist recurs algorithm matrix invers perform much better fevbdd secondli use fraction arbitrari length oper need substanti time necessari ordinari integ therefor use obtain invers primarili exampl real life nonspars matric repres compactli use fevbdd compar evbdd represent seen tabl use fevbdd give save 50 compar evbdd number node requir repres nonspars invers cours one consid storag requir per node higher fevbdd evbdd overview memori usag per node variou mode avail evbdd fevb dd given tabl 5 assum everi evbdd node consist integ fraction edg valu two pointer children everi fevbdd node consist two fraction edg weight two pointer ration mode three integ edg weight two pointer gcd mode total memori consumpt store matric use evbdd fevbdd shown tabl 6 7 respect given memori usag base evbdd fevbdd use fraction fevbdd gener use ration rule case ck equat use fraction edg weight sinc matrix element fraction seen tabl fevbdd better invers lose origin matric term total memori consumpt due fact origin matric spars wherea invers nonspars case spars matric addit properti fevbdd exploit evbdd fevbdd perform similarli number node fevbdd howev lose term memori requir higher cost per fevbdd node sinc evbdd least good mtbdd also give idea perform fevbdd compar mtbdd 5 conclus show associ addit multipl weight edg edgevalu binari decis diagram evbdd could success extend factor edgevalu binari decis diagram new data structur preserv canon properti evbdd allow effici cach oper result properti defin evbdd could adapt fevbdd addit properti extend affin properti shown fevbdd provid compact represent arithmet function evbdd addit complex certain oper could reduc significantli show fevbdd repres boolean function allow us incorpor concept complement edg origin propos obdd furthermor show evbdd base integ linear program solver fgilp benefit use fevbdd instead evbdd combin fevbdd packag also implement arithmet packag suppli arithmet oper integ fraction arbitrari precis complet matrix packag base fevbdd introduc appli packag solv chapmankolmogorov equat experiment result show major case fevbdd win correspond evbdd represent matric term number node memori consumpt acknowledg author like thank yt lai suppli evbdd packag mani help discuss r binari decis diagram al gebraic decis diagram applic relat bdd fdd effici implement bdd packag graphbas algorithm boolean function manipul symbol boolean manipul order binarydecis diagram verif arithmet function binari moment diagram spectral transform larg boolean function applic technolog map multitermin binari decis diagram effici data structur matrix represent effici represent manipul switch function base order kroneck function decisiond diagram art comput program volum 2 seminumer algorithm edgevalu binari decis diagram multilevel hierarch verif vrudhula evbddbas algorithm integ linear program spectral transform function decomposit edgevalu binari decis diagram vrudhula fgilp integ linear program solver base function graph represent switch circuit binarydecisionprogram fast transform algorithm analys applic first cours probabl introduct numer analysi factor edgevalu binari decis diagram applic matrix represent manipul tr graphbas algorithm boolean function manipul effici implement bdd packag symbol boolean manipul order binarydecis diagram edgevalu binari decis diagram multilevel hierarch verif spectral transform larg boolean function applic technolog map algebra decis diagram applic art comput program volum 2 3rd ed fast transform formal verif use edgevalu binari decis diagram verif arithmet function binari moment diagram ctr rolf drechsler bernd becker stefan ruppertz kbmd new data structur verif proceed 1996 european confer design test p2 march 1114 1996 rolf drechsler wolfgang gnther stefan hreth minim wordlevel decis diagram integr vlsi journal v33 n1 p3970 decemb 2002