persist rescheduledpag cach low overhead object code compat vliw architectur objectcod compat processor gener open issu vliw architectur potenti solut techniqu term dynam reschedul perform runtim softwar reschedul firsttim page fault time requir reschedul page constitut larg portion overhead method disk cach scheme use persist rescheduledpag cach prc present scheme reduc overhead associ dynam reschedul save reschedul page disk across program execut oper system support requir dynam reschedul manag prc implement detail prc discuss result simul use gaug effect prc indic prc effect reduc overhead dynam reschedul due differ overhead requir program split prc organ perform better unifi prc unifi prc studi two differ page replac polici lru overheadbas replac found lru replac program consist perform better increas prc size highoverhead program take consist perform hit compar lowoverhead program overheadbas replac perform highoverhead program improv substanti lowoverhead program perform slightli wors case lru replac b introduct unlik contemporari superscalar processor 1 2 3 employ dynam schedul vliw processor de publish proc 29th annual intl symp microarchitectur pari 1996 pend schedul code gener compil compil full knowledg machin model describ term hardwar resourc avail latenc relat execut resourc correct execut program schedul one machin model assumpt guarante processor exactli machin model superset assumpt strictli held thu program schedul particular gener vliw famili guarante binari compat gener known objectcod compat problem vliw architectur 4 lack objectcod compat commonli cite reason vliw may becom generalpurpos comput paradigm 5 solut problem suggest classifi hardwar softwar approach hardwar techniqu typic employ schedul hardwar 6 7 4 8 9 could substanti increas hardwar complex machin common softwar approach offlin recompil sourc program yield excel perform compil access necessari inform expos ilp program drawback techniqu cumbersom use access sourc code may alway po sibl variant offlin objectcod translat practic sourc code unavail larg set program older architectur exist 10 altern interpret could use translat architectur runtim 11 approach usual suffer poor perform anoth approach dynam reschedul 12 techniqu program binari schedul target machin model vliw gener allow directli execut gener vliw execut proce pagefault gener program instruct space result special action page fetch reschedul machin model target gener perpag reschedul perform first instanc pagefault occur ie firsttim page fault page code consid atom unit reschedul implement techniqu requir support oper system specif page fault servic routin extra time incur reschedul constitut overhead techniqu paper present scheme reduc overhead associ dynam reschedul cach ondisk reschedul code perpag basi employ structur call persist rescheduledpag cach prc hold reschedul page across multipl execut pro gram organ paper follow section 2 review previou work objectcod compat explain dynam reschedul present perform measur code subject dynam reschedul section 3 introduc prc part oper systemmanag disk cach scheme reduc overhead dynam reschedul architectur manag prc detail experiment result measur perform present section 4 present conclus studi avenu futur work compat dynam reschedul sever hardwar approach report previous address vliw compat problem rau present techniqu call splitissu perform superscalar style dynam schedul code hardwar 4 fill unit origin propos melvin shebanow patt 6 later extend franklin smotherman 8 adapt achiev limit level compat vliw approach counter principl hardwar simplic one tenet vliw philosophi obviou altern offlin recompil reschedul techniqu advantag term perform extrem cumbersom use owe offlin na ture similar offlin binari translat use migrat vax softwar alpha platform 10 runtim softwar emul also use implement insignia solut softwindow product 13 approach employ emul translat techniqu util fx32 product dec 14 may investig use interpret execut ibm system370 binari ibm rt pc 11 solut attempt achiev compat wide vari architectur although larg differ probabl exist gener vliw famili techniqu use still interest interpret use cach translat section code across execut mean reduc amount translat need disk storag use cach translat code cach intuit effect techniqu reduc runtim translat overhead howev major literatur translat contain detail manag cach code segment reschedul firsttim page fault context switch overhead24 figur 1 sequenc event dynam reschedul event 13 detect page fault gener mismatch context switch process retriev page disk respect event standard overhead dynam reschedul event 4 page dynam reschedul anoth techniqu compat dynam reschedul dr 12 firsttim pagefault os invok modul call dynam reschedul reschedul page access host machin model sequenc event dynam reschedul illustr figur 1 detect firsttim page fault shown event 1 event 1 2 3 alway take place page fault case dynam reschedul howev treat special page fault indic event 4 program binari contain complet descript machin origin com pile page fault handler detect gener mismatch host machin program reschedul modul invok page reschedul program execut resum reschedul page select replac physic memori program ter minat written text swap space 15 16 elimin need reschedul page reaccess net overhead dynam reschedul techniqu quantit express term follow three factor 1 time spent reschedul page runtim 2 time write reschedul page text swap page replac 3 amount disk space use save reschedul page time disk io page replac negligiblea write swap perform asynchron 15 true overhead reduc time reschedul disk space requir save reschedul page dynam reschedul perform code motion would give rise code size chang due compens code may insert andor delet sinc straightforward handl chang code size dynam dr framework avoid size chang altogeth via special binari encod elimin explicit use nop code discuss issu involv therein found 12 beyond scope paper playdoh 17 vliw architectur hewlettpackard laboratori use testb paper also assum modif dr framework made instruct space program selfmodifi code 21 perform dynam reschedul effect dynam reschedul measur use program specint92 suit 1 sever unix util program 12 expand order construct interact load benchmark divid two categori tool cccp compress gcc grep tbl applic espresso eqntott li lex sc yacc assum tool would invok twice often applic would pattern workload two set input use benchmark altern invoc benchmark use assumpt sever workload creat use measur perform benchmark without dynam reschedul three machin model use evalu perform benchmark situat requir dynam reschedul gener 1 2 3 organ shown figur 2 type function unit shown horizont execut latenc assumpt shown vertic unit pred use perform predic comput integ compar oper ation predic comput fp compar oper done fpadd unit three part method use evalu dynam reschedul techniqu first part intermedi code benchmark schedul given machin model use vliw schedul hyperblock schedul use initi compil 18 intermedi code profil order find worstcas estim execut time term number cycl number time page code access also record also indic uniqu perform characterist none fp program presenc prc present reschedul softwar pipelin loop yet implement current dynam reschedul framework code page access call nativ mode experi second part code schedul nativ mode execut reschedul machin model execut time estim reschedul code also gener describ time estim indic perform reschedul code without take account reschedul overhead incur reschedul henc part term overhead experi aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa latenc fu generation2 aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaaaaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaaaaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaaaaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa generation3 aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa ialu fpadd fpmul pred load store branch figur 2 simul machin model third part reschedul compil schedul machin model use first part use benchmark input reschedul benchmark page taken benchmark perform reschedul benchmark use find averag time reschedul singl 4k page three machin model found 54272 cycl generation1 51200 cycl generation2 48108 cycl generation3 combin number uniqu page access first part experi estim total number execut cycl reschedul overhead reschedul overhead ad execut time nooverhead experi deriv execut time woverhead experi final compar perform achiev three part speedup respect singleunit singleissu processor model base model calcul speedup number cycl execut estim experimentnumb cycl execut estim base model three part assum page size 4k byte use mani contemporari oper system 19 20 processor 21 3 result three part shown figur 3 harmon gn ov g3 speedup nativ code genn gn gn ov nooverhead speedup genn code translat genm withoverhead speedup genn code translat genm ov ov ov ov g12 ov g12 ov g13 ov g13 ov figur 3 speedup program dynam reschedul framework bar harmon mean speedup benchmark specif generationtogener reschedul set bar identifi xaxi gnm label indic code origin schedul generationn reschedul generationm first bar set nativ perform generationm remain bar show reschedul perform without overhead due dynam reschedul observ nooverhead speedup reschedul benchmark code mark ov compar perform nativ compil code nat gn promin perform degrad reschedul overhead taken account ov domin time page fault handl time spent read page disk execut store local machin page access lan common clientserv environ network latenc domin factor least order magnitud local disk access time spent reschedul page add page access latenc get estim much overhead dr would add page fault handl local page environ experi conduct measur pagefault servic time page set contigu block local disk sar perform analysi tool 22 use measur averag page fault servic time two hardwar platform found 2500 2 averag total 50 pagefault base averag execut time 100 mhz machin dynam reschedul increas page fault servic time 20 signific increas reschedul 4 kilobytepag with64bit oper generation2 code generation1 code exampl would take 54272 cycl time 10 ns approxim 543 20 averag pagefault servic time measur appar case page lan rel overhead dr lower probabl small enough complet neglect two approach use reduc overhead dr 1 improv perform dr algorithm 2 reduc number page requir reschedul multipl invoc program second compon focu investig paper os save reschedul page text swap program swap execut reschedul page effect cach disk program current execut extend concept os aid cach reschedul page singl program execut across multipl program execut well follow section introduc ossupport cach scheme achiev cach persist rescheduledpag cach signific overhead introduc dynam reschedul larg allevi use cach scheme employ persist reschedul page cach prc prc osmanag disk cach hold binari imag reschedul page reschedul page cach need reschedul reaccess across program run prc defin behavior program execut program termin duringexecut reschedul page store text swap space program termin reschedul page written prc page placement replac polici implement within os concept behind persist rescheduledpag cach origin softwaremanag disk cach proven method reduc io traffic 15 16 idea cach recent access disk block memori hope access near futur typic unix system implement file system buffer cach run 133 mhz pentiumbas data gener comput run dgux 99 mhz hewlettpackard 9000715 comput run hpux hold recent access disk block memori use lru algorithm replac 15 16 buffer cach effect oper fragment page cach also reduc amount io page fault 3 variant use distribut file system sprite 23 andrew 24 purpos remot file cach disk cach also use reduc translat overhead architectur interpret 11 use effect dynam reschedul 31 persist rescheduledpag cach prc organ systemwid cach portion file system hold reschedul page manag os page differ program displac case primari configur paramet prc size placement replac polici discuss initi program execut nonn host text page reschedul firsttim page fault describ section 2 reschedul page displac physic memori program execut written text swap space disk prevent reschedul page multipl time program execut end initi execut reschedul page written prc page placement polici explain shortli subsequ execut page fault occur text page gener mismatch prc probe check presenc reschedul version page reschedul version present retriev load physic memori overhead reschedul incur reschedul version avail page retriev binari imag program reschedul load physic memori page replac program execut written text swap space program termin reschedul page program written prc reschedul page place entri cach impli cach effect fulli associ replac polici lru outlin algorithm use prc manag shown figur 4 probe prc disk presenc page expens oper elimin modifi program disk block pointer execut program exit page reschedul subsequ written prc program termin separ set disk block pointer prc pointer program set point reschedul version page cach prc pointer annot indic origin page reschedul page replac scheme implement prc probe examin program disk block pointer 3 term fragment use disk block compris page might buffer cach time load program reschedul page exist set page tabl entri disk address prc run program program termin write reschedul page prc need displac lru page prc updat program prc disk block pointer point prc updat prc pointer point program file data structur figur 4 persist rescheduledpag cach manag algorithm one central locat rather multipl locat prc disk disk block pointer cach os reduc number disk probe reschedul version page access without probe prcon disk perhap withoutani disk access program disk block pointer inmemori cach reschedul page store swap program execut manag os use known method manag text swap space 15 probe multipl prc pointer page fault also elimin program load time disk block prc pointer program examin determin reschedul version page exist prc page reschedul version loader modifi page tabl entri pte page point reschedul version page fault occur page reschedul version reschedul version access directli use updat pte disk access inmemori search requir implement prc probe pte page point prc reschedul version exist remap pte entri done program load time 15 16 reschedul page displac use prc due replac prc pointer displac page must nullifi accomplish os support tabl maintain prc manag list locat prc pointer associ page cach page replac prc pointer set null 32 prc perform figur 5 present perform prc differ size reschedul across four generationtogener prc infinit prc0 prc32 prc64 prc128 prc256 prc512 prc1024 figur 5 speedup benchmark prc perform unifi prc lru replac bar harmon mean speedup benchmark particular generationtogenerationreschedul prc size set bar identifi xaxi gnm label indic code origin schedul generationn reschedul generationm first bar set bar nooverhead perform second bar worstcas overhead prc subsequ bar perform indic prc size maximum number page cach hold combin metric use speedup singl universalunit singleissu processor set bar show harmon mean speedup reschedul combin variou prc size indic prcn mean prc size n page prcinfinit indic perform reschedul uniqu page access perform initi invoc essenti prc without upper bound size prcinfinit speedup nooverhead case speedup mention section 21 prc0 indic perform prc use page uniqu access program reschedul invoc provid measur worstcas overhead reschedul page displac page prc base lru replac polici organ call unifi prc perform reschedul combin benefit use prc trend larger prc12345 008espresso 022li 023eqntott 026compress 072sc 085gcc cccp tbl grep lex yacc prc infint prc0 prc32 prc64 prc128 prc256 prc512 prc1024 figur 6 generation1 generation3 reschedul unifi prc lru replac bar speedup generation1 generation3 reschedul specifi prc size set bar correspond individu benchmark indic label xaxi first bar set bar nooverhead perform second bar worstcas overhead prc subsequ bar perform indic prc size prc size maximum number page cach hold provid greater speedup note prc1024 perfect speedup equal prcinfinit case achiev happen total number page workload less size prc program complet resid prc size without requir reschedul prc popul benchmark benefit equal presenc prc illustr figur 6 present speedup individu benchmark generation1 generation3 reschedul benchmark 008espresso 023eqntott 026compress show small improv even larg prc other cccp tbl grep show substanti improv increas prc size moder improv shown 022li 072sc 085gcc lex yacc reason behind behavior explain use overhead ratio metric program overhead ratio defin tabl 1 uniqu page count benchmark 026compress 8 cccp 34 tbl 50 lex tabl 2 overhead ratio generation1 generation3 reschedul overhead ratio overhead 008espresso 435 low 022li 1052 moder 023eqntott 064 low 026compress 125 low 072sc 629 moder 085gcc 1750 moder cccp 5009 high tbl 6415 high grep 2910 high lex 1651 moder e execut time program r total reschedul overhead uniqu page count program avg time requir reschedul page uniqu page count program defin number firsttim page fault occur execut program valu uniqu page count shown tabl 1 tabl 2 show percentag valu overhead ratio generation1 generation3 reschedul high overhead ratio 20 case indic amount time taken reschedul rel high program benefit use prc cccp tbl grep shown term highoverhead pro gram program show least perform improv overhead ratio rel small less 5 program term lowoverhead program 008espresso 023eqntott 026compress other 022li 072sc 085gcc lex yacc valu 5 20 refer moderateoverhead program unifi prc low moderateoverhead program evict highoverhead program complet uniqu page count larg thu exampl even uniqu page count highoverhead program cccp small 35 case moderateoverhead program 085gcc replac page alloc cccp uniqu page count rel high 323 case two program run altern fashion one would expect one c preprocessor c compil number page cccp reschedul could sizabl thu increas overhead especi smaller prc size better organ prc reduc effect present next 33 split prc program behavior presenc prc vari directli program overhead ratio one approach partit cach hold page differ class program base program overhead ra tio prevent cach pollut benchmark benefit littl prc displac page program whose perform substanti enhanc prc osgath statist dynam use comput overhead ratio program determin prc partit program use os need record uniqu page count program execut time along averag time take reschedul page purpos prc two partit label 2way split prc one partit hold low moderateoverhead program exclus use high overhead program figur 7 present result prc across variou generationtogener reschedul ing prc size partit size though requir partit size vari depend program uniqu page count perform practic generationto gener reschedul combin improv use 2way split prc unifi prc particular generation1 generation3 reschedul use prc 512 speedup 91 speedup use infinit prc infinit prc correspond nooverhead experi describ section 21 gener 1 generation2 reschedul also show improv split cach particularli prc256 prc512 gener trend larger prc perform better expect speedup individu benchmark 2way split prc generation1 generation3 translat shown figur 8 highoverhead benchmark fare well compar perform unifi prc figur 6 low perform smaller prc size compet other prc infinit prc0 prc32 prc64 prc128 prc256 prc512 prc1024 figur 7 speedup prc perform 2 way split prc lru replac partit also observ cach pollutioneffect still persist substanti reduc exampl observ improv perform cccp tbl compar unifi prc prc size base experi nway split cach page per partit would better unifi cach entri actual implement prc partit much granular os allow 34 unifi prc overheadbas replac ment anoth techniqu reduc cach pollut effect observ unifi prc use overheadbas prc page replac polici instead lru work follow page prc associ overhead ratio program page belong page allow replac anoth page prc unless overhead ratio higher overhead ratio page replac polici ensur highoverhead program stay prcresid place prc prioriti use prc govern overhead ratio higher overhead ratio higher prioriti consequ low moder overhead program incur higher reschedul overhead sinc rel less number page get cach vocat intuit scheme similar multipl dynam resiz partit within prc135 008espresso 022li 023eqntott 026compress 072sc 085gcc cccp tbl grep lex yacc prc infint prc0 prc32 prc64 prc128 prc256 prc512 prc1024 figur 8 generation1 generation3 reschedul 2way split prc lru replac figur 9 show perform individu benchmark generation1 generation3 translat scheme observ top three highoverhead program cccp tbl grep perform much better replac polici lru figur 6 show perfect speedup prc size 128 low speedup small prc size due larg number capac miss hand rest program show decreas albeit small perform smaller prc size compar lru larger prc perform howev improv 4 base fact smaller prc size encount larg number capac miss effect displac prc incur larger reschedul overhead case 008espresso 022li 023eqntott 026com press 072sc lex howev littl perform gain prc size explain consid case lex lex rel small uniqu page count 45 refer tabl 1 compar 323 085gcc overhead ratio 1651 howev slightli lower 085gcc 1750 refer tabl 2 lex get displac prc everi invoc 4 mention earlier programshav perfect speedup prc 1024 larg enough hold entir workload throughout experi 008espresso 022li 023eqntott 026compress 072sc 085gcc cccp tbl grep lex yacc prc infint prc0 prc32 prc64 prc128 prc256 prc512 prc1024 figur 9 generation1 generation3 reschedul unifi prc overheadbas replac 085gcc incur overhead reschedul page subsequ invoc specul impact phenomenon may reduc 085gcc allow displac program invok rel remot past combin lru overheadbas scheme may prove effect case topic futur research nonetheless program 008espresso 022li 023eqntott 026compress 072sc lex low moderateoverhead overal perform across program better previou two scheme appar figur 10 compar perform unifi prc lru replac figur 5 2way split prc lru replac figur 7 overheadbas replac perform better across prc size gener perform trend observ overheadbas replac polici confirm intuit prioriti use prc dictat overhead ratio objectcod compat problem vliw approach either softwar hardwar method a152535 prc infinit prc0 prc32 prc64 prc128 prc256 prc512 prc1024 figur 10 speedup prc perform unifi prc overheadbas replac techniqu call dynam reschedul use oper system support reschedul program pagebypag basi firsttim page fault review overhead techniqu time requir reschedul space requir save reschedul page number time page reschedul reduc save reschedul version disk across program execut persist rescheduledpag cach introduc part scheme save reschedul page use disk cach prc reduc number time page reschedul across multipl program execut architectur manag prc describ specif use implement systemwid share prc investig unifi cach simul measur perform conclus drawn prc gener effect reduc overhead associ dynam reschedul effect vari across program depend overhead ratio associ program identifi highoverhead program effect displac low overhead program prc depend invoc pattern workload partit cach organ introduc classifi program base overhead ratio bipartit scheme call split prc simul found improv perform unifi prc third scheme overheadbas page replac polici implement unifi prcand found perform highoverhead program improv substanti compar two previou scheme lowoverhead program fare slightli wors previou scheme futur research deal prc investig use cach organ exampl determin number partit ideal split prc investig perprogram prc structur underway also studi combin algorithm page replac ment base lru overheadbas scheme conduct acknowledg discuss mari ann hirsch kishor menez rest tinker group prove use develop idea paper mari ann hirsch also help collect data data gener machin research support nation scienc foundat grant mip9696010and mip9625007 addit research fund intel corpor hewlettpackard intern busi machin corpor especi thank univers illinoi impact group use impact compil comment anonym refere also appreci r tune pentium pro microarchitectur architectur pentium micro processor power powerpc dynam schedul vliw processor hardwar support larg atom unit dynam schedul machin architectur framework support heteregen instructionset architectur fillunit approach multipl instruct issu architectur framework migrat cisc higher perform platform binari translat mimic fast system370 simul dynam reschedul techniqu object code compat vliw archi tectur softwindow unix alpha run x86 code fx32 design unix oper sustem hpl playdoh architectur specif version 10 effect compil support predic execut use hyperblock concept system administr r9 data gener englewood cliff data gener cach sprite network file system andrew distribut person comput environ tr andrew distribut person comput environ design unix oper system mimic fast system370 simul cach sprite network file system hardwar support larg atom unit dynam schedul machin mip risc architectur architectur framework migrat cisc higher perform platform effect compil support predic execut use hyperblock binari translat ibm power powerpc fillunit approach multipl instruct issu dynam reschedul dynam schedul vliw processor architectur framework support heterogen instructionset architectur architectur pentium microprocessor tune pentium pro microarchitectur ctr thoma cont sumedh sathay properti reschedul size invari dynam reschedulingbas vliw crossgener compat ieee transact comput v49 n8 p814825 august 2000 bich c le outoford execut techniqu runtim binari translat acm sigop oper system review v32 n5 p151158 dec 1998