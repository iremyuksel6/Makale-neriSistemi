softwaredirect regist dealloc simultan multithread processor abstractthi paper propos evalu softwar techniqu increas regist file util simultan multithread smt processor smt processor requir larg regist file hold multipl thread context issu instruct order everi cycl support better interthread share manag physic regist smt processor reduc number regist requir improv perform given regist file size techniqu specif target regist dealloc outoford processor regist renam effect know new physic regist must alloc limit knowledg physic regist dealloc propos architectur extens permit compil oper system immedi upon last use regist alloc idl thread context result base detail instructionlevel simul smt processor show techniqu increas perform significantli registerintens multithread program b introduct simultan multithread smt highperform architectur techniqu substanti improv processor perform execut multipl instruct multipl thread everi cycl dynam share processor resourc among thread smt increas function unit util therebi boost instruct throughput multiprogram workload applic speedup multithread program 5 previou research look perform potenti smt 24 well sever portion design includ instruct fetch mechan cach organ 2313 paper focus anoth specif design area impact smt costeffect organ util regist file smt rais difficult tradeoff regist file design larg regist file requir servic architectur renam regist need multipl thread context smaller regist file provid faster access time therefor smt processor need use regist resourc effici order optim die area perform paper propos evalu softwar techniqu increas regist util permit smaller faster regist file still satisfi processor need support multipl thread techniqu involv coordin oper system compil lowlevel regist renam hardwar provid effect regist use singlethread multithread program result improv perform given number hardwar context abil handl context given number regist exampl experi indic 8context smt processor 264 physic regist manag techniqu present attain perform compar processor 352 physic regist techniqu focu support effect share regist smt processor use regist renam permit multipl thread share singl global regist file way one thread high regist pressur benefit thread low regist demand unfortun exist regist renam techniqu fulli exploit potenti share regist file particular exist hardwar effect alloc physic regist limit abil identifi regist dealloc point therefor hardwar must free regist conserv possibl wast regist could better util propos softwar support expedit dealloc two type dead regist 1 regist alloc idl hardwar context 2 regist activ context whose last use alreadi retir first case thread termin execut multithread architectur hardwar context becom idl thread wait run regist alloc termin thread dead freed practic hardwar regist dealloc occur regist new activ thread map caus potentiallyshar smt regist file behav like partit collect perthread regist experi show notifi hardwar os schedul decis perform regist file size 264 boost 3 time 2 4 thread run compar processor 352 regist address second type dead regist activ thread investig five mechan allow compil commun lastus inform processor renam hardwar dealloc regist aggress without inform hardwar must conserv dealloc regist redefin simul result indic mechan reduc regist dealloc ineffici particular small regist file best scheme attain speedup 25 applic 16 averag regist dealloc scheme could benefit outoford processor smt remaind paper organ follow section 2 briefli summar smt architectur regist renam ineffici experiment methodolog describ section 3 section 4 describ os compil support use improv regist usag discuss relat work section 5 offer conclud remark section 6 simultan multithread smt processor model similar use previou studi eightwid outof order processor hardwar context eight thread everi cycl four instruct fetch two thread fetch unit favor high throughput thread select two thread fewest instruct wait execut fetch instruct decod regist renam insert either integ float point instruct queue operand becom avail instruct thread issu function unit execut final instruct retir perthread order compon smt processor integr part dynamicallyschedul wideissu superscalar instruct schedul import case point instruct issu operand calcul load memori without regard thread regist renam hardwar elimin interthread regist name conflict map threadspecif architectur regist onto processor physic regist major addit convent superscalar instruct fetch unit mention sever perthread mechan program counter return stack retir trap logic identifi tlb branch target buffer regist file contain regist state processorresid thread consequ requir two addit pipelin stage access one read write see 23 detail 21 regist renam regist dealloc problem regist renam elimin fals output anti depend introduc compil regist alloc assign arbitrari number pseudoregist limit number architectur regist instruct set architectur depend broken dynam alias defin architectur regist differ physic regist enabl formerli depend instruct execut parallel smt assum regist map scheme similar use dec 21264 8 mip r10000 27 regist renam hardwar respons three primari function 1 physic regist alloc 2 regist operand renam 3 regist dealloc physic regist alloc occur demand instruct defin architectur regist map creat architectur regist avail physic regist enter map tabl regist avail instruct fetch stall renam regist operand renam hardwar locat architecturaltophys map map tabl alias physic number regist dealloc work conjunct instruct retir activ list keep track uncommit instruct perthread program order instruct retir physic regist dealloc becom avail realloc renam hardwar handl physic regist alloc renam rather effect fail manag dealloc effici regist dead could dealloc last use commit hardwar howev identifi last use regist knowledg regist lifetim consequ hardwar safe dealloc physic regist commit anoth instruct redefin associ architectur regist shown figur 1 22 physic regist organ regist dealloc problem finegrain multithread architectur like tera 1 hardwar context includ regist file one thread thread access regist context shown figur 2a 1 contrast smt processor singl regist file share among context figur 2b call organ fsr fullyshar regist regist file structur singl pool physic regist hold state resid thread smt regist renam hardwar essenti extens regist map scheme multipl context thread name architectur regist context renam hardwar map threadpriv architectur regist pool thread independ physic regist regist renam thu provid transpar mechan share regist pool although smt processor best util hardwar context busi context may occasion idl maxim perform physic regist alloc idl context instead physic regist share activ thread howev exist regist dealloc scheme thread termin architectur regist remain alloc processor redefin new thread execut context consequ fsr organ behav like partit file shown figur 2c call partit organ pasr privat architectur share renam regist isa architectur regist consequ thirtytwo physic regist must dedic context pasr scheme exampl eightcontext smt 352 regist 96 352832 physic regist avail share among activ thread 1 note discuss differ logic organ regist file file physic structur separ issu 3 addl r20r21r12 figur 1 exampl illustr inabl renam hardwar effici dealloc physic regist r20 destin regist italic instruct 1 defin r20 creat map physic regist say p1 instruct 3 last use r20 howev p1 freed r20 redefin instruct n meantim sever instruct potenti larg number cycl pass last use p1 r20 dealloc threadthreadthreadthreada figur 2 logic regist file configur terastyl partit regist file b smt regist file thread share common pool physic regist c smt regist file given current regist dealloc scheme hardwar context dedic physic regist isadefin architectur regist renam regist share across context b c threadthreadthreadthreadrenam regist architectur regist 3 methodolog experi defin sever regist file manag techniqu devis compens conserv regist dealloc evalu use instructionlevel simul applic spec 95 20 splash2 26 benchmark suit tabl 1 suif compil 9 automat parallel spec benchmark multithread c code program alreadi explicitli parallel programm program compil multiflow traceschedul compil 14 dec alpha object file multiflow gener highqual code use aggress static schedul wide issu loop unrol ilpexpos optim object file link version anl 2 suif runtim librari creat execut smt simul process unmodifi alpha execut use emulationbas instructionlevel simul model detail processor pipelin hardwar support oford execut entir memori hierarchi includ tlb 128 entri instruct data tlb cach behavior bank bu content memori hierarchi processor consist two level cach size latenc bandwidth characterist shown tabl 2 regist file manag affect memori applic data set instruct simul spec 95 fp applu 33x33x33 array 2 iter 2719 iter 4735 mgrid 64x64x64 grid 1 iter 3193 b su2cor 16x16x16x16 vector length 4096 2 iter 5356 b iter 4191 tomcatv 513x513 array 5 iter 1891 turb3d data point 320 lu 512x512 matrix 4312 waternsquar 512 molecul 3 timestep 8699 waterspati 512 molecul 3 timestep 7835 tabl 1 benchmark use studi spec95 applic data set size spec refer set reduc number iter length simul time l1 icach l1 dcach l2 cach size byte 128 k associ twoway twoway direct map line size byte 64 64 64 bank cach fill time cycl latenc next level tabl 2 configur latenc paramet smt cach hierarchi use studi latenc 1 experi two differ memori hierarchi larger memori configur repres probabl smt memori hierarchi machin product approxim 3 year futur smaller configur serv two purpos 1 model today memori hierarchi well tomorrow lowcost processor multimedia coprocessor 2 provid appropri ratio data set cach size model program larger data set data set less data local benchmark 19 also examin varieti regist file size rang 264 352 gaug sensit regist file manag techniqu regist size 352 regist processor resourc instruct queue becom perform bottleneck low end least 256 regist requir hold architectur regist eight context 2 provid addit 8 renam regist total 264 smaller regist file attract sever reason first shorter access time advantag could use either decreas cycl time regist file access critic path elimin extra stage allow regist read write second take less area regist file current processor occupi neglig portion roughli 1 chip area larg multiport smt regist file could rais around 10 area alloc might accept third smaller regist file consum less power branch predict use mcfarlingstyl hybrid predictor 256entri 4way setassoci branch target buffer hybrid predictor 8k entri select global histori predictor 13 histori bit local predictor 2kentri local histori tabl index 4kentri 2bit local predict tabl 16 length simul limit detail simul result parallel comput portion applic norm simul parallel applic initi phase applic use fast simul mode warm cach turn detail simul mode main comput phase reach 4 techniqu improv regist file manag despit flexibl organ smt regist file underutil renam hardwar fail dealloc dead regist promptli section describ commun mechan allow oper system compil assist renam hardwar regist dealloc identifi dead regist belong idl activ context 41 oper system support deadregist dealloc explain section 22 execut thread termin thread physic regist remain alloc consequ activ thread access regist caus fullyshar regist file fsr behav like one regist partit context pasr thread termin oper system decid schedul newlyavail hardwar context three option differ implic 1 smaller cach increas miss rate latenc hidden regist pressur increas opposit true larger cach 2 absenc mechan avoid detect recov deadlock regist dealloc 1 idl context new thread run context idl termin thread physic regist could dealloc becom avail activ thread 2 switch new thread physic regist new thread architectur regist normal alloc begin execut effici scheme would free termin threadss physic regist alloc physic regist new thread demand unalloc physic regist would avail context 3 switch swappedout thread context switch code load regist state new thread load instruct retir physic regist use termin thread dealloc three scenario present opportun dealloc termin thread physic regist earli propos privileg context dealloc instruct cdi trigger physic regist dealloc thread oper system schedul would execut instruct context termin thread respons renam hardwar would free termin thread physic regist instruct retir three task must perform handl context dealloc instruct creat new map tabl invalid context regist map return regist free list cdi enter pipelin current map tabl save new map tabl valid entri creat save map tabl identifi physic regist dealloc new tabl hold subsequ regist map cdi retir save map travers map physic regist return free list final entri save map invalid cdi execut wrongpath consequ get squash new save map tabl thrown away much hardwar requir three task alreadi exist outoford processor regist map branch enter pipelin copi map tabl creat branch resolv one map tabl invalid depend whether specul correct instruct must squash renam hardwar travers activ list structur identifi physic regist determin physic regist return free list although cdi add small amount logic exist renam hardwar allow smt regist file behav true fsr regist file instead pasr dealloc regist promptli experiment result evalu perform fullyshar regist organ fsr vari number activ thread regist set size compar pasr ident configur model os schedul free physic regist termin thread make physic regist avail parallel applic began execut result comparison shown figur 3 pasr figur 3a renam regist share among thread execut time therefor greater smaller regist file larger number thread thread compet fewer regist fsr shown figur 3b less sensit paramet fact smaller regist file perform larger one thread execut regist tie idl context except smallest configur fsr perform stabl vari number thread parallel provid addit thread overcam increas competit regist 264regist file perform sweet spot speedup figur 4 show fsr equal surpass pasr regist file size number thread fsr provid greatest benefit regist share sever idl context pasr fewer small regist file exampl 320 regist 4 idl context 4 thread fsr outperform pasr 8 averag applic 288 264 regist fsr advantag grew 34 205 6 idl context 320 regist 15 take factor account 288264 regist 6 idl context fsr outperform pasr 51232 context activ fsr pasr compar case architectur state thread resid scheme fsr larger perform edg smaller cach hierarchi hide longer memori latenc requir inflight instruct therefor outstand regist suggest effici regist manag particularli import memoryintens workload applic rel poor data local summari result illustr partit multithread regist file pasr restrict abil expos parallel oper system support dealloc regist idl context enabl regist file fulli share across thread fsr improv perform make less depend size regist file number activ thread 42 compil support deadregist alloc previous describ hardwar regist dealloc ineffici hardwar number threads1030 normal execut time pasr figur 3 execut time fsr pasr larger memori hierarchi regist file organ normal 352 regist 1 thread execut result smaller smt memori hierarchi ident trends288352 number threads1030 normal execut time b fsr number regist pasr b pasr thread 4 thread 8 thread figur 4 fsr speedup pasr larger smaller b memori hierarchi differ regist file size number regist number regist b knowledg regist redefinit last use although compil identifi last use regist current mean commun inform hardwar section describ evalu sever mechan allow compil convey regist lastus inform hardwar show improv regist util smt processor fsr regist file organ propos mechan either new instruct field exist instruct direct renam hardwar first howev examin three factor motiv need improv regist dealloc 1 often physic regist unavail 2 mani regist dead cycl 3 mani cycl pass regist last use redefinit call deadregist distanc regist unavail percentag total execut cycl processor run physic regist caus fetch stall measur sever problem caus current hardwar registerdealloc mechan averag number dead regist cycl indic mani physic regist could reus thu potenti compilerbas solut deadregist number regist integ fp applu hydro2d swim tomcatv fft lu radix watern applu hydro2d swim tomcatv fft lu radix watern larg cach hierarchi 31 31 small cach hierarchi 288 26 21 53 264 22 25 442 02 649 227 934 07 881 872 27 940 85 67 00 747 tabl 3 frequenc percentag total execut cycl regist avail execut 8 thread bold entri frequenc 10 repres sever stall due insuffici regist number regist integ fp applu hydro2d swim tomcatv fft lu radix watern applu hydro2d swim tomcatv fft lu radix watern larg cach hierarchi 288 small cach hierarchi 288 74 58 tabl 4 averag number dead regist per cycl execut 8 thread bold entri regist avail 10 execut cycl distanc measur averag number cycl complet instruct last use regist regist dealloc rough estim like perform gain solut data tabl 3 indic project smt design 352 regist fsr file suffici applic smaller regist file introduc bottleneck often sever mani applic regist pressur particularli high integ regist fft radix floatingpoint regist applu hydro2d tomcatv watern applic also ran regist frequent smaller cach hierarchi closer examin reveal case stall due insuffici regist problem bold entri tabl 3 huge number regist dead shown tabl 4 tabl 5 show dead regist freed could realloc mani instructionscycl earlier suggest regist manag effici perform could recoup even 264regist fsr might suffici five compilerbas solut use dataflow analysi compil identifi last use regist valu section evalu five altern commun lastus inform renam hardwar number regist applu hydro2d swim tomcatv fft lu radix watern averag int instr 576 591 323 672 307 569 27 327 472 int cycl 2146 1554 278 2257 899 856 80 2154 1255 fp instr 184 309 117 226 204 71 327 185 fp cycl 971 1574 284 1200 657 224 1337 818 tabl 5 dead regist distanc 264 regist smaller cach hierarchi data indic regist frequent dealloc mani cycl last use retir figur regist size similar bold entri regist avail 10 execut cycl ldl ldl addl r20r21r24 addl r210x1r21 stl ldl base ldl r20addr1r22 ldl addl r20r21r24 addl r210x1r21 stl r12addr3r21 ldl r20addr4r25 lda r250x1000r31 free int reg identifi mask c free mask ldl r20addr1r22 ldl addl r20r21r24 addl r210x1r21 stl r24addr3r21 ldl b free regist figur 5 code fragment illustr regist free mechan origin code fragment b show free regist instruct necessari free regist r12 r25 c free mask instruct necessari free regist 1 free regist bit commun lastus inform hardwar via dedic instruct bit dual benefit immedi identifi last use requir instruct overhead although unlik implement instruct set two unus bit serv upper bound perform improv attain compil static lastus inform simul free regist bit modifi multiflow gener tabl index pc contain flag indic whether either instruct regist operand last use simul instruct simul perform lookup tabl determin whether regist dealloc occur instruct retir 2 free regist realist implement free regist bit rather specifi last use instruct use separ instruct specifi one two regist freed compil gener free regist instruct unus opcod alpha isa immedi instruct contain last regist use regist also redefin instruct like free regist bit free regist soon possibl addit cost dynam instruct overhead 3 free mask instruct free 32 regist use dealloc dead regist larg sequenc code basic block set basic block experi insert free mask instruct end multiflow trace rather identifi dead regist operand specifi compil gener bit mask particular implement free mask instruct use lower 32bit regist mask indic regist dealloc mask gener load regist use pair lda ldah instruct 16bit immedi field exampl figur 5 compar free regist free mask code fragment free integ regist 20 25 free mask sacrific prompt free regist dealloc reduct instruct overhead 4 free opcod motiv observ 10 opcod respons 70 dynam instruct last use bit set indic benefit free regist bit could obtain provid special version opcod addit execut normal oper new instruct also specifi either first second operand last use paper use 15 opcod list tabl 6 obtain profil free regist bit instruct frequenc applu hydro2d tomcatv 1 retrofit 15 instruct exist isa feasibl exampl ad dec alpha isa without neg impact instruct decod 5 free opcodemask augment free opcod gener free mask instruct end trace hybrid scheme address regist last use instruct cover particular choic instruct free opcod current renam hardwar provid mechan regist dealloc ie return physic regist free regist list perform mani dealloc cycl exampl alpha 21264 dealloc 13 regist cycl handl multipl 1 experi 10 22 free opcod instruct addit opcod top 15 tend occur frequent one two applic use brought limit addit benefit except swim radix instruct retir squash five propos regist dealloc techniqu use similar mechan free mask slightli complex specifi regist case dealloc could take multipl cycl necessari experi howev 72 regist averag freed mask five regist dealloc scheme compar figur 6 chart speedup versu explicit regist dealloc free regist bit bar show regist dealloc potenti improv perform significantli small regist file 77 averag rang high 195 free regist bit result highlight attract outcom regist dealloc improv regist util smt processor small regist file achiev larg regist file perform shown figur 7 signific becom appar context convent regist file design singl thread outoford processor often doubl regist support greater degre parallel eg r10000 64 physic regist 21264 80 multipl regist context smt processor need doubl architectur regist effect share result show 8context smt fsr regist file ie support dealloc regist idl context need 96 addit regist allevi physic regist pressur lower renam regist cost 27 isadefin regist compilerdirect regist dealloc activ context drop overhead even 8 regist 3 architectur regist state free regist free mask result highlight tradeoff two altern scheme free regist effect reduc number dead regist dealloc promptli last use regist sever bottleneck applu hydro2d tomcatv radix small regist file free regist outperform free regist mask free regist mask hand incur less instruct overhead therefor prefer larger regist file applic low regist usag free opcod variant free opcodemask 1 scheme choic strike balanc free regist free mask promptli dealloc regist avoid instruct overhead regist premium free opcodemask achiev exceed perform free regist larger regist file applic low regist usag free mask perform attain surpass program regist set size cach hierarchi free opcodemask met came close optim perform free regist bit exampl within integ fp opcod operand opcod operand tabl opcod use free opcod note mult stt fcmov two new version must ad version specifi whether first second operand last use 4 averag 264 regist 10 352 small cach hierarchi tune opcod select use hybrid scheme perhap judici combin free opcod free mask free regist expect gap free regist bit narrow even achiev upper bound 1 profil small sampl program determin best select opcod free opcod use free opcodemask provid flexibl opcod choic speedup two scheme close perform edg vari across applic 264 regi ter look differ larger set program determin hot opcod might tip perform balanc case exampl ad 6 singleprecis float point free opcod singleprecis swim free opcod exceed free regist free mask therefor discuss result free opcod free opcodemask togeth free regist bit free regist free regist mask free regist opcod free regist opcodemask applu hydro2d swim tomcatv fft lu radix waternsquar mean applu hydro2d swim tomcatv fft lu radix waternsquar mean1030 applu hydro2d swim tomcatv fft lu radix waternsquar mean applu hydro2d swim tomcatv fft lu radix waternsquar mean1030 small cach small cach figur comparison regist dealloc altern bar speedup dealloc 8 thread compilerdirect regist dealloc perform summari provid hardwar explicit inform regist lifetim compilerdirect regist dealloc significantli improv perform small smt regist file becom viabl altern even registerintens applic although particularli wellsuit smt regist dealloc benefit outoford processor explicit regist renam 5 relat work sever research investig regist file issu similar discuss paper larg regist file concern multithread architectur processor regist window waldspurg weihl 25 propos compil runtim support manag multipl regist set regist file compil tri identifi optim number regist thread gener code use number runtim system tri dynam pack regist set activ thread regist file nuth dalli 17 name state regist file cach regist valu dynam map activ regist small fast set regist back full regist name space memori reduc requir chip area processor regist window sun design 3d regist file 22 one regist window activ time densiti regist file increas overlay multipl regist cell share wire sever paper investig regist lifetim regist issu farka et al 6regsregsregsregs500swimregsregsregsregs1000hydro2dregsregsregsregs5001500 execut cycl million applu figur 7 comparison execut time fsr without free regist bit rang regist file size bothregsregsregsregs500tomcatv larger smaller cach size height solid black bar repres execut time free regist bitregsregsregsregs10003000 hydro2d smallregsregsregsregs500swim smallregsregsregsregs5001500 small free regist bit base use total height bar correspond execut time dealloc perform relativelyregsregsregsregs5001500 execut cycl million small flat height black bar indic free regist bit smaller regist file achiev perform larger regist file compar regist file requir precis imprecis interrupt effect number regist need support parallel outoford processor also character lifetim regist valu identifi number live regist valu present variou stage renam process franklin sohi 7 lozano gao 15 found regist valu short lifetim often need commit regist file propos compil support identifi last use architectur mechan allow hardwar ignor write reduc regist file traffic number write port neither appli concept regist dealloc pleszkun sohi 18 propos mechan expos reorder buffer compil could gener better schedul provid specul execut sprangl patt 21 propos staticallydefin tag isa expos regist renam compil reli basic block atom unit work part regist file use store basic block effect rest handl valu live across basic block boundari janssen corpora 10 capitanio et al 3 llosa et al 12 multiflow 4 kiyohara et al 11 also investig techniqu handl larg regist file includ partit limit connect replic use new opcod address extend regist file 6 conclus simultan multithread potenti significantli increas processor util wideissu outoford processor permit multipl thread issu instruct processor function unit within singl cycl consequ smt requir larg regist file support multipl thread context rais difficult design tradeoff larg regist file consum die area impact perform paper introduc new softwaredirect techniqu increas util regist smt fundament techniqu global share regist among thread architectur regist renam regist need introduc new instruct addit field isa allow oper system compil signal physic regist dealloc processor therebi greatli decreas regist wast result effect regist use permit either reduct regist file size increas perform given file size introduc explicit softwaredirect dealloc two situat first context becom idl oper system indic idl context physic regist dealloc permit regist freed order serv renam need execut thread result show notif significantli boost perform remain thread eg regist file 264 regist demonstr perform equival 352regist file 4 thread run second allow compil signal last use regist processor need wait redefinit regist order reus propos sever mechan signal last regist use show small regist file averag speedup 16 obtain use effici mechan result shown context smt processor mechan would appropri processor use regist renam outoford instruct issu r tera comput sy tem portabl program parallel processor partit regist file vliw preliminari analysi tradeoff vliw architectur trace schedul compil simultan multithread platform nextgener processor regist file design consider dynam schedul proce sor regist traffic analysi streamlin interoper commun finegrain parallel processor digit 21264 set new standard maxim multiprocessor perform suif compil partit regist file tta regist connect new approach ad regist instruct set architectur convert threadlevel parallel instructionlevel parallel via simultan multithread exploit shortliv variabl superscalar processor combin branch predictor namedst regist file implement perform perform potenti multipl function unit processor scale parallel program multiprocessor methodolog exampl standard perform evalu council facilit superscalar process via combin staticdynam regist renam scheme three dimension regist file superscalar processor exploit choic instruct fetch issu implement simultan multithread processor simultan multithread maxim onchip parallel regist reloc flexibl context multithread splash2 program character methodolog consider mip r10000 superscalar microprocessor tr ctr hua yang gang cui hongwei liu xiaozong yang compact regist file via 2level renam bitpartit microprocessor microsystem v31 n3 p178187 may 2007 matthew postiff david green steven raasch trevor mudg integr superscalar processor compon implement regist cach proceed 15th intern confer supercomput p348357 june 2001 sorrento itali dean tullsen john seng storageless valu predict use prior regist valu acm sigarch comput architectur news v27 n2 p270279 may 1999 jo f martnez jose renau michael c huang milo prvulov josep torrella cherri checkpoint earli resourc recycl outoford microprocessor proceed 35th annual acmiee intern symposium microarchitectur novemb 1822 2002 istanbul turkey david w oehmk nathan l binkert trevor mudg steven k reinhardt fake 1000 regist proceed 38th annual ieeeacm intern symposium microarchitectur p718 novemb 1216 2005 barcelona spain mikko h lipasti brian r mestan erika gunadi physic regist inlin acm sigarch comput architectur news v32 n2 p325 march 2004 chulho shin seongwon lee jeanluc gaudiot adapt dynam thread schedul simultan multithread architectur detector thread journal parallel distribut comput v66 n10 p13041321 octob 2006 eric tune rakesh kumar dean tullsen brad calder balanc multithread increas throughput via low cost multithread hierarchi proceed 37th annual ieeeacm intern symposium microarchitectur p183194 decemb 0408 2004 portland oregon jame burn jeanluc gaudiot smt layout overhead scalabl ieee transact parallel distribut system v13 n2 p142155 februari 2002 monreal victor vinal jose gonzalez antonio gonzalez mateo valero late alloc earli releas physic regist ieee transact comput v53 n10 p12441259 octob 2004 joshua redston susan j egger henri levi analysi oper system behavior simultan multithread architectur acm sigplan notic v35 n11 p245256 nov 2000 joshua redston susan j egger henri levi analysi oper system behavior simultan multithread architectur acm sigarch comput architectur news v28 n5 p245256 dec 2000