instruct fetch mechan vliw architectur compress encod vliw architectur use wide instruct word conjunct high bandwidth instruct cach achiev multipl instruct issu report use tinker experiment testb examin instruct fetch instruct cach mechan vliw compress instruct encod vliw defin classif scheme ifetch hardwar encod introduc sever interest cach ifetch organ describ evalu tracedriven simul new ifetch mechan use silo cach found best perform b introduct vliw architectur use wide instruct word achiev multipl instruct issu architectur requir high bandwidth instruct fetch ifetch mechan transport instruct word cach execut pipelin complex hardwar support requir ifetch relat type instruct encod use gener vliw instruct horizont encod wide word issu oper everi clock cycl function unit fu machin sequenc instruct word compos program schedul c fl1996 ieee paper appear proceed 29th annual symposium microarchitectur dec24 1996 pari franc person use materi permit howev permiss reprintrepublish materi advertis promot purpos creat new collect work resal redistribut server list reus copyright compon work work must obtain ieee program instruct word encod sever way choic encod greatli influenc hardwar requir ifetch vliw uncompress encod one explicitli store nop oper instruct word vliw instruct store nop oper slot particular fu fu schedul execut oper point schedul use uncompress encod yield fix length instruct word simplifi ifetch hardwar expens potenti poor memori util anoth class encod compress encod store nop vliw instruct encod use compress encod variabl size size instruct depend number fu receiv oper point schedul type encod higher memori util allow greater effect memori bandwidth uncompress encod compress encod also aid objectcod compat vliw dynam reschedul algorithm propos tinker vliw testb 9 drawback encod requir complic ifetch handl variabl length instruct paper focus requir ifetch impos compress encod sever mechan ifetch present effect mechan instruct cach icach design describ paper organ follow section 2 introduc basic instruct fetch mechan detail implement compress encod previou work area also di cuss section 3 present scheme classifi icach compress encod introduc four differ ganiz uncompress cach bank cach rigid silo cach flexibl silo cach section 41 43 describ icach design detail includ respect perform section 6 discuss perform design also discuss direct futur research 2 basic instruct fetch model 21 instruct fetch compress encod memoryl2 cach missrepair logic block fetch tag compar valid select nextpc comput expand execut pipelin expand expand must use either cach hit cach miss path figur 1 basic instruct fetch model necessari stage ifetch compress encod shown simplifi instruct fetch model compress encod shown figur 1 solid lower border diagram indic pipelin latch delin stage fetch pipelin main block model missrepair logic pipelin instruct cach expand discuss missrepair logic handl cach miss repair request could implement pipelin interfac next level memori hierarchi insid instruct cach cach block hold one vliw instruct depend instruct fetch mechan explain depth section 3 cach pipelin consist block fetch stage select fetch cach block present address tag compar valid select stage perform tag comparison parallel select op block belong request vliw instruct compress instruct encod use tinker experiment testb use studi 8 compress encod combin individu oper op issu parallel unit parallel issu call multiop tinker op risclik instruct 64 bit length tinker op execut oper encod pred h theader bit tail bit figur 2 integ add op tinker encod one four type function unit integ comput predic handl memori load store fp float point addmuldivconvert branch exampl tinker integ add op shown figur 2 tinker encod use header tail bit within op delin begin end multiop ie first op multiop header bit set last op multiop tail bit set branch architectur compilerdirect similar playdoh specif hewlett packard laboratori 16 n issu machin tinkern maximum multiop size n 64 bit maximums multiop contain op function unit machin load latenc increas one less ialu nop nop nop nop nop nop nop nop g nop nop nop nop nop nop h nop f depend c byte total nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop f nop nop nop nop nop nop nop g nop nop nop nop nop h nop 336 byte total ialu fpadd fpmul ld st cmpp br ialu ialu fpadd fpmul ld st cmpp br figur 3 object code compat use uncompress encod size code chang reschedul differ machin organ use properti compress encod reschedul size invari rsi rsi mean size program vari across differ gener vliw architectur figur 3 show use uncompress nonrsi encod size execut imag chang chang code size caus problem branch target invalid constrain specul 9 solut code size chang problem use rsi encod like tinker result use tinker encod reschedul code figur 3 shown figur 4 manipul header tail bit paus field requir modif schedul execut correctli differ gener architectur 1 header bit paus optyp tail bit figur 4 object code compat use tinker compress encod size binari remain paus field first multiop increment one multiop origin consist op e f made two multiop althougha compress encod sever advantag also requir complex ifetch mechan one step fetch nextpc gener pc gener subsequ icach access nextpc gener uncompress encod consist ad constant size fix instruct pc use new quantiti nextpc address icach next cycl architectur use variabl length instruct first determin length current instruct fetch determin quantiti add pc get nextpc anoth step ifetch determin individu op multiop rout fu uncompress encod fu fix posit op multiop case compress encod atinkerop contain fut field indic futyp destin op destin particular futyp resid anywher multiop depend type op multiop intrins compress encod requir op must partial decod rout appropri function unit exampl instruct issu logic expect integ op op posit one multiop one op multiop compos float gener rel op order may also chang without ill effect although demonstr exampl point op op must rout float point unit integ unit expand stage perform rout rout op one multiop parallel expand function full crossbar rout type op fu requir relax somewhat compil enforc partial order op base futyp expand place either cach hit path cach miss path shown figur 1 miss path expand use cach miss occur oper follow 1 multiop fetch memori place expand 2 entir multiop receiv expand rout op specif posit cach select miss address ie cach hold op specif posit correspond futyp miss path expans add extra stage miss penalti number extra stage equal number stage need expans contrast hit path expand use everi cach access multiop fetch cach process expand optofunctionalunit rout expand cach miss path therefor affect miss penalti howev number cycl need expans fetch path therefor add branch mispredict penalti reason hit path expans perform one cycl requir complex potenti costli implement meet singl cycl constraint 22 relat work class encod also use vliw architectur 4s architectur propos sun microsystem use frame encod group multiop instruct frame instruct frame size ifetch width machin frame encod support variabl size instruct enforc restrict op multiop must resid frame eas requir ifetch mechan 3 requir nop therebi violat rsi cydrom cydra 5 vliw machin use split encod instruct cach block compos either one multiopor multipl one op multiop call uniop 20 5 cach block compos one multiop uncompress form compos uniop pad nop need cach block align also nonrsi anoth commerci vliw architectur multiflow trace famili machin use compress encod 17 nop store instruct word memori instruct expand fetch memori instruct cach trace machin use cach miss ex pansion much relat work instruct fetch mechan concentr superscalar cisc architectur especi arena x86 architectur patt et al studi use fill buffer decod instruct cach break cisc instruct microoper effici schedul use dynam schedul hardwar 18 smotherman franklin adapt fill unit decod instruct cach use decod x86 instruct 23 design associ nextpc field cach block intel pentium pro processor employ multistag ifetch fetch 16 byte per cycl icach use three stage align instruct 19 nextpc pc16 absenc branch instruct amd k5 store decod inform relat instruct length l1 instruct cach later use nextpc comput ifetch stage 7 like pentium pro k5 use multipl stage fetch align x86 instruct stream x86 processor design nexgen use differ approach nextpc gener dedic logic perform instruct align fetch time comput nextpc 11 arena risc architectur crisp processor use decod instruct cach 10 crisp instruct convert inmemori format 1680 bit 192 bit expand form icach expand instruct occupi cach block associ nextpc field effect encod instruct compress manner studi wolf chanin 24 compress code risc processor design conserv memori bandwidth store instruct compress format memori decompress instruct cach cach miss time r1 sparc processor hal perform limit decod memori l1 icach aid decod ifetch 21 3 classif vliw icach vliw cach organ classifi base two factor degre partit dop nop polici cach dop describ number independ memori unit partit use implement cach placement op memori unit independ memori unit tag data array search parallel independ memori tradit cach cach one partit op store locat within entir cach one tag set tag search 2 altern cach use multipl partit op map particular partit base futyp describ section 21 tinker encod use four futyp permit parallel tag compar orthogon partit shown section 43 integ float point f memori branch b cach organ assign futyp separ partit repres label fulli partit use notat unifi partit cach tradit cach repres extrem unifi partit fulli partit design flexibl design permit multipl futyp resid partit exampl design allow integ float point op share partit assign futyp partit repres f b implement fulli partit cach tinkern machin n partit everi partit size flexibl partit cach combin partit share futyp size overal fulli partit cach also flexibl design allow share futyp resid arbitrari locat within combin partit second factor classif whether cach explicitli contain nop nop cach nop cach multiop held nop cach uncompress form wherea nopsfre cach compress form nop polici cach close tie placement expand icach pipelin explain section 4 ialu fpadd fpmul pred ld st br aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa aaaa pipelin latenc figur 5 tinker8 machin model tabl 1 benchmark use evalu benchmark program integ float point 129compress 052alvinn 130li 056ear 134perl 089su2cor 147vortex 090hydro2d permut dop nop polici yield wide varieti cach configur paper four repres organ explor uncompress cach op store one partit nop polici bank cach use nopsfre polici silo cach fulli partit polici lastli flexibl silo cach use combin partit two futyp separ partit remain two futyp nop polici four design assum cycl time trace driven simul use evalu perform scheme impact compil employ superblock base schedul use compil benchmark program use tinker compress encod tinker8 machin organ 13 function unit configur pipelin latenc shown figur 5 function unit pipelin depth indic pipelin cachememori interfac three cycl latenc one op bandwidth assum three cycl latenc chosen similar l2 latenc contemporari microprocessor 19 6 perfect l1 data cach l2 cach assum prevent data cach effect color perform measur integ float point program spec92 spec95 suiteswer use benchmark evalu list tabl two million op sampl across entir program simul run 4 instruct fetch mechan 41 ifetch use uncompress cach figur 6 show organ uncompress cach cach block size machin width miss path expand use cach miss repair mechan two cycl expand assum branch mispredict penalti one cycl modifi direct map address scheme use uncompress cach exampl illustr tradit directmap address bit select use assum tinker4 machin use 32 bit address consid two multiop figur 7 shown would appear memori op first multiop mark second multiop mark b multiop 2 op mul tiop b singl op assum contain branch op cach address normal directmap cach physic address multiop b 0x80000000 0x80000080 respect would tag index henc map onto cach block depict figur 8a sequenti access pattern conflict miss gener second multiop access ie b multiop b creat content cach block tag 3 result present float point program lower normal due lack softwar pipelin program missrepair expand multiop fetch nextpc logic multiop length matrix memori l2 cach execut pipelin connect shown figur 6 uncompress cach two cycl miss path expand use place op posit within cach block length field associ everi cach block ident determin one resid cach x80000000 memori memori cach multiop b figur 7 tradit address map uncompress cach one way differenti sequenti op use offset bit part index figur 8b depict cach interpret address use scheme offset reduc address map individu multiop memori block frame separ cach block associ requir possibl sequenti multiop map cach block elimin uncompress cach hold multiop uncompress form henc valid select logic hit path expand shown stage basic model figur unnecessari nextpc comput still need perform fetch hardwar must add length current multiop pc gener nextpc comput length perform runtim block contain multiop fetch cach matrix place nextpc comput block fetch ad sequenti comput end fetch cycl possibl increas cycl time avoid tag index 000000 b offset reduc tradit tag index 000000 figur 8 interpret cach address tradit scheme b reduc offset scheme situat multiop length field associ everi cach block length field access parallel tag data addit length pc done begin tag compar stage020611418integ float point benchmark opc perfect icach uncompress cach uncompress cach figur 9 perform uncompress cach metric use use op complet per cycl opc individu bar repres harmon mean combin cach size benchmark program graph figur 9 present result simul perform uncompress cach compar perfect icach cach never miss metric use simul report use op complet per cycl opc opc use captur effect icach perform overal per formanc result group base cach size type benchmark uncompress cach perform poorli compar perfect icach although increas cach size 16 kb 32 kb yield better perform result opc still much smaller perfect cach integ benchmark increas cach size yield 22 better perform still five time slower perfect icach float point benchmark larger cach perform 19 better still four time slower perfect icach reason extrem low space util uncompress design maximum opc 2 perfect cach indic two eight word cach block typic use possibl solut design place one multiop cach block explor next section 42 ifetch use bank cach figur show organ instruct fetch mechan use bank cach cach organ two data tag array intel pentium processor 2 cach block size machin width n multiop span two cach block reason everi clock cycl two cach block ac cess block request multiop could resid current block next sequenti block successor block contrast uncompress cach expand cach hit path add extra stage processor pipelin extra stage increas branch mispredict penalti two cycl scan op hdr tail bit pick mop swap block mayb tag compar nextpc gener expand b b c c c decod bank 0 tag offset bank bit tag offset bank bit nextpc 512 bit wide figur 10 bank cach fetch multiopc shown block bank fetch swap need pass singlecycl expand nextpc comput perform parallel cach access address bank cach similar tradit cach high order bit address use tag middl bit use index multiop variabl length alway begin nword boundari memori low order bit use offset index start multiop cach block pc present address cach cach address decod select consecut block cach bank fetch mechan shown figur 10 exampl fetch oper first three op multiop c occupi last three op cach block bank one last two op c occupi first two op next cach block bank zero pc address first op c begin fetch cycl three sequenti step requir fetch multiop c also shown figur 10 detail 1 current block contain first three op successor block contain fourth fifth op request cach 2 correct align multiop fetch hardwar must know last op multiop c lie successor cach block search tail bit last op c inform permit cach fetch stage perform correct align swap two multiop fragment note bank factor two facilit exchang 3 header bit op block scan determin op belong multiop c start locat first op request mul tiop valid select line enabl pass request op expand stage fetch current multiop nextpc must also comput absenc op chang control flow program accomplish use extra bit store offset inform multiop cach detail hardwar pictur figur 11 offset field bank bit maintain everi op cach block offset field indic offset within cach block next multiop bank bit indic next multiop resid bank current multiop next bank valu field set op receiv cachememori interfac cach miss time complet algorithm nextpc comput avail technic report 4 offset field bank bit also use twoway set associ design tandem way predict techniqu 15 use dedic storag withinth cach aid nextpc comput similar use successor indic initi propos johnson 14 implement amd k5 7 although scheme unbank cach tinkern bank cach log 2 n offset bit per word op need plu valid bit bank bit directmap configur total size cach tag data array increas approxim 8 tradit cach figur 12 present result simul bank cach compar perfect icach bank design perform least order magnitud better uncompress design greater util assum cach block shown low order index bit 01 offset field multiop b b c c c bank bit bank bit offset field figur 11 nextpc comput bank cach cach access multiop c shown offset field c place appropri posit bank bit ad remain high order bit form new index tag data storag area bank design offset greater branch mispredict penalti perform still lower perfect cach much 25 penalti may due overfetch entir cach block portion block request hypothesi test next section 421 subblock bank cach variant bank cach use subblock 22 subblock partit cach block smaller unit subblock subblock usual increas miss ratio cach reduc amount memori traffic subblock block independ fill place miss repair subblock op retriev start address begin multiop address begin cach block done without subblock call block fetch advantag reduct time miss repair expens small increas miss ratio instruct preced request instruct fill cach block miss occur length miss multiop known unless miss occur cach block boundari enough memori fetch gener fill end successor block requir multiop span two block multiop resid entir within current block successor block fill valid bit associ subblock set subblock fill subblock valid bit preced op current block unset offset field bank bit use nextpc comput prefetch use subblock bank cach block fetch perform implicit prefetch request multiop load cach fragment integ float point benchmark opc perfect icach bank cach bank subblock cach bank cach bank subblock cach figur 12 perform bank cach metric use use op complet per cycl opc individu bar repres harmon mean combin cach size benchmark program multiop resid block also load subblock cach employ form prefetch term load forward 12 load forward instruct cach consist fetch subblock request lie subsequ subblock end cach block bank icach one op subblock size simul result present figur 12 perform subblock design benchmark depend subblock effect integ program outperform nonsubblock design 9 45 16 kb 32 kb size respect float point benchmark perform slightli lower nonsubblock design examin behavior program reveal reason differ perform integ program mani branch branch latter half cach block branch caus cach miss latter half block next block fill contrast block fetch design block fetch fill time subblock design potenti almost 50 less float point program total number stall cycl due icach slightli higher much code involv backward branch branch begin cach block although latter part block fill earlier demand request begin word contrast block fetch design entir block fill miss occur subblock design therefor gener memori request situat block fetch design 43 ifetch use silo cach silo cach organ seri partit silo silo hold op particular fu set fu shown figur 13 dop rang unifi partit onefutypeperpartit entri silo hold one op associ tag length field valid bit nextpc compu tation silo organ directmap setassoci manner setassoci use silo independ search within silo parallel tag compar perform among set 431 rigid silo cach rigid silo cach pictur figur 13 cach block size machin width design use miss path expand two cycl expans assum branch mispredict penalti one cycl length field tag data silo intcmpp silo silo silo br tag compar nextpc comput expand execut unit memori figur 13 instruct fetch rigid silo cach silo search independ cycl silo hold op destin one futyp two cycl expand cach lower level memori rout op appropri silo uncompress cach silo cach sequenti multiop size less machin width map cach block caus conflict miss address interpret tradit manner shown figur 8a reason silo cach use offset reduc scheme interpret address see section 41 index bit use address silo map locat silo tag comparison silo done parallel hit signal tag match valid length field similar bank cach shown multiop b figur 13 tag length bit op multiop ident cach hit op multiop direct function unit associ specif silo silo organ directmap setassoci manner lru replac use setassoci silo miss occur either none tag silo match tag match occur length invalid fetch miss multiop initi next level memori hierarchi multiop fetch cachememori interfac expand op rout appropri silo valu length field comput parallel expans silo receiv op correspond tag length field updat situat occur op multiop replac cach fill op replac need flag indic entir parent multiop present accomplish search op tag op replac unset length valid bit op next cach access partial displac multiop result miss due unset length valid bit cach fill particular silo op rout expand op posit correspond fill address silo left empti respect silo cach use nop polici howev sever multiop resid address across silo hybrid nop nopsfre polici understand note silo address individu perform placementsreplac degre autonomi shown figur 13 multiop b consist integercomparetopred op memori op place op silo float point branch oper fact silo current empti indic valid bit multiopx contain singl float point oper map cach locat place float point silo updat tag length field proper locat silo multiop b x coexist address across silo silo cach tag everi op store cach contrast uncompress cach bank cach use tag cach block tag storag requir silo cach obvious higher howev data array silo cach need hold bit op header tail bit fut field see figur 2 longer need tinker8 machin 30 storag tradit cach perform result rigid silo cach shown figur 14 even low degre associ direct map twoway silo cach outperform bank cach 618 integ program higher degre associ reduc number conflict020611418integ float point benchmark opc perfect icach silo silo way silo silo silo float point benchmark opc perfect icach silo silo way silo silo silo way figur 14 perform rigid silo cach metric use use op complet per cycl opc individu bar repres harmon mean combin cach size benchmark program miss yield improv 432 flexibl silo cach perform silo cach depend fu type distribut workload program contain op map silo util silo effect program see smaller icach silo use starv exampl behavior could occur integerintens applic starv float point silo 1futypeto1silo requir relax complimentari type op typic execut togeth allow share silo starvat problem might eas exam ple float point integ oper place silo f b partit silo would well util program float point integ intens well program mix type op small hitpath expand requir rout op silo appropri function unit addit misspath expand requir op placement hitpath expand increas branch mispredict penalti two cycl silo allow multipl futyp per silo term flexibl silo cach silo hold multipl futyp flexibl silo flexibl silo suppli op n fu tag array size n silo fu rigid silo cach data array slightli larger fut field store flexibl silo use miss path expand rigid design flexibl silo hold op compress fashion overal design rigid int int mem int br mem br mem flexibl silo configur opc figur 15 evalu share silo integ program metric use use op complet per cycl opc except first bar chart individu bar repres harmon mean combin benchmark program use one flexibl silo fu type indic privat silo remain futyp cach simul 16 kb associ 1 2 4 8 16 first bar repres harmon mean benchmark use cach size associ paramet rigid silo design nomin nop cach offset bit op map flexibl silo use determin cach locat flexibl silo hold futyp size tag data array silo futyp rigid silo cach particular interest design store two futyp flexibl silo assign remain two futyp 1futypeperpartit silo simul perform integ benchmark program 16 kb cach varieti flexibl partit determin futyp best suit share flexibl silo result present figur 15 except float pointbranch combin share silo design perform better rigid silo design perform gain rang 19 tegermemori combin 31 integerflo point combin base preliminari result flexibl silo design clearli outperform rigid silo design well uncompress bank cach design 5 analysi term complex uncompress cach view simplest ifetch mechan op place ment op access nextpc scheme similar techniqu use previou design drawback simplic workload present studi nop polici caus low space util reflect poor perform bank cach use differ approach place multipl multiop cach block implicit prefetch nextpc gener perform differ uncompress cach hardwar requir mechan adder extra storag lengthoffset inform equival overal though bank cach requir complex logic also must abl interchang block differ bank subsequ scan op later expand request multiop extra work must perform one clock cycl requir sequenti logic uncompress design cycl time bank cach potenti longer uncompress cach howev perform substanti better indic extra complex may warrant rigid silo cach nomin nop cach allow limit share cach locat multipl multiop rigid silo cach requir consider storag either previou design opwid storag locat associ tag length field extra compar also requir perform multipl parallel tag compar silo nextpc comput logic ident use uncompress cach directmap silo cach perform roughli equival bank cach associ increas rigid silo cach outperform bank cach howev set associ requir extra level logic select correct block within set flexibl silo design allow multipl futyp resid silo conceptu design store op flexibl silo compress fashion space util flexibl silo high cach placement access straightforward complex design extra expand requir cach hit path smaller use miss path hit path expand use bank cach separ stage set associ use cycl time might stretch due extra level logic requir preliminari evalu flexibl silo cach indic might outperform three design work need determin potenti greater perform counter increas cycl time 6 conclus studi investig issu involv ifetch support vliw architectur use compress encod effect ifetch mechan icach architectur discuss taxonomi classifi vliw icach base degre partit nop polici introduc four cach design present evalu ate uncompress cach bank cach rigid silo cach flexibl silo cach perform cycl time issu design discuss silobas design prove best perform flexibl silo design show promis preliminari evalu ation base result plan tinker testb complet evalu flexibl silo design investig implement detail tradeoff rigid silo flexibl silo cach design acknowledg discuss member tinker group prove use develop idea pa per work support intel corpor nation scienc foundat grant mip9696010 mip9625007 author would like express gratitud univers illinoi impact group use impact compil system comment anonym refere also appreci r architectur pentium micro processor architectur high instruct level parallel nextpc comput bank instruct cach cydra 5 minisupercomput architectur implement 300 mhz 64b quadissu cmo risc processor develop amdk5 architectur tinker machin languag manual dynam reschedul techniqu object code compat vliw archi tectur branch fold crisp microprocessor reduc branch delay zero 93 mhz experiment evalu onchip microprocessor cach memori differencebit cach hpl playdoh architectur specif version 10 hardwar support larg atom unit dynam schedul machin tune pentium pro microarchitectur cydra 5 department supercomput 64b 4issu outoford execut risc processor cach memori improv cisc instruct decod perform use fill unit execut compress program embed risc architectur tr branch fold crisp microprocessor reduc branch delay zero cydra 5 department supercomput hardwar support larg atom unit dynam schedul machin superscalar processor design execut compress program embed risc architectur multiflow trace schedul compil cydra 5 minisupercomput superblock dynam reschedul improv cisc instruct decod perform use fill unit differencebit cach cach memori architectur pentium microprocessor tune pentium pro microarchitectur develop amdk5 architectur architectur high instruct level parallel experiment evalu onchip microprocessor cach memori ctr zhao wu wayn wolf tracedriven studi vliw video signal processor proceed tenth annual acm symposium parallel algorithm architectur p289297 june 28juli 02 1998 puerto vallarta mexico jeremi lau stefan schoenmack timothi sherwood brad calder reduc code size echo instruct proceed intern confer compil architectur synthesi embed system octob 30novemb 01 2003 san jose california usa partha biswa nikil dutt reduc code size heterogeneousconnectivitybas vliw dsp synthesi instruct set extens proceed intern confer compil architectur synthesi embed system octob 30novemb 01 2003 san jose california usa partha biswa nikil dutt code size reduct heterogeneousconnectivitybas dsp use instruct set extens ieee transact comput v54 n10 p12161226 octob 2005 praveen raghavan andi lambrecht murali jayapala francki catthoor diederik verkest distribut loop control architectur multithread unithread vliw processor proceed confer design autom test europ proceed march 0610 2006 munich germani shail aditya scott mahlk b ramakrishna rau code size minim retarget assembl custom epic vliw instruct format acm transact design autom electron system toda v5 n4 p752773 oct 2000 larin thoma cont compilerdriven cach code compress scheme embed ilp processor proceed 32nd annual acmiee intern symposium microarchitectur p8292 novemb 1618 1999 haifa israel n p carter hussain model wire delay area power perform simul infrastructur ibm journal research develop v50 n23 p311319 march 2006 benjamin j welch shobhit kanaujia adarsh seetharam deepaksrivat thirumalai alexand g dean support demand hardrealtim system sti ieee transact comput v54 n10 p11881202 octob 2005 john w sia hilleri c hunter wenmei w hwu enhanc loop buffer media telecommun applic use lowoverhead predic proceed 34th annual acmiee intern symposium microarchitectur decemb 0105 2001 austin texa sanjeev banerjia sumedh w sathay kishor n menez thoma cont mp misspath schedul multipleissu processor ieee transact comput v47 n12 p13821397 decemb 1998 oliv wahlen tilman glkler achim nohl andrea hoffmann rainer leuper heinrich meyr applic specif compilerarchitectur codesign case studi acm sigplan notic v37 n7 juli 2002 murali jayapala francisco barat tom vander aa francki catthoor henk corpora geert deconinck cluster loop buffer organ low energi vliw embed processor ieee transact comput v54 n6 p672683 june 2005