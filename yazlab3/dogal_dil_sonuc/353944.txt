data depend analysi assembl code determin data depend task typic perform highlevel languag sourc code today optim parallel compil littl work done field data depend analysi assembl languag code area grow import eg increas instructionlevel parallel central element data depend analysi case method memori refer disambigu decid whether two memori oper may access definit access memori locat paper describ new approach determin data depend assembl code method base sophist algorithm symbol valu propag deriv valuebas depend memori oper instead addressbas depend integr method salto system assembl languag optim experiment result show approach greatli improv precis depend analysi mani case b introduct determin data depend nowaday often done parallel optim compil system level sourc code eg c fortran 90 intermedi code eg rtl 21 data depend analysi level assembl code aim increas instruct level parallel use variou schedul techniqu like list schedul 6 trace schedul 9 percol schedul 17 new sequenc instruct construct regard data control depend properti target processor today instruct schedul determin data depend regist access consid memori one cell everi two memori access must assum data depend thu analyz memori access becom import global instruct schedul 3 paper describ intraprocedur valuebas data depend analysi see maslov 14 detail addressbas valuebas data depend implement context salto tool 19 salto framework develop optim transform techniqu variou processor user describ target processor use mixtur rtl c languag program written assembl code analyz modifi use interfac c salto alreadi implement kind conflict analysi 12 approach determin addressbas depend regist access assum memori one cell analyz data depend assembl code must distinguish access regist memori case deriv data depend reach definit reach use inform obtain monoton data flow analysi regist analysi make complic set use defin regist one instruct establish easili regist alias therefor determin data depend regist access scope paper memori refer solv alias problem 22 whether two memori refer access locat see landi ryder 11 detail alias prove two refer alway point locat mustalia must show never refer locat prove would like conserv approxim alia pair mayalia ie memori refer might refer locat deriv possibl address might access one memori instruct use symbol valu propag algorithm compar memori address use modif gcd test 23 experiment result indic mani case method accur determin data depend previou method 2 program model assumpt follow assum risc instruct set memori access load ld store st instruct memori refer follow offset use scale factor provid model addit would difficult memori access normal read write word four byte global memori access address label first move regist read written use memori instruct initi regist copi content one regist anoth done use mv instruct logic arithmet oper follow dest oper op execut operand src 1 operand result written regist dest operand regist integ constant control flow model use uncondit b condit bcc branch instruct runtimememori divid three class 1 static global memori stack heap mem ori address unequivoc refer one class simpl memori refer disambigu feasibl see section 3 unfortun easi prove address alway refer stack interprocedur analysi done one obtain inform frame pointer approach make assumpt 3 alia analysi assembl code section briefli review techniqu alia analysi memori refer alia analysi lead assumpt store instruct alway depend load store instruct common techniqu compiletim instruct schedul alia analysi instruct inspect schedul look two instruct see obviou differ memori referenc techniqu independ memori refer fig 1 b prove base regist differ offset use differ memori class referenc b fig 1 c show exampl techniqu fail look regist o1 must assum regist point memori locat therefor determin s3 data depend s2 local analysi disabl notic definit regist o1 first statement exampl make clear twofold improv need first need save inform address arithmet secondli need kind copypropag provid algorithm would easi show statement s2 regist o1 valu fp gamma 20 therefor overlap 4 byte memori block start 4 symbol valu set propag section present extens wellknown constant propag algorithm 23 target determin possibl symbol valu set content regist program statement subsequ step analysi inform use determin data depend storag memori accessesmean store load instruct calcul symbol valu set perform data flow analysi 10 therefor model problem data flow framework l f l call data flow inform set union oper f set semant function semant function monoton l form bound semilattic one element zero element use gener iter algorithm 10 alway termin yield least fixpoint data flow system 41 data flow inform set method describ content regist form symbol valu therefor defin initi point program p statement j call initi point r ij p j load instruct defin content r call node entri node procedur finit set initi point p given initp finit set sv symbol valu consist symbol proper symbol valu polynomi ij variabl r ij symbol valu repres valu store regist r initi point r ij use valu make assumpt content regist perform static analysi abl infer direct branch taken program execu tion therefor could happen regist r one symbol valu valid specif program point consequ must describ possibl regist content socal kbound symbol valu set limit set ensur termin analysi let k 2 n arbitrari fix kbound symbol valu set set 1 ld fp4o1 2 st o2fp8 1 ld fp4o1 2 sethi hillc0o2 3 st o3o2lollc0 1 add fp20o1 2 st o2o14 3 ld fp20o3 b c figur 1 sampl code differ techniqu alia detect b solv instruct inspect wherea c need sophist analysi follow let reg stand set regist call total map ff state mean data flow inform set use calcul symbol valu set given set possibl state sv 42 union oper node control flow graph one pre decessor must integr inform stem predecessor data flow framework join path flow graph implement union oper let union oper data flow problem defin shown fig 2 union oper simpl componentwis union set addit ensur welldefinit oper map aris set cardin greater k special valu proven fix k 2 n set state sv conjunct union oper constitut bound semilattic one element zero element 43 semant function control flow graph chosen analysi node stand uniqu label program statement therefor unambigu assign semant function node semant function use updat symbol valu set assign reg ister fig 3 specifi semant function use method specif ff stand state execut semant function ff 0 correspond state execut semant function execut initi point r ij knowledg defin valu regist r main idea method describ regist content r definit symbol valu mention entri node procedur well load instruct initi point semant function entri node n initi symbol valu set regist r correspond initi point r execut n symbol valu r stand valu store r execut procedur code semant function assign load instruct initi symbol valu set regist whose valu defin oper similar descript correspond initi point oppos entri node initi valid initi point safe call initi point safe correspond statement part loop con trast initi point insid loop call unsaf problem unsaf initi point valu affect regist may chang loop itera tion therefor make safe assumpt initi valu obtain safe approxim case symbol valu set regist set special valu fig 3 use oper phi extens add oper polynomi result applic phi pairwis addit term b ensur welldefinit oper result set cardin greater k map one operand valu oper return proven semant function monoton gener iter algorithm 10 use solv data flow problem 5 improv valu set propag without limit cardin symbol valu set propag algorithm may lead infinit set regist whose content could chang loop iter respons phenomenon calcul symbol valu set regist compris special valu inaccuraci analysi accept practic therefor propos improv symbol valu set propag algorithm use regist 51 nsv regist section introduc concept nonsymbol valu regist hereaft call nsv regist nsv regist loop g 0 regist r use g 0 content figur 2 union oper symbol valu set n entri n mv arj copi 2 z regist r j 2 ff 0 r j fag n add rirjrm add valu r r j store result r 2 ff n ld memrj load valu address mem regist r j 2 ff 0 r j ae fr jn g r jn safe initi point figur 3 semant function instruct chang modifi propag algorithm work follow 1 first determin nsv regist loop program set nsv regist contain among thing induct regist regist defin load instruct g 0 2 thereaft nsv regist r insert addit node control flow graph begin loop bodi attach statement n 0 uniqu unus statement number end loop bodi node control flow graph reach execut loop insert statement 3 perform symbol valu set propag modifi control flow graph insert node defin semant function set symbol valu set r initi point r 0 init resp setbot consid everi initi point safe improv version algorithm two advantag number iter gener iter algorithm use data flow analysi reduc ad dition compar memori address even though depend nsv regist 52 determin nsv regist follow let g 0 loop statement insid g 0 statement call loop invari destin regist r defin valu loop iter determin loop invari statement g 0 perform two step 1 1 mark statement loop invari use constant operand operand defin outsid g 0 2 iter mark untag statement g 0 loop invari use operand defin loop invari statement algorithm termin statement mark use concept loop invari determin nsv regist loop g 0 simpl way regist r nsv regist g 0 iff r defin statement g 0 loop invari statement g 0 fig 4 show result improv symbol valu set propag simpl program nsv regist loop r1 r2 r3 r4 nsv regist init instruct resp setbot instruct insert program consequ data flow algorithm termin third iter concept regist allow accur analysi memori refer insid loop without nsv regist valu regist r1 would set eventu contrast improv symbol valu propag alway lead proper valu 6 data depend analysi determin data depend achiev differ mean commonli use calcul reach definit resp reach use statement describ problem de termin specif statement memori locat statement valu memori locat written last resp use last reach definit use determin abl infer defus defdef usedef associ defus pair statement indic true depend defdef pair output depend usedef pair antidepend scalar variabl determin reach definit perform wellknown standard algorithm describ 1 use algorithm data depend analysi assembl code deriv mayalia inform ie check whether two storag access could refer storag object improv accuraci data depend analysi mustalia inform need ie check whether two storag access refer alway storag object achiev inform need mechan check whether index express two storag could repres valu solv problem appli modifi gcd test 23 therefor replac appear regist x element correspond symbol valu set check possibl combin whether equat solut exampl refer fig 4 obvious instruct 5 reach use memori instruct 8 deriv memori address r respect assumpt instruct execut loop iter prove differ memori address access mean loopindepend data depend two instruct instruct execut differ loop erat r 112 may differ valu modifi gcd test show instruct may refer memori locat therefor assum loopcarri data depend instruct 5 8 7 implement result method determin data depend assembl code present last section implement user function salto sun sparc 10 workstat run solari 25 present assembl code sparc v7 processor analyz extens processor requir minim technic effort result analysi use tool salto evalu method taken closer look two aspect 1 comparison number data depend use method method implement salto show differ addressbas valuebas depend analysi concern regist access 2 comparison number data depend use addressbas valuebas depend analysi memori access sampl chose 160 procedur sixth public releas independ jpeg group free jpeg softwar packag compress decompress jpeg imag distinguish follow four level accuraci level 1 determin addressbas depend regist access memori model one cell everi pair memori access assum data depend level 2 model memori way level 1 valuebas depend analysi regist access level 3 regist access determin way level 2 analyz memori access symbol valu set propag level 3 deriv depend addressbas level 4 perform valuebas depend analysi level 1 analysi perform salto 19 salto consid control flow two instruct assum data depend even execut one anoth level 2 common techniqu use today instruct schedul eg 1 iter 2 iter 14 init r3 3 ld r140r3 5 ld r180r4 8 st r3r140 9 add r14r1 19 setbot r4 ble ll11 22 setbot r4 figur 4 symbol valu set propag regist r mention valu fr i0 g one gcc 21 one use laru et al 20 system kind valu propag determin addressbas depend classifi level 3 section 8 closer look techniqu valu propag method classifi level 4 yet know method also determin valuebas depend tabl contain 39 procedur improv ie less de pendenc notic level 3 level 4 fig 5 show number depend sum true anti output depend distinguish differ level accuraci well regist memori access fig 5 also show two rightmost column effect valuebas analysi addressbas analysi everi procedur clear see proport data depend method disprov 8 relat work far work done field memori refer disambigu elli 8 present method deriv symbol express memori address chase back reach definit symbol regist express simplifi use rule al gebra two express compar use gcd test method implement bulldog compil work intermedi level close highlevel lan guag author inspir elli eg lowney et al 13 bockl 4 ebcioglu et al 15 approach present ebcioglu implement chameleon compil 16 work assembl code first procedur transform ssa form 5 loop maliz gather possibl regist valu procedur name loc level 1 level 2 level 3 level 4 improv reg mem reg mem reg mem reg mem reg mem test3funct shift sign 33 178 38 87 38 87 31 87 22 51 29 jpeg createcompress 126 4273 1945 423 1945 423 1664 423 1619 90 3 jpeg suppress tabl 74 1127 396 143 396 143 229 143 184 87 20 jpeg finish compress 144 10432 2333 1121 2333 1121 2210 1121 2197 89 1 emit byte 42 433 214 119 214 119 189 119 184 73 3 emit dqt 125 4794 1097 575 1097 575 771 575 726 88 6 emit dht 134 5219 1461 589 1461 589 980 589 870 89 11 emit sof 100 6389 1282 661 1282 661 1087 661 1077 90 1 emit so 100 5252 1285 574 1285 574 873 574 840 89 4 marker 41 561 175 184 175 184 110 184 106 67 4 write frame header 142 4309 1368 679 1368 679 870 679 744 84 14 scan header 86 3656 626 934 626 934 486 934 459 74 6 tabl 83 2495 390 716 390 716 324 716 267 71 18 jpeg abort 38 268 84 93 84 93 67 93 63 65 6 jpeg createdecompress 124 4878 1972 507 1972 507 1716 507 1659 90 3 jpeg start decompress 135 4097 902 674 902 674 860 674 856 84 1 post process 2pass 111 2583 1385 278 1385 278 907 278 878 89 3 jpeg read coeffici 113 3783 897 538 897 538 853 538 851 86 1 select file name 104 5631 1146 473 1146 473 714 473 644 92 10 jround 20 jcopi sampl row read 1 byte 48 653 84 186 84 186 70 186 67 72 4 read 2 byte 93 3115 360 555 360 555 297 555 285 82 4 next marker 42 567 137 305 137 305 112 305 98 46 12 first marker 84 1989 259 360 259 360 197 360 187 82 5 process com 107 6901 979 1147 979 1147 697 1147 592 83 15 process sofn 75 4545 729 670 729 670 601 670 598 85 1 scan jpeg header 34 804 82 306 82 306 78 306 77 62 1 read byte 43 415 105 129 105 129 102 129 97 69 5 read colormap 67 2221 668 305 668 305 583 305 568 86 3 read non rle pixel 40 368 93 125 93 125 84 125 83 66 1 read rle pixel 80 976 289 268 289 268 280 268 279 73 1 jcopi sampl row flush packet 44 468 187 131 187 131 187 131 182 72 3 start output tga 215 12870 3272 974 3272 974 2937 974 2876 92 2 figur 5 number depend sum true anti output depend found four level accuraci result divid registerbas memorybas depend two rightmost column show improv valuebas depend analysi addressbas depend analysi techniqu bulldog compil use regist multipl definit algorithm describ 15 chase reach definit wherea concret implement chameleon compil seem support compar memori address make use gcd test banerje inequ 2 23 result method alia inform debray et al 7 present approach close use address descriptor repres abstract address ie address contain symbol regist address descriptor instruct set mod gamma k residu denot set offset rel regist defin instruct note address descriptor depend one symbol regist data flow system use propag valu control flow graph mod gamma k set use bound semilattic need test 64 howev lead approxim address represent make imposs deriv mustalia inform second drawback definit regist differ control flow path join set map compar address descriptor reduc comparison modgammak set use domin inform handl loop cor rectli deriv data depend inform 9 conclus paper present new method detect data depend assembl code work two step first perform symbol valu set propag use monoton data flow system comput reach definit reach use regist memori access deriv valuebas data depend compar memori refer use modif gcd test known approach memori refer disambigu propag valu memori cell rememb load memori caus destin regist symbol valu compar two memori refer must mind regist defin differ instruct may differ valu even load memori address handl situat plan extend method propag valu memori cell softwar pipelin one major applic present work near futur famili techniqu overlap execut differ iter origin loop therefor requir precis depend analysi addit inform distanc depend develop work entail particular discov induct variabl possibl postpass soon loop invari known coupl known depend test banerje test omega test 18 consid final extend method interprocedur analysi would lead accur depend analysi present assum content almost regist memori cell may chang evalu procedur call first step could make assumpt use global memori loca tion could deriv exact depend acknowledg thank refere comment help improv paper r depend analysi supercomput global instruct schedul superscalar machin exploit finegrain parallel effici method comput static singl assign form experi local microcod compact horizont machin alia analysi execut code compil vliw architectur trace schedul techniqu global microcod compact monoton data flow analysi framework detect conflict structur access lazi array dataflow depend analysi studi number memori port multipl instruct issu machin compilerarchitectur interact treebas vliw processor percol schedul parallel compil techniqu omega test fast practic integ program algorithm depend analysi salto system assemblylanguag transform optim instruct schedul execut edit gnu instruct schedul limit instructionlevel parallel supercompil parallel vector comput tr compil principl techniqu tool detect conflict structur access array expans effici method comput static singl assign form depend flow graph algebra approach program depend pointerinduc alias problem taxonomi limit instructionlevel parallel practic algorithm exact array depend analysi abstract interpret applic logic program binari translat instructionlevel parallel process multiflow trace schedul compil hierarch approach instructionlevel parallel abstract interpret instruct schedul execut edit studi number memori port multipl instruct issu machin alia analysi execut code pathsensit valueflow analysi advanc compil design implement depend analysi supercomput design analysi comput algorithm walktim techniqu exact method analysi valuebas array data depend data depend analysi assembl code percol schedul parallel compil techniqu bulldog ctr thoma rep gogul balakrishnan junghe lim intermediaterepresent recoveri lowlevel code proceed 2006 acm sigplan symposium partial evalu semanticsbas program manipul januari 0910 2006 charleston south carolina saurabh chheda osman unsal israel koren c mani krishna csaba andra moritz combin compil runtim ipc predict reduc energi next gener architectur proceed 1st confer comput frontier april 1416 2004 ischia itali patricio buli veselko gutin extend ansi c processor multimedia extens intern journal parallel program v31 n2 p107136 april