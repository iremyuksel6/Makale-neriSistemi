creation view reus softwar differ data represent softwar reus inhibit mani differ way equival data repres describ method view construct semiautomat describ applic data type correspond abstract type use numer gener algorithm given view special version gener algorithm oper directli applic data produc compil enabl reus gener algorithm applic minim effort graphic user interfac allow view specifi easili rapidli algorithm present deriv symbol algebra equat relat variabl use applic data variabl need gener algorithm arbitrari applic data structur allow unit measur convert need techniqu allow reus singl version gener algorithm varieti possibl data represent program languag techniqu also appli data convers objectori function transform program b introduct algorithm like mathemat theorem sens algorithm develop reusabl never recod manual like engin artifact howev algorithm use applic must adapt fit part applic almost everyon will reus standard algorithm sqrt algorithm test whether point insid polygon less like reus argument result type sqrt match applic type howev mani possibl polygon represent applic unlik use data type librari program strong type import optim check type static compil avoid gener runtim typecheck code thu provid type safeti save time storag unfortun rigid type inhibit reus tradit way make applic data match procedur reus costli discourag reus 24 effect method reus must minim two cost 1 human cost time requir programm find program reus understand document adapt reus program andor applic fit 2 comput cost ad cost run reus program compar handwritten version paper describ method reus use view describ applic data type correspond abstract type use gener algorithm algorithm base algebra creat view correspond specifi via easili use graphic interfac given view compil produc effici special version gener algorithm oper directli applic data singl copi gener algorithm special varieti applic data represent varieti program languag effici encapsul type safeti strong type check retain barrier reus caus type rigid elimin techniqu describ enabl technolog make softwar reus easi practic graphic interfac illustr fig 1 exampl assum user exist data describ christma tree user would like reus small program calcul area side cone data view type xmastre cone made use program mkv make view mkv cone xmastre figur 1 view christma tree cone view specifi correspond applic data type abstract represent cone user first select button cone diagram select correspond item within menu field xmastre type system draw line select item show correspond use correspond togeth equat associ cone system construct view xmastre cone gener procedur associ cone special use xmastre data gldefun t1 treexmastre function written lisplik function form request sidearea cone view tree function compil lisp code comput sidearea directli applic data structur lambda tree 31415926535897931 mechan translat produc code applic languag c float t1c tree return 31415926535897931 treebaseradiu sqrtsquaretreebaseradiu user obtain special code without understand algorithm without understand implement cone abstract data type user need select item diagram correspond applic data paper concentr numer data kind use scientif engin program previous describ 33 34 35 techniqu reus gener algorithm deal discret data structur link list tree method togeth method describ paper allow reus algorithm involv discret data structur numer data gener algorithm special rang simpl formula formula area circl larger procedur test whether point insid polygon section 2 give formal definit view section 3 present algorithm construct view correspond use algebra manipul equat section 4 describ graphic user interfac specifi view section 5 describ sever way view enabl softwar reus special gener procedur translat data desir form objectori function transform program section 6 survey relat work section 7 present conclus final onlin demonstr program describ represent view tradit data type combin two issu separ facilit reus 1 way applic data repres 2 procedur associ conceptu kind object term implement inherit interfac inherit objectori program 9 two combin code procedur implicitli state assumpt detail data represent inhibit softwar reus sinc assumpt made write procedur becom requir must met procedur reus effect reus assumpt must minim objectori program function program partli separ two issu still make represent assumpt also incur perform penalti discuss later view make clean separ represent procedur compil techniqu yield good perform produc code multipl target languag mani way represent equival data differ 1 name individu variabl 2 data represent unit measur variabl 3 data structur use aggreg variabl 4 set variabl chosen repres object 5 conceptu method ontolog 30 represent exampl vector could repres use cartesian coordin polar coordin order reus gener algorithm applic data must possibl either translat data form expect algorithm modifi algorithm work exist data done use view view describ applic data type correspond abstract type effect view encapsul applic data type make appear abstract fig 2 illustr applic type pipe view circl defin term radiu radiu circl correspond insidediamet pipe divid 2 view make visibl name radiu hide name pipe procedur defin circl inherit view note case pipe circl rather circl use view pipe second view pipe circl use outsidediamet also use length insidediamet outsidediamet materi radiu pipeascircl pipe figur 2 view encapsul applic data formal notion view follow abstract type consid abstract record contain set basi variabl view encapsul applic type hide name present extern interfac consist basi variabl abstract type view allow basi variabl read written view emul abstract record maintain two properti 1 storag properti valu z written basi variabl v read v yield valu z 2 independ properti read basi variabl v yield valu z valu written basi variabl v j read v still yield z two properti express behavior normal expect record store valu retriev store one field chang valu field properti maintain view faith emul record consist basi variabl use applic type intern storag view inherit gener procedur associ abstract type view thu make applic type appear fullfledg implement abstract type smith 45 use term theori morphism similar notion gri 17 use term coupl invari cite term coordin transform use dijkstra 7 exampl fig 2 illustr simpl view pipe view circl term basi variabl radiu read radiu accomplish divid insidediamet 2 write radiu implement multipli valu written 2 store insidediamet sourc code access radiu view equival compil code c shown gldefun t5 ppipe radiu circl p float t5 p return pinsidediamet 2 gldefun t6 ppipe rreal radiu circl p r return view make applic data appear exactli like abstract type gener procedur defin abstract type produc result use applic data view optim inlin compil code access data view special version gener algorithm oper directli applic data effici practic often necessari relax storag independ properti slightli 1 storag independ properti assum hold despit represent inaccuraci eg floatingpoint roundoff error exampl applic type use polar coordin view cartesian vector valu x read may slightli differ valu x written 2 view may partial ie may defin basi variabl use exampl comput area circl radiu need use undefin basi variabl detect error compil 3 creation view correspond view contain set procedur read write basi variabl abstract type procedur could written hand howev nontrivi ensur procedur complet consist effici satisfi storag independ properti procedur view applic type lineseg fig 5 66 line code would difficult make view manual section describ algorithm deriv procedur view correspond use symbol algebra later section describ graphic user interfac make easi specifi correspond 31 basi variabl equat setf get circl basisvar radiu setf get circl equat diamet 2 radiu circumfer pi diamet area pi expt radiu 2 figur 3 equat circl abstract type defin set basi variabl set equat basi variabl equat simpl circl abstract type shown fig 3 lineseg shown fig 4 equat written fulli parenthes lisp notat oper appear first subexpress basi variabl specifi design abstract data type constitut contract implement user gener procedur implement assum everi use gener procedur behav set basi variabl directli implement user assum view applic data emul direct implement basi variabl gener procedur work applic data view creat correspond provid graphic interfac equat correspond pair abstractvar applicationvar associ variabl abstract type correspond variabl applic process sequenti view must procedur read write basi variabl maintain storag independ properti procedur deriv symbol algebra although power packag mathematica 54 exist use simpl equat solver interfac actual allow algebra express term variabl comput quantiti applic type setf get lineseg basisvar p1x p1i p2x p2i setf get lineseg equat p1i p1 p2i p2 deltay p2i p1i slope deltay float deltax slope tan theta slope 10 tan phi length sqrt expt deltax 2 expt deltay 2 theta atan deltay deltax phi atan deltax deltay deltay length sin theta deltax length co theta deltay length co phi figur 4 equat lineseg rel larg possibl redund set simpl equat fig 4 equat describ abstract data type typic simpl simpl equat solver suffici equat solv algebra manipul equat solver given formula desir variabl lefthand side formula desir variabl equat solv otherwis attempt made invert righthand side use algebra law find desir variabl exampl equat x z equival x z x z manipul perform recurs desir variabl isol cours procedur assum desir variabl occur exactli equat equat specifi variabl tupl variabl use describ group relationship applic data might specifi point term separ x compon data structur repres point whole either contain x compon directli view defin x user graphic interfac abl specifi either whole represent point one compon howev would incorrect specifi whole compon treatment tupl equat describ guarante correct combin specifi correspond tupl definit equat defin extract compon tupl 32 increment equat solv equat set initi make copi equat target abstract type correspond abstract variabl applic variabl process equat set examin see whether equat solv increment solut equat accomplish sever goal 1 produc equat comput variabl abstract type term store variabl applic type equat later compil code 2 produc effici way comput variabl describ 3 algorithm return list variabl defin comput base correspond enter thu far button variabl remov user interfac prevent user enter contradictori specif follow algorithm call vardefin perform correspond abstractvari applicationvari 1 abstract variabl ad list defin variabl list solv variabl ie variabl comput correspond specifi far 2 equat examin determin unsolv variabl contain exactli one unsolv variabl equat solv produc new equat defin variabl righthand side new equat symbol optim use patternmatch optim ii new equat save later use gener code iii variabl ad list solv variabl iv equat delet b unsolv variabl equat delet case occur equat set contain multipl equat comput variabl assum equat set consist equat repres mathemat ident among variabl alreadi defin c equat defin tupl variabl compon tupl solv variabl ad list delet tupl variabl equat delet equat contain delet tupl variabl equat delet delet tupl variabl never becom defin 3 variabl solv step 2a step 2 repeat 4 final list variabl return list includ newli defin variabl variabl solv use equat delet tupl variabl figur 5 view ls1 line segment fig 5 show correspond applic type ls1 lineseg correspond specifi use graphic user interfac vardefin call individu correspond specifi correspond save view remad without use graphic interfac correspond pair abstract variabl field applic type exampl fig 5 correspond length size fig 6 show call vardefin action perform correspond process action label number step algorithm correspond process two result produc 1 list abstract variabl defin refer applic type 2 list equat defin abstract variabl 1 enter vardefin 2c delet tupl 2d delet eqn p1x x p1 2d delet eqn p1i p1 4 exit var p1 p1i 1 enter vardefin 4 exit var length 1 enter vardefin 2a solv eqn slope tan theta 2a solv eqn phi pi 20 theta 2a solv eqn deltay length sin theta 2a solv eqn deltax length co theta 3 repeat step 2 2a solv eqn deltay p2i p1i give p2i deltay p1i 2b delet eqn slope deltay 2b delet eqn slope 10 tan phi 2b delet eqn length 2b delet eqn atan deltay deltax 2b delet eqn phi atan deltax deltay 2b delet eqn deltay length co phi 2b delet eqn deltax length sin phi 3 repeat step 2 2c delet tupl 2d delet eqn p2x x p2 2d delet eqn p2i p2 4 exit var p2 p2i deltax deltay phi 1 enter vardefin 2a solv eqn deltax p2x p1x give p1x p2x deltax 3 repeat step 2 4 exit var p1x p2x figur increment equat solv abstract type gammapsi r theta theta theta theta figur 7 variabl depend graph ls1 equat form direct acycl graph ultim defin variabl lefthand side equat term refer applic type fig 7 show graph ls1 exampl variabl righthand side equat replac defin equat process repeat replac possibl result express tree whose leav refer applic type 2 easili prove induct initi solv variabl defin correspond applic type variabl becom solv via equat defin term previous solv variabl therefor graph variabl refer acycl replac variabl equat definit result express tree whose leaf node refer applic type gener abstract type defin procedur comput variabl shown diagram function basi variabl therefor strictli necessari view type defin procedur comput basi variabl variabl could deriv howev approach might ineffici exampl would ineffici calcul length basi variabl applic type sinc ls1 type store length directli field size desir comput variabl directli possibl applic data ie use data refer oper possibl vardefin algorithm oper increment produc equat calcul abstract variabl soon possibl equat therefor close refer applic type would possibl guarante optim comput variabl implement search algorithm replac process perform glisp compil code use view compil 1 assign abstract variabl defin field applic type cost 1 mark solv 2 examin equat equat set determin variabl solv term exist solv variabl assign cost solut sum cost compon cost oper variabl unsolv higher cost adopt new equat definit new cost cost 3 repeat step 2 redefinit occur implement algorithm vardefin algorithm approxim produc excel result practic algorithm would use oper much higher cost other 33 store basi variabl gener procedur read write data thu necessari defin method store basi variabl view assum valu store basi variabl reason restrict sinc correspond record consist basi variabl ordinari program languag store method small procedur whose argument instanc applic type valu store basi variabl procedur must updat applic data way storag independ properti maintain without constraint method use store variabl would ambigu gener algorithm might behav differ differ data implement variabl abstract type correspond directli field applic type call transfer variabl list save fig 7 transfer variabl p1i length theta p2x store new valu transfer variabl follow chang valu basi variabl would accomplish store basi variabl procedur could deriv trivial way 1 comput valu basi variabl one store applic data 2 comput valu transfer variabl basi variabl 3 store valu applic data structur howev procedur might ineffici desir updat smallest possibl subset store variabl algorithm accomplish 1 set basi equat creat done initi equat set equat abstract type call vardefin basi variabl result set equat comput nonbasi variabl term basi variabl implicitli depend graph show depend variabl basi variabl 2 set xfer comput subset transfer variabl depend basi variabl store depend determin recurs comput union leaf node express tree transfer variabl implicitli defin basi equat 3 set dep comput subset basi variabl member xfer depend 4 code gener comput basi variabl dep basi variabl store applic data 5 code gener comput transfer variabl xfer store correspond field applic structur temporari variabl gener intermedi variabl use comput transfer variabl use otherwis intermedi variabl expand use basi equat result algorithm procedur revis applic data structur much necessari emul store basi variabl leav valu basi variabl unchang one procedur creat basi variabl special case basi variabl correspond exactli transfer variabl affect valu transfer variabl procedur need creat glambda varls1 p1i deltay p2i p1i deltax p2x p1x figur 8 method store p1i ls1 data structur exampl procedur store basi variabl p1i ls1 shown fig 8 although p1i correspond directli low field also necessari updat valu size angl field order leav valu basi variabl p2i unchang right field need updat 34 creat applic data basi variabl gener procedur creat new data structur exampl two vector ad produc new vector therefor view must procedur creat instanc applic type set basi variabl valu similar store basi variabl except basi variabl store simultan glambda self p1x p1i p2x p2i let deltay deltax deltay p2i p1i deltax p2x p1x angl atan deltay deltax figur 9 method creat ls1 data structur basi variabl fig 9 show procedur creat ls1 data structur set lineseg basi variabl two local variabl deltax deltay creat sinc variabl use compil glisp function produc instanc ls1 data structur specifi compon valu tupl substructur involv addit function insert creat well glisp compil invok method compil function result use view recurs exampl lineseg could specifi two point p1 p2 polar coordin r theta view cartesian vector case creat new lineseg instanc would also creat new polar compon 35 data translat view suppos two data type 1 2 view abstract type easi translat data 1 type 1 1 basi variabl v abstract type comput valu data 1 use view type 1 view view figur 10 applic data share view 2 creat data structur type 2 set basi variabl use view howev algorithm might effici exampl type 1 2 might store nonbasi variabl could transfer directli without comput basi variabl valu reason develop anoth algorithm creat data translat procedur algorithm begin find uniqu abstract type intersect view sourc goal type name view use type specifi intersect uniqu next set xfer comput set transfer variabl goal type ie variabl abstract type correspond store field goal type code gener creat instanc goal type use valu transfer variabl share view sourc type sinc view comput transfer variabl close sourc data possibl result code often effici never wors version comput basi variabl first optim code could guarante search process describ earlier 36 unit convers applic data use variou unit measur program languag omit unit measur entir way state unit use much less check consist unit glisp allow unit specifi automat perform unit convers 37 check valid therefor unit convers perform automat use view describ paper check user could specifi partial set correspond abstract type applic type gener procedur defin abstract type may involv subset basi variabl exampl possibl comput slope lineseg abstract variabl theta defin howev actual error detect system user enter correspond mkv issu warn basi variabl remain unsolv method store basi variabl produc variabl solv basi variabl set dep describ section 33 solv method creat applic data structur basi variabl produc basi variabl solv attempt special gener procedur use miss part view type result error detect glisp compil possibl user specifi correspond comput store exampl variabl abstract type could defin sum two store field applic type possibl determin unambigu store variabl attempt store variabl result error detect glisp compil view replac evad strong type inde code produc correctli type mechan translat strongli type languag view enhanc type check check unit measur provid encapsul view use oper defin view avail view mechan provid benefit encapsul enhanc reusabl produc effici code encapsul mechan 9 4 graphic user interfac graphic user interfac make easi specifi correspond applic type abstract type use mous point devic program call mkv make view call goal abstract type sourc type argument mkv open window draw menu valu avail sourc type diagram menu variabl abstract type fig 1 user select item goal diagram click mous label button diagram interfac program highlight button mous pointer move near click mous select item user select correspond item menu repres applic data line drawn two item show correspond user also specifi algebra express involv one applic data field select op command menu specifi express tree oper operand diagram present button mani way repres given kind data 3 diagram like button correspond directli exist form data fig 11 show diagram lineseg even though lineseg simpl concept line segment could specifi mani way two end point one end point length angl etc diagram intend present virtual reason possibl button interfac sever advantag 1 diagram easili rapidli perceiv human 26 wide use engin scientif commun 11 3 altern represent suffici differ requir differ diagram menu select among altern diagram could present user first figur initi diagram line segment 2 interfac selfdocu user need consult manual know detail abstract data type specifi view 3 interfac fast requir mous click creat view 4 user perform errorpron algebra manipul easi add diagram new abstract type draw program allow creation diagram includ button thing need specif basi variabl equat abstract type shown fig 3 4 achiev reus view view import practic reus achiev clean separ represent applic data abstract data type use gener procedur user obtain benefit reus without understand conform standard defin someon els section describ sever way view appli achiev reus 1 special gener procedur view 2 translat data 3 creation wrapper transform use objectori function transform program 51 special gener procedur glisp compil 31 32 produc special version gener procedur compil rel view result selfcontain procedur perform action gener procedur directli applic data special procedur use part applic program glisp highlevel languag abstract data type compil lisp implement common lisp 47 glisp type includ data structur lisp languag glisp describ briefli detail see 33 31 data represent barrier reus languag syntax program code depend data structur use depend whether data store comput prevent reus code altern implement data glisp use singl syntax similar lisp function call access featur object 33 interpret form depend compiletim type object 1 featur name data field object code access field compil 2 featur messag selector defin type object runtim messag send compil b procedur implement messag special compil inlin recurs 3 featur name view defin type object type object local chang view type 4 featur defin function code left unchang function call 5 otherwis warn messag gener featur undefin way gener program access featur applic type without make assumpt featur implement similar objectori program howev sinc actual data type known compil time messag send elimin replac inlin compil call special procedur equival make transform code significantli improv effici compil code view implement glisp type whose store form applic data abstract type associ view superclass view type view type defin messag comput basi variabl abstract type applic type simpl exampl consid handwritten simplic view pipe circl fig 2 pipeascircl p pipe prop radiu insidediamet p super circl store form pipeascircl name p type pipe basi variabl radiu defin insidediamet pipe divid 2 circl superclass method circl inherit pipeascircl gldefun t7 ppipe area circl p float t7 p return 078539816 function t7 argument p whose type pipe code circl p chang type p view type pipeascircl definit area inherit circl compil inlin definit term radiu expand inlin insidediamet pipe divid 2 use view zero cost runtim optim combin translat view constant produc new constant 4 view made gener procedur abstract type avail automat special thu singl view process allow reus mani procedur larger exampl consid function find perpendicular distanc point left direct line segment point right distanc neg although larg function easi find effect algorithm refer book deriv hand graduat student assign produc procedur hand ls1 data type report take 20 minut hour book often omit import featur 3 assum human determin sign result even formula found may express term avail data version formula involv divis number nearli zero reus care develop gener procedur faster less costli less errorpron write one hand code result view compil process present expect user system read understand code author 42 propos user read edit code produc automat program system easi read someon els code especi true machinegener code optim expect user treat output system black box often done librari subroutin fig 12 show gener function linesegmentleftofdist fig 13 show special version ls1 record c code produc glisp compil gldefun linesegmentleftofdist lslineseg pvector deltay ls figur 12 gener function distanc point left line segment float lsdist l p return coslangl px lright lsize coslangl figur 13 leftofdist special ls1 c follow mechan translat c result c code depend lisp sinc ls1 type quit differ abstract type lineseg exampl illustr singl gener procedur reus varieti quit differ implement data special version effici two multipli divis length remov algebra optim express term applic data without ad overhead repeat subexpress sometim appear special code remov wellunderstood compil techniqu common subexpress elimin 43 use viewpoint map abstract data type correspond applic type isomorph two base gener algorithm special version algorithm compil program ordinari program languag produc equival program term lowerlevel oper data implement special gener procedur produc equival procedur tightli bound specif implement abstract data similar viewpoint found mathemat definit isomorph eg 39 p 129 denot semant 15 work program transform 45 17 13 describ view term isomorph howev note mani applic use approxim satisfi strict mathemat definit isomorph 52 reus data translat one way reus program data differ format translat data right form translat also requir combin separ data set differ format use comput network increas user often need combin data differ sourc use data program assum differ format arpa knowledgeshar project 30 address problem share knowledg base develop use differ ontolog write data translat program hand requir human understand data format 40 present languag describ paramet list system produc interfac modul translat sourc call sequenc target call sequenc paper 33 describ automat construct translat procedur correspond techniqu paper extend standard data represent format one way achiev interoper howev difficult find standard fit everyon need conform standard costli user view provid benefit standard without cost describ section 35 view two applic type common abstract type data convers procedur convert one applic type gener automat thu interchang data requir owner data set creat view describ local data format correspond abstract type n view need translat among n data format knowledg other data format unnecessari use remot procedur call server across network could facilit advertis abstract data type expect remot procedur user creat view data abstract data translat data perform automat materi new data set may comput expens cost minor small data set also reason translat larg data set increment whole larg amount comput perform 25 found translat data phase larg compil minor cost 53 objectori function transform program ming algorithm paper use style program develop one benefit objectori program oop reus method predefin time oop system often impos restrict applic object must meet eg applic object must store data superclass must provid certain method name use exist method thu reus oop requir conform exist standard view allow new kind object use exist method term adapt wrapper 9 denot object class make applic data appear instanc target class wrapper object contain pointer applic data perform messag translat implement messag requir member target class pipe exampl shown fig 2 wrapper class pipeascircl would implement radiu messag expect class circl send insidediamet messag pipe return result messag divid 2 algorithm user interfac describ paper could use creat wrapper class messag expect target class correspond basi variabl equat produc make view easili convert method appropri syntax oop system previous describ 35 use wrapper object allow display directmanipul edit user data gener editor program two disadvantag use wrapper object 9 necessari alloc wrapper object runtim cost time storag second sinc translat data perform interpret overhead addit messag send translat may perform mani time execut howev case cost toler wrapper object easi way achiev reus view use relat way function program function creat calcul valu basi variabl data applic type pipe exampl function radiusppip would creat return valu insidediamet divid 2 store basi variabl could implement store applic data function languag allow creat new data updat valu case strict function languag polya languag 17 8 allow user specifi set transform made intermedi code gener algorithm transform equival transform perform glisp compil 31 algorithm present could use gener transform languag polya 6 relat work 61 softwar reus krueger 24 excel survey softwar reus also give criteria effect softwar reus biggerstaff perli 4 contain paper theori applic softwar reus mili 29 provid extens survey approach softwar reus emphas technic challeng reus softwar product artifici intellig approach softwar engin describ 1 28 41 paper sourc review individu section 62 softwar compon weid 52 propos softwar compon industri analog electron compon industri base formal specifi unchang compon rigid interfac compon would verifi unchang rigid interfac error use modifi would prevent view describ paper allow compon adapt fit applic 63 languag gener procedur program languag ada modula2 21 27 c 48 allow parameter modul construct modul contain gener procedur parameter abstract data type user obtain special version modul procedur howev languag allow much less parameter possibl use view exampl possibl defin procedur work either cartesian polar vector even possibl state unit measur languag 64 function set languag ml 53 38 like strongli type lisp includ polymorph function eg function list arbitrari type functor function map structur compos type function structur ml also includ refer pointer allow imper program ml functor instanti gener modul contain type howev ml allow gener gener describ system allow store data structur view exampl radiu valu store pipe view system also allow composit view miranda 50 strongli type pure function languag support higherord function allow gener function written often difficult write effici program pure function languag 38 chang data valu requir creation new structur function languag 65 transform system transform system gener program start abstract algorithm specif repeatedli appli transform replac part abstract algorithm code closer implement execut code final reach view specifi transform featur abstract type implement kant et al 23 describ sinaps system gener scientif program involv simul differenti equat larg spatial grid applic seismic analysi sinaps accept rel small program specif gener much larger program fortran languag repeatedli appli transform within mathematica 54 system appear work well within domain applic kid 46 transform gener algorithm execut version highli effici combinatori problem user select transform use suppli formal theori domain applic system interest power user must mathemat sophist gri prin 16 propos system would use syntact transform specifi implement abstract algorithm 31 describ relat techniqu implement earlier volpano 51 gri 17 describ transform program syntact coordin transform variabl pattern involv use vari abl view requir fewer specif oper semant typebas algebra level rather syntact level pattern use handl automat algebra optim compil berlin weis 2 use partial evalu improv effici scientif pro gram use inform featur problem constant compil perform mani constant calcul possibl compil time result program special run faster system incorpor partial evalu mean inlin compil symbol optim 66 view goguen describ librari interconnect languag call lil 12 implement languag obj3 13 14 incorpor parameter program view view obj3 map theori modul consist map sort type sort oper oper obj3 base formal logic theori use ordersort algebra oper theorem prover comput perform term rewrit author state 14 p 56 obj3 compil rather closer interpret associa tivecommut rewrit engin effici enough larg problem tracz 49 describ lileanna implement lil construct ada packag view lileanna map type oper except theori system creat view correspond applic type mathemat object possibl correspond gener onetoon correspond specifi obj3 view system produc effici special procedur ordinari program languag intend use program gener system garlan 10 kaiser 22 use view allow multipl tool program develop environ access common set data program develop meld system combin featur collect object class method allow addit construct system select compon featur hailpern ossher 18 describ view oop subset method defin class use view restrict use certain method exampl debugg could use method unavail ordinari program system use develop environ 19 67 data translat idl interfac descript languag 25 allow exchang larg structur data possibl includ structur share separ written compon larg softwar system compil idl perform represent translat differ represent data use differ compon use idl requir user write precis specif sourc target data structur herlihi liskov 20 describ method transmiss structur data net work possibl differ data represent destin method employ userwritten procedur encod decod data transmiss represent also describ method transmiss share structur 5 describ system automat gener stub program interconnect process modul differ languag processor work complementari techniqu present paper common object request broker architectur corba 6 includ interfac definit languag automat gener stub allow interoper object across distribut system across languag machin architectur purtilo atle 40 describ system translat call sequenc produc small interfac modul reorder translat paramet necessari call procedur case emphasi rel direct translat data focus issu record structur number represent etc techniqu describ paper could use extend approach case ontolog method descript object differ special gener algorithm effici interpret convers data 68 objectori program oop popular mechan softwar reus gamma et al 9 describ design pattern use oop describ view could use construct wrapper object make applic object appear member desir class use view glisp compil extend good idea oop 1 oop make connect messag correspond procedur runtim often signific cost 9 c 48 rel effici messag dispatch cost flexibl glisp 31 special method inlin optim result code context overhead interpret elimin often extra cost 2 interpret messag oop postpon error check runtim view glisp type infer inlin expans caus check done static 3 view provid clean separ applic data abstract type oop system requir conform instanc superclass eg instanc may contain data variabl view multipl view type eg pipe view circl two distinct way view allow partial use abstract type eg area circl found without specifi center 4 oop user must learn avail class messag oop oper system involv 1500 class nontrivi view user understand abstract type indic correspond applic type abstract type user interfac selfdocu 5 system allow translat separ applic languag c without requir applic written particular languag 7 discuss conclus believ gener applic code compil view effici practic techniqu expans code view recurs compil time composit view possibl gener algorithm often written term gener exampl present paper small one clariti approach scale larger algorithm produc special version algorithm compris 200 line code c eg find convex hull set point use leftofdist gener function defin lineseg find perimet area center mass polygon etc compil translat c 200line program take approxim 10 second workstat much faster human code output code effici often better code produc human programm effici gener code consid special compil gener procedur best way achiev reus use view approach sever signific advantag 1 user interfac selfdocu allow view creat quickli easili 2 special version gener algorithm applic creat second 3 special algorithm produc standard program languag independ system 4 code produc optim effici 5 static error check perform compil time relat techniqu use creat program connect diagrammat represent physic mathemat law 36 size variou compon system noncom line lisp sourc code shown follow tabl compon line make view mkv 265 symbol algebra 1003 graphic interfac 1020 glisp compil 9097 translat c 831 total 12216 symbol algebra compon includ algorithm use mkv describ paper amount code requir make view larg translat special code languag c difficult c translat compon larg much could reus languag translat use pattern easili chang acknowledg comput equip use research furnish hewlett packard ibm thank anonym review help suggest improv paper r ieee tran compil scientif code use partial eval uation crc standard mathemat tabl formula softwar reusabl 2 vol packag system heterogen execut environ common object request broker architectur specif disciplin program program transform design pattern element reusabl objectori softwar view tool integr environ reus interconnect softwar compon principl parameter program introduc obj denot descript program languag new notion encapsul transform new languag construct extend object support multipl interfac access control integr tool fragment valu transmiss method abstract data type data abstract program develop use modula2 synthes program environ reusabl featur scientif program autom synthesi softwar reus idl share intermedi represent diagram sometim worth 10000 word modula2 softwar compon librari autom softwar design reus softwar issu research direct enabl technolog knowledg share glisp lispbas program system data abstract negoti interfac softwar reus softwar reus view type cluster softwar reus compil view type cluster gener program connect physic model convers unit measur ml work programm introduct discret structur modul reus interfac adapt read artifici intellig softwar engin programm apprentic mathemat theori global program optim model thought kid semiautomat program develop system knowledgebas softwar develop system languag lileanna parameter program languag overview miranda templat approach softwar reus reusabl softwar compon mathematica system mathemat comput advanc comput tr ctr jeffrey parson chad saunder cognit heurist softwar engin appli extend anchor adjust artifact reus ieee transact softwar engin v30 n12 p873888 decemb 2004 ted j biggerstaff perspect gener reus annal softwar engin 5 p169226 1998 batori bart j geraci composit valid subject genvoca gener ieee transact softwar engin v23 n2 p6782 februari 1997 gordon novak jr softwar reus special gener procedur view ieee transact softwar engin v23 n7 p401417 juli 1997