structur faulttoler object system modular distribut environ objectori approach system structur found widespread acceptanceamong design develop robust comput system author propos asystem structur distribut program system support persist object anddescrib properti persist recover implement thepropos structur modular permit easi exploit distribut computingfacil provid underli system exist system construct accord toth principl espous examin illustr practic util proposedapproach system structur b introduct one comput model advoc construct robust distribut applic base upon concept use nest atom action nest atom transact control oper persist longliv object model object instanc class class defin set instanc variabl object contain oper method determin extern visibl behaviour object oper object access instanc variabl thu modifi intern state object assum absenc failur concurr invoc oper produc consist class specif state chang object atom action use ensur consist preserv even presenc concurr invoc failur design implement program system capabl support object action base applic utilis exist distribut system servic challeng task support distribut comput current avail system vari provis bare essenti servic form network support messag pass slightli advanc servic interprocess commun eg remot procedur call name bind locat name servic remot file access challeng lie integr servic advanc program environ paper present architectur claim modular natur overal system function divid number modul interact well defin narrow interfac describ facilit task implement paper appear ieee tran parallel distribut system architectur varieti system differ support distribut comput next section present object action model comput indic number distribut transpar mechan integr within model section 3 identifi major system compon interfac interact compon propos system structur base upon retrospect examin distribut system arjuna 11 23 29 built newcastl main aspect system present section 4 examin light discuss preced section section also describ modular structur system enabl us port number distribut comput platform arjuna system thu demonstr practic propos approach system structur discuss section 3 basic concept assumpt assum hardwar compon system comput node connect commun subsystem node assum work either specifi simpli stop work crash crash node repair within finit amount time made activ node may stabl crashproof nonstabl volatil storag nonstabl storag data store volatil storag assum lost crash occur data store stabl storag remain unaffect crash fault commun subsystem may result failur lost duplic corrupt messag well known network protocol techniqu avail cope failur treatment discuss assum process function node capabl commun develop idea first describ desir transpar properti distribut system support common say distribut system transpar mean made behav necessari like nondistribut counterpart sever complementari aspect transpar 1 access transpar mechan provid uniform mean invok oper local remot object conceal ensu networkrel commun locat transpar mechan conceal need know whereabout object know name object suffici abl access migrat transpar mechan build upon previou two mechan support movement object node node improv perform faulttoler concurr transpar mechan ensur interferencefre access share object presenc concurr invoc replic transpar mechan increas avail object replic conceal intricaci replica consist mainten failur transpar mechan help exploit redund system mask failur possibl effect recoveri measur state earlier consid program system applic program compos atom action atom manipul persist longliv object atom action nest concern mainli toler lowerlevel hardwar relat failur node crash assum absenc failur invoc oper produc consist class specif state chang object atom action ensur consist state chang object take place despit failur consid applic program initi node root comput distribut execut achiev invok oper object may remot invok oper invoc upon remot object perform via remot procedur call rpc sinc mani objectori languag defin oper invoc synchron 30 rpc natur commun paradigm adopt support access transpar objectori languag furthermor oper invoc may control use atom action properti serialis ii failur atom iii perman effect serialis ensur concurr invoc share object free interfer ie concurr execut shown equival serial order execut form concurr control polici enforc twophas lock requir ensur serialis properti action failur atom ensur comput either termin normal commit produc intend result intend state chang object involv abort produc result state chang object atom properti may obtain appropri use backward error recoveri invok whenev failur occur mask typic failur caus comput abort includ node crash commun failur continu loss messag reason assum toplevel atom action termin normal result produc destroy subsequ node crash ensur third properti perman effect requir commit state chang ie new state object modifi atom action record stabl storag commit protocol requir termin atom action ensur either object updat within action new state record stabl storag commit atom action abort updat get record 5 13 object atom action model provid natur framework design faulttoler system persist object model persist object use normal held passiv state state resid object store object databas activ demand ie invoc made load state method object store volatil store associ server process receiv rpc invoc atom action employ control state chang activ object properti atom action given ensur failur transpar atom action also ensur concurr transpar concurr control protocol twophas lock access transpar normal provid integr rpc preprocessor program develop cycl produc stub code applic object implement varieti name bind cach strategi possibl achiev locat migrat transpar normal persist state object resid singl node one object store howev avail object increas replic thu store one object store object replica must manag appropri replicaconsist protocol ensur object copi remain mutual consist subsequ section describ protocol integr within action base system provid replic transpar assum primit featur heterogen distribut system state object context independ represent ie free refer specif addressspac impli object deactiv storag transmiss network ii execut version method object avail node interest impli object move throughout network simpli transmit state iii machineindepend represent data obtain storag transmiss requir relat distinct properti enabl interpret passiv state object heterogen environ sever prototyp objectori system built often emphasis differ facet overal function exampl system argu 14 arjuna 11 23 29 so 28 guid 4 emphasis faulttoler distribut aspect languag psalgol 3 galileo 2 e 25 contribut understand persist languag featur effort 12 contribut understand design object store relationship databas system build effort describ necessari featur modular distribut program system support persist object 3 system structur 31 comput model system modul discuss mind first present simpl clientserv base model access manipul persist object identifi main system modul necessari support model state earlier consid applic program initi singl node root comput distribut execut achiev invok oper object may remot invok assum persist object least one node say function capabl run object server execut oper object effect would requir access execut binari code object method well persist state object store object store client invok oper object must first connect bound object server manag object respons node provid connect servic client object question passiv state also respons activ object connect request client server order get connect applic program must abl obtain locat inform object name node server object made avail assum persist object possess uniqu system given identifi uid model applic program obtain locat inform two stage first present applic level name object string global access name servic assum object regist name servic name servic map string uid object ii applic program present uid object global access bind servic obtain locat inform applic program client obtain locat inform object request relev node establish connect bind server manag object typic structur applic level program shown creat bind invok oper within atom action break bind model bind stabl surviv crash client server bind server creat object enter scope applic program bound server subsequ crash correspond bind broken repair within lifetim program even server node function surviv bind explicitli broken object go scope applic program activ object longer use within scope client applic client bound server object deactiv simpli destroy associ object server process discard volatil imag object recal object alway latest commit state store stabl object store disk represent object object store may differ volatil store represent eg pointer may repres offset uid model assum object respons provid relev state transform oper enabl state store retriev object store server activ object use oper abort commit process assum object respons perform appropri concurr control ensur serialis atom action effect mean object concurr control object associ case lock method object oper acquir necessari read write lock associ lock manag object access object state lock releas commitabort oper execut identifi main modul distribut program system servic provid support persist object atom action modul provid atom action support applic program form oper start commit abort atom action rpc modul provid facil client connect disconnect object server invok oper object name modul provid map usergiven name object uid bind modul provid map uid locat inform ident host server object made avail persist object support modul provid object server access stabl storag object relationship amongst modul depict figur 1 everi node system provid rpc atom action modul node capabl provid object server andor stabl object storag addit contain persist object support modul node contain object store provid object storag servic via persist object support modul node without stabl storag may access servic via local rpc modul name bind modul necessari everi node sinc servic also utilis servic provid rpc modul applic applic applic object action modul rpc persist object support oper system portabl implement system depend implement binder name modul figur 1 compon persist object system system structur also enabl applic program made portabl applic program directli use servic provid atom action modul respons control access rest modul persist object applic refer access via atom action servic interfac portabl applic depend portabl atom action modul implement figur suggest atom action name bind servic also implement systemindepend portabl way rpc persist object support modul necessarili system depend level reli directli oper system servic possibl make name bind servic portabl structur applic level program make use atom action modul manner suggest atom action modul made portabl provid servic requir rpc persist object support modul easili map onto alreadi provid underli system exampl 6 describ uniform rpc system built make use exist rpc servic applic may well make use host oper system servic directli eg window manag case lose portabl attribut see figur 1 surprisingli way regain portabl applic use portabl subsystem servic eg use x window system 26 portabl graphic servic follow discuss initi make two simplifi assumpt object activ host node object store node without object store abl provid object server ii object replic restrict remov subsequ 32 atom action modul modul design two way modul provid languag independ primit oper beginact endact abortact use arbitrari applic program b objectori languag specif runtim environ atom action main advantag latter approach ensu class hierarchi provid scope applic specif enhanc classspecif concurr control difficult provid former approach although choic central idea put forward discuss second approach mainli experi build environ c 30 describ section 4 explain function requir atom action modul way utilis servic modul consid simpl c program see figur 2 simpl exampl applic program updat remot persist object call thison class exampl option recov state object condit met applic program creat instanc atomicact call begin action oper object commit abort action assum program first process languag specif stub gener eg 23 c whose function process user applic program gener necessari clientserv code access remot object via rpc detail explan step follow 1 exampl b thison bind server 2 atomicact 3 abegin start atom action 4 bop invoc oper op object b 5 aabort abort atom action 6 els aend commit atom action figur 2 atom action exampl line 1 instanc b client stub class exampl creat execut constructor object string thison use object creation time indic name persist object program want access identifi b act local name persist object thison b creat follow function perform precis action perform client stub gener b oper name servic invok pass string thison obtain uid object ii oper bind servic invok obtain name host say server object made avail final iii oper local rpc modul invok creat bind server associ object name uid node bind form commun identifi cid port server suitabl rpc commun detail given descript rpc persist object support modul follow subsect make clear bind establish line 2 instanc class atomicact creat line 3 begin oper invok start atom action line 4 oper op b invok via rpc modul object respons control concurr method oper take necessari step exampl acquir appropri lock line 5 action may abort program control undo chang b line 6 end oper respons commit atom action typic use twophas commit protocol done invok prepar oper server b phase one enabl b made stabl prepar oper succe commit oper server invok make new state object stabl otherwis abort oper invok caus action abort b goe scope program fragment shown figur destroy execut destructor part clientsid destructor stub destructor b break bind object server remot node specif rpc modul oper requir purpos function requir rpc persist object support name bind modul explain detail 33 remot procedur call modul rpc modul provid distinct client server interfac follow oper initi termin oper establish disestablish bind server call oper rpc three oper provid client interfac getrequest sendrepli provid server interfac oper provid rpc modul gener use directli applic program gener stub client server produc stub gener mention client server commun identifi cid socket unix send receiv messag rpc modul node connect manag process respons creat termin bind local server implement initiateuid hostnam oper involv connect manag process cooper local object store process see next subsect return cid object server caller client interfac oper follow semant normal termin indic repli messag contain result execut receiv server except return indic messag receiv oper may may execut normal occur crash server client respons abort current atom action program structur shown previou subsect show bind creation destruct perform outsid applic level atom action instruct enquir would happen presenc client server failur applic level action start finish simpl case crash server node automat effect break connect client client subsequ enter atom action invok server invoc return except action abort client process break bind occur alreadi difficult case client crash suppos client crash immedi execut statement line 2 figur 2 explicit step must taken break orphan bind server node must detect crash break bind function connect manag process embellish includ period check connect client node 22 everi activ object associ object server server use getrequest sendrepli servic oper invoc one server may manag sever object ie correl server process object may onetoon intern detail server thread manag handl invoc relev discuss 34 persist object support modul persist object support modul support rpc modul hide potenti remot stabl object storag system applic also hide system specif detail stabl storag provid uniform servic interfac persist object modul compos two compon objectmanag compon respons provis object server ii objectstor compon act front end local object storag subsystem object store represent disk represent object may differ volatil store represent eg pointer may repres offset uid assum disk represent object instanc class objectst instanc class objectst machin independ represent state passiv object conveni transmiss volatil store object store also via messag node node persist object assum capabl convert state objectst instanc convert previous pack objectst instanc instanc variabl use oper savest restorest respect figur 3 show state transform persist object along oper produc transform oper readstat writest provid objectstor compon primari function objectstor compon store retriev instanc class objectst readstat oper return instanc objectst name uid writest oper store instanc objectst object store given uid addit assum two oper creat delet creat delet object restorest readstat nonvolatil storag volatil storag objectst stabl storag stablestorag storag objectst memori user object stabl state user object load stabl state save state figur 3 object state typic implement persist object support modul would follow storag retriev object manag store demon belong objectstor compon sequenc event discuss previous refer program fragment figur 2 explain term activ persist object support modul assum client program execut node n 1 object thison object store node n 2 see figur 4 client process execut program fragment contain stub object b thu line 2 client execut gener stub b stub b respons access name bind servic discuss earlier obtain locat inform object invok nitiat oper local rpc modul order send connect request connect manag n 2 upon receiv request manag invok activateuid oper provid objectmanag compon objectmanag respons maintain map uid activ object correspond server assum first object current activ objectmanag return via connect manag cid server client n 1 therebi termin invoc initi n 1 assum object passiv objectmanag make use node specif activ polici base either creat new server object b instruct exist server activ b server use store demon retriev objectst instanc uid load method b server invok restorest oper b server acquir cid return client thu termin invoc initi client store daemon object server connect manag figur 4 access object introduc three addit oper objectstor compon necessari commit process writeshadow commitshadow deleteshadow prepar oper commit process receiv server volatil state object b convert instanc objectst use savest oper provid b objectstor oper writeshadow invok creat possibl temporari stabl version server subsequ receiv commit invoc execut commitshadow oper objectstor make temporari version new stabl state object respons server abort oper execut deleteshadow oper discard volatil copi object summaris persist object support modul node provid eight oper singl oper activ local connect manag process seven oper local object server process creat delet readstat writest writeshadow deleteshadow commitshadow object server provid oper prepar commit abort commitabort process persist object manag oper persist object provid order make persist recover savest restorest note atom action need record recoveri data stabl storag eg intent list commit abort action presenc failur exampl consid intent list split client server howev detail discuss extens literatur gloss support nest concurr atom action complic detail manag commit record aspect also central present discuss 35 name bind modul name bind servic togeth support locat object name manag name context servic often design part singl name server becom respons map user suppli name object locat eg 21 howev two servic provid logic distinct function relat applic wherea object name uid map maintain name modul expect static uid locat map maintain bind modul chang dynam system support migrat replic usersuppli name associ object conveni applic programm fundament part system oper within system object identifi uniqu identifi uid map name persist object correspond uid perform name servic oper lookup return uid name servic implement persist object make use servic provid atom action modul appar recurs design easili broken use wellknown cid access name servic addit lookup oper name servic also provid add delet oper insert remov string name given name context name servic alway design exploit exist servic network inform servic 31 rather depend sole atom action relat modul persist object storag bind servic map uid host also design applic atom action servic addit locat oper add delet oper must also made avail enhanc function provid bind servic requir support migrat replic object discuss 36 provis migrat replic transpar architectur discuss far possess function support transpar describ earlier except replic migrat discuss enhanc necessari support two transpar first observ name servic need affect sinc maintain name uid map object bind servic affect howev exampl given object requir state store sever object store support replic aspect discuss start migrat simpl quit effect form object migrat facil made avail support migrat activ object permit object activ away object store node achiev allow oper persist object support modul invoc remot object server local one therebi permit object server process obtain state method object remot object store thu node without object store also run object server node contain persist object support modul without objectstor compon sake simplic assum state method object store togeth singl object store restrict remov easili without affect main idea discuss one possibl way mechanis remot activ discuss assum objectmanag compon persist object support modul longer maintain map uid server activ object rather inform made part bind servic thu passiv object l ocateuid function bind servic return client hostnam object store node togeth list node object server made avail activ object pair hostnam cid indic cid object server manag object node hostnam passiv object activ follow list contain name potenti server node object store node return binder client use criterion eg nearest node select desir server node activ say n direct initi request connect manag process n give name object store node say n k n object server process get task activ object server fetch necessari method state n k acquir cid return cid client initi oper termin client regist cid bind servic registr binder necessari ensur client access object also get bound server sinc assum object respons enforc concurr control polici larg extent solv problem migrat concurr control inform object sinc concurr control object move object scheme discuss extend permit movement object invoc provid client locat object sinc move simpl way make migrat inform avail client leav forward address old site invoc direct automat forward see 8 detail discuss turn attent topic replic transpar far assum persist state object resid singl object store node node object becom unavail avail object may increas replic sever node thu store state one object store object replica must manag appropri replicaconsist protocol ensur object copi remain mutual consist consid case strong consist requir replica regard avail mutual consist persist state avail replica requir ident discuss three aspect replica consist manag first third concern mainli manag inform object replica maintain bind servic wherea second concern mainli manag replica activ 1 object bind necessari ensur applic program present name uid object current passiv bind servic servic return list contain inform replica object mutual consist also b contain latest persist state object inform one replica depend upon replic polici use see activ object activ alreadi bind servic must permit bind function server manag replica activ object assum dynam system permit chang degre replic object eg new replica object ad system import ensur chang reflect bind servic without caus inconsist current client object 2 object activ access passiv object must activ accord given replic polici identifi three basic object replic polici activ replic activ replic one copi passiv object activ distinct node activ copi perform process 27 ii coordinatorcohort passiv replic sever copi object activ howev one replica coordin carri process 7 coordin regularli checkpoint state remain replica cohort failur coordin detect cohort elect one new coordin continu process iii singl copi passiv replic contrast previou two scheme singl copi activ activ copi regularli checkpoint state object store state store 5 checkpoint perform part commit process atom action activ copi fail applic must abort affect atom action restart action result new copi activ activ copi replica case ii must treat singl group applic manner preserv mutual consist suppos replic polici activ replic consid follow scenario see figur 5 group g invok servic oper group g b singl object b b fail deliveri repli g suppos repli messag receiv 1 2 case subsequ action taken 1 2 diverg problem caus fact failur b seen 2 1 avoid problem commun replica group requir reliabl distribut order guarante associ nonrepl system reliabl ensur correctli function member group receiv messag intend group order ensur messag receiv ident order function member 27 gb ga figur 5 oper invoc replic object 3 commit process applic finish use object necessari ensur new state mutual consist object replica get record object store take place commit time applic atom action time also necessari ensur inform object replica maintain bind servic remain accur consid applic modifi object say activ replic use suppos start applic two replica avail crash node make one say modifi commit time inform maintain within bind servic modifi exclud 2 list avail replica otherwis subsequ applic may end use mutual inconsist copi conclud subsect observ introduct migrat replic transpar enforc consist requir bind servic best met compos servic persist object whose oper structur atom action see 16 discuss 4 case studi examin arjuna arriv system structur idea present previou section base experi design implement distribut program system call arjuna 11 23 29 arjuna objectori program system implement c provid set tool construct faulttoler distribut applic construct accord model discuss section 2 arjuna provid nest atom action structur applic program atom action control sequenc oper upon local remot object instanc c class oper upon remot object invok use remot procedur call rpc time write decemb 1992 prototyp system oper two year provid us valuabl insight design develop system architectur present section 3 regard idealis version arjuna 41 arjuna system support network section paper first describ arjuna system design implement run unix workstat network support distribut comput unix socket messag pass network five modul shown figur 1 atom action name bind persist object support rpc modul implement discuss focus approach taken implement atom action modul atom action modul implement use number c class organis class hierarchi familiar develop tradit singl node centralis objectori system applic level object visibl entiti client server process actual work hidden arjuna server process creat dynam rpc made object server creat use facil provid underli rpc subsystem rajdoot also built us 22 current implement arjuna make use unix file system long term storag object class objectstor provid objectori interfac file system design implement arjuna object store discuss elsewher 11 along object name uid scheme implement strategi object store accept perform understand poor name bind servic implement arjuna persist object statemanag atomicact lockmanag lock abstractrecord user defin user defin lock lockrecord recoveri record figur arjuna class hierarchi princip class make class hierarchi arjuna atom action modul depict figur 6 make use atom action applic instanc class atomicact must declar programm applic illustr figur 2 oper class provid begin abort end use structur atom action includ nest action object control result atom action object either instanc arjuna class userdefin class deriv lockmanag henc member hierarchi shown figur 6 arjuna class deriv base class statemanag provid primit facil necessari manag persist recover object facil includ support activ deactiv object statebas object recoveri thu instanc class statemanag princip user object store servic class lockmanag use facil statemanag provid concurr control twophas lock current implement requir implement serialis properti atom action implement atom action facil recoveri persist manag concurr control support collect object class deriv class abstractrecord turn deriv statemanag exampl instanc lockrecord recoveryrecord record recoveri inform lock userdefin object respect atomicact class manag instanc class use instanc class recordlist correspond intent list mention respons perform abort commit consid simpl exampl assum userdefin persist object applic contain atom action access object invok oper op1 involv state chang serialis properti requir write lock must acquir modifi thu bodi op1 contain call appropri oper concurr control see figur 7 bodi op1 setlock new lockwrit actual state chang oper follow figur 7 use lock implement oper oper setlock provid lockmanag class perform follow function case check write lock compat current held lock allow ii use statemanag oper creat recoveryrecord instanc lock write lock state object must retain modif insert recordlist iii creat insert lockrecord instanc recordlist suppos action abort sometim lock acquir abort oper atomicact process recordlist instanc associ invok abort oper variou record implement oper lockrecord class releas write lock recoveryrecord restor prior state abstractrecord base approach manag object properti prove extrem use arjuna sever use summaris recoveryrecord support statebas recoveri sinc abort oper respons restor prior state object howev recoveri capabl alter refin abort oper take altern cours action execut compens function princip mean implement typespecif recoveri userdefin object arjuna class lockrecord good exampl recover lock support lock object abort oper lockrecord perform state restor execut releaselock oper note lock surprisingli also treat object instanc class lock therefor employ techniqu make recover object similarli special mechan requir abort action access remot object case instanc rpccallrecord insert recordlist instanc atom action rpc made object abort action involv invok abort oper rpccallrecord instanc turn send abort rpc server previou section describ three object replic approach perform trial implement activ singl copi passiv replic arjuna 15 17 activ replic often prefer choic support high avail realtim servic mask replica failur minimum time penalti consid highli desir sinc everi function member replica group perform process activ replic object requir function replica object receiv ident invoc ident order thu activ replic requir multicast commun support satisfi rigor reliabl order requir singl copi passiv replic hand implement without recours complex multicast protocol one replica carri comput time howev perform presenc primari failur poorer necessari abort action retri therefor believ fault toler system capabl support number replic scheme main element design summaris bind servic implement one arjuna object maintain group view databas gvd record inform avail replica object gvd replic use either techniqu describ databas access use atom action ii passiv replic access object applic object first contact gvd return list contain locat inform consist replica simpl static order scheme use primari select applic object use rpc modul oper initi bind primari copi access replic object techniqu use commit time primari object respons updat secondari made possibl arjuna state arjuna object transmit network execut action primari found becom inaccess eg node crash action abort part abort procedur gvd access name primari remov list avail replica sinc action nest abort need entir comput enclos action retri crash node contain replica repair includ copi object run join atom action updat copi replica insert name gvd list object summari major chang necessari nonrepl version arjuna creation mainten gvd modif abort commit procedur hint iii activ replic activ object consist activ copi list group view list return gvd atom action access replic object accur view current group membership object form copi detect fail commit time current view use updat gvd thu fail replica automat get exclud incorpor activ replic meant follow two main chang nonrepl version arjuna addit need creation mainten gvd alreadi discuss rpc modul origin unicast rpc replac reliabl group rpc capabl invok function copi object activ effect meant replac origin datagram base rpc implement reliabl multicast protocol base one 15 17 particular group rpc ensur replic call one group anoth appear behav like singl non replic call atom action modul modul respons manipul object group view inform mean atom action requir maintain exclud list replica detect fail commit time list use remov name replica group view list maintain gvd summari approach provid basic bind inform object replica via gvd arjuna object use provid either activ passiv replic passiv replic scheme advantag support top convent rpc system import system like arjuna design capabl exploit function offer underli distribut system softwar current design arjuna elegantli sort function atom action modul class fail separ interfac support environ manner section 3 class statemanag combin oper relat persist object support rpc name bind manag recoveri persist distribut concurr control wellorganis around class discuss interfac servic well organis present rpc facil support interfac discuss also respons creation object server function perform persist object support modul name bind servic properli separ combin function current perform simpl name server revis system carri objectori design along line present section 3 paper current underway revis howev repres major overhaul system thu system demonstr distribut system structur along line figur 1 built 42 arjuna system describ arjuna system describ adapt run two quit differ system provid basic support distribut comput eg rpc enabl atom action modul arjuna utilis servic host system place servic modul built earlier system modular structur propos abl perform port first port ansawar distribut comput platform ansawar platform develop ansa project 1 platform provid rpc object server known capsul name bind servic via subsystem known trader network workstat sever oper system support far use unix port rel straight forward exercis start remov rpc modul use origin arjuna rajdoot map rpc oper initi termin call onto provid ansawar enabl arjuna applic run top ansawar port automat support passiv replic near futur enhanc port use ansawar trader regist arjuna name bind servic ansawar system recent upgrad support group invoc 20 activ replic object storag servic 19 believ servic also use place origin arjuna servic use support activ replic object storag also perform experi ascertain whether arjuna made run integr environ provid distribut oper system 10 experiment configur use consist local distribut multiprocessor system twelv t800 transput 2 mbyte memori interconnect form twodimension grid see figur 7 transput run copi helio generalpurpos distribut oper system 24 helio file server program hf run one transput provid access disk use object repositori hf figur 8 multitransput system helio oper system provid number facil clientserv program helio treat everi file process devic includ processor object name use unix like path name object repres objectstructur contain inform full pathnam object object type eg file process etc helio locat function allow objectstructur obtain object system given name function access local processor name server initi flood search throughout system objectstructur avail local result search local name server updat relev object structur subsequ locat object handl entir local object locat may open use helio open function object process objectstructur contain helio port via messag may sent process use helio putmsg function messag receiv port use helio getmsg function process act server bind one commun identifi cid name servic name regist servic name local helio name server wait commun cid process may obtain cid regist server use locat function port arjuna implement number helio applic program collect known object manag layer layer implement rpc facil use putmsg getmsg function helio object server map onto helio server may regist discuss server may receiv open request client commun port associ servic name although sever shortcut taken exercis eg client server stub hand craft experi show function requir arjuna atom action modul map via object manag layer onto underli servic provid helio 6 conclud remark paper present modular architectur structur faulttoler distribut applic encapsul properti persist recover shareabl serialis failur atom atom action modul defin narrow welldefin interfac support environ achiev signific degre modular well portabl atom action base objectori system arriv idea present base experi build arjuna system made run number distribut comput platform atom action modul provid fix mean combin state object properti investig whether provid individu permit applic specif select system exampl could permit shareabl object need persist viceversa although could furthermor properti enabl disabl runtim base applic requir initi work direct report 9 18 indic inde possibl acknowledg arjuna project continu team effort critic comment graham parrington mark littl stuart wheater grate acknowledg continu interact colleagu ansaisa project prove benefici ansawar helio port perform joao geada stuart wheater jim smith steve caughey work report support part grant uk scienc engin research council grant number grf38402 grf06494 grh81078 esprit project isa project number 2267 broadcast basic research project number 6360 r advanc network system architectur ansa refer manual implement galileo persist valu psalgol algol persist heap architectur implement guid objectori distribut system concurr control recoveri databas system remot procedur call facil interconnect heterogen comput system exploit virtual synchroni distribut system implement locat independ invoc shadow flexibl runtim support system object distribut system implement faulttoler object system distribut memori multiprocessor treatment persist object arjuna transact manag objectori databas system note data base oper system guardian action linguist support robust distribut program replic k resili object arjuna maintain inform persist replic object distribut system object replic distribut system develop class hierarchi objectori transact process persist object infrastructur heterogen distribut system model interfac group clearinghous decentr agent locat name object distribut environ rajdoot remot procedur call mechan support orphan detect kill reliabl distribut program c arjuna approach helio oper system persist e languag issu implement x window system implement faulttoler servic use state machin persist migrat c object overview arjuna distribut program system network program tr c program languag concurr control recoveri databas system x window system remot procedur call facil interconnect heterogen comput system exploit virtual synchroni distribut system transact manag objectori databas system implement galileo persist valu helio oper system treatment persist object arjuna persist e languag issu implement implement faulttoler servic use state machin approach tutori guardian action linguist support robust distribut program overview arjuna distribut program system implement locat independ invoc rajdoot develop class hierarchi objectori transact process note data base oper system maintain inform persist replic object distribut system flexibl support system object distribut system ctr elisa bertino sushil jajodia luigi mancini indrajit ray advanc transact process multilevel secur file store ieee transact knowledg data engin v10 n1 p120135 januari 1998 c littl k shrivastava examin transit arjuna distribut transact process softwar research product proceed 2nd confer industri experi system softwar p44 decemb 08 2002 boston salvator march charl wood gove n allen research frontier object technolog inform system frontier v1 n1 p5174 juli 1999