ownership type object encapsul ownership type provid static enforc way specifi object encapsul enabl local reason program correct objectori languag howev type system enforc strict object encapsul constrain allow effici implement import construct like iter paper argu right way solv problem allow object class defin modul privileg access other represent show inner class approach allow programm express construct like iter yet support local reason correct class class inner class togeth reason modul paper also sketch use variant ownership type enabl effici softwar upgrad persist object store b introduct abil reason local program correct crucial deal larg program local reason allow correct dealt one modul time modul specic describ expect behavior goal prove modul satis research support part darpa contract f306029810237 nsf grant iis9802066 ntt permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit commerci advantag copi bear notic full citat first page copi otherwis republish post server redistribut list requir prior specif permiss andor fee popl03 januari 1517 2003 new orlean louisiana usa acm 1581136285030001 500 specic use specic code modul way complex proof eort formal inform kept control local reason approach sound separ verica tion individu modul suce ensur correct composit program 43 28 key sound local reason objectori languag object encap sulat consid exampl stack object implement use link list local reason correct stack implement possibl object outsid directli access list node ie list node encapsul within paper present variant ownership type specifi static enforc object encapsul ownership type program declar own list node type system static ensur list node encapsul within type system enforc strict object encapsul ever constrain 55 allow ecient implement import construct like iter 48 32 consid exampl iter abovement stack object iter encapsul within use outsid iter encapsul within directli access list node henc run ecient previou ownership type system either constrain support construct like iter 22 21 permiss support local reason 20 14 11 exampl allow object outsid abovement stack object temporarili get direct access list node paper argu right way solv problem provid special access privileg object belong class modul show inner class 50 38 variant ownership type allow inner class object privileg access represent correspond outer class object principl violat encapsul allow programm express construct like iter use inner class yet support local reason correct class system support local reason class inner class reason togeth modul paper also describ variant ownership type enabl ecient softwar upgrad persist object store interest softwar upgrad led us work ownership type paper show ownership type use ensur code upgrad object observ broken invari interfac unknown time written make possibl programm reason correct upgrad paper organ follow section 2 discuss object encapsul section 3 describ variant ownership type enforc object encapsul section 4 present formal descript type system section 5 show ownership type use enabl modular upgrad section 6 discuss relat work section 7 conclud object encapsul object encapsul import provid abil reason local program correct reason class objectori program involv reason behavior object belong class typic object point subobject use repres contain object local reason class correct possibl subobject fulli encapsul subobject access within contain object condit support local reason ensur outsid object interact subobject without call method contain object therefor contain object control subobject howev full encapsul often need encapsul requir subobject contain object depend 43 28 d1 object x depend subobject x call method furthermor call expos mutabl behavior way aect invari x thu stack object implement use link list depend list item contain list code outsid could manipul list could invalid correct stack implement code outsid safe use item contain doesnt call method depend ident item ident never chang similarli set immut element depend element even invok aequalsb ensur two element b set equal element immut local reason class possibl object class encapsul everi object depend strict object encapsul constrain 55 prevent efcient implement import construct like iter exampl run ecient iter abovement stack object need access list node provid access allow object like iter violat encapsul local reason still possibl provid violat encapsul limit code contain mod ule exampl stack iter impl o1 everi object owner o2 owner either anoth object world o3 owner object chang time o4 ownership relat form tree root world figur 1 ownership properti world figur 2 ownership relat ment modul still reason correct local examin code modul 3 ownership type encapsul ownership type 22 20 14 11 provid static enforc way specifi object encapsul idea object subobject depend thu prevent access outsid section present ownership type system system similar one describ 20the main dierenc support construct like iter type system 20 allow temporari violat encapsul disallow violat instead support construct like iter use inner class key type system concept object owner ship everi object owner owner either anoth object special owner call world type system static guarante ownership properti shown figur 1 figur 2 present exampl ownership relat draw arrow x x own gure special owner world own object o1 o5 o6 o1 own o2 o4 o2 own o3 o6 own o7 ownership allow program static declar encapsul boundari captur depend d2 object object depend system enforc encapsul insid encapsul boundari z x outsid x access object x access object x pointer method x obtain pointer figur 2 o7 insid encapsul boundari o6 o1 outsid o1 access o7 object allow access object own 2 ancestor ownership tree object global access object name object own world 1 thu o1 access object gure except o3 o7 1 note analog nest procedur proc p1 fvar x2 class tstackstackown towner 6 new tnodethi townervalu head 9 pop return valu 14 16 class tnodenodeown towner tnodenodeown towner next value19 tnodet v tnodenodeown towner n 22 valu return valu tnodenodeown towner next return next class 28 class tstackclient 29 void test new tstackthi new tstackthi world new tstackworld world new tstackworld 34 figur 3 stack object s1head s1headnext s2head s2headnext s3head s3headnext s1headvalu s2headvalu s1headnextvalu s2headnextvalu s3headnextvalu s3headvalu world figur 4 ownership relat tstack s1 s2 s3 31 owner polymorph present type system context javalik languag augment ownership type everi class definit parameter one owner rst owner paramet special identi owner correspond object owner paramet use propag ownership inform parameter allow programm implement gener class whose object dierent owner parameter similar parametr polymorph 54 16 1 61 except paramet owner type owner instanti world anoth owner paramet object own encapsul object access outsid object own world access anywher proc p2 fvar x3 proc p3 fggg say xn1 pn1 children pn pn access 1 pn children 2 ancestor pn children global variabl procedur class ccowner sowner towner sowner towner 3 tstacksown towner figur 5 use claus constrain owner figur 3 show exampl 2 tstack stack ob ject implement use link list tstack class parameter stackown towner stack owner own tstack object towner own object contain tstack code speci tstack object own node list therefor list node access outsid tstack object type tstack s1 instanti use owner paramet mean tstack s1 own tstackclient object creat object s1 tstack s2 own tstackclient object object s2 own world tstack s3 own world object s3 ownership relat s1 s2 s3 depict figur 4 assum stack contain two element dot line indic everi object directli indirectli own world 32 constraint owner everi type hx1 xni multipl owner type system static enforc constraint x1 x f1ng recal figur 1 ownership relat form tree root world notat z mean descend z ownership tree notat z mean either z descend z ownership tree thu type tstack s4 figur 3 illeg world 6 constraint 20 howev extend parameter method well method object type hx1 xni restrict x1 x 2 f1kg constraint need provid encapsul presenc subtyp 11 illustr point exampl check ownership constraint modularli sometim necessari programm specifi addit constraint class method paramet exampl figur 5 type legal sowner towner allow programm specifi addit constraint use claus 25 54 type system enforc constraint exampl figur 5 class c speci sowner towner instanti c satisfi constraint illeg 33 subtyp rule declar subtyp rst owner paramet supertyp must subtyp addit cours supertyp must satisfi constraint owner rst owner match 2 exampl show type annot written explicitli howev mani automat infer see section 43 detail class tstackstackown towner 3 4 tstackenumenumown towner element 5 enumown towner 6 return new tstackenumenumown towner 8 class tstackenumenumown towner 9 implement tenumerationenumown towner 11 tnodetstackthi towner current13 tstackenum current tstackthishead 15 getnext current null return null 19 return 22 return current null class tstackclient 28 void test 29 tstackthi world new tstackthi world interfac tenumerationenumown towner 36 boolean hasmoreel figur tstack iter special correspond object thu tstackhstackown towneri subtyp objecthstackowneri thtowneri subtyp objecthworldi rst owner match 34 inner class inner class similar member inner class java inner class denit nest insid class figur 6 show exampl inner class tstackenum implement iter tstack element method tstack provid way creat iter tstack tstack code otherwis similar figur 3 recal owner instanti world anoth owner paramet within inner class owner also instanti cthi c outer class featur allow inner object access object encapsul within outer object figur 6 owner current eld intstackenum instanti tstackthi current eld access list node encapsul within outer tstack object inner class parameter owner like regular class system outer class paramet automat visibl insid inner class inner class use outer class paramet must explicitli includ outer class paramet declar figur 6 tstackenum declar includ owner paramet towner outer class towner therefor visibl insid tstackenum tstackenum declar class tstackstackown towner 3 4 class tstackenumenumown towner 5 implement tenumerationenumown towner 7 tnodetstackthi towner current 8 9 getnext writesthi readststackthi 12 14 interfac tenumerationenumown towner boolean hasmoreel readsthi figur 7 tstack iter eect includ stackown therefor stackown visibl insid tstackenum note exampl element method parameter enumown allow program creat differ iter dierent owner element return iter type tstackenumhenumown towneri type legal must case enumown towner requir captur claus note also tstackhstackown towneritstackenum henumown towneri declar subtyp tenu merationhenumown towneri allow tstackclient creat unencapsul iter e2 encapsul tstack program pass e2 object outsid tstackclient gener inner class use implement wrapper 32 expos limit interfac outer object program creat wrapper around encapsul subobject pass wrapper object outsid encapsul boundari 35 encapsul theorem system provid follow encapsul properti theorem 1 x access object own 1 2 x inner class object proof consid code class chf ho g variabl type ho declar within static scope class c owner therefor either 1 2 world 3 formal class paramet 4 formal method paramet 5 c 0 c 0 outer class show rst four case constraint hold rst two case constraint hold trivial last two case f f constraint hold fth case c 0 therefor object x class c access object own rst four case 2 x inner object fth case class intvector 3 int size read return elementcount 4 void addint x writesthi elementcount 5 6 8 class intstack 9 intvector new intvector vecaddx 11 figur 8 reason alias side eect 36 discuss variant ownership type support local reason provid programm declar dependedon object own theorem impli own object access insid owner inner ob ject therefor ownership captur depend relat describ section 2 local reason correct class possibl class inner class togeth reason modul ownership type also express allow ecient implement construct like iter wrapper 32 furthermor also allow program creat wrapper use context underli object inaccess abil illustr figur 6 iter e2 use global even though tstack iter use tstackclient rst ownership type system support construct like iter gener access wrapper also ensur local reason discuss section 6 37 eect claus system also contain eect claus 49 use specifi assumpt hold method boundari enabl modular reason check program use eect ownership type enabl modular upgrad describ section 5 system allow programm specifi read write claus consid method speci write wn read r1 rm method write object x call method write x 2 f1ng method read object call method read w r j f1mg thu allow method read write object name write claus figur 7 show tstack iter use eect otherwis similar tstack iter figur 6 exampl hasmoreel method read object getnext method read object own tstackthi write read object defn class cnhformali extend c constr bodi bodi finnerclass eld methg owner formal j world j cnthi constr owner owner j owner 6 owner innerclass defn meth mnhformaliarg eect constr feg eect read owner write owner eld fd formal f e new c j xnew c j x j let arg feg j class name eld name method name xy 2 variabl name figur 9 grammar eect claus use conjunct subtyp eect overridden method must subsum eect overrid method sometim make dicult specifi precis eect method exampl dicult specifi precis read eect getnext method tenumer class tenum ation expect supertyp subtyp like tstack enum tenumer name specic object use getnext method subtyp accommod case allow escap mechan method includ world eect claus ownership type eect use local reason side eect method call consid exampl code figur 8 show intstack implement use intvector vec adopt exampl 44 exampl method receiv two argument intstack intvector v condit assert statement true v alias svec exampl method use claus specifi v 6 6 v sinc ownership relat form tree see figur 1 constraint impli v alias svec furthermor intvectors declar read object own intvector intstackpush declar write read object own intstack therefor possibl reason local vsize spush interfer thu condit assert statement must true 4 type system section present formal descript type system simplifi present key idea describ type system context core subset java 33 known classic java 31 add inner class classic java augment type system ownership type approach howev extend whole java similar languag 41 type check figur 9 present grammar core type system set rule reason type judgment fieldsoncep class cnhf1n extend c 0 constr ficlass eld methg 2 c constr env owner world world owner formal owner class cnhf1n constr 2 cnhfi 6 9xi method declar class cnhf1n f meth g 2 c method inherit field declar class cnhf1n f eld g 2 c field inherit eld world exp ref assign figur 10 type check rule judgment mean defn wellform class class c owner constraint constr satis eect x subsum eect wellform type subtyp 2 type environ e wellform class c declaresinherit eld class c declaresinherit meth eld eld wellform eld meth meth wellform method eect e subsum rw figur type judgment p program check includ provid inform class denit e environ provid type free variabl e r w must subsum read write eect e type e dene type environ r w o1n dene type system use judgment figur 11 present rule judgment figur 10 rule use number predic shown figur 12 predic base similar predic 31 simplic sometim treat outermost class rule inner class class also sometim use cnhfi denot 42 sound type system type check rule ensur program welltyp program respect properti describ figur 1 complet syntact proof 63 type sound construct dene oper semant extend oper semant classic java 31 prove welltyp program reach error state gener subject reduct theorem hold welltyp program subject reduct theorem state semant interpret term type invari reduct proof straightforward tediou omit 43 type infer although type system explicitli type principl would oner fulli annot everi method extra type inform instead use combin infer wellchosen default signicantli reduc number annot need practic 14 11 describ intraprocedur type infer algorithm default type use similar approach 14 11 one thirti line code chang express java program ownership type system emphas approach infer pure intraprocedur infer method signatur type instanc vari abl rather use default complet partial type specic case minim requir anno tation approach permit separ compil mean wfclassesp cycl class hierarchi declar twice p contain two inner class name either declar inherit fieldsoncep class contain two eld name either declar inherit contain two method name overrid method return type paramet type method overridden read write eect overrid method must supersed overridden method figur 12 predic use type check rule 44 runtim overhead system describ pure static type system ownership relat use compiletim type check preserv runtim consequ program runtim overhead compar regular java program fact one way compil run program system convert regular program type check remov owner paramet constraint owner eect claus languag like java howev pure staticallytyp java allow downcast check runtim suppos object declar type objecthoi downcast vectorhoei sinc result oper depend inform avail runtim type checker verifi compiletim e right owner paramet even assum object inde vec tor safe support downcast system keep ownership inform runtim similar keep runtim inform parameter type 54 61 10 describ ecient ownership keep runtim inform object potenti involv downcast type multipl paramet 5 upgrad persist object store section show ownership type eect claus use enabl modular reason correct upgrad persist object store desir achiev reason motiv work ownership type encapsul persist object store 46 5 9 17 18 29 56 contain convent object similar one might nd objectori languag java applic access persist object within atom transact sinc necessari ensur consist store object transact allow concurr access mask failur upgrad need system improv object implement correct error even chang interfac face chang applic requir includ incompat chang interfac new interfac support method old one provid satisfactori solut upgrad persist object store longstand challeng upgrad persist object store dene set classupgrad one class whose object need chang classupgrad tripl holdclass newclass tfi indic object belong oldclass transform use transform function tf provid programm object newclass tf take oldclass object newli alloc newclass object initi newclass object oldclass object upgrad infrastructur caus newclass object take ident oldclass object object use point oldclass object point newclass object upgrad execut transform object whose class replac howev transform must interfer applic access store must perform ecient space time addit must done safe import persist state corrupt previou approach 4 7 29 45 56 57 provid satisfactori solut challeng either stop applic access databas run upgrad keep copi databas limit express power transform eg transform function allow make method call system provid ecient solut perform upgrad lazili object transform applic access applic transact interrupt run transform function transform run transact transact commit applic transact resum system also allow later upgrad run parallel earlier one object sever pend transform run one anoth upgrad order furthermor transform transact encount object pend transform upgrad interrupt like applic run pend transform continu execut pend transform commit detail found 13 12 47 51 ownership type safe upgrad upgrad system ecient express delay applic transact avoid use version copi object limit express power transform function also need support modular reason correct transform function possibl transform function encount object interfac invari exist upgrad start even though realiti transform function might run much later applic transact transform transact use variant ownership type enabl modular reason correct transform function system check static whether transform function satisfi follow constraint use ownership eect declar eect claus state object tf access s1 tfx access object x own directli transit transform function often satisfi s1 ownership frequent captur depend relat discuss section 2 typic transform function access depend object discuss 13 support modular reason transform function s1 hold implement also ensur follow s2 object x aect upgrad x access object own x ensur s2 use two mechan own object encapsul within x type system guarante x access rst own object share inner class object x system caus x access inner class object rst use upgrad latter mechan describ detail 13 s1 hold prove outorord process transform caus problem particular show applic interfer transform function transform function unrel object interfer transform function relat object run predetermin order name object transform own subobject proof given 13 thu s1 hold ensur transform function encount expect interfac invari support modular reason transform function reason extra method old class 6 relat work euclid 41 one rst languag consid problem alias 37 stress need better treatment alias objectori program earli work island 36 balloon 3 focus fulli encapsul object subobject object access access outsid object univers 53 also enforc full encapsul except readonli refer howev full encapsul signicantli limit express often need work escjava point encapsul requir subobject contain object depend 43 28 escjava unabl alway enforc encapsul 61 ownership type encapsul ownership type provid static enforc way specifi object encapsul propos 22 formal 21 system enforc strict object en capsul signicantli limit express ness requir subtyp owner supertyp tstackhstackown towneri subtyp objecthstackowneri moreov support iter prfj 14 scj 11 joe 20 extend ownership type support natur form subtyp without violat encapsul joe introduc constraint everi type multipl owner rst owner owner result joe program creat pointer object x object own prfj scj allow object contain pointer subobject own dierent object eect claus prevent program follow point er system eectiv enforc encapsul object eld howev support construct like iter allow method local variabl violat encapsul therefor support local reason aliasjava 2 use ownership type aid program stand like ownership type system aliasjava allow programm use ownership inform reason alias aliasjava also exibl ownership type system howev unlik ownership type system aliasjava enforc encapsul properti illustr exampl 11 ownership type extend inner class 19 2 howev system enforc properti state section 35 support local reason ownership type also use enforc prop erti parameter racefre java prfj 14 use base type system prevent data race multithread program safe concurr java scj 11 extend prevent data race deadlock system combin approach enforc object encapsul well prevent data race deadlock 11 sketch way recent work 15 59 combin region type 60 24 35 type system static ensur object encapsul safe regionbas memori manag 62 relat type system linear type 62 uniqu pointer 51 also use control object alias linear type use low level languag support safe explicit memori dealloc 24 track resourc usag 26 27 linear type uniqu pointer orthogon ownership type two use conjunct provid express system prfj 14 rst system combin ownership type convent uniqu pointer recent work 23 propos better approach allow program specifi uniqu extern pointer object intern pointer object subobject eect claus 49 use specifi assumpt must hold method boundari eect enabl modular check program prfj 14 rst system combin eect ownership type static prevent data race 11 20 also combin eect ownership prevent deadlock program understand paper use eect ownership enabl lazi upgrad data group 42 44 use name group object eect claus write modular specic presenc subtyp ownership type provid altern way write modular specic ownership type also use name group object eect claus name owner use name object transit own owner figur 8 present exampl 44 express use ownership type data group implement use theorem prover principl exibl howev pivot uniqu 44 impos drastic restrict pivot eld ownership type impos restrict requir owner object uniqu 44 owner exclus constraint hard code system programm specifi arbitrari constraint owner use claus owner exclus use default system tvla 58 pale 52 role 40 specifi shape local object graph detail ownership type tvla verifi properti input program tree output also tree pale verifi data structur express graph type 39 role verifi global properti particip object multipl data structur role also support composit interprocedur analysi contrast system take exponenti time veric ownership type provid lightweight practic way constrain alias conclus object encapsul enabl sound local reason program correct objectori languag ownership type provid way specifi static enforc object encapsul howev type system enforc strict object encapsul constrain allow ecient implement import construct like iter paper argu right way solv problem allow object class dene modul privileg access other represent show inner class variant ownership type allow object inner class privileg access represent correspond object outer class principl violat encapsul allow programm express construct like iter wrapper use inner class system also allow wrapper use global context object wrap yet system support local reason correct class class inner class reason togeth modul thu paper describ rst ownership type system express enough support iter wrapper also support local reason addit paper describ applic techniqu enabl modular reason upgrad persist object store ownership type use purpos well prevent data race deadlock safe regionbas memori manag sinc ownership type requir littl program overhead type check fast scalabl provid sever benet oer promis approach make objectori program reliabl acknowledg thank daniel jackson viktor kuncak greg nelson martin rinard alexandru salcianu use discuss comment earlier draft paper r ad type parameter java languag alia annot program understand balloon type control share state data type scalabl recover implement object evolut pjama 1 platform design issu persist java typesaf represent independ semant implement schema evolut objectori databas jp distribut persist java system safe runtim downcast ownership type ownership type safe program prevent data race deadlock ownership type safe lazi upgrad objectori databas lazi modular upgrad persist object store parameter type system racefre java program make futur safe past ad gener java program languag gemston data manag system shore persist applic object ownership contain ownership encapsul disjoint type e simpl ownership type object contain ownership type exibl alia protect extern uniqu type memori manag calculu capabl subtyp vs claus constrain parametr polymorph enforc highlevel protocol lowlevel softwar adopt focu practic linear type imper program wrestl rep exposur stori o2 class mixin design pattern element reusabl objectori softwar java languag speci objectori eect system island alias protect objectori languag geneva convent treatment object alias graph type role analysi report program languag euclid data group specifi modi data abstract inform hide beyond schema evolut databas reorgan provid persist object distribut system safe lazi softwar upgrad objectori databas toward aliasfre pointer pointer assert logic engin parameter type java iter encapsul object design inc class modi solv shapeanalysi problem languag destruct updat parametr polymorph java approach translat base ectiv featur linear type chang world syntact approach type sound tr semant implement schema evolut objectori databas class modif gemston objectori dbm gemmyampersandndashston data manag system polymorph effect system beyond schema evolut databas reorgan island graph type design pattern syntact approach type sound shore persist applic subtyp vs claus regionbas memori manag parameter type java ad type parameter java languag class mixin solv shapeanalysi problem languag destruct updat ownership type flexibl alia protect data group make futur safe past type memori manag calculu capabl confin type typebas race detect java parametr polymorph java abstract mechan clu enforc highlevel protocol lowlevel softwar pointer assert logic engin role analysi represent independ confin access control extend abstract parameter type system racefre java program adopt focu use data group specifi check side effect regionbas memori manag cyclon java languag specif ownership type safe program ownership encapsul disjoint type effect alia annot program understand stori o2 objectori effect system provid persist object distribut system simpl ownership type object contain scalabl recover implement object evolut pjama1 platform toward aliasfre pointer iter encapsul ctr pradeep kumar modal logic ownership type unit three world companion 21st acm sigplan confer objectori program system languag applic octob 2226 2006 portland oregon usa david l hein monica lam practic flowsensit contextsensit c c memori leak detector acm sigplan notic v38 n5 may ana milanova precis identif composit relationship uml class diagram proceed 20th ieeeacm intern confer autom softwar engin novemb 0711 2005 long beach ca usa alex potanin jame nobl robert biddl gener ownership practic ownership control program languag companion 19th annual acm sigplan confer objectori program system languag applic octob 2428 2004 vancouv bc canada yin liu ana milanova ownership immut infer umlbas object access control proceed 29th intern confer softwar engin p323332 may 2026 2007 alex potanin jame nobl dave clark robert biddl featherweight gener confin journal function program v16 n6 p793811 novemb 2006 adrian birka michael ernst practic type system languag refer immut acm sigplan notic v39 n10 octob 2004 protect represent effect encapsul acm sigplan notic v41 n1 p359371 januari 2006 ana milanova composit infer uml class diagram autom softwar engin v14 n2 p179213 june 2007 matthew tschantz michael ernst javari ad refer immut java acm sigplan notic v40 n10 octob 2005 pratibha permandla michael roberson chandrasekhar boyapati type system prevent data race deadlock java virtual machin languag 1 acm sigplan notic v42 n7 juli 2007 yu david liu scott f smith interactionbas program classag acm sigplan notic v40 n10 octob 2005 weingan chin florin craciun shengchao qin martin rinard region infer objectori languag acm sigplan notic v39 n6 may 2004 nathanael schrli andrew p black stphane ducass objectori encapsul dynam type languag acm sigplan notic v39 n10 octob 2004 derek raysid luci mendel daniel jackson dynam analysi reveal object ownership share proceed 2006 intern workshop dynam system analysi may 2323 2006 shanghai china tian zhao jen palsberg jan vitek typebas confin journal function program v16 n1 p83128 januari 2006 alex potanin jame nobl dave clark robert biddl gener ownership gener java acm sigplan notic v41 n10 octob 2006 chandrasekhar boyapati alexandru salcianu william beebe jr martin rinard ownership type safe regionbas memori manag realtim java acm sigplan notic v38 n5 may david naumann observ puriti encapsul theoret comput scienc v376 n3 p205224 may 2007 chandrasekhar boyapati barbara liskov liuba shrira chuanghu moh steven richman lazi modular upgrad persist object store acm sigplan notic v38 n11 novemb david naumann mike barnett toward imper modul reason invari share mutabl state theoret comput scienc v365 n1 p143168 10 novemb 2006 peter mller arnd poetzschhefft gari leaven modular invari layer object structur scienc comput program v62 n3 p253286 15 octob 2006