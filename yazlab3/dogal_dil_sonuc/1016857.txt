improv static analysi embed languag via partial evalu program embed languag contain invari automat detect enforc host languag show use macro easili implement partial evalu embed interpret order captur invari encod embed program render explicit term host languag demonstr effect techniqu improv result valu flow analysi b output format languag java 3 support declar sublanguag lay gui element window plt scheme 9 offer least five languag one format consol output two regular express match one send queri sql server one lay html page permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit commerci advantag copi bear notic full citat first page copi otherwis republish post server redistribut list requir prior specif permiss andor fee septemb 1921 2004 snowbird utah usa mani case though alway program embed specialpurpos program languag encod string librari function consum string interpret often interpret consum addit argument use input littl program take look express plt scheme regexpmatch httpazaz line function regexpmatch interpret regular express languag consum two argument string regular express languag consid program anoth string program input typic use look like exampl first string actual specifi call site second string often given variabl express read input port interpret attempt match regular express second string plt scheme regular express languag allow programm specifi subpattern via parenthes run exampl contain two subexpress az az regular express interpret fail match regular express string produc fals f otherwis produc list n1 element first one overal match plu one per subexpress say line stand httpaaabbbeduzzz case regular express match string regexpmatch produc list list httpaaabbbeduzzz aaabbbedu rest scheme program extract piec list comput regexpmatch express simplifi excerpt plt web server 12 slightli larger fragment let r regexpmatch httpazaz line r processurl third r dispatch second r logerror line notic thenclaus ifexpress extract second third element r without check confirm length list programm know r fals list three element embed program say regular express contain two subexpress unfortun static analysi tool plt scheme reason level mrflow 20 static debugg use constraintbas analysi 22 version setbas analysi 2 13 10 analyz program discov potenti er ror find one draw flow graph sourc bad valu faulti primit oper letexpress mrflow find second r third r may rais runtim error r may contain enough element paper show use scheme macro partial evalu call embed interpret regexpmatch greatli increas precis static analysi sinc use macro librari design easili implement partial evalu rather reli host languag implementor must adhoc solut section 2 give brief overview setbas analysi mr flow next section explain three exampl embed languag problem caus mrflow static anal ysi present section 4 gener approach solv problem base macro overview macro system use given section 5 section 6 present gener techniqu translat embed interpret macro section 7 explain properti static analysi enabl find result partial evalu code final section 8 show partial evalu scheme program contain embed program help mrflow three exampl section 9 present relat work conclud section 10 setbas analysi explain result static analysi improv use partial evalu embed languag first need describ analysi mrflow static analyz drscheme use setbas valu flow analysi comput approxim valu subexpress program might evalu runtim 22 approxim comput express set abstract valu display demand debugg also draw arrow show flow valu program figur 1 display exampl analyz simpl program box next term 3 abstract valu term mean runtim term 3 might evalu valu 3 arrow start term 3 show runtim valu 3 might flow argument x function f flow refer variabl x bodi f second refer x fthe correspond arrow shown exampl box next call scheme primit gcd abstract valu result call sinc analysi never tri evalu express use abstract valu integ repres result primit call conserv approxim actual valu call might comput runtim biggest box display type adjac ifexpress union integ abstract valu comput gcd primit string hello arrow show result ifexpress come elsebranch analysi attempt appli number predic variabl x conserv assum branch ifexpress may evalu runtim 3 three embed languag turn embed languag use techniqu establish abstract layer particular design space function languag wellsuit write interpret embed languag higherlevel embed languag implement set function gener purpos host languag access featur 15 16 24 abstract come cost program analysi particular tool built examin program host languag deriv inform program embed languag understand semant languag section demonstr three exampl practic embed languag scheme show neg effect static analysi first exampl properti embed languag creat possibl error go undetect anali si next two exampl undetect properti lead analys conserv result mani fals posit analysi report error never actual occur 31 plt scheme librari provid format function similar cs sprintf gener string given format specifi variabl number addit argument format specifi string contain combin liter text format tag tag interpret along remain argument construct format string format function thu interpret format specifi languag format specifi program languag addit argument input construct output format function requir number extra argument match number format tag argument must appropri type consid exampl display ascii charact encod hexadecim exampl format specifi contain format tag c x liter text expect consum exactli two argument argument must charact teger respect incorrect number argument type mismatch result runtim error unfortun analysi tool scheme mrflow priori knowledg semant embed languag analysi infer inform depend content format string rest argument without knowledg syntax semant format lan guag result analysi predict certain categori runtim error shown figur 2 applic format underlin error even though argument appear wrong order analysi correctli comput type c n figur 1 analyz simpl program mrflow 32 regular express regular express use kind scheme program languag regular express pattern embed scheme string librari function interpret string program consum addit argument input string return either list match subpattern f indic failur consid excerpt plt web server section 1 programm know match succe result list contain exactli three element result entir match result two subpattern match analysi unabl discov invari figur 3 show result analyz sampl code mrflow list accessor second third underlin red analysi prove argument suffici long list programm must either go fals posit prove error never occur els learn ignor result mrflow neither option de sirabl former creat work programm rather less latter unsaf easili lead overlook error 33 schemeql schemeql 28 embed languag manipul relat databas scheme unlik stringbas format lan guag schemeql program consist special form directli embed insid scheme schemeql implement provid set macro recogn form expand scheme code typic databas queri schemeql might look like directqueri name age phone directori correspond sql statement select name age phone directori result execut queri lazi stream repres cursor result set databas server element stream list valu repres singl row result set cursor comput row need program select next substream programm know number element row cursor equal number column origin request analysi howev discov fact automat figur 4 show result analysi schemeql queri context trivial scheme program exampl queri consist exactli three column code refer third element first row oper never fail analysi unabl prove instead conserv comput row list unknown rectyp describ recurs abstract valu present case union null pair consist valu top abstract valu creat loop abstract valu simul possibl list length mrflow therefor mistakenli report error underlin primit third red sinc accord analysi row might fewer three element runtim 4 macro partial evalu embed languag present previou section one thing common encod invari visibl analysi gener purpos languag embed invari expos analys two way extend analys adhoc manner embed languag understand semant partial evalu embed interpret regard embed program make invari embed program explicit invari host languag whenev possibl first solut requir modifi analysi support embed languag second solut simpli implement within host languag old lisp trick use compil macro 25 lightweight partial evalu mechan present case instead use partial evalu optim program speed use increas precis program analys lisp compil macro differ regular lisp macro scheme macro system power enough equival lisp compil macro implement regular scheme macro partial evalu embed interpret simpli involv replac librari function impl figur 2 imprecis analysi format primit figur 3 imprecis analysi regexpmatch figur 4 imprecis analysi schemeql queri ment interpret librari semant equival macro 1 addit advantag done author librari function oppos compil analyz implementor case adhoc extens cours partial evalu embed interpret possibl input program known static ex ampl possibl expand call format format string given first argument comput runtim programm therefor make tradeoff precis analys dynam code practic though embed program often specifi static user code combin simplic implement partial evalu macro make use techniqu improv precis analys low cost next two section describ import featur scheme macro system explain make use system partial evalu interpret embed languag improv result static analysi 5 macro scheme scheme power macro system extend languag deriv express form rewritten express core languag macro serv mean syntact abstrac tion programm gener syntact pattern way possibl function abstract technolog also provid hook standard compil tool chain allow programm implement addit program transform compil section describ basic standard scheme macro introduc identifi macro gener context macro match 51 rulebas macro definesyntax special form allow programm extend scheme deriv express form compil execut scheme program occurr deriv form replac specifi expans syntaxrul form specifi macro expans rewrit rule consid follow simpl macro defin shortcircuit logic deriv form definesyntax syntaxrul e1 e2 let tmp e1 tmp tmp e2 macro defin singl rewrit rule consist pattern templat pattern match keyword oper posit follow two pattern variabl e1 e2 match arbitrari subexpress argument posit templat direct macro expans replac occurr match pattern letexpress construct match subexpress 1 transform strictli speak partial evalu reduct perform macro exactli one perform embed interpret howev macro share techniqu issu partial evalu sinc simul part interpret therefor use describ notic form defin regular function scheme second argument evalu first argument evalu fals sinc scheme strict evalu semant function would necessarili evalu argument comput result control evalu express import use scheme macro macro also abstract syntact form way function expand secondclass languag construct defin 52 lexic scope macro written standard scheme syntaxrul mechan hygien referenti transpar hygien macro expans guarante bind form insid definit macro templat captur free variabl macro argument consid follow use macro 2 tmp hygien expans automat renam variabl bound insid expand macro templat avoid captur free variabl macro argument referenti transpar complement hygien ensur insid macro templat captur context macro call site exampl context invok rebind name expans algorithm renam bind caller context avoid captur variabl use templat bodi let 3 f let tmp 1 tmp tmp f combin hygien referenti transpar produc macro consist scheme rule lexic scope invok anywher program without danger unexpect variabl captur 3 53 syntaxrul form match express macro name occur applic posit ie oper applic express refer syntaxrul macro context result syntax error fold f ls plt scheme syntaxidrul form similar syntaxrul match occurr macro keyword arbitrari express context oper posit operand posit target assign use convent repres macro expans doublearrow ordinari runtim evalu singl arrow 3 macro also defin export modul plt scheme 11 follow macro demonstr hypothet use syntaxidrul clock syntaxidrul set set clock e setclock e clock e maketimestamp getclock e clock getclock list identifi follow syntaxidrul empti previou exampl includ set identi fier indic set treat keyword rather pattern variabl first rewrit rule match express clock name occur target assign second rule familiar match macro applic posit final rule match identifi clock context match previou two rule addit usual applic context use clock macro argument posit clock 10 set target set clock 5 54 programmat macro languag pattern templat recogn syntaxrul syntaxidrul actual special case scheme macro gener definesyntax form bind transform procedur name lambda stx etc argument transform procedur syntax object similar sexpress repres quot code also encapsul inform lexic context code sourc file locat variabl bind context inform essenti allow drscheme languag tool trace error bind relationship back origin sourc locat user code macro invok syntax object similar quot data standard librari includ syntaxobjectdatum procedur strip lexic inform syntax object return correspond datum exampl datum correspond syntax object repres liter number numer valu datum correspond identifi symbol repres identifi name syntax transform procedur accept argument syntax object repres express invok macro produc new syntax object macro expans algorithm use replac origin express scheme macro syntax transform although syntaxrul syntaxidrul form use lambda notat implement macro expand syntax transform procedur syntaxcas facil allow construct macro pattern match syntaxrul syntaxidrul arbitrari express place templat result express exampl macro would defin definesyntax lambda stx syntaxcas stx e1 e2 let tmp e1 tmp tmp e2 macro almost two refin first syntaxcas form take argument stx explicitli wherea syntaxrul implicitli defin transform procedur oper procedur argument second result express prefix syntaxquot oper analog scheme quot oper wherea express prefix evalu quot sexpress express becom quot syntax object also includ lexic informa tion similarli quasisyntax oper unsyntax oper behav syntax object like quasiquot unquot oper sexpress respect use arbitrari comput result express allow macro expand differ base result actual comput lambda stx syntaxcas stx swap b identifi let tmp b set tmp raisesyntaxerror swap expect identifi exampl swap given identifi argument raisesyntaxerror function use lexic inform stx syntax object highlight origin swap express user code condit match also achiev use pattern guard inspect match express determin whether accept lambda stx syntaxcas stx swap b identifi let tmp b set tmp pattern guard new express insert pattern result express guard match succe guard evalu fals guard fail pattern matcher fall attempt next pattern list 6 macro interpret section present gener techniqu special embed interpret macro explain appli techniqu three embed languag describ section 3 techniqu summar follow step 1 write interpret composit modul librari function 2 replac interpret main function macro unfold case dispatch input embed program known static 3 default origin function input known compil time write interpret composit serv two purpos first deleg interpret program construct make embed program separ function becom possibl share code origin interpret macro replac effect limit macro respons simpl dispatch second composition make easier guarante unfold termin sinc recurs macro call alway oper smaller term 61 format string implement string formatt involv number simpl librari function convert possibl type argument string format tag correspond one combi nator exampl c tag correspond combin accept charact convert string x tag correspond formathex convert integ hexadecim represent forth string formatt simpli dispatch combin base content format string defin format arg cond substr 0 stringappend formatchar car arg appli format substr 2 cdr arg etc interpret accept format string base format tag like c find decompos string seri applic correspond combin success argument format repres arg reassembl transform piec standard stringappend function order special format interpret replac macro reus associ combin defin formatdynam arg lambda stx syntaxcas stx format sexp string syntaxobjectdatum sexp let syntaxobjectdatum sexp cond substr 0 stringappend formatchar a1 format substr 2 a2 etc format sexp formatdynam sexp format identifi format partial evalu work unfold interpret toplevel case dispatch program text rather delay inspect string runtim macro precomput result decomposit static whenev string given liter identifi liter string use pattern guard precis macro inspect syntax object sexp correspond format first argument determin whether convert string via syntaxobjectdatum convers succe pattern guard allow match suc ceed partial evalu proce macro expans result program text consist applic stringappend call librari func tion refer interpret stringappend formatchar c formathex n order replac origin function macro unobserv macro must behav exactli like origin function context format appli dynam format string macro default origin function im plement similarli format pass argument higherord function use techniqu identifi macro refer origin function 4 62 regular express one plt scheme regular express engin use two continu model backtrack 1 regular express matcher repres function accept success continu failur continu matcher succe match input appli success continu accept input fail match invok failur continu allow interpret altern oper tri altern pattern sequenti altern matcher tri match first pattern failur continu tri second pattern thu first pattern fail matcher invok failur continu tri second pattern otherwis failur continu disregard matcher appli success con tinuat skip second pattern return result first match regular express construct correspond function combin produc matcher combin express standard oper regular express suc cess failur altern concaten repetit ie kleen star also submatch combin parenthes subpattern origin regular express success regexpmatch return list entir match string follow submatch correspond parenthes subpat tern subpattern match correspond entri fals f result list exampl follow success 4 case set critic sinc plt scheme import modul refer target assign match contain fail regexpmatch abc ac list ac c f c regardless content second argument alway exactli one element result list parenthes subpattern regular express submatch oper accomplish wrap given matcher continu add either result success match fals list index submatch accumul match initi suc cess continu regexpmatch sort accumul list index submatch ad fals entri submatch never reach backtrack partial evalu regular express librari work unfold definit combin well content initi continu applic combin get replac applic copi bodi combin definit 5 recurs code construct result list success continu get expand explicit chain con express regexpmatch abc input buildmatch input lambda sub con lookup sub con lookup sub 1 con lookup sub 2 con lookup sub lambda sinc size result list known possibl unfold recurs definit initi continu construct match result make structur result explicit final case embed program known stat ical regexpmatch use nonappl context macro expand origin function definit 63 schemeql schemeql languag differ exampl program embed string rather special form recogn librari macro mean queri select fix set column length cursor row alway known static column name specifi sequenc identifi syntax queri form interpret stringbas embed program perform case dispatch content program string schemeql macro dispatch shape queri express case partial evalu possibl captur insert addit rule origin librari macro partial evalu schemeql queri use techniqu regular express librari recurs function construct cursor row unfold explicit chain con ex pression sinc know length cursor row static unfold guarante termin 5 conveni defin kleen star oper recurs e howev noncomposit definit lead infinit macro expans macro must care avoid unfold definit sinc schemeql librari implement macro need captur case queri form use nonappl context ad special case exist macro affect set allow context similarli case row length known static alreadi handl exist schemeql macro 7 static analysi scheme mrflow valu flow analysi extens ordinari setbas closur analysi like palsberg 22 everi express program mrflow static comput conserv approxim set valu express might evalu runtim given express creat graph simul flow valu insid express analysi simul evalu propag abstract valu graph reach fix point set abstract valu propag given node analysi reconstruct type display user drscheme graphic interfac extens basic analysi includ among thing analyz function take number argument analyz assign variabl set analyz gener data structur definit mrflow also support primit defin r 5 rs 17 vast major primit defin use special typelik languag embed insid alyz given primit correspond type translat graph simul primit intern flow analysi proce like express remain primit need special handl imper natur setcar vectorfil analyz adhoc manner default mrflow analyz format primit base follow pseudotyp descript string top string constructor mean primit function take number argument input beyond one explicitli specifi present case function must receiv string first argument follow number argument type repres pseudotyp top return string given descript error mrflow detect primit given someth string first argument given argument partial evalu applic format replac call individu librari function formatchar formathex function respect pseudotyp char string integ string use precis inform mrflow detect argument origin format call wrong type check format primit receiv right number argument given format string happen partial evalu analyz never see ariti error expand code sinc drscheme syntax object system keep track program term macro expans 11 mrflow abl trace detect error back origin guilti term user program flag graphic arrow repres flow valu also display interact term origin program allow user track program sourc valu trigger error essenc requir mrflow analyz partial evalu code format specifi pseudotyp librari function introduc transform like formatchar 6 similarli enough defin pseudotyp function use partial evalu form schemeql queri mrflow automat comput precis result without modif partial evalu regular express challeng consid exampl section 1 let r regexpmatch httpazaz line r processurl third r dispatch second r call regexpmatch variabl r either list three element fals base conserv pseudotyp specif regexpmatch mrflow comput r either list unknown length fals turn trigger two error second third primit one error primit might appli fals expect list one error might appli list short second kind fals posit remov partial evalu regexpmatch make structur result explicit mrflow describ section 62 analysi determin primit return either list three element fals turn check second third appli list enough element still possibl return valu regexpmatch may contain fals inde fals valu return runtim line given regexpmatch match pattern programm test condit explicitli process result way mrflow show fals posit second third presenc fals valu make analysi awar depend test r two branch ifexpress form flowsensit analysi ifexpress difficult implement gener sinc bound complex test ex pression practic howev appreci proport test simpl enough adhoc solut suffici case test simpli variabl refer enough creat two correspond ghost variabl one branch establish filter flow variabl r two ghost variabl make sure ghost variabl bind r variabl refer respect branch ifexpress filter flow prevent fals abstract valu flow branch ifexpress prevent everyth fals valu flow els branch combin flow sensit ifexpress partial evalu regexpmatch give analysi result fals posit 6 specifi pseudotyp even necessari mrflow know analyz plt scheme contract subject forthcom paper flowsensit analysi ifexpress ad pseudotyp descript necessari primit provid analysi partial evalu make fals posit describ section 3 disappear illustr next section 8 improv static analysi partial evalu format elimin possibl runtim ariti error sinc macro transform static check invari also allow mrflow detect type error could detect sinc correspond invari describ embed format languag invari explicit scheme level transform program use simpler primit like formatchar formatinteg figur 5 show program figur 2 appli partial evalu format primit blame two type error could found runtim error messag show user simpli gave argument n c wrong order similarli special regular express engin respect pattern elimin fals posit length list return regexpmatch directli comput analysi sinc inform hidden insid regular express pattern result applic second third figur 3 flag potenti runtim error omit fairli larg error messag figur special structur valu return regexpmatch expos analysi mrflow prove regexpmatch return list must contain three element fals posit second third disappear figur 6 cours regexpmatch also return fals runtim analysi correctli predict regardless whether partial evalu use ad flow sensit ifexpress describ section 7 remov last spuriou error figur 6 partial evalu allow precis analysi schemeql queri well figur 7 show precis analysi program figur 4 time partial evalu regexpmatch analysi previous comput cursorcar could return list length therefor flag call third potenti runtim error call free spuriou error sinc partial evalu expos enough structur list return cursorcar mrflow comput exact length verifi third fail runtim result comput analysi becom precis partial evalu interpret three embed languag use paper result code bigger origin program bigger code turn mean analys take time complet therefor tradeoff precis effici analys intend turn tradeoff user option mrflow user might also exercis full control embed languag partial evalu use either function macro version embed languag interpret switch two judici use modul system exampl 11 note partial evalu alway benefit analys regexpmatch exampl figur 6 spuriou error disappear mrflow abl prove list r length three therefor appli primit second figur 5 precis analysi format primit figur 6 precis analysi regexpmatch figur 7 precis analysi schemeql queri third r fail analysi hindleymilnerlik type system though differ would seen whether partial evalu use inde type system could static prove argument given second third list would attempt prove list requir length runtim test would still requir use partial evalu expos properti analysi would therefor useless simpli put make invari embed program explicit host languag matter system analyz host languag care invari mean partial evalu alway useless use conjunct hindleymiln type system though partial evalu format exampl would allow type system verifi format string agre type remain argument contrast adhoc solut use ocaml 19 type check printf primit use depend type case cayenn 4 9 relat work work analog design typesaf embed languag one printf 21 4 problem involv determin static inform program base valu embed program case design type languag simpli extend host languag includ specif embed languag ocaml languag exampl contain special librari printf 19 use printf typecheck adhoc manner similarli gcc compil c languag use adhoc check find error printf format string danvi 7 hinz 14 suggest implement printf ml haskel respect obviat need depend type recast librari term individu combin system individu combin automat introduc macro expans c languag 26 likewis avoid problem check invari printf break function smaller oper requir use embed format languag work close relat cayenn languag 4 augustsson use form partial evalu special depend type regular haskelllik type use type system check user program macro system use macroexpans time comput special express subsequ flow analysi comput precis valu flow result augustsson depend type system use comput perform typecheck time special depend type rest type check comput precis type inform special done system use type comput function specifi user evalu type system main differ system use comput special type verifi program safe origin program type compil asi type check turn mean case format exampl format string process twice type check time prove safeti program run time comput actual result system use comput special express mean evalu format string need done special program either run analyz prove safeti case format string reprocess sinc complet replac special code anoth differ system nonspeci program still valid program analyz prove safe run though result analysi probabl conserv analyz correspond partial evalu program prove safeti might difficult possibl cayenn sinc program depend type run without go partial evalu phase first much work gone optim embed languag hudak 15 elliott et al 8 backhous 5 christensen 6 veldhuizen 27 discuss use partial evalu improv effici embed languag although none make connect partial evalu static analysi back hous thesi discuss need improv error check embed languag erron conclud syntact analys use due embed natur domainspecif embed languag lisp program languag 25 section 84 provid compil macro programm use creat optim version exist function compil requir use though knowledg literatur show use compil macro improv result static analys lisp also support inlin function might help monovari analys duplic code function call site therebi simul polyvari analys bigloo 23 scheme compil routin implement embed languag via macro thu probabl provid benefit present paper compil intern anal yse compil switch enabl optim macro expans though seem document literatur describ exact effect use switch program embed languag contain invari automat enforc host languag shown use macro partial evalu interpret littl languag embed scheme respect input program recaptur invari convey flow analysi base macro techniqu requir adhoc modif either interpret analys thu readili avail programm make sweet spot program complex versu precis landscap program analysi intend investig relationship macro program analys similar manner acknowledg thank matthia felleisen mitchel wand kenichi asai discuss led work help feed back thank matthew flatt help present scheme macro thank dale vaillancourt proofread paper ryan culpepp macrolog wizardri r structur interpret comput program introduct set constraintbas program anal ysi java program languag abstract interpret domainspecif embed languag function unpars compil embed languag componenti setbas anal ysi want program web highlevel program languag base program analysi format class act modular domain specif languag tool research domainspecif embed languag program gener c program lan guag object caml system function logic overload closur analysi constraint form portabl optim compil strict function languag littl languag common lisp languag schemeunit schemeql two littl languag tr common lisp languag c program languag base program analysi closur analysi constraint form cayennemyampersandmdasha languag depend type componenti setbas analysi introduct set constraintbas program analysi function logic overload c program languag third edit structur interpret comput program java program languag compos compil macro revis report algorithm languag scheme program web highlevel program languag compil embed languag univers script framework lambda modular domain specif languag tool format class act drscheme program environ scheme function unpars