new faster filter multipl approxim string match present three new algorithm onlin multipl string match allow error extens previou algorithm search singl pattern averag run time achiev case linear text size moder error level pattern length number pattern adapt higher cost case howev algorithm differ speed threshold use theoret analyz algorithm use show perform experiment previou solut problem allow one error algorithm first allow error faster previou work moder number pattern eg less 50100 english text depend pattern length b introduct approxim string match one main problem classic string algorithm applic text search comput biolog pattern recognit etc given text 1n length n pattern p 1m length sequenc alphabet sigma size oe maxim number error allow want find text posit pattern match text k error error substitut delet insert charact use term error level refer paper interest onlin problem ie text known advanc classic solut singl pattern base dynam program run time omn 26 recent year sever algorithm improv classic one 22 improv worst averag case use properti dynam program matrix 30 11 16 31 9 other filter text quickli elimin uninterest part 29 28 10 14 24 sublinear averag moder ff ie inspect text charact yet approach use bitparallel 3 comput word w bit reduc number oper 33 35 34 6 19 problem approxim search set r pattern ie occurr anyon consid recent problem mani applic instanc work support part fondecyt grant 1990627 ffl spell mani incorrect word search dictionari time order find like variant moreov may even search dictionari correct word text misspel word hope much less cost ffl inform retriev synonym thesauru expans done keyword text errorpron may want search variant allow error batch queri system receiv number queri process may improv effici search singl pass ffl singlepattern queri algorithm singl pattern allow error eg pattern partit 6 reduc problem search mani subpattern allow less error benefit multipattern search algorithm trivial solut multipattern search problem perform r search far know previou attempt improv trivial solut due muth manber 17 use hash search mani pattern one error effici even one thousand pattern work present three new algorithm extens previou one case multipl search section 2 explain basic concept necessari understand algorithm present three new techniqu section 3 present automaton extend bitparallel simul nondeterminist finit automaton section 4 present exact partit extend filter base exact search pattern piec 7 6 24 section 5 present count base count pattern letter text window 14 section 6 analyz algorithm section 7 compar experiment final section 8 give conclus detail analys left appendic b although 17 allow search mani pattern limit one error first algorithm multipattern match allow one error moreov even one error improv 17 number pattern larg say less 50100 english text depend pattern length multipattern extens improv sequenti counterpart ie one separ search per pattern use base algorithm error level high ff 04 english text filter base exact search fastest small error level bitparallel simul nfa adapt better error rel short pattern previou partial preliminari version work appear 5 20 21 2 basic concept review section basic concept use algorithm follow paper denot ith charact string 1 first charact ij stand substr i1 j particular ffl empti string 21 filter techiqu multipattern search algorithm consid work base concept filter therefor use defin filter base fact normal easier tell text posit match ensur match therefor filter fast algorithm check simpl necessari though suffici condit approxim match occur text area satisfi necessari condit safe discard expens algorithm run text area pass filter sinc filter much faster approxim search algorithm filter algorithm competit fact domin larg rang paramet perform filter algorithm howev sensit error level ff filter work well low error level bad error relat amount text filter abl discard evalu filter algorithm import consid time effici also toler error term normal use refer filter sublinear said filter sublinear inspect charact text like boyermoor 8 algorithm exact search best onm throughout work make use two follow lemma deriv filter condit k error concaten subpattern substr match least one p bkjc error proof otherwis best match p insid least bkjc error occurr p involv occurr p total number error occurr least sum error piec sum error piec error therefor complet match possibl notic even consid match p must proper order disjoint delet may need connect gener one filter search pattern length k error search j subpattern length mj kj error text area surround occurr piec must check complet match import particular case lemma 1 aris one consid sinc case pattern piec appear unalt zero error lemma 2 32 j edt ij p k j gammam1j includ least gamma k charact p proof suppos opposit observ less charact p ij henc k charact must delet p match text observ k charact ij p henc must insert k charact p match text contradict case note case repeat charact pattern must count differ occurr exampl search aaaa one error text last four letter occurr must includ least three simplif 32 say essenti design filter approxim search base find enough charact pattern text window without regard order instanc pattern survey appear one error text window surger five letter pattern text howev filter discard possibl pattern appear text window yevru 22 bitparallel bitparallel techniqu common use string match 3 first propos 2 4 techniqu consist take advantag intrins parallel bit oper insid comput word use cleverli fact number oper algorithm perform cut factor w w number bit comput word sinc current architectur w 32 64 speedup signific practic improv technolog progress order relat behavior bitparallel algorithm work normal assum dictat ram model comput prefer howev keep w independ valu notat use bitparallel algorithm order denot b b 1 bit mask length store somewher insid comput word use clike syntax oper bit comput word eg j bitwiseor move bit left enter zero right eg b b also perform arithmet oper bit addit subtract oper bit form number instanc b b x explain first bitparallel algorithm sinc basi much follow work algorithm search pattern text without error parallel oper nondeterminist finit automaton look pattern figur 1 illustr automaton l h figur 1 nondeterminist automaton search aloha exactli automaton 1 state simul nondeterminist form omn time shiftor algorithm achiev omnw worstcas time ie optim speedup notic convert nondeterminist automaton determinist one search time get improv version kmp algorithm 15 howev kmp twice slow algorithm first build tabl b charact c store bit mask mask bc bit b zero p c state search kept machin word match end text read ie state number figur 1 activ therefor match report whenev dm zero set one origin new text charact j updat use formula formula correct ith bit zero gamma 1th bit zero previou text charact new text charact match pattern posit word j possibl relat formula movement occur nondeterminist automaton new text charact state get valu previou state happen text charact match correspond arrow pattern longer comput word ie w algorithm use dmwe comput word simul activ time algorithm omnw worst case time preprocess om averag algorithm even w sinc first o1 state automaton activ state averag henc first o1 comput word need updat averag easi extend shiftor handl class charact extens posit pattern match set charact rather singl charact classic string match algorithm easili extend shiftor enough set ith bit bc everi c 2 p p set instanc search survey caseinsensit form set first bit bs bs match zero rest shiftor also search multipl pattern complex omnw consid total length pattern arrang mani mask b machin word shiftor later enhanc 34 support larger set extend pattern even regular express recent 25 shiftor combin sublinear string match algorithm obtain flexibl effici competit best classic algorithm mani onlin text algorithm seen implement clever automata classic determinist form bitparallel sinc invent becam gener way simul simpl nondeterminist automata instead convert determinist advantag much simpler mani case faster sinc make better usag regist comput word easier extend handl complex pattern classic counterpart main disadvantag limit impos regard size comput word mani case adapt cope longer pattern effici 23 bitparallel approxim pattern match present applic bitparallel approxim pattern match especi relev present work consid nfa search patt error shown figur 2 everi row denot number error seen first one 0 second one 1 everi column repres match pattern given posit iter new text charact consid automaton chang state horizont arrow repres match charact follow correspond match occur other repres error move next row vertic arrow repres insert charact pattern sinc advanc text pattern solid diagon arrow repres replac charact sinc advanc text pattern dash diagon arrow repres delet charact pattern sinc ffltransit advanc pattern text loop initi state allow consid charact potenti start point match automaton accept charact end match whenev rightmost state activ initi activ state row 2 0k column 0 repres delet first charact pattern p 1m error figur 2 nfa approxim string match show activ state read text pait interest applic bitparallel simul automaton nondeterminist form first approach 34 obtain okdmwen time pack automaton row machin word extend shiftor algorithm account vertic diagon arrow note even state fit singl machin word k sequenti updat ffltransit happen classic dynam program algorithm 26 regard columnwis simul nfa paper interest recent simul techniqu 6 show pack diagon automaton instead row column new valu comput one step fit comput word give brief descript idea ffltransit state diagon activ subsequ state diagon becom activ defin minim activ row diagon diagon number look column start eg 1 2 enclos dot line figur 2 new valu read new text charact c comput alway hold report match whenev dmgammak k formula account replac insert match respect delet account keep minimum activ row interest match caught consid diagon 1 mgammak use bitparallel repres unari one hold k plu overflow bit store sequenti insid bit mask interestingli effect read diagon bottomup exchang 0 1 bit repres state nfa updat formula seen either arithmet implement previou formula unari logic simul flow bit across arrow nfa shiftor tabl bit long mask b built repres match mismatch pattern tabl bc built map bit b appropri posit insid figur 3 show state repres insid mask b separ separ final state p figur 3 bitparallel represent nfa figur 2 represent requir k2 bit per diagon total number bit gamma kk2 number bit exceed comput word size w updat done o1 oper result algorithm linear fast practic purpos import realiz connect pattern algorithm given b tabl pattern use class charact shiftor algorithm use properti next search multipl pattern 3 superimpos automata section describ approach base bitparallel simul nfa describ suppos search r pattern interest occurr one k error extend previou bitparallel approach build automaton one superimpos automata assum pattern length otherwis truncat shortest one henc automata structur differ label horizont arrow superimposit defin follow build b tabl pattern take bitwiseand tabl recal 0 mean match 1 mean mismatch result tabl match posit ith charact pattern build automaton use tabl result automaton accept text posit end occurr much relax pattern class charact name exampl search patt wait shown figur 4 string pait accept zero error w error error w w figur 4 nfa filter search patt wait moder number pattern filter strict enough cost singl search occurr report automaton verifi involv pattern use singlepattern automaton step retravers last charact determin actual occurr pattern number pattern larg filter relax trigger mani verif case partit set pattern group r 0 pattern build automaton group perform drr 0 e independ search cost search orr 0 n r 0 small enough make cost verif neglig r 0 alway exist sinc r singl pattern per automaton verif need group use heurist sort pattern pack neighbor group tri first charact 31 hierarch verif simplest verif altern call plain superimpos automaton report match tri individu pattern one one candid area howev smarter verif techniqu call hierarch possibl assum first r power two automaton report match run two new automata candid area one superimpos first half pattern anoth second half repeat process recurs two automata find match end automata repres singl pattern find match know pattern realli found see figur 5 cours automata requir subset pattern preprocess sinc correspond intern node binari tree r leav space preprocess cost chang r power two one halv may one pattern other2424 figur 5 hierarch verif method 4 pattern node tree repres check root repres fact global filter node pass check two children test leaf pass check pattern found advantag hierarch verif remov number candid consider singl test moreov even find pattern realli match actual check specif pattern ie may happen none two halv match spuriou match whole group worstcas overhead plain verif constant factor twice mani test candid area r averag show later analyt experiment hierarch verif far superior plain verif 32 automaton partit consid short pattern whose nfa fit comput word case ie partit problem subsect next adapt two partit techniqu describ 6 simplest techniqu cope larg automaton use number machin word simul idea follow larg automata superimpos partit superimpos automaton matrix subautomata one fit comput word subautomata behav slightli differ simpl one sinc must propag bit neighbor figur 6 illustr automaton partit run text updat subautomata step take time proport number cell updat ie okm gamma kw observ howev necessari updat subautomata sinc right may activ state follow 31 keep track need updat matrix subautomata work activ cell inform flow affect area000000000111111111111111111000111111 row j column c r figur larg nfa partit matrix theta j comput word satisfi r 1 c w 33 pattern partit techniqu base lemma 1 section 21 reduc size problem divid pattern j part provid search subpattern bkjc error match subpattern must verifi determin fact complet match perform partit pick smallest j problem fit singl comput word ie dmje w limit method reach sinc case search zero error algorithm case qualit differ describ section 4 divid pattern j subpattern evenli possibl partit r pattern left j theta r subpattern search bkjc error simpli group independ pattern search gener method differ determin subpattern appear verifi complet pattern anoth kind hierarch verif call hierarch piec verif appli case shown 23 24 singlepattern algorithm verifi hierarch whether complet pattern match given piec match see figur 7 instead check complet pattern check concaten two piec contain one match match check concaten four piec work lemma 1 appli level tree figur 7 method orthogon hierarch verif idea hierarch piec verif work bottomup instead topdown oper piec pattern rather set pattern use hierarch verif set pattern piec determin piec match given superimposit match coupl two differ hierarch verif techniqu case first use new mechan determin piec match superimpos group use hierarch piec verif determin occurr complet pattern piec belong figur 8 illustr whole process aaabbbcccddd aaabbb cccddd ccc ddd bbb aaa figur 7 hierarch piec verif method pattern split 4 part box leav element actual search root repres whole pattern least one pattern level must match occurr complet pattern bold box found bold line may verifi p22 p22 p22 one split 4 3 piec search superimpos group piec arrang hierarch verif p22 found search hierarch piec verif p2 final found figur 8 whole process pattern partit hierarch verif partit exact search techniqu call exact partit short base singlepattern filter reduc problem approxim search problem multipattern exact search algorithm first appear 34 later improv 7 6 24 first present singl pattern version extens multipl pattern 41 filter base exact search particular case lemma 1 show pattern match text posit k error split pattern k1 piec least one piec must present error occurr folklor properti use sever time 34 18 12 search zero error lead complet differ techniqu sinc effici algorithm search set pattern exactli partit pattern k similar length appli multipattern exact search piec occurr piec verifi check surround complet match mani verif algorithm extrem fast mani algorithm multipattern search extens sunday algorithm 27 gave us best result build trie subpattern text posit search text charact trie leaf found match path follow mismatch jump next text posit precomput minimum jump allow subpattern sunday algorithm 24 use techniqu hierarch piec verif singl pattern present section 33 42 search multipl pattern observ easili add pattern scheme suppos search r pattern cut one search parallel rk piec piec found text use classic algorithm verifi pattern candid area note import differ superimpos automata multipattern search know piec match case superimpos automata know piec match even possibl piec realli match work determin match piec carri hierarch verif superimpos automata necessari moreov detect real match match union pattern sum individu match therefor point separ search rk group reason superimpos less pattern shift sunday algorithm reduc number pattern grow show experi never justifi practic split one search two 5 count filter present filter base count letter common pattern text window filter first present 14 simpl variant 13 use slightli differ version variant use fixeds instead variables text window possibl alreadi note 32 make better suit parallel first explain singlepattern filter extend handl mani pattern use bitparallel 51 simpl counter filter base lemma 2 section 21 pass text examin mletter long window keep track mani charact p present current text window account multipl given text posit j charact p window j gammam1j window area verifi classic algorithm implement filter algorithm follow keep counter count pattern charact appear text window also keep tabl initi number time charact c appear p kept ac throughout algorithm entri ac indic mani occurr c still taken belong p exampl h appear p count one hs text window belong p ac neg mean c must exit text window gammaac time take belong p exampl run pattern aloha text aaaaaaaa hold valu counter 2 independ k advanc window must includ new charact j1 exclud last charact includ new charact subtract one j1 greater zero decrement new charact j1 p increment count exclud old charact j gammam1 add one j gammam1 greater zero increment j gammam1 consid p decrement count whenev count reach verifi preced area seen algorithm linear exclud verif number oper per charact small 52 keep mani counter parallel search r pattern text use bitparallel keep counter singl machin word must tabl count valu entri lie rang gammamm need exactli 1e bit store also enough count sinc rang 0m henc pack pattern length singl search recal w number bit comput word pattern differ length either truncat shortest length use window size longest length pattern must divid set subset maxim size search subset separ focu attent singl subset algorithm simul simpl one follow tabl pack tabl entri divid bit area length 1 area machin word correspond pattern store normal valu set 1 signific bit area subtract 1 ie store algorithm add subtract 1 easili parallel without caus overflow area next moreov correspond valu posit signific bit area zero also parallel counter mcount area align initi set 1 signific bit area subtract one ie store later add subtract 1 parallel without caus overflow moreov window must verifi pattern whenev signific bit area reach 1 condit check parallel signific bit reach 1 need sequenti check one final observ counter want select increment decrement correspond exactli area 1 signific bit ie whose valu posit allow obviou bit maskshiftadd mechan perform oper parallel counter figur 9 illustr mcount l h e count mgammak fals figur 9 bitparallel counter exampl correspond pattern aloha search 1 error text window hello valu 0 6 analysi interest complex present algorithm well restrict ff r must satisfi mechan effici filter unrelev part text effect defin two concept first say multipattern search algorithm optim search r pattern time take search one pattern call c nr cost search r pattern text size n algorithm optim c say multipattern search algorithm use search r pattern less time take search one one correspond sequenti algorithm ie c nr r c n1 work filter interest averag case analysi sinc worst case none use compar tabl 1 complex limit applic algorithm muth manber includ complet analysi lead result present later section algorithm complex optim use simpl superimp r oe automaton part ffm 2 r oe pattern part mr oe w1gammaff part exact search ffoe 1ff log oe rmthetalog oe log oe rm log oe mthetalog oe log oe count r log muth manber mn tabl 1 complex optim limit applic differ algorithm present figur 10 schemat represent area algorithm best term complex show later experi match figur exact partit fastest choic reason scenario error level appli first faster count log ffoe 1ff w hold asymptot hold practic reason valu second faster superimpos automata min true practic case ffl algorithm faster exact partit muth manber 17 name r ffoe 1ff howev limit ffl increas count asymptot fastest algorithm sinc cost grow olog instead om thank optim use bit comput word howev applic reduc grow useless point win exact partit ffl error level high exact partit superimpos automata remain altern automaton partit better pattern partit asymptot better algorithm limit use higher error level filter improv sequenti search pattern partit partit automaton partit exact search oe 1 log oe ff oe 1 log oe partit exact search superimpos automata r muthmanb ffoe 1ff ff figur 10 area algorithm better term ff r left plot vari assum moder r ie less 50 61 superimpos automata suppos search r pattern explain partit set group r 0 pattern search group separ r 0 automata superimpos size group larg possibl small enough verif signific analyz optim valu r 0 complex search 6 prove probabl given text posit match random pattern error level ff ofl also prove oe experiment shown hold precis practic replac e 109 fact abrupt phenomenon occur sinc match probabl low oe high otherwis formula 1oe stand probabl charact cross horizont edg automaton ie probabl two charact equal extend result note r 0 charact edg mention probabl smaller r 0 oe use upper bound pessimist approxim stand case r 0 charact differ tight r 0 oe singlepattern algorithm time multipattern algorithm optim averag whenev total cost verif o1 per charact sinc verif cost om use lineartim algorithm area length om need total number verif perform o1m per charact averag use plain verif scheme would mean probabl superimpos automaton match text posit o1mr perform r verif hierarch verif use r increas match becom probabl easier cross horizont edg automaton cost check r pattern one one result two differ limit maximum allow r one two fact state limit due increas cost verif stringent increas match probabl result analysi without hierarch verif complex omit hierarch verif yield consider better result simpler analysi show appendix averag cost verifi match superimpos automaton om hierarch verif use instead orm cost plain verif cost grow number pattern increas henc limit prevent us superimpos r pattern match probabl becom higher ff roe match probabl high spend much time verifi almost text posit hand superimpos much like limit reach tell best r call r maximum one reach limit ie r 1 sinc partit set small enough make verif signific cost simpli orr n mean algorithm optim take error level constant altern ff roe hand oe cost orn better trivial solut ie r henc superimposit occur algorithm use figur 11 illustr automaton partit analysi case similar simpl one except step larg automaton take time proport total number subautomata ie rt pr oe r ff r oe figur 11 behavior superimpos automata left cost increas linearli r slope depend ff right cost parallel search p approach r singl search fact worst case sinc averag cell activ use worst case superimpos pattern worst case search almost reach therefor cost formula rn optim constant ff altern ff roe use ff oe pattern partit jr pattern search bkjc error error level subproblem recal subpattern length mj determin piec match superimpos group pay om independ number piec superimpos thank hierarch verif henc limit group given eq 1 superimpos singlepattern algorithm also pay verifi match piec part complet match show 23 cost neglig ff oe less strict limit given eq 1 jr piec search need analyt express j sinc j larg enough subpattern fit comput word dw ff shown o1 w maxim term ff see 23 therefor complex oe rn hand search cost singlepattern algorithm ojrn respect simpl algorithm short pattern cost multipli j therefor limit optim use compar complex pattern versu automaton partit pattern partit better k w mean constant ff increas pattern partit asymptot better 62 partit exact search 6 analyz algorithm follow except verif search time made worst case use ahocorasick machin 1 offn best case use multipattern boyermoor algorithm search piec length mk1 1ff interest analyz cost verif sinc cut pattern k 1 piec length bmk 1e probabl piec match 1oe bmk1c henc probabl piec match k easili extend analysi case multipl search sinc rk piec length henc probabl verifi rk check match use classic algorithm dynam program note case know pattern verifi sinc know piec match show 23 total verif cost piec length 2 case henc search cost ffoe 1ff 1 must chang ff consid best case consid optim use optim algorithm pay total search time hold algorithm alway use sinc search cost independ number pattern number verif trigger exactli search pattern separ howev ff 1log oe thetalog oe log oe algorithm singl multipattern work much dynam program henc multipattern search use case algorithm could use shift boyermoor search shorten mani pattern point better perform separ search never happen practic 63 count number verif neglig pass algorithm case multipl pattern ow log pattern pack singl search cost search r pattern orn logmw difficult part analysi maximum error level ff filtrat scheme toler keep number verif low assum use dynam program verifi potenti match call probabl verifi logmwm 2 algorithm keep linear ie optim averag algorithm alway use sinc number verif trigger multipattern search singlepattern version howev 1m algorithm work ormn dynam program henc filter use deriv appendix b pessimist bound limit optim use name grow toler smaller error level limit hold condit type independ constant c case need use 7 experiment result experiment studi algorithm compar previou work test megabyt lowercas english text pattern randomli select text use sun ultrasparc1 run solari 251 64 megabyt ram data point obtain averag unix user time 10 trial present time tenth second per megabyt present result random text avoid excess lengthli exposit gener filter improv alphabet size oe grow lowercas english text behav approxim random text invers probabl two random letter equal figur compar plain hierarch verif method sequenti applic r search case superimpos automata automaton fit comput word show case increas r increas k clear hierarch verif outperform plain verif case moreov analysi hierarch verif confirm sinc maximum r cost parallel algorithm grow linearli close r hand algorithm simpl verif degrad sooner sinc verif cost grow r mention maximum r valu point parallel ratio maxim search 2r pattern better split two group size r search group sequenti stress point figur 12 right show quotient parallel sequenti algorithm optimum clear superimpos automata hand parallel ratio exact partit keep improv r grow predict analysi optimum larger relat sunday shift still justifi split search two compar algorithm other consid hierarch verif use r valu obtain optim group superimpos automata algorithm exact partit hand perform search singl pass count clear speedup optim pack mani pattern singl search notic plot depend r show point r select depend k fix r hand show parallel work error level increas control algorithm compar algorithm among other begin short pattern whose nfa fit comput word figur 13 show result increas r increas k low moder error level exact partit fastest algorithm particular faster previou work 17 number pattern 50 english text r r rt r r rt rt sequenti nfa superimpos plain verif exact partit superimpos hierarch verif figur 12 comparison sequenti multipattern algorithm 9 row correspond respect left plot show search time right plot show ratio parallel p sequenti time r theta error level increas superimpos automata best choic agre analysi r r exact partit superimpos automata count figur 13 comparison among algorithm 9 top plot show increas r 3 bottom plot show increas k consid longer pattern 14 show result increas r increas k exact partit best appli improv previou work 17 r 90100 longer pattern superimpos automata techniqu also degrad rare abl improv exact partit case begin best other longer use figur summar experiment result becom practic version theoret figur 10 main differ exact partit better practic complex suggest clear winner pattern automaton exact partit pattern partit automaton partit count figur 14 comparison among algorithm 30 top plot show increas r 4 bottom plot show increas k partit run would resort exact partit partit exact search superimpos automata r muthmanb apartit exact search 9 superimpos automata figur 15 area algorithm better practic english text right plot assum 9 compar figur 10 conclus present number differ filter algorithm multipattern approxim search ing algorithm allow arbitrari number error hand previou work allow one error outperform number pattern search 50100 english text depend pattern length explain analyz experiment test algorithm also present map best algorithm case mani idea propos use adapt singlepattern approxim search algorithm case multipattern search instanc idea superimpos automata adapt bitparallel algorithm 19 anoth fruit idea exact partit multipattern exact search easili adapt search piec mani pattern mani filter algorithm type eg 28 hand exact multipattern search algorithm may better suit search paramet eg work better mani pattern number practic optim algorithm possibl instanc ffl pattern differ length truncat shortest one superimpos automata select cleverli substr use sinc charact posit two pattern improv filter mechan ffl use simpl heurist group subpattern superimpos automata improv maxim common letter gener techniqu could group pattern similar term number error need convert one ie cluster techniqu ffl free partit pattern k piec like exact partit use 24 minim expect number verif letter alphabet probabl occurr eg english text om 3 dynam program algorithm present select best partit could appli multipattern search acknowledg thank robert muth udi manber implement 17 also thank anonym refere detail comment improv work r effici string match aid bibliograph search effici text search text retriev theori practic new approach text search multipl approxim string match faster approxim string match fast practic approxim pattern match fast string search algorithm theoret empir comparison approxim string match algorithm sublinear approxim string match biolog applic improv algorithm approxim string match simpl effici string match k mismatch comparison approxim string match algo rithm fast parallel serial approxim string match approxim multipl string search sublinear algorithm approxim keyword search fast bitvector algorithm approxim pattern match base dynam progam multipl approxim string match count approxim text search guid tour approxim string match improv algorithm approxim pattern match fast simpl approxim string match theori comput evolutionari distanc pattern recognit fast substr search algorithm use qgram locat approxim string match approxim boyermoor string match algorithm approxim string match find approxim pattern string approxim string match qgram maxim match approxim string match use withinword parallel fast text search allow error tr algorithm approxim string match fast parallel serial approxim string match effici text search fast substr search algorithm improv algorithm approxim string match new approach text search fast text search approxim stringmatch italicqitalicgram maxim match approxim boyermoor string match approxim string match use withinword parallel comparison approxim string match algorithm fast simpl approxim string match fast string search algorithm effici string match guid tour approxim string match textretriev multipl approxim string match fast practic approxim string match theoret empir comparison approxim string match algorithm approxim multipl string search bitparallel approach suffix automata fast bitvector algorithm approxim string match base dynam program use qgram locat approxim string match ctr atsuhiro takasu approxim multiword match algorithm robust document retriev proceed 15th acm intern confer inform knowledg manag novemb 0611 2006 arlington virginia usa kimmo fredriksson onlin approxim string match natur languag fundamenta informatica v72 n4 p453466 decemb 2006 kimmo fredriksson gonzalo navarro averageoptim singl multipl approxim string match journal experiment algorithm jea v9 ne 2004 josu kuri gonzalo navarro ludov fast multipattern search algorithm intrus detect fundamenta informatica v56 n12 p2349 januari josu kuri gonzalo navarro ludov fast multipattern search algorithm intrus detect fundamenta informatica v56 n12 p2349 juli federica mandreoli riccardo martoglia paolo tiberio syntact approach search similar within sentenc proceed eleventh intern confer inform knowledg manag novemb 0409 2002 mclean virginia usa