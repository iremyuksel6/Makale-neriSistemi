improv spill code gener softwar pipelin loop softwar pipelin loop schedul techniqu extract parallel loop overlap execut sever consecut iter due overlap iter schedul impos high regist requir execut schedul valid requir number regist avail target architectur regist requir reduc either decreas iter overlap spill regist memori paper describ set heurist increas qualiti registerconstrain modulo schedul heurist decid two previou altern defin criteria effect select spill candid heurist propos reduc regist pressur appli softwar pipelin techniqu propos evalu use registerconsci softwar pipelin workbench compos larg set loop perfect club benchmark set processor configur propos paper compar previou propos alreadi describ literatur one processor configur set loop fit avail regist 32 speedup 168 reduct memori traffic factor 057 achiev afford increas compil time loop repres speedup 138 reduct memori traffic factor 07 b introduct softwar pipelin 9 instruct schedul techniqu exploit instruct level parallel ilp loop overlap oper variou success loop iter differ approach propos literatur 2 gener softwar pipelin schedul mainli focus achiev high throughput 1 11 16 22 23 25 main drawback aggress schedul techniqu high regist requir 19 21 use regist avail requir action reduc regist pressur may also degrad perform either due addit cycl schedul due addit memori traffic reason propos also focus attent minim regist requir 12 15 20 27 regist alloc consist find final assign regist loop variabl variant invari temporari extens studi framework acycl schedul 3 5 6 7 base origin graph color propos 8 howev softwar pipelin impos constraint inhibit use techniqu regist alloc although propos handl 13 14 24 none deal addit spill code schedul need reduc regist pressur softwar pipelin loop softwar pipelin fail gener schedul requir regist avail target machin case addit action perform order allevi high regist demand 24 one option reschedul loop reduc execut rate ie less iter overlap reduc number overlap oper variabl unfortun regist reduct may expens reduct perform anoth option spill variabl memori occupi regist certain number clock cycl requir insert store load instruct free use regist evalu perform 18 show reduc execut rate tend gener wors schedul spill variabl howev author show case opposit situat may happen sever aspect contribut qualiti spill code gener compil first one decid spill code appli use variabl subset second aspect relat select spill candid impli decid number variabl use select spill prioriti function use select among decis need accur estim benefit select spill candid produc term regist pressur reduct order motiv work tabl 1 show two differ spill algorithm averag execut rate cycl initi two consecut iter averag memori traffic number memori access per iter loop workbench section 24 whose schedul fit 32 regist one processor configur use along paper tabl also includ ideal case ie infinit regist avail spill need notic gap two implement one commerci describ 26 experiment 18 ideal case larg result motiv propos new heurist improv whole regist pressur reduct process last column tabl show result appli heurist propos paper repres 40 reduct execut rate memori traffic respect previou propos paper use registerconsci pipelin name hrm 20 schedul loop loop schedul regist alloc perform use wand strategi endfit adjac order 24 regist requir decreas requir paper contribut set heurist 1 decid two differ possibl aforement ad spill code directli decreas execut rate 2 better select spill candid term assign prioriti select appropri number paper also contribut analysi result spill variabl use perform differ propos compar ideal case upper bound perform metric ideal 18 26 paper avg execut rate 1201 2832 2943 2066 avg memori traffic 1538 5088 5213 3571 tabl 1 motiv exampl improv spill process propos present 18 workbench compos loop perfect 4 suitabl softwar pipelin paper organ follow section 2 make brief overview modulo schedul regist alloc spill code modulo schedul section 3 focus differ step propos spill variabl memori section 4 present differ altern select spill candid effect way analyz tradeoff reduc execut rate ad spill code section 5 differ altern heurist evalu term dynam perform take account rel import loop total execut time benchmark set final section 6 state conclus 2 basic concept 21 modulo schedul softwar pipelin loop schedul iter divid stage execut consecut iter distinct stage overlap number stage one iter term stage count sc number cycl initi success iter softwar pipelin loop determin execut rate term initi interv ii execut loop divid three phase ramp phase fill softwar pipelin steadi state phase maximum overlap iter achiev ramp phase drain softwar pipelin steadi state phase pattern oper execut stage achiev iter piec code name kernel correspond one stage steadi state phase ii bound recurr circuit depend graph loop recmii resourc constraint target architectur resmii lower bound ii term minimum initi interv resmii reader refer 11 25 extens dissert calcul recmii resmii order perform softwar pipelin hypernod reduct modulo schedul hrm heurist 20 use hrm softwar pipelin achiev mii larg percentag workbench consid paper 974 loop addit gener schedul low regist requir registersensit softwar pipelin techniqu use order overestim necess spill code schedul perform two step first step comput prioriti oper schedul second step perform actual placement oper modulo reserv tabl 22 regist alloc loop schedul alloc valu regist perform valu use loop correspond either loopvari loopinvari variabl invari repeatedli use never defin execut loop invari one valu iter loop therefor requir singl regist execut loop regardless schedul machin configur loop variant new valu gener iter loop therefor differ lifetim lt 15 natur softwar pipelin lt valu defin iter overlap lt valu defin subsequ iter lt loop variant measur differ way depend execut model machin assum variabl aliv begin produc oper start last consum oper overlap lt differ iter pattern length ii cycl indefinit repeat obtain pattern indic number valu live given cycl maximum number simultan live valu maxliv accur approxim number regist requir schedul 24 variant may lt valu greater ii pose addit difficulti sinc new valu gener previou one use one approach fix problem provid form regist renam success definit valu use distinct regist renam perform compil time use modulo variabl expans mve 17 ie unrol kernel renam multipl definit variabl exist unrol kernel rotat regist file provid hardwar solut solv problem without replic code 10 ie renam differ instanti loopvari done execut time studi implement assum exist rotat regist file use wandsonli strategi use endfit adjac order 24 strategi usual achiev regist alloc use maxliv regist almost never requir maxliv regist howev heurist propos paper applic regardless hardwar model regist alloc strategi use 23 decreas regist requir regist alloc techniqu softwar pipelin loop 24 assum infinit number regist name use regist ur number regist requir execut given schedul avail regist ar number regist avail target architectur ur greater ar obtain schedul valid target processor case regist pressur must decreas loop execut eg must obtain schedul ur ar differ altern decreas regist requir outlin 24 1 reschedul loop larger ii 2 spill variabl memori 3 split loop sever smaller loop best knowledg loop split yet evalu purpos decreas regist pressur two altern evalu compar 18 use product compil eg cydra5 compil increas ii 11 mip compil describ 26 add spill code next summar main conclus comparison ffl reschedul loop bigger ii usual lead schedul less iter overlap therefor less regist requir unfortun ur decreas directli expens reduct perform less parallel exploit addit loop possibl find valid schedul ur ar simpli increas ii ffl spill variabl memori make avail associ regist valu spill requir use sever load store oper may satur memori unit turn loop memorybound loop case addit spill code lead increas ii degrad final perform increas ii produc gener wors schedul ad spill code howev loop first option better suggest hybrid method case add spill code other increas ii produc better result instanc 27 spill mani use possibl without increas ii ie tri satur memori buse schedul obtain fit ar ii increas although heurist alway end valid schedul care minim memori traffic fact may increas memori traffic loop requir spill paper present heurist allow bypass step add spill code case simpli increas ii paper also propos sever new heurist ad spill code heurist allow better tune final schedul perform degrad reduc well memori traffic overhead 24 experiment framework differ propos paper evalu set architectur pimjlk defin follow number function unit use perform kind comput adder multipli divsqr unit j number loadstor unit k latenc adder multipli configur latenc load store access two one cycl respect divis take 17 cycl squar root take cycl function unit fulli pipelin except divsqr function unit particular four differ configur use p2m2l4 p2m2l6 p4m2l4 p4m4l4 regist order evalu heurist propos total 1258 loop repres 80 total execut time perfect club 4 measur hppa 7100 schedul first evalu effect propos section 4 evalu use loop ur ar number loop fulfil condit differ processor configur aforement shown tabl 2 notic 64 regist avail number loop fit ar small therefor subject varianc heurist consequ main conclus experiment evalu drawn configur howev result 64 regist use confirm trend evalu real impact perform take account loop workbench section 5 ar p2m2l4 p2m2l6 p4m2l4 p4m4l4 tabl 2 number loop requir regist avail set processor configur pimjlk metric use evalu perform follow ffl sigmaii measur sum individu ii loop consid ffl sigmatrf measur sum individu number memori oper use schedul ffl schedtim measur time schedul loop ad spill code initi algorithm use gener regist constrain modulo schedul iter algorithm shown figur 1 schedul regist alloc loop requir regist avail set spill candid obtain order algorithm decid mani candid final select spill introduc necessari memori access origin depend graph loop reschedul modulo schedul tend compact goal satur use resourc difficult find empti slot alloc new memori oper modulo reserv tabl process repeat schedul requir regist avail found best knowledg previou spill approach base similar iter algorithm 18 26 27 follow subsect describ detail one aspect present solut propos previou research 31 variabl use lifetim variabl span definit last use lifetim variabl divid sever section use whose lifetim span previou use prioriti reg alloc add spill select candid sort candid gener spill code schedul rg reqrm schedul figur 1 flow diagram origin spill algorithm current one exampl figur 2a show produc oper follow four independ consum oper case lifetim variabl rang begin prod begin cons4 four differ use defin u1 u4 shown right part figur disadvantag spill variabl one variabl sever successor number associ spill memori oper suddenli increas may produc increas ii thu reduc perform addit load ad might actual contribut decreas regist requir spill use allow finegrain control spill process altern use previou propos spill variabl use 18 26 spill use 27 paper evalu perform two altern combin heurist propos section 4 32 sort spill candid criteria need decid suitabl spill candid ie decreas regist requir smallest cost achiev assign prioriti spill candid prioriti usual comput accord lt candid 18 ratio lt memori traffic introduc spill 18 26 27 expect second heurist alway produc better result paper propos new criterion take account critic cycl span lifetim spill candid 33 quantiti select give prioriti spill candid algorithm decid mani candid actual spill memori object decreas regist requir ur ar minimum number spill oper requir estim benefit candid produc final schedul howev new memori oper may satur memori unit lead increas ii increas ii reduc regist pressur may lead situat unnecessari number candid select select process done differ way instanc 18 propos spill one candid time reschedul heurist avoid overspil expens unaccept schedul time avoid 26 perform sever tri spill poweroftwo number candid process finish new schedul fit ar found reduc number reschedul effect way 18 select much candid necessari directli reduc ur ar order avoid overspil time candid select lifetim subtract current ur comput estim number regist need spill anoth altern use 27 gener schedul minimum regist requir consist select much candid necessari satur memori unit current ii paper propos new heurist tri better forese overestim produc previou heurist 34 ad memori access set candid select depend graph modifi order introduc necessari loadstor instruct reschedul order guarante spill effect decreas ur spill oper schedul close possibl producersconsum accomplish schedul spill oper associ producerconsum singl complex oper 18 spill variabl store oper insert produc load oper insert consum figur 2b show modif depend graph spill variabl figur 2a spill use store lat fu cons1 cons2 cons3 cons4 store prod cons1 cons2 cons3 cons4 store prod prod b c cons1 cons2 cons3 u3 cons4 figur 2 origin graph b graph spill variabl c graph spill singl use variabl oper ad produc singl load oper ad consum end correspond use figur 2c show modif graph use u3 select one largest lifetim therefor releas regist 4 new heurist spill code section describ issu gaug use control gener valid schedul spill code first control decid prioriti candid select spill idea behind propos give prioriti one contribut reduct regist pressur effect way second control decid mani candid spill reschedul loop final third control decid worth appli direct increas ii addit spill analysi also consid spill candid either variabl use 41 spill variabl spill use algorithm describ section 3 decid candid spill base lifetim ratio lifetim memori traffic spill would gener configur p4m2l4 regist use 1932 4454 250 875 usecc useqf 1626 3791 229 787 usetf 1408 3139 132 593 useccqftf 1232 2895 126 606 tabl 3 improv perform metric appli differ heurist make differ consid either spill variabl use variabl instanc tabl 3 show sigmaii sigmatrf two regist file size 32 64 regist processor configur p4m2l4 either spill variabl row label var spill use row label use appli use lttrf criterion order spill candid tabl report figur rel ideal case ie sigmaii sigmatrf ideal case subtract valu specif configur notic gener spill use achiev schedul lower ii memori traffic initi result reader may conclud spill use effect spill variabl howev see along paper propos improv metric tend reduc gap two altern addit behavior also depend architectur evalu shown section 5 42 critic cycl first propos new criterion select candid spill sometim select base lttrf may select candid effect reduc regist pressur rational behind spill reduc number simultan live candid schedul cycl number maximum thu decid number regist need critic cycl cc defin schedul cycl number use regist ur maximum new select criterion give prioriti candid cross cc criterion candid select may improv effici spill process shown tabl 3 processor configur select row label varcc usecc show two perform metric workload 43 number variabl spill comput number candid may accur new spill code might increas ii schedul result satur memori unit increas ii could reduc overal regist pressur therefor would necessari use much spill initi expect propos section tri forese overestim algorithm assum regist file avail regist ar 0 actual add actual number avail regist number proport gap ur ar follow ar 0 qf quantiti factor notic correspond spill one candid time spill necessari candid reduc ur ar qf paramet whose optim valu depend architectur characterist loop paper conduct experiment evalu paramet order determin rang use valu analyz effect perform schedul time schedtim figur 3 plot behavior sigmaii sigmatrf schedtim qf valu rang 1 0 lowest valu qf lead worst result term ii trf low schedtim larg valu qf lead better perform expens increas compil time particular valu qf larger 06 increas schedtim compens increas perfor manc gener medium valu qf gener good schedul neglig increas compil time tabl 3 row label varqf useqf show result 05 notic qf quantiti factor18002200sumii a1 qf quantiti factor40005000 b1 use qf quantiti factor5001500 schedtim qf quantiti factor250sumii a2 qf quantiti factor8001000 b2 qf quantiti factor100300500 schedtim c2 figur 3 behavior sigmaii b sigmatrf c total schedtim valu qf 0 1 32 regist 1 64 regist 2 valu increas much compil time reduc consider ii trf 44 traffic control previou techniqu tri improv perform spill process increas effect select candid situat better increas ii instead appli spill exampl ar ur ad spill code would lead satur memori unit case ii memori traffic would increas order fit new memori oper howev increas ii without ad spill memori traffic increas might also reduc ur figur 4 show algorithm propos control point decid better increas ii insert spill code order forese previou situat algorithm perform estim memori traffic number load store would introduc spill done newtrf maximum traffic maxtrf support current valu ii enough absorb newtrf algorithm directli increas ii without insert spill process repeat particular new ii valu might produc less spill code may requir prioriti reg alloc add spill select candid sort candid trf absorb ii gener spill code schedul rg reqrm schedul figur 4 flow diagram propos algorithm combin spill code traffic control maximum traffic architectur support multipli tf traffic factor control satur memori unit condit accept addit spill code newtrf maxtrf tf done tradeoff appli spill mechan increas ii tf paramet includ obtain better tradeoff mechan moreov take alway increas ii take tf 1 alway insert spill tf take posit valu experiment observ best result obtain tf rang 07 14 figur 5 plot behavior sigmaii sigmatrf schedtim valu tf within rang gener observ best valu ii obtain tf valu close 095 want reduc traffic use smaller valu tf notic time obtain schedul small variat tabl 3 row label vartf usetf show perform term sigmaii sigmatrf tf set 095 notic regist spill variabl perform better spill use paramet qf tf tend reduc spill code may interfer posit way figur 6 plot combin effect paramet notic tune paramet might lead better valu sigmaii anoth observ tf use higher valu qf need result higher schedul time particular 32 regist best result obtain qf set zero 64 regist best result obtain qf set 03 05 order summar previou effect row label varccqftf usecc qftf tabl 3 show perform cc qf tf use qf tf set valu produc best perform result spill variabl use sigmaii reduc 47 52 sigmatrf reduc 42 35 respect initi var 32 64 regist respect similarli spill use appli sigmaii reduc 36 50 sigmatrf reduc 35 30 14 13 12 11 10 09 08 07 tf traffic factor160020002400 a1 14 13 12 11 10 09 08 07 tf traffic factor300040005000 b1 use 14 13 12 11 10 09 08 07 tf traffic factor50150schedtim 14 13 12 11 10 09 08 07 tf traffic factor200300 a2 14 13 12 11 10 09 08 07 tf traffic factor600800sumtrf b2 14 13 12 11 10 09 08 07 tf traffic factor2060 schedtim c2 figur 5 behavior sigmaii b sigmatrf c schedtim tf rang 07 14 32 regist 1 64 regist 2 first point correspond tf 1 14 13 12 11 10 09 08 07 tf traffic factor160020002400 a1 14 13 12 11 10 09 08 07 tf traffic factor35004500sumtrf b1 14 13 12 11 10 09 08 07 tf traffic factor100300 schedtim 14 13 12 11 10 09 08 07 tf traffic factor200300 a2 14 13 12 11 10 09 08 07 tf traffic factor600800sumtrf b2 14 13 12 11 10 09 08 07 tf traffic factor2060 schedtim c2 figur behavior sigmaii b sigmatrf c schedtim sever valu qf tf rang 07 14 32 regist 1 64 regist 2 first point given respect initi use 32 64 regist respect increas perform expens afford increas schedul time 32 regist schedul requir 18 time origin time 64 regist increas neglig perform evalu effect propos mechan evalu use static inform ii trf evalu demonstr new heurist effect obtain better schedul howev static evalu show use term execut time dynam memori traffic execut time estim ii n n total number iter e number time loop execut dynam memori traffic estim n number memori oper kernel code softwar pipelin loop result obtain p4m2l4 configur shown figur 7 bar graph upper part show execut time degrad rel ideal case ie assum infinit number regist closer result 1 better perform notic 1 upper bound perform lower part figur b show memori traffic mem rel ideal case ideal mem closer traffic 1 better schedul howev case 1 lower bound memori traffic plot left side 1 correspond loop benchmark set plot right side 2 refer loop requir spill code configur regist figur 7a1 show speedup 138 respect origin propos spill variabl use 127 spill use appli configur figur 7b1 show reduct memori factor close 07 case 64 regist speedup report less import close 106 memori traffic reduc factor close 09 figur 7a2 7b2 show perform subset loop requir spill configur regist perform loop increas factor 170 spill variabl appli 152 spill use appli 64 regist perform increas factor close 126 case notic memori traffic regist 64 registers020610 cycl a1 use usecc useccqf useccqftf regist 64 registers13 mem b1 regist 64 registers020610 a2 regist 64 registers2610 menidealmem b2 figur 7 dynam result differ spill heurist configur p4m2l4 qf03 tf095 extraordinarili decreas 32 regist avail memori traffic reduc factor 057 062 respect origin propos spill variabl use respect 64 regist avail memori traffic reduc factor 072 077 architectur notic spill use perform better spill variabl combin heurist 32 64 regist critic cycl consid spill use improv better spill variabl howev quantiti factor traffic factor use perform tend level spill variabl spill use spill use still perform slightli better result obtain processor configur shown figur 8 first notic configur heurist propos paper perform better howev aspect need discuss exampl case eg configur p2m2l4 spill use perform wors spill variabl configur eg p4m4l4 perform better spill use appli 64 regist avail spill variabl perform better regist also contrari happen configur p2m2l4 64 regist spill use big perform degrad critic cycl consid final paramet qf tf set differ valu config urat paramet give flexibl algorithm allow adapt regist 64 registers020610 cycl a1 regist 64 registers2610 mem b1 regist 64 registers020610 cycl a2 use usecc useccqf useccqftf regist 64 registers2610 mem b2 regist 64 registers020610 a3 regist 64 registers2610 mem b3 figur 8 dynam result differ spill heurist configur 1 p2m2l4 2 p2m2l6 3 p4m4l4 configur howev paramet tune configur order obtain good result instanc use regist spill use architectur spill variabl obtain best perform perform extens evalu empir obtain use rang valu reason good result obtain particular qf rang 00 03 tf rang 09 10 addit valu tune specif applic even specif loop final perform much import compil time like embed applic 6 conclus paper present set heurist improv effici process reduc regist pressur softwar pipelin loop paper propos new criteria decid two differ altern contribut reduct decreas execut rate loop increas ii temporarili store regist memori spill code second altern paper also contribut new criteria select spill candid mani one propos evalu use registerconsci softwar pipelin howev orthogon could appli algorithm experiment evalu done larg collect loop perfect club benchmark impact differ heurist evalu term effect effici term effect heurist propos reduc case execut rate memori traffic respect origin propos term effici reduct contribut real increas perform particular dynam perform loop fill avail regist increas factor rang 125 168 memori traffic also reduc factor rang 077 057 reduct execut time memori traffic achiev expens reason increas compil time worst case schedul requir 18 time origin time whole workbench dynam perform increas factor rang 107 138 memori traffic reduc factor rang 09 07 schedul manag compil loop less one minut configur 64 regist less 35 minut configur although heurist propos contribut better registerconstrain schedul addit work need tune sever paramet like traffic quantiti factor analyz real effect differ architectur configur also shown depend configur spill candid either variabl use suggest dynam process schedul decid onthefli specif valu paramet take account variabl use may lead better schedul r realist resourceconstrain softwar pipelin algorithm softwar pipelin spill code minim techniqu optim compil perfect club benchmark effect perform evalu supercomput color heurist regist alloc improv graph color regist alloc regist alloc via hierarch graph color regist alloc spill via graph color approach scientif array process architectur design ap120bfps164 famili overlap loop support cydra 5 compil cydra 5 stage schedul techniqu reduc regist requir modulo schedul meet new model loop cyclic regist alloc regist alloc use cyclic interv graph new approach old problem circular schedul new techniqu perform softwar pipelin systol array optim compil heurist registerconstrain softwar pipelin quantit evalu regist pressur softwar pipelin loop hypernod reduct modulo schedul regist requir pipelin pro cessor softwar pipelin parisc compil schedul techniqu easili schedul horizont architectur high perform scientif comput regist alloc softwar pipelin loop iter modulo schedul algorithm softwar pipelin loop softwar pipelin showdown optim vs heurist method product compil softwar pipelin regist alloc spill tr overlap loop support cydra 5 spill code minim techniqu optim complier color heurist regist alloc regist alloc via hierarch graph color circular schedul regist alloc softwar pipelin loop regist requir pipelin processor lifetimesensit modulo schedul compil cydra 5 improv graph color regist alloc iter modulo schedul softwar pipelin regist alloc spill softwar pipelin stage schedul hypernod reduct modulo schedul softwar pipelin showdown heurist registerconstrain softwar pipelin quantit evalu regist pressur softwar pipelin loop systol array optim compil convers control depend data depend schedul techniqu easili schedul horizont architectur high perform scientif comput regist alloc myampersandamp spill via graph color ctr javier zalamea josep llosa eduard ayguad mateo valero softwar hardwar techniqu optim regist file util vliw architectur intern journal parallel program v32 n6 p447474 decemb 2004 alex alet josep codina antonio gonzlez david kaeli demystifi onthefli spill code acm sigplan notic v40 n6 june 2005 xiaotong zhuang santosh pand differenti regist alloc acm sigplan notic v40 n6 june 2005 xiaotong zhuang santosh pand alloc architect regist differenti encod acm transact program languag system topla v29 n2 p9e april 2007 javier zalamea josep llosa eduard ayguad mateo valero twolevel hierarch regist file organ vliw processor proceed 33rd annual acmiee intern symposium microarchitectur p137146 decemb 2000 monterey california unit state josep codina josep llosa antonio gonzlez compar studi modulo schedul techniqu proceed 16th intern confer supercomput june 2226 2002 new york new york usa javier zalamea josep llosa eduard ayguad mateo valero modulo schedul integr regist spill cluster vliw architectur proceed 34th annual acmiee intern symposium microarchitectur decemb 0105 2001 austin texa bruno dufour karel driesen lauri hendren clark verbrugg dynam metric java acm sigplan notic v38 n11 novemb javier zalamea josep llosa eduard ayguad mateo valero regist constrain modulo schedul ieee transact parallel distribut system v15 n5 p417430 may 2004