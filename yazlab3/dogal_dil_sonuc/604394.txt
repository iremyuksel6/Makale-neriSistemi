applicationlevel fault toler complement systemlevel fault toler multiprocessor system becom complex reliabl need increas well paper propos novel techniqu applic wide varieti distribut realtim system especi exhibit data parallel systemlevel fault toler involv reliabl techniqu incorpor within system hardwar softwar wherea applicationlevel fault toler involv reliabl techniqu incorpor within applic softwar assert high reliabl combin systemlevel fault toler applicationlevel fault toler work best mani system applicationlevel fault toler use bridg gap systemlevel fault toler alon provid requir reliabl exemplifi rtht target track benchmark abf beamform benchmark b introduct larg distribut realtim system high likelihood given time part system exhibit faulti behavior abil toler behavior must integr part realtim system associ everi realtim applic task deadlin calcul must complet order ensur deadlin met even presenc failur fault toler must employ paper consid fault toler two separ level systemlevel applicationlevel systemlevel fault toler encompass redund recoveri action within system hardwar softwar system hardwar includ comput element i0 network subsystem system softwar includ oper system compon schedul alloc algorithm check point fault detect recoveri algorithm exampl event fail process unit compon system respons fault toler would take care reschedul task execut faulti node restart good node previou checkpoint applicationlevel fault toler encompass redund recoveri action within applic softwar variou task applic may commun order learn fault provid recoveri servic make use dataredund certain situat nd fault toler applicationlevel greatli augment overal faulttoler system exampl task checkpoint larg applicationlevel fault toler help mask fault system move larg checkpoint restart task anoth node nmodular redund wellknown fault toler techniqu number ident copi softwar run separ machin output compar major decis use 1 techniqu howev involv larg amount redund thu costli recoveri block approach combin element checkpoint backup altern provid recoveri hard failur 2 task replic singl copi task activ time comput host activ copi task fail backup execut task may complet restart increas chanc deadlin miss els execut recent checkpoint 4 later option requir activ copi task period copi checkpoint state backup entail larg amount overhead especi state inform transfer larg case applic deal anoth common techniqu use less precis ie approxim result 3 obtain oper much smaller data set use algorithm data set chosen sucient accur result obtain greatli reduc execut time smaller data set chosen either priorit data set reduc granular exampl applic target track imag process better less precis result time rather precis result late recoveri techniqu cater applic exhibit data parallel involv larg data set make less precis result short period time approach make use facet recoveri block techniqu employ reduc precis state inform result order toler fault employ certain degre redund within parallel process applic whole abl make use redund event fault ensur requir level reliabl achiev consid failur render process result erron inaccess case fault redund element less precis result use instead fail process way techniqu provid high degre reliabl small comput overhead certain applic section 2 introduc rtht abf benchmark use demonstr techniqu section 3 describ detail applicationlevel fault toler techniqu section 4 analyz eectiv techniqu use conjunct benchmark section 5 conclud paper 2 benchmark benchmark form shown figur 1 multipl parallel applic process fed input data sourc case sourc process simul radar system array sonar sensor parallel comput complet result output sink process simul system display actuat techniqu concern abil withstand fault parallel process sink collect result random nois sourc gener input data consist real point applic process perform comput order track target form beam process 1 process 2 process 3 process 4 sourc sink figur 1 softwar architectur rtht abf benchmark 21 rtht target track benchmark honeywel realtim multihypothesi track rtht benchmark 6 7 generalpurpos parallel targettrack benchmark purpos benchmark track number object move twodimension coordin plane use data radar system data noisi consist fals target clutter along real target origin nonfaulttoler applic consist two process run parallel work distinct subset data radar period frame data arriv radar sourc process case split among process comput hypothes possibl track associ hypothesi includ gure likelihood repres like real track histori data point covari matrix use gener uptod likelihood valu everi frame radar data parallel process perform follow step creation new hypothes new data point receiv 2 extens exist hypothes make use new radar data exist covari particip systemwid compil rank hypothes led root applic process 4 merg list hypothes systemwid list result compil step deadlin one frame calcul arriv next frame evalu perform origin nonfaulttoler benchmark run conjunct rapid realtim system simul 9 becam appar despit inher systemlevel fault toler simul system benchmark still saw drastic degrad track accuraci result even singl faulti node even benchmark task success reassign good node fault chanc alreadi miss deadlin high part due overhead associ move larg process checkpoint network restart larg process process miss deadlin unabl take part compil phase start begin build hypothes anew took time caus temporari loss track reliabl frame although better nonfaulttoler system process would simpli lost still reliabl desir decid address two point order improv perform benchmark presenc fault 1 overhead involv move larg checkpoint 2 sourc hypothes process start restart measur reliabl number real target success track applic within sucient degre accuraci fraction exact number real target track simplifi calcul number target kept constant target enter leav system simul 22 abf beam form benchmark adapt beam form abf benchmark 8 simul realtim process submarin sonar system interpret period data receiv linear array sensor particular goal distinguish signal nois precis identifi direct signal arriv across speci rang frequenc implement applic receiv period sampl data linear sensor array data gener contain four refer beam signal arriv distinct locat 180degre eld view along random nois applic consist sever applic process attempt locat beam distinct subset speci frequenc rang frame data frequenc scatter period sourc process output form one beam pattern per frequenc gather sink process figur 2 depict typic beam pattern output shown frame 18 frequenc 250hz refer beam 20 60 20 60 degre applic process perform calcul accord follow loop pseudocod frame input foreach frequenc updat dynam weight foreach direct arriv search signal block interfer direct frequenc magnitud direct arriv angl degre figur 2 typic beam pattern output frequenc process rst updat set weight dynam modi frame frame appli weight input sampl eect form beam emphas sound arriv direct process search possibl direct 90 90 degre incom signal granular direct directli relat number sensor addit start run initi period weight set initi valu 15 20 frame necessari learn precis beam evid sort applic face reliabl problem similar rtht benchmark process element fail output frequenc lost time lost task nalli replac system go startup period data set process larg creat consider overhead checkpoint employ avoid delay associ overhead abl maintain full output fault provid quick restart fault applicationlevel fault toler must employ evalu qualiti abf output two test appli result beam pattern placement test check whether direct arriv beam detect within certain toler width test aim determin accur beam detect measur width beam degre 3db peak beam pass test consid correctli detect 3 implement applicationlevel fault toler techniqu use redund form extra work done process applic process take addit distinct workload portion neighbor workload shown figur 3 process track beam target work overlap part neighbor make use redund inform case neighbor becom faulti explain brie data set divid applic might learn fault would recov p3process 1 process 2 process 3 process 424 2 1 frame data arriv node time figur 3 architectur benchmark applicationlevel fault toler 31 divis load extent duplic two neighbor node greatli aect level reliabl achiev duplic aris way divid data set among parallel process node first frame data divid evenli possibl among node section process take set data primari task section p assign node n addit work part neighbor n 1 primari task section process take set data secondari task section word primari task section p refer calcul node n carri part origin applic secondari task section refer calcul node n carri backup neighbor host secondari correspond primari run highest number node secondari section kept synchron primari p 1 32 detect fault two way fault detect inform reach variou applic process rst system inform applic faulti node second specic timeout phase applic commun expect former would typic incur cost period poll latter could result late detect fault although exact integr applicationlevel fault toler would vari depend fault detect techniqu chosen eectiv techniqu 33 fault recoveri deadlin prior frame node n discov faulti unabl output result node n i1 serv backup send output i1 data place data n unabl suppli meantim system work replac restart process interrupt fault fact system job made easier fact process restart anoth node process data segment longer need move process reschedul make use inform maintain secondari behalf order pick left fault way applic fault toler abl work conjunct system fault toler help even case transient fault applicationlevel fault toler allow leeway postpon restart process anoth node hope fault soon disappear 34 extens higher level redund techniqu guarante requir reliabl presenc one fault could also withstand two simultan failur depend node hit fault exampl sixnod system node run process 1 3 5 fail techniqu would still abl achiev requir reliabl cours conting assumpt process faulti node transfer safe node restart begin next frame 35 benchmark integr specic next discuss specic detail regard applic techniqu benchmark 351 rtht benchmark rtht benchmark unit redund hypothesi secondari task section creat extend fraction total number hypothes creat extend process secondari amount secondari redund express percentag number hypothes extend primari redund implement follow way begin frame sourc process broadcast input radar data hypothes creat extend except addit secondari extend percentag extend correspond primari secondari section kept synchron primari p 1 via compil process case processlevel broadcast commun extra commun necessari node n discov faulti unabl particip compil frame node n i1 serv backup make use i1 data compil process place data n unabl suppli process reschedul make use hypothes extend secondari behalf pick left inform obtain secondari process way compil newli reschedul process mere listen compil process copi hypothes extend secondari 352 abf benchmark two way integr applicationlevel fault toler abf benchmark dier manner secondari abbrevi calcul primari obtain full set result method limit field view limit fov method secondari look beam everi frequenc primari howev search subsect primari eld view divid one segment ideal secondari place window direct beam known arriv impos minimum width window due fact individu window narrow output could alway perhap erron pass widthbas qualiti test describ section 2 amount redund express percentag eld view search secondari reduc direct granular method secondari look beam everi frequenc everi direct reduc granular direct amount redund express percentag origin granular comput primari techniqu serv reduc comput time secondari task set maintain use system output addit two techniqu may employ concurr order reduc comput time requir secondari task implement either variat techniqu input frame data scatter second time sourc applic process time rotat process receiv input data process secondari process rst carri primari comput task carri secondari task frame deadlin process detect sink gather output nonfaulti process includ backup result process secondari one faulti event applic process restart fault receiv current set weight secondari order jumpstart calcul synchron primari secondari requir limit fov method small period commun either sink process primari tell secondari frequenc direct detect beam synchron necessari reduc granular method 4 result 41 rtht benchmark appli rtht benchmark found small amount redund primari secondari section necessari order provid consider amount fault toler furthermor increas system resourc requir even includ overhead techniqu implement minim compar techniqu achiev amount reliabl point demonstr figur 4 5 6 run contain 30 target remain system end simul 30th frame well number fals alarm case systemlevel fault toler exist correspond case secondari extend 0 primari hypothes figur 4 see number target success track two applic process fault occur frame 15 case roughli alarm per frame data run 15 redund allow us track real target despit fault attribut fact small amount redund great eect track stabil number target track frame number secondari extend 15 primari hyp secondari extend 10 primari hyp secondari extend 5 primari hyp secondari extend 0 primari hyp figur 4 track accuraci number real target track given percentag redund fact hypothes extend secondari one like real target begin compil phase applic process sort hypothes place like head list compil thu begin next frame applic process secondari begin extend hypothes highest chanc real target rene point figur 5 show averag percentag redund requir given number applic processor singl fault amount requir show gradual decreas add processor attribut fact chanc singl process contain high percentag real target decreas processor ad addit proportion small load impos processor comput secondari task set seen figur 6 attribut fact hypothesi whose posit veloc known precis take much time extend compar hypothes less well known sinc like hypothes gener wellknown hypothes secondari extend amount processor time taken execut secondari task proport much smaller percentag secondari overlap requir number applic processor figur 5 averag minimum percentag secondari overlap requir miss target despit one node faulti 42 abf benchmark result integr applicationlevel fault toler abf benchmark nd small amount redund necessari ensur complet mask singl frame fault either variat reduc granular limit fov method see secondari redund 33 adequ provid complet accur result faulti frame follow frame faulti process restart combin two techniqu see even reduct comput eort impos secondari order mask fault taken addit network overhead andor latenc account gure overhead refer sole comput overhead network overhead depend greatli medium use particular share medium would allow secondari snoop primari input output elimin need addit commun result obtain run simul 75 sensor four refer input beam 50 frame two applic processor fault occur one frame 30 result present discuss three redund method limit fov method reduc granular method combin method combin rst two qualiti result assess total number beam track success four input beam frequenc 32 frequenc make 128 secondari execut time primari percentag secondari overlap figur 6 ratio time taken comput secondari hypothesi time comput primari hypothesi versu percentag secondari overlap beam exampl figur 7 present result sever run abf benchmark util limit fov redund method alon singl processor fault occur frame 30 last one frame see 30 overlap adequ preserv beam inform within system despit loss one processor frame 30 tabul result three method tabl 1 421 abf result limit fov alon see tabl 1 roughli 30 secondari overlap adequ provid full mask fault comput overhead impos secondari 30 addit figur 8 show rather linear increas overhead increas fraction overlap tabl 1 amount secondari overhead impos variou redund method capabl fulli mask singl fault redund techniqu secondari overlap comput overhead reduc granular 33 35 limit fov 30 30 combin 30fov50granular 15 17 total number beam detect time 30 secondari 20 secondari 10 secondari 0 secondari figur 7 number beam correctli track frame given level redund limit field view method singl process experi fault durat one frame frame 30 associ techniqu howev potenti depend number beam detect system describ earlier order ensur width test appli output fail impos minimum windowwidth minimum width dictat given amount overlap maximum number window secondari may search beam beam maximum number window may miss secondari search depend direct arriv howev system design lessen likelihood occur care choos amount overlap allot tune criteria area search secondari 422 abf result reduc granular alon see accord tabl 1 oper secondari 33 granular primari result complet mask fault impos 35 overhead process node figur 8 show linear relationship comput overhead overlap indic overhead method bit higher limit fov method consid reduc granular method see depend number beam detect although beam could miss peak within degre granular coars secondari exect time primari percentag secondari field view overlap reduc granular method limit fov method limit fov 50 granular limit fov 33 granular figur 8 ratio secondari primari execut time variat applicationlevel toler integr abf benchmark versu percentag secondari eld view overlap 423 abf result combin method combin two techniqu see greatest reduct comput overhead secondari task shown tabl 1 30 eld view combin 50 granular maintain track abil similar either one alon yet cut comput overhead nearli half reduct illustr figur 8 lower two curv repres overhead impos vari eld view make use 50 33 granular respect 5 conclus high degre fault toler may obtain minim invest system resourc applic exhibit data parallel abf rtht benchmark achiev combin applicationlevel systemlevel fault toler priorit order within data set rtht benchmark reduc granular abf benchmark made use decreas comput overhead techniqu process benchmark larg move checkpoint restart task may take signic amount time applicationlevel fault toler abl ensur despit temporari loss task requir reliabl maintain sinc primari secondari task set incorpor within singl applic process primari alway execut rst secondari next primari complet may alert schedul indic secondari need execut use necessari secondari still execut allow better synchron primari counterpart fault detect prioriti secondari could rais ensur complet without miss deadlin provid necessari data compil techniqu substanti improv complet system duplic requir 100 system redund mere add small amount load exist system achiev amount fault toler dier recoveri block approach secondari coldstart readi execut failur primari detect addit level reliabl may vari vari amount redund order integr applicationlevel fault toler design need rst determin priorit data set andor reduc granular order dene secondari dataset second design choos mechan secondari get input data need abl output result necessari abl commun primari synchron purpos natur sort fault detect use well design must care weigh overhead impos variou method achiev fault toler qualiti result may obtain conclus believ step integr techniqu applic taken right earli stage design order approach eectiv acknowledg eort support part defens advanc research project agenc air forc research laboratori air forc materiel command usaf agreement number f306029610341 order e349 govern author reproduc distribut reprint government purpos notwithstand copyright annot thereon view conclus contain herein author interpret necessarili repres ocial polici endors either express impli defens advanc research project agenc air forc research laboratori u govern r system structur softwar fault toler imprecis comput use passiv replic delta4 provid depend distribut comput faulttoler schedul problem implement result hypothesi test c 3 parallel benchmark suit honeywel technolog center rapid simul testb distribut realtim system tr faulttoler schedul problem reliabl comput system 2nd ed implement result hypothesi test c3i parallel benchmark suit ctr osman unsal israel koren c mani krishna toward energyawar softwarebas fault toler realtim system proceed 2002 intern symposium low power electron design august 1214 2002 monterey california usa