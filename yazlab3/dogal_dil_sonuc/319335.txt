transpar distribut process render render particular comput global illumin use comput demand algorithm consequ mani research look speed comput distribut number comput unit howev almost case complet redesign relev algorithm order achiev high effici particular distribut parallel environ time global illumin algorithm gotten sophist complex often sever basic algorithm combin multipass arrang achiev desir light effect result becom increasingli difficult analyz adapt algorithm optim parallel execut lower level furthermor bottomup approach destroy basic design algorithm pollut distribut logic thu easili make unmaintain paper present topdown approach design distribut applic base exist objectori decomposit distribut logic case base corba middlewar standard introduc transpar exist applic logic design approach demonstr use sever exampl multipass global illumin comput raytrac result show good speedup usual obtain even minim intervent exist applic b introduct usual distribut algorithm differ consider nondistribut version order achiev optim perform care weichselgarten 9 91058 erlangen germani email kipferinformatikunierlangend gate build 3643b stanford ca 94306 usa ful attent paid issu loadbalanc commun pattern data task manag issu easili domin core applic logic distribut algorithm particular true system allow flexibl combin differ distribut algorithm runtim loss applic logic sea complex distribut issu sever grow problem reason increas applic complex increas mainten cost simpli educ purpos particular mainten portabl differ hardwar architectur alway major issu distribut applic also develop debug pur pose often desir run code nondistribut serial fashion often imposs code design distribut applic distribut logic deepli embed code final probabl import reason keep distribut issu transpar applic programm need add distribut comput exist applic need add new featur littl impact exist applic possibl creat transpar distribut infrastructur avoid mani option optim thu like offer inferior perform distribut code deepli integr applic thu work partli reli fact increas avail cheap highperform comput allow us trade nonoptim effici simpler cleaner maintain applic code cours within limit objectori design applic main start point achiev transpar distribut basic idea objectorient encapsul data algorithm unit commun via messag carri nice distribut system object live separ address space need chang way object commun need awar fact peer object may actual locat differ comput unit objectori middlewar like corba omg98a alreadi provid much requir distribut infrastructur locat commun network transpar howev programm perspect corba still highli visibl due corbaspecif type interfac definit requir distribut object proxi deriv corbaspecif class furthermor interfac work well coloc object result high commun cost object get separ across network rais need transpar adapt interfac object may distribut remaind paper present sever design pattern hide distribut infrastructur distribut objectori system pattern emerg work speedingup exist larg system render global illumin ss95 distribut across network comput educ purpos requir distribut infrastructur highli invis normal programm practic reason could afford redesign whole system around intrus distribut framework thu concentr encapsul distribut nondistribut modul provid interfac adaptor take care distribut issu result system highli configur distribut infrastructur mostli invis programm user still achiev good parallel perfor manc although concentr distribut process across network comput paper design pattern also use parallel execut modul within address space comput multipl cpu see section 4 11 previou work larg number paper parallel distribut render light simul algorithm good survey avail rcj98 cr98 cro98 paper concentr lowlevel distribut achiev high perform eg use tool pvm gbd 94 mpi gls94 one except paper heirich arvo ha97 describ objectori approach base actor model although system provid locat commun transpar distribut infrastructur still highli visibl programm sever objectori framework support parallel distribut program suggest eg poet jez93 poet c toolkit separ algorithm detail distribut comput user code written callback oper data data distribut transpar user code call particular node data avail although poet well framework abstract underli messag pass detail requir adapt algorithm given structur framework thu transpar programm approach view local resourc part possibl worldwid distribut system comput grid worldwid virtual comput instanc globu fk97 legion glfk98 certainli vital contribut distribut comput demand code signific mean transpar programm main goal effort distribut follow present integr approach parallel distribut applic modul base fact objectori system usual compos sever quit independ subsystem contrast address parallel level individu object larger subsystem object usual offer better suit granular distribut comput across comput subsystem often access interfac singl object use facad design pattern ghjv95 applic base common design approach facad class easili map corba interfac omg97 provid basi distribut applica tion howev initi step solv problem corbaspecif code would introduc heart applic want detail distribut visibl develop ideal develop abl concentr problem instead unnecessarili forc consid distributionspecif issu like network latenc corbatyp requestbundl optim transport marshal object se rializ map class creation request factori method handl commun thread asynchron oper templat access implement tradit serial proxi object packer back front figur 1 wrap exist implement promot code reus enabl tradit class commun distribut system servic provid wrapper servic emul tradit interfac contain class help templat requir almost manual code chosen build new distribut interfac complet hide corba distribut infrastructur appli cation new interfac provid illus tradit nondistribut class outsid intern implement optim distribut object invoc base asynchron commun multithread requestcallback scheme enabl maximum parallel addit framework perform load balanc bundl request avoid network latenc key concept allow us optim make use corba current synchron method invoc paradigm new corba messag specif omg98b add asynchron method invoc becom avail encapsul exist interfac framework provid base class provid manag servic object creation commun transport control synchron mani servic see wrapper subsystem contain render illumin algorithm use inherit base class exampl main manag class control overal execut render task must abl defin certain synchron point ensur distribut object view whole system occur exampl wait distribut render object finish setup scene pars routin invok render com mand addit manag class provid host machin inform script engin configur distribut object resourc lock access facad manag subsystem hide use corba complet next three subsect address basic pattern use implement approach 21 wrap distribut order actual reus exist object implement within distribut environ distribut framework provid wrapper entir subsystem wrapper actual consist two halfwrapp encapsul subsystem corba client call server call assum subsystem repres least one abstract c facad class defin interfac subsystem also assum subsystem commun outsid interfac defin similar facad class replic interfac corba idl use struc lightingcomputerbas self deleg getillumin serial deleg illumrep extern polymorph adapt new connect illumrepconvert new figur 2 specif method call forward implement pseudopolymorph way gener function like serial request packet inherit templat base class turn implement abstract interfac declar see also figur 6 ture pack relev object data need transfer object valu extens corba avail recent often also defin new method allow bundl multipl request call side implement server side forward request wrap facad object pseudopolymorph way cs98 serial bundl messag arriv manag asynchron call see figur 1 client role wrap subsystem need instanti c class deriv distribut c proxi templat translat call old c interfac call use corba object refer layer also respons bundl individu call use new asynchron interfac method bundl request within corba interfac although wrap seem complic requir small amount manual code work deleg gener templat abstract base class see figur 2 view outsid encapsul subsystem look like distribut corba object use equival corba idl interfac contain object wrapper look exactli like part tradit system use old c interfac biggest benefit use kind wrapper possibl reus exist code take advantag parallel within subsystem enabl distribut parallel differ subsystem great valu particular multipl memoryintens algorithm separ across multipl machin interfac provid wrapper final allow wrap tradit object transpar cooper distribut object introduc section 23 22 replic requestmultiplex order old code use distribut subsystem need addit wrapper interfac deriv old c facad interfac translat messag correspond call distribut corba object eg section 21 mention translat sever aspect one translat tradit corba type object data need copi idl structur second small individu request may accumul sent across network bundl thu avoid network traffic overhead addit take opportun wrapper perform multiplex repacket request across pool function ident corba server enabl us distribut multiplex 2 host n host 0 processor n multiplex 1 processor 0 direct light request thread raytrac manag raytrac asynchron commun thread request manag figur 3 multiplex distribut request equal function equival object either distribut across network dataparallel raytrac run differ thread coloc light ob ject note multiplex contain comput class rather suppli request manag transport respons embed request manag use questcallback model thread pool achiev asynchron commun comput load evenli use load balanc perform wrapper howev current synchron natur corba method call multiplex need use request callback scheme sv96 provid base class load balanc perform send request server lowest load end server maintain fifo request balanc network latenc filllevel fifo commun back wrapper piggypack data return callback use scheme multiplex class look outsid like singl power instanc subsystem benefit approach use wrapper multiplex exist code fairli easili wrap replic therebi sped multiplex fan request wrapper section 21 automat combin concentr asynchron request multipl client note pattern perfectli meet goal distribut transpar alter applic logic remain system follow pseudocod show multiplex light comput inherit interfac light base class overload comput request method implement schedul strategi see also figur 6 idl interfac lightop void computeilluminationsin sequenc req interfac multiplex lightop void addlightopin lightop op c class multiplex public idlmultiplexerinterfac virtual void addlightoplightop op lightoplistpushbackop virtual void computeilluminationsrequest req int idx determinebestserv lightoplistidxcomputeilluminationsreq protect vector lightoplist 23 transpar servic subsystem comput bottleneck promis offer substanti speedup complet reimplement request thread manag photon map particl tracer distribut light class kdtree figur 4 distribut parallel servic provid support implement advanc comput algorithm take advantag distribut framework provid distribut parallel servic within wrapper class go beyond plain data transport interfac adapt threadpool handl mutex factori onetomani manytoon oper thread synchron runtim system state type inform pattern power form creat new comput object distribut system howev requir knowledg design behavior distribut ser vice wrapper class provid corba interfac tradit subsystem framework distribut parallel implement subsystem easili access directli good exampl class perform distribut light comput use photonmap algorithm jen96 see figur 4 show implement reus exist code trace photon light sourc reconstruct illumin inform reus object implement wrap pattern describ algorithm awar distribut parallel natur steer adapt comput requir eg ad new particl tracer thread multiprocessor machin ad new instanc distribut object scheme allow programm gradual make select subsystem awar distribut infrastructur without compromis remain system way possibl reus exist class simplifi creation new distribut subsystem straightforward buildingblock manner howev drawback approach dedic distribut comput make new subsystem difficult use run applic serial singlethread fashion 24 discuss pattern introduc offer sever benefit ffl new develop within tradit framework immedi distribut wrapper pattern offer speedup replic multiplex ffl need develop algorithm bother distribut parallel issu distribut framework alter interfer applic logic ffl distribut parallel servic offer framework provid develop advanc comput class basic function guarante conform overal design multi light gradient combin irradi direct multiplex map photon combin figur 5 logic data flow within exampl distribut light network perform direct indirect caustic illumin differ lightop replic use multiplex speedup ffl learn effort beginn reduc dramat transpar distribut infrastructur particular compar distribut framework larg number new softwar concept introduc ffl distribut framework transpar support modular help structur framework toolkit well defin interfac help reduc overal program effort promot better understand big pictur pattern typic case applica tion like modular objectori program view variou level granular pattern support buildingblock design strategi distribut infrastructur use consist interfac pattern combin appli tradit class implement configur script especi research develop purpos offer tremend flexibl note multiplex use easili handl new parallel implement comput class turn construct use wrapper distribut class multiplex 3 implement vision render architectur ss95 objectori system physicallybas realist imag synthesi light network within vision framework provid objectori way deal function decomposit light calcul implement light subsystem vision decompos global illumin comput set light oper perform partial light simul conceptu lightop take represent light distribut environ input gener new represent output connect lightop right way light simul configur flexibl simul lightpath multipass fashion crmt91 light network act data flow network much spirit av ufk 89 similar system figur 5 show exampl simpl distribut light network use two basic lightop perform direct light add individu contribut perform indirect light computa tion result sum direct indirect illumin also see figur 8 direct illumin light sourc obtain raytrac photonmap algorithm jen96 comput caustic light path indirect illumin comput irradi gradient algorithm wh92 whole light network manag special object call multilight implement light subsystem interfac toward vi implement corba idl interfac skeleton multilight skeleton skeleton lightingcomput lightingcomputerbas lightopbas skeleton multilight figur multipl layer abstract interfac declar complement c definit give consist interfac compon light subsystem sion subsystem behav accord facad design pattern ghjv95 render subsystem vision framework encapsul variou screen sampl techniqu comput intersect visibl object scene queri light subsystem incid illumin point illustr clear separ independ comput within vision render framework appli present distribut framework render light network subsystem vision allow individu render lightop object distribut across network run parallel use thread figur 6 show inherit relat interfac lightop multilight facad asynchron commun pattern servic implement within base class note wrap tradit code c class lower left pseudopolymorph wrapper templat 1 requir manual code figur 7 show run distribut vision system note host 1 2 contain multipl concurr lightop within light network therefor multipl processor enabl function parallel basic oper system function access via portabl oper system adapt layer interfac ace librari sch94 commun remot object creation done use corba implement visibrok inpris facilit develop mainten design base class follow guidelin sever design pattern ghjv95 cs98 ls96 shp97 mck95 1 extern polymoph pattern cs98 allow treat nonpolymorph class proper inherit relationship provid class method simpli deleg call suffici global templat signatur adapt that call extern turn call method perform task section demonstr flexibl present distribut parallel framework appli vision render system sever distribut lightop implement use design pattern section 2 discuss typic configur order reus tradit implement effici sever multiplex class avail along differ schedul strategi allow build distribut light network function distribut light calcul configur distribut object usual specifi tcl configur file use exist script engin tradit vision system avoid introduct second tier abstract configur distribut system compar phi99 41 effici asynchron commun first exampl show benefit asynchron commun pattern use throughout corba implement base class heart distribut infrastructur tabl 1 compar packet data transfer within small light network use asynchron request equival network use origin interfac fine granular case use wrap tradit lightop host configur sgi onyx onyx o2 processor r10k mhz 196 195 195 render theta light irr grad direct combin main reason speedup 33 low number method call transfer request 100 mbit network case asynchron commun compar synchron invoc second case network transfer ident 227 mb request data corba marshal synchron protocol corba block client server complet method call respons poor perform second case show clearli import fact latenc almost entir hidden use asynchron protocol provid distribut base class 42 distribut render optim render time case calcul preview test new comput class implement pick exampl section 22 see figur 3 follow configur distribut vision system show best achiev speedup found use framework use 4 host total 8 processor 8 raytrac work dataparallel mode 6 light modul group control multi plexer distribut framework ensur commun two multiplex done asynchron sgi onyx onyx o2 o2 processor r10k mhz 196 195 195 195 render light light host execut tradit implement irradi gradient wh92 lightop wrap distribu tion addit wrapper multiprocess machin also includ multiplex execut incom request parallel use thread pool multipl thread per light hostmanag light vision op light op light op light op host 5 host 4 host 3 host 2 host 1 host 0 master render slave vision slave render slave hostmanag hostmanag vision vision hostmanag render light op vision hostmanag hostmanag netmanag master render figur 7 exampl run distribut vision system master render control dataparallel activ slave render host 3 4 5 multilight host 0 facad light subsystem light network resid host 1 2 also distribut shown later exampl entri point masterlightop control lightop note function parallel also commun asynchron pipelin fashion indic solid arrow enabl parallel execut host multipl processor singl netmanag hostmanag host respons bootstrap system onto network provid initi object factori method dash arrow cpu multiplex synchron order overload machin configur system requir name host lightop paramet configur file tcl script system setup take care distribut object use net hostmanag figur 7 distribut system compar tradit vision system singl thread control run fastest machin singl address space calcul light lightop implement tabl 2 show speedup obtain near theoret maximum 125 overhead 90 second consist second session setup 5 second addit pars corba startup client anoth 5 second delay allow host clean corba object main corba startup client shut vision instanc subtract overhead obtain penalti 13 render phase distribut system believ good result given gener unintrus distribut infrastructur 43 distribut complex light comput function decomposit light network offer biggest potenti distribut parallel risk high commun cost shown section 41 asynchron requestcallback commun paradigm abl provid partial solut problem follow exampl make heavi use pattern section 23 21 configur use 3 host total 7 processor light onyx 196 4 photon map direct combin onyx 195 2 theta photon map irrad grad octan setup reconstruct method photon map lightop take much time process request lightop light network consequ multiplex use distribut lightop onto 3 host contrast three lightop execut multiprocessor machin reconstruct method fast commun optim corba implement support object colloc order drive complex light subsystem two host execut render object control multiplex dataparallel way one see tabl 3 speedup obtain setup good first exampl even advantag nondistribut version run singl address space outweigh commun overhead distribut system profil show perform differ theoret maximum 143 mainli due process idl time occur exampl calcul one upstream lightop suffici delay sinc underli light network entir pulldriven pipelin block tri cope problem extent allow asynchron interfac drive three parallel stream time addit resourc handl within base class allow run render comput concurr light comput result kind interleav cpuusag scheme light pipelin host stall exampl show case full transpar distribut infrastructur hide inher limit due coars grain commun pattern exist subsystem note howev behavior mostli problem nondistribut awar algorithm light network much gener drawback distribut frame work howev even limit success still get speedup without chang applic logic apart form one also take account tradit system perform quit well case term execut speed sever limit host memori resourc especi photonmap lightop need store mani photon shot scene work larg scene descript distribut photonmap lightop exampl memori three host disposit initi shoot particl done parallel reduc light setup time need one seventh 7 processor three host great valu simul high qualiti caustic wallclock asynchron wrappedonli second lightop lightop async host 2 host host async async multilight session render combin distribut direct distribut distribut irradi gradasync sync sync host 2 host 1 host multilight render combin direct gradient irradiancepars scene 580 567 light setup 156 168 render setup 030 034 render frame 192206 291695 total 197736 297492 tabl 1 packet asynchron data transfer within light network compar lightop use corba synchron request invoc wallclock distribut tradit second system vision host host raytrac host host host raytrac host raytrac raytrac light gradient irradi light gradient irradiancegradi irradi light host raytrac pars scene 561 light setup 014 render setup 036 render frame 31703 235920 total 38741 238015 tabl 2 distribut system use two multiplex control dataparallel render light object left side compar tradit singlethread system although certainli price pay flexibl distribut strategi obtain high degre freedom configur distribut system adapt challeng specif light network present gener approach provid transpar infrastructur distribut objectori system use infrastructur distribut parallel render light comput creat sever design pattern hide corba distribut infrastructur averag system programm system provid distribut servic advanc applic programm still offer access basic distribut class sophist tune necessari use corba middlewar allow us abstract much underli commun infrastructur contrari popular believ runtim overhead use corba minim howev synchron natur corba messag major problem work around use nontrivi requestcallback scheme base multithread addit asynchron messag corba help tremend implement distribut function within base class make distribut issu total transpar applic programm demonstr approach exampl vision render framework provid transpar dataparallel distribut exist object struc ture develop new comput class free use distribut infrastructur add distribut awar modul wrap exist algorithm distribut across network comput distribut infrastructur proven practic sta ble offer welldefin interfac without impos limit remain part vision system distribut light network simpli construct configur script specifi locat parameter specif modul network figur 8 give impress flexibl structur allow configur whole distribut system differ purpos rang speed preview render experi complex light network consist mani differ distribut light simul algorithm futur work distribut infrastructur concentr recov effici lost process particular would use system would take care distribut modul across network automet perform better loadbalanc howev due dynam natur applic requir knowledg comput characterist differ modul make avail wrap level runtim would allow us static alloc mayb dynam move modul across network 6 acknowledg would like thank thoma peuker develop initi idea distribut framework also marc stamming provid consider support integr new scheme exist vision system would like thank anonym review help improv initi version document r parallel distribut photorealist render progress multipass method global illumin parallel graphic visual technolog extern polymorph object structur pattern transpar extend c concret data type metacomput infrastructur toolkit pvm parallel virtual machin john vli side architectur support extens autonomi widearea distribut object system use mpi portabl parallel program messagepass interfac parallel render actor model global illumin use photon map epe eiffel environ program distribut memori parallel comput activ ob ject object behavior pattern concurr program ming poet parallel objectori environ toolkit enabl highperform scientif comput parallel hierarch radios complex build interior select lock primit parallel program object manag group object manag group messag omg tc document orbos980505 edit universit de scienc et technolog de lill overview parallel photorealist graphic adapt commun envi ronment objectori network program toolkit develop commun softwar vision architectur global illumin calcul light network new approach design light algorithm distribut callback decoupl commun corba applic visual system comput environ scientif visual irradi gradient tr progress multipass method global illumin use mpi pvm parallel virtual machin activ object global illumin use photon map vision architectur global illumin calcul applic visual system composit light simul light network architectur support extens autonomi widearea distribut object system ctr nathan carr jess hall john c hart ray engin proceed acm siggrapheurograph confer graphic hardwar septemb 0102 2002 saarbrucken germani