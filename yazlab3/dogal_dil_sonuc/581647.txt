increas power effici multicor network processor data filter propos evalu data filter method reduc power consumpt highend processor multipl execut core although propos method appli wide varieti multiprocessor system includ mpp smp type singlechip multiprocessor concentr network processor propos method use execut unit call data filter engin process data low tempor local place system bu execut core use local decid load instruct low tempor local portion surround code offload data filter engineour techniqu reduc power consumpt low tempor data process data filter engin place onto high capacit system bu b conflict miss caus low tempor data reduc result fewer access l2 cach specif show techniqu reduc bu access repres applic much 468 265 averag reduc overal power much 156 86 averag singlecor processor also improv perform much 767 297 averag processor execut core b introduct power tradit limit resourc one import design criteria mobil processor embed system due part increas logic densiti power dissip high perform processor also becom major design factor increas number transistor caus processor dissip heat return reduc processor perform reliabl network processor npu processor optim network applic recent process element network either generalpurpos processor asic design sinc generalpurpos processor softwar programm flexibl implement differ network task asic hand typic better perform howev chang protocol applic hard reflect chang design increas number new protocol increas link speed need process element satisfi process flexibl requir modern network npu fill gap combin network specif process element softwar programm paper present architectur techniqu reduc power consumpt multicor processor specif present simul result show miss network applic caus instruct b devis power reduct techniqu combin local detect mechan execut engin c discuss finegrain techniqu offload code segment engin conduct simul experi evalu effect techniqu although techniqu effici employ varieti multiprocessor system concentr npu npu follow singlechip multiprocessor design methodolog 18 eg intel ixp 1200 11 7 execut core ibm powernp 12 17 execut core addit chip consum signific power ibm powernp 12 consum 20w typic oper wherea cport c5 7 consum 15w multipl execut core often connect global system bu shown figur 1 capacit load processor inputoutput driver usual much larger order magnitud intern node processor 23 consequ signific portion power consum bu figur 1 gener network processor design locat propos dfe system bu permiss make digit hard copi part work person classroom use grant without fee provid copi made distribut profit commerci advantag copi bear notic full citat first page copi otherwis republish post server redistribut list requir prior specif permiss andor fee case 2002 octob 811 2002 grenobl franc techniqu use two structur achiev desir reduct power consumpt first share global memori connect system bu execut unit name data filter engin dfe activ dfe pass data bu henc effect execut processor dfe activ execut core process data place result bu goal process lowtempor data within dfe number bu access reduc reduc bu access cach miss caus low tempor access techniqu achiev signific power reduct processor second low tempor access determin execut core use local predict tabl lpt tabl store inform prior load lpt store program counter pc instruct well misshit behavior recent execut instruct lpt also use determin section code offload dfe detail lpt explain section 21 follow subsect present simul number motiv use data filter power reduct instruct caus dl1 miss 0 10 20 30 40 50 70 80 90 100 crc dh drr md5 nat url ipc rou tl avg fraction inst 5 inst 25 inst 125 inst 625 inst figur 2 number instruct caus dl1 miss 11 motiv mani applic major miss l1 data cach caus instruct 1 perform set simul see cach miss distribut differ instruct network applic simul sever applic netbench suit 20 simul perform use simplescalar simul 17 processor configur explain section 41 result present figur 2 figur give percentag data miss caus differ number instruct exampl crc applic approxim 30 miss caus singl instruct 80 miss caus five instruct highest number miss averag 58 miss caus five instruct 87 miss caus 25 instruct addit perform anoth set experi see type data access caus miss simul reveal 66 miss occur processor read packet data advantag instruct caus major miss offload instruct dfe reduc number cach miss l2 access henc bu access significantli next section present result combin split cach cach bypass mechan discuss disadvantag local enhanc techniqu section 21 explain detail lpt section 3 discuss design dfe show design option vari section 4 present experiment result section 5 give overview relat work section 6 conclud paper summari 2 reduc l1 cach access sever cach localityenhanc mechan propos literatur 9 13 14 25 26 power implic mechan examin bahar et al 4 techniqu tri improv perform reduc l1 cach miss sinc l1 miss reduc intuit techniqu also reduc power consumpt due less l1 l2 cach activ section first examin power implic repres cach local enhanc mechan combin split cach cach bypass mechan propos gonzalez et al 9 studi split cach techniqu propos mechan use advanc version mechan detect code segment offload mechan l1 data cach split two structur one store data tempor local tempor cach store data spatial local spatial cach processor use local predict tabl categor instruct access data tempor local tempor instruct b access data spatial local spatial instruct c access data local bypass instruct detail simul result explain section 4 although techniqu reduc number execut cycl applic impact overal power consumpt applic techniqu increas power consumpt data cach reason increas twofold lpt structur access everi data access two smaller cach one larger lines access parallel instead singl cach nevertheless overal power consumpt reduc techniqu due signific reduct bu switch activ follow first explain lpt present gonzalez et al 9 discuss enhanc requir implement propos techniqu 21 local predict tabl lpt small tabl use data access processor conjunct pc instruct store inform past behavior access last address access size access misshit histori predict made use field lpt consid stride past behavior decis made whether data access instruct place tempor cach spatial cach uncach modifi origin lpt accommod inform requir dfe ad three field lpt start address code offload dfe sadd field end address code offload eadd field variabl regist requir execut offload code lreg field assum 32bit address regist file size 32 three field requir addit 128 1 bit line lpt function field explain follow section discuss design dfe 1 lreg field 2bit regist explain section 31 assum 32 regist execut core henc 64 bit requir lreg field 3 figur 4 present dfe design dfe execut core addit featur control pass memori data bu memori request origin execut core pass gate open request transfer bu usual request origin dfe control close pass gate forward data either dfe data cach dfe instruct cach experi explain section 4 dfe equip 2 kb data instruct cach compar 4 kb data instruct cach execut core two differ generalpurpos execut core dfe first dfe control equip addit logic check whether code execut request regist valu gener dfe commun execut core case dfe commun master creat interrupt execut core offload code segment dfe second dfe codemanag unit cmu keep track origin code execut sum arrayi figur 3 code segment show effect dfe figur 4 dfe design dfe locat onchip l2 cach execut core activateddeactiv execut core activ execut code segment determin core commun necessari result back core consid code segment figur 3 code segment execut one core core read complet array mean system bu access sever time array structur go use access result unnecessari power consumpt processor code segment execut dfe hand bu access initi execut get result sum dfe besid reduc number bu access offload segment also posit impact execut core cach replac due access array prevent note code segment execut dfe limit loop discuss code segment offload dfe section 31 31 determin dfe code execut core detect instruct access low tempor data instruct categor spatial bypass instruct lpt start gather inform code segment contain instruct first run loop contain candid pc detect execut load execut core check branch instruct jump examin pc destin branch start contain loop procedur callreturn instruct pc instruct store eadd field lpt correspond last instruct code offload core found contain loop destin jump store sadd field correspond start code offload contain loop core detect procedur callreturn instruct examin pc store sadd field start end address detect execut core gather inform regist valu requir code offload sourc regist instruct mark requir lpt gener within code destin regist mark gener mark requir mark perform help lreg field lpt 2 code segment complet process store lpt execut reach start address code directli offload dfe achiev use compar store five last offload code segment pc becom equal one entri correspond code automat offload note process look code offload turn segment execut sever time exampl code segment figur 3 method first determin load access array candid loop contain load case whole loop captur observ branch back start loop final whole loop migrat dfe third iter loop limit code offload dfe offload segment contain store instruct avoid cach coher problem addit offload code must contain within singl procedur achiev check procedur callreturn instruct also limit relat perform offload offload segment number requir regist certain registerlimit code segment offload dfe go access l2 cach code segment might benefici offload larg code segment therefor offload code segment larger codesizelimit chang paramet modifi aggress techniqu 32 execut dfe code execut core decid offload code segment send start end address segment dfe along valu requir regist commun achiev extens isa instruct initi commun core dfe therefor addit port requir regist file receiv request dfe first access l2 cach retriev instruct start execut execut segment dfe use regist neither gener segment 2 lreg field 2bit repres state requir gener requir gener invalid use inst cach func unit control reg file pass gate cmu master pass data cach system bu memori commun dfe gener interrupt core offload segment access necessari regist valu except possibl regist valu requir dfe determin previou execut code segment henc differ input data possibl execut segment execut determin dfe code execut end execut tri go eadd sadd dfe commun necessari regist valu core ie valu gener dfe tabl 1 netbench applic properti argument execut argument inst number instruct execut cycl number cycl requir il1 dl1 acc number access level 1 instruct data cach l2 acc level 2 cach access applic argument inst cycl il1 acc crc crc 10000 1458 2620 2190 598 06 dh dh 5 64 7783 16631 10091 3647 384 drr drr 128 10000 129 335 228 79 11 drrl drr 1024 10000 347 802 601 233 50 ipchain ipchain 10 10000 617 1602 1039 262 36 nat nat 128 10000 114 267 173 56 12 natl nat 1024 10000 332 742 550 211 51 rou rout 128 10000 142 320 233 71 09 roul rout 1024 10000 368 817 626 228 50 snortl snort r defcon n 10000 dev l log b 3430 9256 5150 1322 334 snortn snort r defcon n 10000 v l log c sncnf 5459 16541 8937 2197 562 sslw opensl netbench weak 10000 3290 8321 4411 1520 318 tl tl 128 10000 69 157 118 39 07 tll tl 1024 10000 303 671 522 199 47 url url smallinput 10000 4970 9567 7689 2491 100 averag 1931 4587 2845 868 130 tabl 2 dfe code inform number differ dfe code segment dfe code averag number instruct segment size averag number regist valu transfer segment reg req total number regist valu transfer tofrom dfe tran fraction instruct execut dfe ratio app dfe code size reg req tran ratio dh drr 96 289 22 322 588 drrl 96 289 22 1825 571 ipchain 113 778 18 123 186 natl 67 201 23 1801 577 nat 67 201 23 289 620 roul rou snortl 146 194 34 531 435 snortn 161 165 31 3833 962 sslw 95 327 16 905 166 tll 24 431 22 1799 589 tl 24 431 22 280 703 url averag execut core also send taskid code activ taskid consist coreid uniqu identif number execut core segmentid id process offload code segment taskid uniqu determin process offload segment task complet dfe use taskid store cmu send result back execut core core process similar access data l2 cach might context switch execut core send request result propag correct process eventu execut segment dfe data cach flush prevent possibl coher problem 4 experi perform sever experi measur effect techniqu simul simplescalararm 17 simul use necessari modif simul implement measur effect lpt dfe due limit simul environ execut core becom idl offload code segment actual implement core might start execut process increas system util simul applic netbench suit 20 import characterist applic explain tabl 1 report reduct execut cycl bu access power consumpt cach overal power consumpt dfe abl reduc power consumpt due smaller number bu access reduct cach access discuss follow 41 simul paramet first report result singlecor processor base processor similar strongarm 110 4 kb directmap l1 data instruct cach 32byte lines 128 kb 4 way setassoci unifi l2 cach 128byte lines lpt split cach experi techniqu 2way 64 entri cach 05k split cach techniqu tempor cach 4k 32byte line spatial cach 2k 128byte line techniqu execut core singl cach equal tempor cach 4k 32byte line dfe data cach similar spatial cach 2k 64byte line dfe also level 1 instruct cach size 2kb 32byte line latenc l1 cach set 1 cycl l2 cach latenc set 10 cycl dfe activ use l2 call simul henc delay 10 cycl start dfe execut calcul power consumpt cach use simul number cach power consumpt valu obtain cacti tool 27 modifi simplescalar gather inform switch activ bu bu power consumpt calcul use inform model develop zhang irwin 28 find total power consumpt processor use power consumpt section strongarm present montanaro et al 21 power consumpt cach modifi repres cach simul overal power consumpt sum power execut core share resourc dfe experi regist limit set four maximum offload code size 200 instruct 42 singlecor result first set experi compar perform four system base processor explain section 41 system 1 processor 4 kb 2way set associ level data cach 2way system processor directmap 8 kb level 1 data cach 8kb system processor split cach lpt system processor use propos dfe method dfe tabl 2 give number differ code segment offload size segment number regist requir call total number regist valu transfer tofrom dfe execut offload code fraction instruct execut dfe note code size number instruct first instruct segment last instruct segment correspond number instruct execut figur 5 summar result execut cycl present rel perform system respect base processor propos method increas execut cycl 029 averag none system posit impact perform dh applic data cach miss applic l1 data cach miss rate almost 0 henc effect techniqu see dfe approach increas execut cycl 16 mainli due imperfect decis make code segment offload specif dfe might activ code segment contain load data use ie data tempor local case execut cycl improv data access core dfe gener redund access data process dfe segment use perform might degrad figur 6 present effect techniqu total power consumpt data cach propos techniqu correspond power consumpt level 1 data cach lpt structur execut core level 1 data cach dfe level 2 cach propos techniqu abl reduc power consumpt 098 averag reduct number bit switch bu access present figur 7 see propos mechan reduc switch activ much 468 265 averag reduct bu activ lpt mechan 186 averag similarli 8 kb 2way level 1 cach reduc bu activ 946 121 respect energydelay product 10 present figur 8 dfe techniqu improv energydelay product much 155 83 averag split cach mechan hand 54 lower energydelay product base processor see almost everi categori split cach techniqu perform better system 8 kb cach 2way associ 4 kb cach network applic exhibit mixtur access spatial tempor local henc use split cach achiev signific improv cach perform class applic also amen propos structur spatial access effici util dfe 113crc dh drr drrl ipchain md5 natl nat rou roul snortl snortn ssl tll tl url avg reduct exec cycl 2way 8k lpt dfe figur 5 reduct execut cycl 2way 8k lpt dfe figur 6 reduct power consumpt data cach sum level 1 level 2 dfe data cach applic crc dh drr drrl ipchain md5 natl nat rou roul snortl snortn ssl tll tl url avg reduct 2way 8k lpt dfe figur 7 reduct number bit switch system bu 5515crc dh drr drrl ipchain md5 natl nat rou roul snortl snortn ssl tll tl url avg reduct 2way 8k lpt dfe figur 8 reduct energydelay product 10103050crc dh drr drrl ipchain md5 natl nat rou roul snortl snortn ssl tll tl url avg reduct exec cycl 2way 8k lpt dfe figur 9 reduct execut cycl processor 4 execut core exec cycl 2way 8k lpt dfe figur 10 reduct execut cycl processor execut core 43 multiplecor result two import issu need consid regard use dfe multicor design first sinc dfe share resourc might becom perform bottleneck sever core contend hand dfe reduc bu access significantli anoth share resourc might improv perform due less content bu note system bu one import bottleneck chip multiprocessor although techniqu small effect perform singlecor processor perform improv much dramat multi core system due reduct bu access shown figur 7 see effect multipl execut core first design tracedriven multicor simul mc simul process event trace gener simplescalararm framework simplescalar use gener event singlecor process mc account effect global event bu access mc find new execut time use number core employ system event trace execut core run singl applic henc commun execut core although repres workload multicor system singl applic control execut core realist workload npu experi simul applic execut core applic random startup time awar core system henc simul realist measur activ share resourc report result processor 4 execut core 16 execut core note core execut code wait result perform dfe call improv execut cycl processor 4 execut core present figur 9 propos dfe mechan reduc number execut cycl much 508 201 averag split cach techniqu reduc execut cycl 172 averag figur present result processor execut core dfe abl improv perform much 767 297 averag techniqu increas execut cycl snort url applic url applic execut core util dfe 513 abl reduc bu activ therefor number execut core increas core stall bu content result increas execut cycl snort applic hand dfe usag high 962 henc although bu content reduc content dfe increas execut cycl note overcom content problem use adapt offload mechan dfe occupi execut core continu execut henc code offload dfe idl dfe becom overload overhead approach would check dfe state execut core anoth solut content problem might use multipl dfe howev techniqu scope paper also measur energi consumpt multipl core howev increas number execut core signific effect overal power consumpt addit execut core increas bu dfe level 2 cach activ linearli henc ratio differ system chang significantli 5 relat work stream data ie data access known fix displac success element studi literatur mckee et al 19 propos use special stream buffer unit sbu store stream access special schedul unit reorder access stream data benitez davidson 6 present compil framework detect stream data propos architectur requir compil support task addit displac access network applic fix due unknown natur packet distribut memori sever techniqu propos reduc power consumpt highperform processor 2 5 15 24 techniqu use small energyeffici structur captur portion work set therebi filter access larger structur other concentr restructur cach 2 context multipl processor system moshovo et al 22 propos filter techniqu snoop access smp server plethora techniqu improv cach local 9 13 14 25 26 techniqu reduc l1 data cach miss either intellig place data use extern structur studi howev chang locat comput lowtempor data access techniqu could use detect low tempor data propos method activ smart memori extens studi 3 8 16 howev techniqu concentr offchip activ memori contrast method improv perform onchip cach therefor finegrain offload feasibl system 6 conclus network processor power comput engin usual combin sever execut core consum signific amount power henc prone perform limit due excess power dissip propos techniqu reduc power multicor network processor techniqu reduc power consumpt bu cach power consum entiti highperform processor shown network applic l1 data cach miss caus instruct motiv specif techniqu propos techniqu use local predict tabl detect load access low tempor local novel data filter engin process code segment surround low tempor access present simul number show effect techniqu specif techniqu abl reduc overal power consumpt processor 86 singlecor processor abl reduc energydelay product 83 358 averag singlecor processor processor respect current investig compil techniqu determin code segment offload dfe static techniqu advantag determin exact commun requir code remain execut core segment offload dfe howev determin local dynam advantag therefor believ better optim possibl util static dynam techniqu integr approach r predict loadstor instruct latenc select cach way toward program environ comput intellig memori power perform tradeoff use variou cach strategi architectur compil support energi reduct memori hierarchi high perform processor code gener stream accessexecut mechan case intellig ram iram data cach multipl cach strategi tune differ type local energi dissip gener purpos microprocessor intel network processor target router improv directmap cach perform addit small fullyassoci cach prefetch buffer filter cach energi effici memori structur combin dram logic chip massiv parallel applic simplescalar home page improv bandwidth stream refer benchmark suit network processor jetti snoop filter reduc power smp server reduc address bu transit low power memori map circuit techniqu reduc leakag cach memori reduc conflict directmap cach temporalitybas design manag data cach use select cach line replac enhanc access cycl time model onchip cach tr code gener stream accessexecut mechan data cach multipl cach strategi tune differ type local predict loadstor instruct latenc manag data cach use select cach line replac runtim adapt cach hierarchi manag via refer analysi filter cach architectur compil support energi reduct memori hierarchi high perform microprocessor improv directmap cach perform addit small fullyassoci cach prefetch buffer power perform tradeoff use variou cach strategi select cach way gatedvsubscrptddsubscrpt netbench smarter memori case intellig ram toward program environ comput intellig memori combin dram logic chip massiv parallel system reduc address bu transit low power memori map energydelay analysi onchip interconnect system level ctr mari jane irwin compilerdirect proactiv power manag network proceed 2005 intern confer compil architectur synthesi embed system septemb 2427 2005 san francisco california usa yan luo jia yu jun yang laxmi n bhuyan conserv network processor power consumpt exploit traffic variabl acm transact architectur code optim taco v4 n1 p4e march 2007