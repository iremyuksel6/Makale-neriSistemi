parallel data cube paper present gener methodolog effici parallel exist data cube construct algorithm describ two differ partit strategi one topdown one bottomup cube algorithm partit strategi assign subcub individu processor way load assign processor balanc method reduc inter processor commun overhead partit load advanc instead comput individu groupbi parallel partit strategi creat small number coars task allow share prefix sort order differ groupbi comput method enabl code reus permit use exist sequenti extern memori data cube algorithm subcub comput processor support transfer optim sequenti data cube code parallel settingth bottomup partit strategi balanc number singl attribut extern memori sort made processor topdown strategi partit weight tree weight reflect algorithm specif cost measur like estim groupbi size partit approach implement share disk type parallel machin compos p processor connect via interconnect fabric access share parallel disk arrayw implement parallel topdown data cube construct method c mpi messag pass librari commun leda librari requir graph algorithm test code eight processor cluster use varieti differ data set rang size dimens densiti skew comparison test perform sunfir 6800 test show partit strategi gener close optim load balanc processor actual run time observ show optim speedup p b figur 1 4dimension lattic aggreg distinct combin ab groupbi child parent groupbi child comput parent aggreg attribut parentchild relationship allow algorithm share partit sort partial sort differ groupbuy exampl data sort respect ab cuboid groupbi gener ab without sort gener abc requir sort block entri cube algorithm differ make use common bottomup approach reus previous comput sort order gener detail groupbuy less detail one less detail groupbi contain subset attribut topdown approach use detail groupbi comput less detail one bottomup approach better suit spars rela tion relat r spars n much smaller number possibl valu given ddimension space present differ partit load balanc approach depend whether topdown bottomup sequenti cube algorithm use conclud section brief discuss underli parallel model standard share disk parallel machin model assum p processor connect via interconnect fabric processor typic workstat size local memori concurr access share disk array purpos parallel algorithm design use coars grain multicomput cgm model 5 8 15 18 27 precis use emcgm model 6 7 9 multiprocessor version vitter parallel model 2830 parallel data cube construct method assum ddimension input data set r size n store share disk array output ie groupbi compris data cube written share disk array subsequ applic may impos requir output exampl visual applic may requir store groupbi stripe format entir disk array support fast access individu groupbi 3 parallel bottomup data cube construct bottomup data cube construct method calcul groupbi order emphas reus previous comput sort gener detail groupbuy less detail one bottomup method well suit spars relat support select comput block groupbi eg gener block specifi userden aggreg condit 4 previou bottomup method includ buc 4 partitioncub part 24 main idea underli bottomup method captur follow data previous sort attribut creat ab sort order requir complet resort local resort ablock block consecut element attribut use instead sort ablock often perform local memori henc instead anoth extern memori sort ab order creat one singl scan disk bottomup method 4 24 attempt break problem sequenc singl attribut sort share prex attribut perform local memori singl disk scan outlin 4 24 total comput time method domin number singl attribut sort section describ partit groupbi comput p independ subproblem partit gener subproblem process efcient bottomup sequenti cube method goal partit balanc number singl attribut sort requir subproblem ensur subproblem overlap sort sequenc way sequenti method therebi avoid addit work let a1ad attribut relat r assum a1a2 ad ai number differ possibl valu attribut ai observ 24 set groupsbi data cube partit contain a1 contain a1 partit approach groupsbi contain a1 sort a1 indic say contain a1 prex groupbi contain a1 ie a1 project contain a1 postx recurs scheme remain attribut shall util properti partit comput groupbi independ subproblem load subproblem balanc overlap sort sequenc way sequenti method follow give detail partit method let x z sequenc attribut repres sort order let arbitrari singl attribut introduc follow denit set attribut sequenc repres sort order respect groupbi entir data cube construct correspond set sd a1 ad sort order respect groupbi dimens data cube refer rank si set sd a1 ad union two subset turn figur 2 partit 4dimension data cube attribut b c 8 s1set correspond groupbuy determin four attribut union four subset rank 2 sd2a1 a2 a3 ad sd2a1 a3 ad a2 sd2a2 a3 ad a1 sd2 a3 ad a2 a1 complet exampl 4dimension data cube attribut b c shown gure 2 sake simplifi discuss assum p power 2 consid 2psset rank 2p set order dene eq 2 dene partit assign set summar algorithm 1 algorithm 1 parallel bottomup cube construct processor pi 1 p perform follow step independ parallel 1 determin two set form describ 2 comput groupbi use sequenti externalmemori bottomup cube construct method end algorithm illustr partit use exampl 8 valu gener 16 sset rank 6 give indic attribut a1 a2 a3 figur 3 set assign 8 processor repres projectedout attribut repres exist attribut a4wehav processor assign comput 27 groupbi shown gure 3 everi processor access copi relat r processor perform attribut sort gener data order need groupbi one copi r readconict avoid sort sequenc use binomi heap broadcast pattern 19 result everi processor pi receiv two sort sequenc form time need singl attribut sort figur 4 show sequenc sort 8processor exampl index insid circl indic processor assign ie processor 1 perform total four singl attribut sort origin relat r start sort attribut a1 use binomi heap properti follow processor k 1 singl attribut sort 2p sort sequenc avail time need figur 4 binomi heap structur gener 2p gammaset without read conict algorithm 1 easili gener valu p power 2 also note algorithm 1 requir p 2d1 usual case practic howev parallel algorithm need larger valu p partit strategi need augment augment could exampl partit strategi base number data item particular attribut would appli partit base number attribut done sinc rang p 20 2d1 cover current need respect machin dimens size discuss augment paper follow four properti summar main featur algorithm 1 make load balanc commun efcient comput groupbi assign uniqu processor calcul groupbi assign processor pi requir number singl attribut sort 1 sort perform processor pi share prex attribut way 4 24 perform disk scan manner 4 24 algorithm requir interprocessor commun 4 parallel topdown data cube construct topdown approach comput data cube like sequenti pipesort pipe hash overlap method 1 10 25 use detail groupbi comput less detail one contain subset attribut former appli data set number data item groupbi shrink consider number attribut decreas data reduct pipesort pipehash overlap method select span tree lattic root groupbi contain attribut pipesort consid two case parentchild relationship order attribut child prex order attribut parent eg abcd abc simpl scan sufcient creat child parent otherwis sort requir creat child pipesort seek minim total comput cost comput minimum cost match success layer lattic pipehash use hash tabl instead sort overlap attempt reduc sort time util fact overlap sort order alway requir complet new sort exampl abc groupbi partit sort independ c produc ac sort order may permit independ sort memori rather alway use extern memori sort next outlin partit approach gener p independ subproblem solv one processor use exist externalmemori topdown cube algorithm rst step algorithm determin span tree lattic use one exist approach like pipesort pipehash overlap respect balanc load differ processor next perform storag estim determin approxim size groupbi done exampl use method describ 11 26 work weight tree crucial part solut partit tree partit subtre induc partit data cube problem p subproblem subset groupbi determin optim partit weight tree easili shown npcomplet problem make exampl reduct processor schedul sinc weight tree repres estim heurist approach gener p subproblem control size subproblem hold promis want size p subproblem balanc also want minim number subtre assign processor everi subtre may requir scan entir data set r thu mani subtre result poor io perform solut develop balanc two consider heurist make use relat partit problem tree efcient algorithm exist minmax tree kpartit problem 3 dene follow given tree n vertic posit weight assign vertex delet k edg tree largest total weight result subtre minim minmax tree kpartit problem studi 3 12 23 method assum weight xed note partit problem differ cut subtre addit cost introduc groupbi associ root must comput scratch separ sort henc cut weight root increas accordingli adapt algorithm 3 account chang weight requir algorithm base pebbl shift scheme k pebbl shift tree root toward leav determin cut made adapt version cut made cost parent new partit adjust reect cost addit sort origin cost save hash tabl possibl futur use sinc cut move mani time reach nal posit remaind shall refer method modi minmax tree kpartit howev even perfect minmax kpartit necessarili result partit subtre equal size address tradeoff aris number subtre assign processor use treepartit initi step partit achiev better distribut load appli partit strategi instead partit tree p subtre partit p subtre integ 1 use pack heurist determin subtre belong processor assign subtre everi processor pack heurist consid weight subtre pair subtre weight control number subtre consist match phase p largest subtre group subtre p smallest subtre group subtre match detail describ step 2b algorithm 2 algorithm 2 sequenti treepartitiont p inputaspanningtre ofthelatticewithpositiveweightsassignedtothenodesrepres ing cost build node ancestor integ paramet oversampl ratio p number processor output partit p subset 1p subtre 1 comput modi minmax tree ppartit p subtre t1 tsp 190 dehn et al 2 distributesubtre t1tsp amongth p subsets1p subtreespersubset follow 2a creat p set tree name 1 sp initi ti weight dene total weight tree 2b sort set weight increas order wlog let 1 spj1p result sequenc end algorithm tree partit algorithm embed parallel topdown data cube construct algorithm method provid framework parallel sequenti topdown data cube algorithm outlin approach given follow algorithm 3 algorithm 3 parallel topdown cube construct processor pi 1i p perform follow step independ parallel 1 appli storag estim method 11 26 determin approxim size groupbi 2 select sequenti topdown cube construct method eg pipesort pipe hashoroverlap comput span tree lattic use method comput weight node estim cost build node ancestor 3 execut algorithm treepartitiont p shown creat p set 1p set contain subtre 4 comput groupbi subset use sequenti topdown cube construct method chosen step 1 end algorithm perform result describ section 6 show partit 3 achiev good result respect balanc load assign processor import result sinc small valu crucial optim perform 5 parallel arraybas data cube construct method section 4 easili modi obtain efcient parallel arraycub method present 32 arraycub method aim dens data cube structur raw data set ddimension array store disk sequenc chunk chunk way divid ddimension array small size ddimension chunk chunk portion contain data set ts disk block xed sequenc chunk store disk calcul groupbi requir certain amount buffer space 32 arraycub method calcul minimum memori span tree groupbi mmst span tree lattic total amount buffer space requir minim total number disk scan requir comput groupbi total amount buffer space requir divid memori space avail arraycub method therefor parallel simpli appli algorithm 3 mmst 6 experiment perform analysi implement test parallel topdown data cube construct method present section 4 implement sequenti pipesort 1 c parallel topdown data cube construct method section 4 c mpi 2 requir graph algorithm well data structur like hash tabl graph representa tion drawn leda librari 21 still implement took one person year full time work chose implement parallel topdown data cube construct method rather parallel bottomup data cube construct method former tunabl paramet wish explor primari parallel hardwar platform use pc cluster consist frontend machin eight processor frontend machin use partit lattic distribut work among 8 processor frontend machin ibm netniti server two 9 gb scsi disk 512 mb ram 550mhz pentium processor processor 166 mhz pentium 2g ide hard drive 32 mb ram except one processor 133 mhz pentium processor run linux connect via 100 mbit fast ethernet switch full wire speed port clearli low end older hardwar platform experi report remaind section repres sever week 24 hrday test pc cluster platform describ advantag avail exclus experi without user disturb measur main goal studi speedup obtain parallel method rather absolut time platform prove sufcient verifi result also hold newer machin faster processor memori per processor higher bandwidth port code sunfir 6800 perform comparison test data set sunfir 6800 use recent sun multiprocessor sun ultrasparc iii 750 mhz processor run solari 8 24 gb ram sun t3 share disk figur 5 show pc cluster run time observ function number processor use data set measur sequenti time sequenti pipesort 1 parallel time obtain parallel topdown data cube construct method section 4 use oversampl ratio 2 data set consist 1000000 record dimens 7 test data valu uniformli distribut 10 valu dimens figur 5 show run time algorithm increas number processor three curv shown runtim curv show time taken slowest processor ie processor receiv largest workload second curv show averag time taken processor time taken frontend machin partit lattic distribut work among comput node figur 5 pc cluster run time second function number processor fix paramet data 7 experi per data point 5 insignic theoret optimum curv shown gure 5 sequenti pipesort time divid number processor use observ runtim obtain code theoret optimum essenti ident oversampl ratio 2 optim speedup p observ anomali runtim curv due slower 133 mhz pentium processor interestingli averag time curv alway theoret optimum curv even runtim curv sometim theoret optimum curv one would expect runtim curv would alway theoret optimum curv believ superlinear speedup caus anoth effect benet parallel method improv io sequenti pipesort appli 10 dimension data set lattic partit pipe length 10 order process pipe length 10 pipesort need write 10 open le time appear linux number open le consider impact perform 100000 record write 4 le took 8 second system write 6 le took 23 second 12 write 8 le took 48 second 16 benet parallel method sinc partit lattic rst appli pipesort part therefor pipe gener parallel method consider shorter order verifi result also hold newer machin faster processor memori per processor higher bandwidth port code sunfir 6800 perform comparison test data set figur 6 show run time observ sunfir 6800 absolut run time observ consider faster expect sunfir approxim 4 time faster pc cluster figur 6 sunfir 6800 run time second function number processor data set gure 5 importantli shape curv essenti pc cluster runtim slowest proc averag time curv similar close theoret optimum curv oversampl ratio 2 optim speedup p also observ sunfir 6800 larger sunfir instal also allow us test code larger number processor shown gure 6 still obtain optim speedup p use 16 processor dataset figur 7 show pc cluster run time topdown data cube parallel increas data size 100000 1000000 row main observ parallel runtim increas slightli linear respect data size consist fact sort requir time log n figur 7 show parallel topdown data cube construct method scale grace respect data size figur 8 show pc cluster run time function oversampl ratio observ test case parallel runtim ie time taken slowest processor best 3 due follow tradeoff clearli workload balanc improv increas howev total number subtre p gener tree partit algorithm increas need perform sort root node subtre optim tradeoff point test case 3 import note oversampl ratio tunabl paramet best valu depend number factor experi show 3issufci load balanc howev data set grow size time sort root node subtre increas linear wherea effect imbal linear substanti larger data set eg 1g row expect optim valu 2 figur 9 show pc cluster run time topdown data cube parallel increas dimens data set 2 10 note number groupbi must comput grow exponenti respect dimens data set gure 9 observ parallel run time grow essenti linear respect 194 dehn et al figur 7 pc cluster run time second function data size fix paramet number 7 experi per data point 5 figur 8 pc cluster run time second function oversampl ratio fix paramet data row number processor 8 dimens 7 experi per data point 5 figur 9 pc cluster run time second function number dimens fix paramet data 200000 row number processor 8 experi per data point 5 note work grow exponenti respect number dimens output size also tri code high dimension data size output becom extrem larg exampl execut parallel algorithm 15 dimension data set 10000 row result data cube size 1g figur show pc cluster run time topdown data cube parallel increas cardin dimens number differ possibl data figur 10 pc cluster run time second function cardin ie number differ possibl data valu dimens fix paramet data size 200000 row number processor 8 dimens 196 dehn et al figur 11 pc cluster run time second function skew data valu dimens base zipf fix paramet data size 200000 row number processor 8 dimens 7 experi per data point 5 valu dimens recal topdown pipesort 1 aim dens data cube experi perform 3 cardin level 5 10 100 possibl valu per dimens result shown gure 6 conrm expect method perform better denser data figur 11 show pc cluster run time topdown data cube parallel data set skew distribut use standard zipf distribut dimens data reduct topdown pipesort 1 increas skew total time observ expect decreas skew exactli observ gure 11 main concern regard parallel method balanc partit tree would presenc skew main observ gure 11 rel differ runtim slowest processor averag time increas increas skew appear indic partit method robust presenc skew 7 comparison previou result section summar previou result parallel data cube comput compar result present paper 13 14 author observ groupbi comput essenti parallel prex implement method mention experiment perform evalu present method creat larg commun overhead like show unsatisfactori speedup method 20 22 well method present paper reduc commun overhead partit load assign set groupbi comput individu processor discuss 20 22 balanc load assign differ processor hard problem approach 20 use simpl greedi heurist parallel hashbas data cube comput observ 20 simpl method scalabl load balanc speedup satisfactori 4 processor subsequ paper group 31 focus overlap multipl data cube comput sequenti set approach 22 consid parallel sortbas data cube construct studi parallel bottomup icebergcub comput four differ method present rp rpp asl pt experiment result present indic asl pt better perform among four main reason rp rpp show weak load balanc pt somewhat similar parallel bottomup data cube construct method present section 3 sinc pt also partit bottomup tree howev pt partit bottomup tree simpli subtre equal number node requir consider task processor obtain good load balanc observ 22 larger number task requir perform problem aris approach reduc possibl share prex sort order differ groupbi comput contrast parallel bottomup method section 3 assign two task processor task coars grain greatli improv share prex sort order differ groupbi comput therefor expect method decreas perform larger number processor observ 22 asl method use parallel topdown approach use skiplist maintain cell groupbi asl parallel make construct groupbi separ task hope larg number task creat good overal load balanc use simpl greedi approach assign task processor similar 20 observ 22 larg number task bring perform problem reduc possibl share prex sort order differ groupbi comput contrast parallel topdown method section 4 creat coars task precis algorithm assign task subtre processor oversampl ratio shown section 6 oversampl ratio 3issufci obtain good load balanc sens method answer open question 22 obtain good load balanc without creat mani task also clearli reect experiment perform method comparison experi report 22 observ 22 experi gure 10 22 indic asl obtain essenti zero speedup number processor increas 8 16 contrast experi gure 6 section show parallel topdown method section 4 still doubl speed number processor increas 8 16 obtain optim speedup p use processor 8 conclus futur work present two differ partit base data cube parallel standard share disk type parallel machin partit strategi bottomup topdown data 198 dehn et al cube parallel balanc load assign individu processor load measur dene origin propon respect sequenti method subcub comput carri use exist sequenti data cube algorithm topdown partit strategi also easili extend parallel arraycub method experiment result indic partit method efcient practic compar exist parallel data cube method parallel approach bring signic reduct interprocessor commun import practic benet enabl reus exist sequenti data cube code possibl extens data cube parallel method consid share noth parallel machin model possibl store duplic input data set r oneachprocessorsdiskthenourmethodcanbeeasilyadaptedforsuchanarchitecturethi clearli alway possibl solv case total output size consider larger input data set exampl spars data cube comput data cube sever hundr time larg r sufcient total disk space necessari store output one singl copi distribut differ disk p time duplic r may smaller output data cube parallel method would partit problem way describ section 3 4 subcub comput would assign processor way well comput subcub processor would read r local disk output two altern processor could simpli write subcub gener local disk could howev creat bottleneck exampl visual applic follow data cube construct need read singl groupbi case groupbi distribut disk exampl stripe format obtain data distribut processor would write subcub directli local disk buffer output whenev buffer full would permut network summari observ approach aim share disk parallel machin applic share noth parallel machin depend mainli distribut avail input data set r interest open problem identifi ideal distribut input r among p processor xed amount replic input data allow ie r copi r time 1 r p anoth interest question futur work relationship topdown bottomup data cube comput parallel set two conceptu differ method exist literatur suggest bottomup method better suit high dimension data far implement parallel topdown data cube method took one person year full time work chose implement topdown method tunabl paramet discov experiment possibl futur project could implement parallel bottomup data cube method similar environ compil messag pass librari data structur librari disk access method etc measur variou tradeoff point two method indic 22 critic paramet parallel bottomup data cube comput similar good load balanc small number coars task lead us believ parallel bottomup method perform well compar parallel topdown method parallel bottomup method fewer paramet avail netun code therefor tradeoff point parallel set topdown bottomup method may differ sequenti set rel littl work done difcult problem gener partial data cube entir data cube given subset groupbi given lattic set select groupbi gener challeng decid groupbi comput order minim total cost comput partial data cube mani case comput intermedi groupbi select set sever view select set comput cheapli reduc overal comput time sarawagi et al 25 suggest approach base augment lattic addit vertic repres possibl order view attribut addit edg repres relationship view minimum steiner tree approxim algorithm run identifi number inter mediat node socal steiner point ad select subset best reduc overal cost approxim algorithm use optim minimum steiner tree problem npcomplet intermedi node introduc method areofcoursetobedrawnfromthenonselectednodesintheoriginallatticebyaddingthes addit node cost comput select node reduc although theoret neat approach effect practic problem augment lattic far mani vertic edg process efcient exampl 6 dimension partial data cube number vertic edg augment lattic increas factor 30 8684 respect 8 dimension partial data cube number vertic edg increas factor 428 701346 respect augment lattic 9 dimension partial data cube 2000000000 edg anoth approach clearli necessari author current implement new algorithm gener partial data cube consid import area futur research acknowledg theauthorswouldliketothankstevenblimkiezimminchenkhoimanhnguyenthoma pehl suganthan sivagnanasundaram contribut toward implement describ section 6 rst second fourth author research partial support natur scienc engin research council canada third author research partial support nation scienc foundat grant 9988339ccr r introduct parallel comput max planck institut tr probabilist count algorithm data base applic optim algorithm tree partit introduct parallel comput scalabl parallel geometr algorithm coars grain multicomput implement data cube effici toward effici portabl arraybas algorithm simultan multidimension aggreg effici extern memori algorithm simul coarsegrain parallel algorithm extern memori algorithm bottomup comput spars iceberg cube parallel virtual memori shift algorithm minmax tree partit icebergcub comput pc cluster data cube high perform olap data mine parallel comput reduc io complex simul coars grain parallel algorithm fast comput spars datacub storag estim multidimension aggreg presenc hierarchi comput multidimension aggreg multicub comput bsplike externalmemori comput bulk synchron parallel computinga paradigm transport softwar parallel scalabl infrastructur olap data mine ctr ying chen frank dehn todd eavi andrew rauchaplin parallel rolap data cube construct sharednoth multiprocessor distribut parallel databas v15 n3 p219236 may 2004 frank dehn todd eavi andrew rauchaplin cgmcube project optim parallel data cube gener rolap distribut parallel databas v19 n1 p2962 januari 2006 ge yang ruom jin gagan agraw implement data cube construct use cluster middlewar algorithm implement experi perform evalu futur gener comput system v19 n4 p533550 may ying chen frank dehn todd eavi andrew rauchaplin pnp sequenti extern memori parallel iceberg cube comput distribut parallel databas v23 n2 p99126 april 2008