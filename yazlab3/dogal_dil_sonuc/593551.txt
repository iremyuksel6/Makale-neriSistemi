discret event system approach protocol convers protocol mismatch occur heterogen network tri commun mismatch inevit due prolifer multitud network architectur hardwar softwar one hand need global connect hand order circumv problem solut protocol convers propos paper present systemat approach protocol convers use theori supervisori control discret event system partial first address inan studi problem design convert given mismatch pair protocol use specif specif channel user servic introduc notion convert languag use obtain necessari suffici condit exist protocol convert present effect algorithm comput whenev exist b introduct grow need global commun network comput howev heterogen exist network allow direct consist commun result mismatch protocol mismatch inevit due prolifer differ hardwar softwar network standard desir urgenc toward global connect possibl solut differ standard protocol mismatch would standard network protocol move may practic case take year agre upon worldwid result connect problem present result altern method protocol convers propos altern measur develop protocol convert form solut avail time everybodi adher global standard green 21 argu protocol convers necess ignor cite reason littl late standard architectur establish base decnet arpanet ibm sna tcpip x25 user find difficult switch open global standard simpli sheer effort involv well render obsolet mani exist hardwar softwar solut numer vendor differ protocol architectur also tend serv differ commun user need maintain contact extern world still great import figur consist send end protocol p 0 receiv end protocol p 1 similarli protocol q compos q 0 q 1 protocol mismatch occur send end protocol p 0 p tri commun receiv end protocol q 1 q similarli also q 0 tri commun p 1 protocol mismatch protocol mismatch figur 1 protocol configur practic solut protocol mismatch interpos translat convert two protocol trap messag sent one system translat messag sender system manner receiv system understand without loss consist depict figur 2 denot one protocol q 1 mismatch protocol c denot convert result protocol convers system adher user servic specif defin properti protocol system need user user figur 2 interpos protocol convert tanenbaum 28 provid classif convert depend layer protocol stack use repeat use physic layer bridg use link layer router gateway use network layer final protocol convert use transport layer event occur user interfac call extern event remain event call intern event let g denot composit p 0 q 1 k denot user servic specif g system evolv extern well intern event wherea k formal languag defin extern event composit g convert c denot gkc implement servic specif k certain safeti progress properti hold safeti captur notion noth illeg happen ie event trace gkc correspond allow k progress captur notion composit block occurr extern event whenev feasibl specif k ie whenev specif block role convert c restrict behavior g gkc implement k howev must limit control observ capabl word certain event controllabletheir enablementdisabl control c remain uncontrol similarli certain event observabletheir occurr sens c remain unobserv thu design protocol convert studi framework supervisori control discret event system pioneer ramadg wonham 23 subsequ extend research refer survey articl 24 29 book 12 motiv work present problem protocol convers studi research paper calvert lam 2 provid nice survey one first approach protocol convers bottomup approach taken okumura 20 lam 17 bottomup approach heurist natur may abl determin convert even one exist topdown approach calvert lam 2 algorithm natur howev convert design state machin evolv set intern event impli set intern event treat set control well set observ event convert unrealist sinc convert observ event occur interfac ie input output event control output event gener event set differ illustr exampl topdown approach algorithm approach also known quotient approach sinc c view quotient g k protocol convers problem first treat inan supervisori control framework import applic exampl 8 depth 9 theoret foundat applic base given 10 howev work inan address safeti constraint protocol convers problem requir project languag supervis system equal given specif languag addit progress constraint requir supervis system never block extern event block specif also consid part protocol convers problem work calvertlam 2 treat safeti progress constraint work present exist convert requir control observ condit togeth extra safeti progress condit impli work present also requir gener convent supervisori control rudiewonham 25 also appli supervisori control techniqu deriv miss portion either sender receiv portion protocol assum knowledg problem quit similar protocol convers consid safeti specif recent work kumarfabian 11 show progress constraint may express use type nonblock properti respect famili mark languageson extern event nonblock properti differ convent one use supervisori control 3 two way first nonblock respect famili mark oppos singl mark need second type mark depend specif manner entir closedloop behavior oppos trace closedloop behavior mark openloop behavior paper deriv convert use formal techniqu supervisori control discret event system supervisori control framework provid necessari suffici condit exist supervisor present set convert given plant present set composit two mismatch protocol closedloop system present set composit convert mismatch protocol meet desir specif present set user servic specif howev sinc user servic specif partial specif ie defin subset consist extern event oppos entir event set customari supervisori control framework supervisori control theori result appli directli appropri extens obtain paper introduc notion convert languag show exist convert equival exist convert languag contain languag g set convert languag close respect union suprem convert languag exist provid effect algorithm comput test exist convert reduc test nonempti suprem convert languag moreov gener suprem convert languag serv choic convert convert exist suprem convert languag empti case given servic specif may minim alter convert exist problem recent address takaitakaekodama 27 kumarfabian 11 illustr work exampl two incompat protocol name altern bit protocol nonsequenc protocol 28 two obvious incompat altern bit protocol label data packet sequenc number 0 1 nonsequenc protocol work label data packet abridg version work present first appear 14 15 motiv exampl exampl assum convert colloc receiv end shown figur 3 send end p 0 composit sender protocol p sender channel p c wherea receiv end q 1 consist receiv protocol q r ql tm del acc figur 3 typic protocol convers system gener q 1 also composit q r receiv channel mismatch protocol compon exampl altern bit protocol sender p altern bit channel p c nonsequenc protocol receiv q r state machin along servic specif present section thu exampl event occur variou interfac present exampl indic figur 3 extern event set consist accept event acc deliv event del lower respect upper case letter use intern event occur sender respect receiv end event label neg respect posit sign prefix repres transmit respect receipt event protocol howev sign convent channel opposit sinc receipt event channel transmit event adjoin protocol viceversa receipt event channel prefix neg sign wherea transmit event channel prefix posit sign sinc convert interpos channel receiv protocol fix event occur convert interfac thu instanc di repres transmit event data packet label sender protocol receipt event data packet channel wherea repres transmit event acknowledg receiv protocol receipt event acknowledg convert event includ timeout event tm channel loss event ls thu exampl event set sigma consist follow subset sigma consist event occur convert interfac constitut set observ event wherea remain event unobserv part observ event output event convert occurr control convert output event constitut set control event event uncontrol convert note set control event convert contain set observ event exploit properti design convert also note set control event set observ event differ set intern event distinct note work calvert lam 2 altern bit sender depict figur 4 six state initi state state 0 posit accept data user data transmit label 0 next data accept user acknowledg correct label 0 receiv otherwis either wrong acknowledg label 1 receiv sender time due loss data acknowledg data retransmit label 0 procedur repeat accept event except label use altern 0 1 acc figur 4 altern bit sender altern bit channel shown figur 5 six state channel initi receiv data packet event di may either lose event ls send back initi state may success transmit event di send state ls ls figur 5 altern bit channel receiv acknowledg packet event ai acknowledg may either get lost event ls may get success transmit event ai send channel back initi state either case nonsequenc receiv shown figur 6 simpl state machin receiv data deliv user send acknowledg sender sinc label present data packet label altern bit sender interpret consist nonsequenc receiv result protocol mismatch0d del acc del figur nonsequenc receiv servic specif final protocol system provid servic loss free transmiss lossi channel accomplish requir accept deliv event altern servic specif depict figur 6 weaker servic specif type order accept deliv messag sequenc ident also consid howev complex protocol need offer servic 3 notat preliminari use sigma denot univers event sigma denot set finit length event sequenc call trace includ zero length trace denot ffl subset sigma ie collect trace call languag languag h notat prh call prefix closur h set prefix trace h h said prefix close given trace 2 sigma subset event project denot sigma trace obtain eras event belong sigma state machin 7 use repres untim behavior discret event system protocol channel system well repres qualit logic specif user servic specif formal state machin p quadrupl denot set state sigma denot finit set event partial transit function x initi state tripl x oe x 0 call transit p x 0 2 ffx oe said epsilontransit denot set state reachabl execut zero event sigma state x notat denot set event sigma execut x transit function extend event trace ff obviou way gener languag p set trace execut start initi state ie p call determinist state machin transit function partial function x complet determinist state machin p denot state machin obtain complet transit function p ad new state dump state x ad transit state x p dump state event defin x p formal defin x otherwis note lp synchron composit 6 state machin use repres concurr oper compon system given two determinist state machin p x composit p q denot pkq x sigma ff x 0 defin undefin otherwis thu p q compos common event occur synchron event occur asynchron gener languag composit given note sigma sinc event must occur synchron also note although state set pkq x p theta xq mani state remain unreach pkq adopt convent write pkq mean reachabl trim compon 7 supervisori control discret event system synchron composit uncontrol plant model state machin g supervisor model state machin ident event set plant use control mechan certain sublanguag h lg repres desir behavior plant control object design supervisor control plant behavior lgk equal h supervisor design limit control observ capabl sens prevent occurr certain uncontrol event ii observ occurr certain observ event let sigma u sigma denot set uncontrol event sigma denot set observ event follow result supervisori control theori state necessari suffici condit exist supervisor theorem 1 23 18 given plant g desir behavior h lg set uncontrol event sigma u set observ event sigma exist supervisor compat control observ capabl prefix closur nonempti control prh sigma control condit requir extens prefix h uncontrol event feasibl plant also prefix h occurr uncontrol event prevent pair trace call indistinguish trace pair ident project set observ event observ condit requir extens pair indistinguish prefix h common feasibl event either neither prefix h ident control action must taken follow indistinguish pair trace note h control respect observ prh control respect observ test control observ condit known g finit mani state h regular languag admit finit state machin represent fact g state h state machin represent n state control test omn time wherea observ test omn 2 case desir behavior h fail satisfi requir condit maxim permiss supervisor design achiev maxim sublanguag h satisfi requir condit known control preserv union uniqu maxim control sublanguag call suprem control sublanguag given languag exist 22 howev observ preserv union maxim observ sublanguag uniqu 18 henc sometim normal sublanguag instead observ sublanguag consid 18 normal requir trace g indistinguish prefix h must prefix h normal preserv union suprem normal sublanguag given languag exist 18 1 13 test omn 2 time 12 p 103 moreov normal impli observ converes hold presenc control control event also observ theorem 2 9 proposit 42 given g h lg control observ control normal similar result also appear 12 theorem 43 time set 19 proposit 4 4 exist comput convert paper interest solv slightli differ supervisori control problem object obtain supervisor refer convert context closedloop system implement given servic specif defin subset extern event given p x sigma ff x 0 set extern event sigma e sigma servic specif k sigma e p implement k follow hold safeti lp sigma progress safeti requir gener trace p correspond prefix specifi cation ie illeg trace occur p sinc k partial specif defin extern event set may exist one trace p correspond prefix k progress requir extern event possibl prefix k also possibl eventu ie occurr zero intern event follow correspond trace p note safeti guarante extern event eventu possibl follow least one correspond trace p remark 1 definit implement given equival given 2 state differ simplic exampl definit safeti given 2 use contain instead equal howev contain replac equal sinc revers contain follow progress similarli definit progress given 2 use state character instead languag character 2 p repres nondeterminist state machin extern event replac transit intern event epsilontransit languag base character progress possibl state base character use case p state machin extern intern event follow theorem provid necessari suffici condit exist convert given pair mismatch protocol given servic specif first introduc notion convert languag describ notat g use denot composit mismatch protocol k use denot servic specif given pair mismatch protocol g servic specif k sigma e set uncontrol event sigma u set observ event sigma call convert languag follow hold control prh sigma safeti prhsigma progress note h lg convert languag prefix closur also convert languag use result theorem 1 next show necessari suffici condit exist convert exist nonempti convert languag theorem 3 given pair mismatch protocol g servic specif k sigma e set uncontrol event sigma u set observ event sigma exist convert c compat control observ capabl gkc implement k exist nonempti convert languag proof first prove necess suppos exist convert c gkc implement k claim h lgkc requir convert languag sinc c control observ compat necess part theorem 1 follow h nonempti prefix close control observ furthermor sinc gkc implement k follow definit 1 safeti progress properti definit 2 thu h nonempti convert languag order see suffici suppos exist nonempti convert languag h lg prh nonempti control observ suffici theorem 1 follow exist c control observ compat prh furthermor sinc h convert languag follow definit 2 satisfi safeti progress properti impli gkc implement k desir sinc set control event convert contain set observ event ie follow theorem 2 3 languag convert languag satisfi properti control normal safeti progress fact use obtain follow corollari state set convert languag close union suprem one exist defin follow set convert sublanguag lg implement specif k convg k fh lg j h convert languageg e suprem convert languag sup convg k exist proof first note sinc convert sublanguag convg k 6 let index set 2 h lg convert languag claim 2 h also convert languag ie satisfi condit control normal iti safeti progress first two properti follow fact control normal preserv union safeti follow follow seri equal use fact prefix closur project oper commut arbitrari union h satisfi safeti final see progress pick 2 pr prk exist 2 also sinc h convert languag satisfi progress exist follow theorem provid concret condit exist convert form basi test develop paper also specifi choic prototyp convert theorem 4 let g k sigma e sigma theorem 3 exist convert c gkc implement k sup convg k nonempti case c chosen gener sup convg k proof order see necess suppos exist convert necess part theorem 3 exist nonempti convert languag h 2 convg impli sup convg k nonempti suffici follow suffici part theorem 3 sinc sup convg k convert languag given nonempti final let c gener sup convg k ie last equal follow fact sup convg k lg consequ satisfi safeti progress properti definit 2 impli gkc implement k theorem 4 task check exist convert well design one exist reduc task comput suprem convert languag verifi nonempti next present algorithm comput sup convg k assum g finit mani state say k regular languag admit finit state machin represent say state motiv exampl state machin represent k consist two state shown figur 6 comput suprem control sublanguag given 13 algorithm comput sup convg k two step first step construct suffici refin version state machin g 1 next step remov certain bad state refin state machin initi certain state correspond trace violat safeti mark bad ie state reachabl execut trace whose project extern event set prefix k bad state sup convg k equal lg otherwis convert must design restrict behavior g good state remain reachabl correspond trace also satisfi progress control normal condit progress requir set extern event execut follow execut zero intern event certain good state contain set extern event execut correspond point k good state fail satisfi progress mark bad control requir bad state reachabl good state uncontrol event sinc execut uncontrol event prevent system uncontrol reach bad state good state order comput sup convg k exist uncontrol transit good state bad one good state mark bad final normal requir state correspond set indistinguish trace either good bad good state bad state reach execut pair indistinguish trace good state mark bad algorithm termin addit bad state mark sup convg k consist trace correspond remain good state nonempti set good state nonempti clear state machin represent g need suffici refin state correspond trace violat either condit unambigu identifi first order deal safeti progress control condit refin machin g compos state machin obtain complet transit function motiv exampl state machin shown figur 7 dump state explicitli depict note e expect given trace 2 sigma execut result dump state let g 1 skg sinc sigma e sigma last equal follow fact e notat simplic let fy g theta x dump state denot state given two state machin g said refin version g 2 exist function oe 2 sigma dump del acc del acc acc del figur 7 complet servic specif set g 1 z transit function z initi state note given trace 2 execut lead state z x g 1 ssigma e 62 prk next order deal normal condit refin g 1 first obtain nondeterminist state machin g 2 gener trace indistinguish trace g 1 sinc trace remain indistinguish unobserv event either insert eras follow construct yield desir g algorithm 1 given g 1 skg add transit g 1 obtain g 2 follow 1 z 2 z oe 2 2 transit z oe z 0 g 1 z 6 z 0 oe 2 add epsilon transit z ffl z 0 algorithm effect insert respect eras unobserv event remark 2 note z reachabl execut trace g 1 z also reachabl execut trace indistinguish g 2 trace indistinguish z 0 reachabl execut 0 g 1 z 0 also reachabl execut g 2 sinc indistinguish 0 fact set state reachabl execut g 2 set state reachabl g 1 execut trace g 1 indistinguish next use powerset construct 7 obtain determinist state machin g 3 languag lg 2 final construct machin g 4 g 1 kg 3 sinc show g 4 suffici refin version g first outlin construct g 4 follow algorithm algorithm 2 given g x sigma ff x 0 determinist gener sigma e fi 0 1 obtain ad dump state complet transit function e 2 obtain g 1 skg lg 1 state set g 1 denot z 3 obtain nondeterminist state machin g 2 ad transit g 1 describ algorithm 1 state set g 2 z 4 obtain g 3 determin g 1 use power set construct lg 3 state set g 3 2 z 5 obtain g 4 g 1 kg 3 lg 4 state set g 4 z theta 2 z clearli g 4 refin version g notat simplic let g 4 r sigma ffi r 0 z state set g 4 note state r g 4 form z z 2 z denot transit function g 4 initi state g 4 r follow lemma list properti g 4 demonstr suffici refin version g first defin concept match pair state definit 3 pair state r said match lemma 1 follow hold g 4 state machin construct algorithm 2 1 2 consid 2 lg 4 ssigma e 2 prk 6 3 state g 4 z 2 z 4 consid match pair state r proof first part follow construct prove order see second part consid execut ssigma e result state sinc assert follow fact 6 order see third part let 2 lg 4 ffir z execut result state z g 1 state z g 3 sinc g 3 obtain determin state machin g 2 impli execut result state z g 2 recal g 2 nondeterminist sinc g 2 obtain ad transit g 1 z one state henc z 2 z final order see fourth part consid match pair state r z 2 third part z 1 z consid 1 2 lg 4 execut 1 result state z 1 g 1 state z g 2 includ state z 1 z 2 remark 2 concern g 2 exist trace indistinguish 1 ie 2 sigma execut result state z 2 g 1 trace exist z 2 reach execut 1 final sinc 2 indistinguish 1 execut g 2 also result set state z execut 2 result state r z g 4 desir readi present algorithm iter mark bad state g 4 upon termin yield gener sup convg k notat r k b r use denot set bad state kth iter algorithm 3 consid g 4 r sigma ffi r 0 obtain algorithm 2 1 initi step 2 iter step r k1 b r k r 3 termin step r k1 go step 2 algorithm initi set iter counter mark state r bad state first coordin dump state ie trace ffir second part lemma 1 violat safeti condit set bad state kth iter denot r k b kth iter step good state b mark bad follow hold exist uncontrol event r bad state 2 lg 4 trace ffir violat control condit ii exist match bad state r 0 2 r k b trace ffir fourth part lemma 1 exist trace 0 indistinguish ffir violat normal condit iii set extern event execut state contain set extern event execut good state reach execut zero intern event r g 4 trace ffir violat progress condit algorithm termin addit bad state mark kth iter els iter counter increment one iter step repeat note sinc g 4 finit mani state algorithm guarante termin finit number iter also sinc algorithm mark state bad state trace lead violat either safeti progress control normal state machin obtain remov termin set bad state transit lead toward away g 4 gener languag sup convg k henc obtain follow result state correct algorithm theorem 5 given finit state machin g regular languag k sigma e algorithm 3 termin finit number step state machin obtain remov state r b r g 4 gener sup convg k r b denot set bad state termin algorithm number state g n number state state machin represent k comput complex algorithm 3 sinc number state g 4 omn2 mn impli omn2 mn number iter equal mani comput iter also algorithm polynomi complex exist follow fact special case sigma convert design problem reduc standard supervisori control problem partial observ desir behavior constraint specifi rang languag known npcomplet problem 30 5 implement issu exampl convert sinc comput sup convg k intract comput tractabl heurist approach convert design desir propos two heurist util design convert motiv exampl sinc comput intract aris due presenc partial observa tion one possibl first comput suprem sublanguag lg satisfi safeti progress control next verifi whether also normal done polynomi time case languag also normal equal desir suprem convert languag success comput polynomi time next outlin polynomi time comput suprem sublanguag lg satisfi safeti progress control clearli languag equal sup convg k event observ normal trivial hold note event observ g 2 equal g 1 ie transit ad algorithm 1 invok g 4 also equal g 1 henc follow modif algorithm 3 comput desir suprem sublanguag lg satisfi safeti progress control algorithm 4 given g x sigma ff x 0 determinist gener sigma e fi 0 1 initi step 2 iter step 3 termin step z k1 go step 2 use fact g 1 omn state comput complex algorithm 4 determin om 2 n 2 algorithm comput suprem sublanguag lg satisfi safeti progress control may violat normal test whether languag also normal respect given set observ event perform ommn 2 case test normal fail work chomarcu iter comput suprem control normal sublanguag 4 iter suprem normal sublanguag comput comput suprem languag meet safeti progress control fix point reach howev result exponenti comput complex outlin follow algorithm algorithm 5 given g k sigma e comput sup convg k follow 2 comput suprem sublanguag h k h k satisfi safeti progress control use algorithm 4 h k normal sup convg go step 3 3 comput suprem normal sublanguag h k1 h k h k1 satisfi safeti progress algorithm 6 given provid test safeti progress sup convg replac g gener h k1 set go step 2 remark 4 note algorithm need check control h k1 step 3 sinc known suprem normal comput preserv control 5 proposit 39 also step 3 h k1 satisfi safeti progress need comput suprem sublanguag satisfi safeti progress use algorithm 4 although case control trivial hold ever need replac g gener h k1 sinc algorithm 4 comput suprem sublanguag lg satisfi safeti progress control written cprogram algorithm 5 associ algorithm 4 util finit state machin librari origin develop supervisori control 26 use program algorithm 4 first comput suprem sublanguag lg satisfi control safeti progress exampl state machin g composit altern bit sender altern bit channel nonsequenc receiv contain 66 state composit g three state contain 198 state initi iter safeti check disqualifi 66 state next iter perform control progress check disqualifi addit 34 state addit state disqualifi next iter control progress check result test convert state test convert also pass normal test thu qualifi valid convert second possibl heurist guess test convert c verifi correct check whether lgkc convert languag show done polynomi time first note difficult guess convert simpl possibl design system emul miss portion mismatch protocol ie receiv protocol p r p send protocol q q motiv exampl guess convert consid emul function altern bit receiv nonsequenc sender order test whether lgkc convert languag must check whether satisfi control normal safeti progress polynomi time test control normal found 12 pp 75 103 present polynomi time test safeti progress notat simplic let g 5 gkc let state set phi first refin g 5 compos notat simplic let g 6 skg 5 let state set theta fy g theta phi note sinc sigma e sigma last equal follow fact e also given trace 2 lg 6 execut lead state satisfi safeti state g 6 form oe also lg 5 satisfi progress set extern event execut follow execut zero intern event state contain set extern event execut correspond state follow algorithm check safeti progress algorithm 6 consid composit mismatch protocol g test convert c determinist gener prk 1 construct g 5 gkc denot state set phi 2 construct g 6 skg 5 denot state set theta 3 lgkc satisfi safeti progress number state convert p comput complex algorithm om omnp state equal mani reachabl comput need perform test convert motiv exampl shown figur 8 convert adopt figur 8 test convert follow simpl convers strategi initi one data packet label arriv event d0 remov label forward singl data packet receiv event action taken point copi data packet arriv due sender timeout receiv transmit acknowledg event convert attach label 0 put onto sender channel event a0 procedur repeat data packet differ label arriv except differ label use howev anoth data packet label arriv due sender timeout loss acknowledg channel acknowledg retransmit verifi lgkc labil normal ie convert languag sinc lgkc obvious nonempti follow theorem 3 c inde valid convert 6 conclus paper studi problem design protocol convert need interpos pair mismatch protocol approach systemat base recent theori supervisori control discret event system work present provid new framework protocol convert design one hand serv applic supervisori control theorist hand basic concept control observ normal comput suprem languag supervisori control safeti progress protocol design play import role protocol convers problem convert deriv maxim permiss sens convert restrict behavior entir system howev maxim permiss convert may minim number state design minim convert interest problem futur research r formula calcul suprem control normal sublanguag formal method protocol convers deal block supervisori control discret event system suprem languag class sublanguag aris supervisor synthesi problem partial observ supervisori control discret event process partial observ commun sequenti process introduct automata theori supervisori control formal method distribut system supervisori control theori applic gateway synthesi prob lem nondeterminist supervis partial observ supervisori control partial specif aris protocol convers model control logic discret event system control normal discret event dynam system design protocol convert discret event system approach protocol convers use supervisori control techniqu protocol convers observ discreteev system supervisori control time discret event system partial observ formal protocol convers method protocol convers suprem control sublanguag given languag supervisori control class discret event process control discret event system supervisori control commun process softwar librari discret event system finit state machin base applic extrem languag aris supervisori control servic specif comput network logic aspect control discret event system survey tool techniqu control discret event dynam system tr ctr nina yevtushenko tiziano villa robert k brayton alex petrenko alberto l sangiovannivincentelli solut parallel languag equat logic synthesi proceed 2001 ieeeacm intern confer computeraid design novemb 0408 2001 san jose california young moo lee kyu ho park protocol convert nonblock protocol integr vlsi journal v33 n1 p7188 decemb 2002 khale elfakih nina yevtushenko sergey buffalov gregor v bochmann progress solut parallel automata equat theoret comput scienc v362 n1 p1732 11 octob 2006 nina yevtushenko tiziano villa robert k brayton alex petrenko alberto l sangiovannivincentelli composit progress solut synchron fsm equat discret event dynam system v18 n1 p5189 march 2008