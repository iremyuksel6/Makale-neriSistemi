toler multipl transient fault aperiod task hard realtim system abstractrealtim system increasingli use sever applic timecrit natur fault toler essenti requir system due catastroph consequ toler fault paper studi scheme guarante time recoveri multipl fault within hard realtim constraint uniprocessor system assum earliestdeadlinefirst schedul edf aperiod preemptiv task develop necessari suffici feasibilitycheck algorithm faulttoler schedul complex on2 cdot k n number task schedul k maximum number fault toler b introduct interest embed system grow steadili recent past special ple includ autopilot system satellit launch vehicl control well robot whether collabor team system term hard realtim system hrtss consequ miss deadlin may catastroph abil toler fault hrtss crucial sinc task potenti miss deadlin fault occur case fault deadlin miss time taken recoveri fault taken account phase task submittedaccept system clearli account recoveri fault essenti requir hrtss deal hrtss perman fault toler use hotstandbi spare ks86 mask modular redund techniqu pra86 addit perman fault toler transient fault import sinc shown occur much frequent perman fault ir86 irh86 cms82 studi orbit satellit contain microelectron test system use measur error rate variou semiconductor devic includ microprocessor system cmr92 number error caus proton cosmic ray ion mostli rang 1 15 15minut interv measur high 35 interv exampl safeti critic applic found lh94 transient fault dealt tempor redund allow extra time slack schedul reexecut task execut recoveri block hlmsr74 problem solv paper follow given set n aperiod task seek determin task set abl complet execut deadlin edf schedul even system recov k fault consid uniprocessor system assum task may subject multipl transient fault simpl solut would check feasibl schedul gener possibl combin fault use approach describ llmm99 schedul high complex scheme provid impetu search effici solut solut present paper develop optim necessari suffici feasibl check run 2 delta time worst case although consid aperiod task note techniqu present paper use verifi faulttoler capabl set period task consid instanc period task aperiod task within least common multipl period period task moreov schedul aperiod task basi schedul period task framebas system set task usual preced constraint invok regular time interv type system commonli use practic simplic exampl trackingcollis avoid applic motion detect recognitionverif trajectori estim comput time contact usual compon subtask within given frame period cbm93 similarli realtim imag magnif task might go step nonlinear imag interpol contrast enhanc nois suppress imag extrapol period nc96 even though period task system period uniqu therefor schedul instanc correspond nomenclatur aperiod task done within specif time interv rest paper organ follow section 2 present model notat aperiod faulttoler schedul problem section 3 introduc auxiliari function aid present solut section 4 describ feasibl test set task specif fault pattern gener section 5 fault pattern examin worst case behavior respect k fault section 6 survey relat work section 7 final paper conclud remark direct futur work model notat consid uniprocessor system submit set n task g task model tupl readi time earliest start time task deadlin c maximum comput time also call worst case execut time set task becom readi given time denot rst rst assum edf schedul tie deadlin broken arbitrarili schedul describ function edf schedul task time use edf refer edf schedul defin e time task complet execut edf defin function number free slot number slot edf exclud slot start 2 edf said feasibl e assum fault detect end execut task time requir fault detect mechan ad worst case comput time c task hinder timeli system mani mechan propos fault detect user level oper system level hardwar level user level common techniqu use consist saniti check procedur suppli user verifi correct result ha84 yf92 exampl use checksum check rang result substitut result back origin equat use detect transient error mani mechan exist oper system comput hardwar may use error detect trigger recoveri exampl detect illeg opcod caus bu error memori corrupt memori rang violat arithmet except variou timeout mechan hardwar duplic resourc also use detect fault comparison result note howev mechan describ design detect specif type fault long recogn possibl fault detect mechan accomplish perfect coverag arbitrari type fault fault detect system enter recoveri mode recoveri action must perform task deadlin assum task recov fault execut recoveri block hlmsr74 lc88 i1 prioriti fault occur execut i1 detect end i1 recov invok second recoveri block i2 assum maximum time recoveri block execut recoveri block task may differ execut time task word recoveri restrict reexecut task recoveri block use avoid common design bug code provid less accur result view limit time avail recoveri load safe state onto memori stabl sourc across network shield memori shall denot pattern fault set g f number time task 2 recoveri block fail success complet use denot edf schedul fault pattern f forc execut f recoveri block edf f said feasibl recoveri block complet note edf f feasibl given task set specif fault pattern f defin two function first function defin amount work execut time remain complet time edf work gener task becam readi time task f specif gamma oper defin time posit amount work w decreas one period task becom readi work increas comput time task second function w f defin similar way except includ time recoveri fail task point would complet faultfre schedul specif two function defin use reason extra work need recov fault note although task may complet time differ e edf f function w f import properti equal zero begin idl time slot edf f properti two function defin given next work done time edf mean task r finish time faultfre case properti 2 w f work done time edf f mean task r finish time task subject fault pattern f properti 3 w f amount work incur fault present never smaller amount work faultfre case slot end task never idl four properti follow directli definit w 3 ffifunct order avoid explicitli deriv edf schedul presenc fault defin function ffi loos correspond extra work induc certain fault pattern f intuit amount unfinish extra work induc fault pattern f time word work need beyond requir faultfre schedul idl time faultfre edf schedul use extra work ffi function play import role process check task meet deadlin edf f follow method comput ffi directli faultfre edf schedul fault pattern f 2 order show form ffit f equival w f consid four differ case case 1 task end thu 0 6 e j j definit w w f impli w case 2 impli w properti 3 impli also w f case 3 edf state w state j case ffi case 4 6 e edf impli w properti 3 impli also w f henc oper definit w w f reduc usual subtract straightforward show illustr figur 1 show exampl task set correspond valu function specif f exampl consid case 1 3 may subject fault note valu ffi decreas edf idl increas end task indic faulti f r c v223000 faultfre edf schedul figur 1 task set edf schedul ffi valu f mention ffi function abstract repres extra work perform recoveri extra work reduc zero readi task complet execut recoveri demonstr follow theorem theorem edf edf f task r finish time proof equat 2 decreas valu ffifunct possibl edf properti 1 lead w equat 1 give w f proof follow properti 1 2 ffl 4 feasibl test task set specif fault pattern given task set fault pattern f present method check whether lowest prioriti task denot 2 complet deadlin edf f theorem given task set fault pattern f lowest prioriti task complet edf f proof prove part assum 0 smallest valu e 0 ident impli complet e schedul howev latest time 0 ffit f 0 note first valu e definit henc theorem 1 task readi finish execut edf edf f moreov ffit mean thu edf ident edf f period complet edf e mean also complet e edf f prove part contradict assum finish edf f e fact lowest prioriti task execut time mean task avail execut gamma 1 thu 1 given assumpt impli properti 1 impli edf lead contradict ffl next corollari provid condit feasibl edf f entir task set corollari 1 necessari suffici condit feasibl edf f given given f obtain appli theorem 2 n task set j contain j highest prioriti task proof proof induct base case trivial sinc singl task induct step assum edf f j feasibl consid lower prioriti task j edf f j1 task j finish exactli time edf f j sinc lowest prioriti henc necessari suffici condit feasibl edf f j1 equival necessari suffici condit complet ffl corollari 2 suffici necessari condit feasibl edf f given given f proof note proof part theorem 2 reli properti lowest prioriti task edf mean task latest deadlin part theorem howev true even lowest prioriti task henc 2 complet edf f prove corollari ffl figur 2 faulttoler schedul task set figur 1 clarifi condit corollari exampl first show condit given corollari 2 necessari feasibl edf f show given necessari order finish edf f seen exampl task set fault pattern shown figur 1 valu ffit f zero e 7 yet shown figur 2 1 2 finish deadlin edf f word condit state theorem 2 necessari suffici feasibl lowest prioriti task edf f task 4 exampl next show state corollari 1 repeatedli appli theorem 2 task set j obtain suffici condit feasibl entir task set word suffici appli theorem 2 demonstr modifi exampl figur 1 7 clearli chang 3 may still result edf schedul thu chang calcul although applic theorem 2 guarante 4 finish deadlin edf f recoveri 3 finish seen figur 2 assum without loss gener task given task set number extra work still need done due fault pattern f time note ffi f increas equat 2 rewritten use slack function defin section 2 follow applic theorem 2 given f requir simul edf comput e well slack valu ffi comput equat 3 4 use check condit theorem step procedur take time except simul edf schedul simul may effici perform use heap keep task sort deadlin task insert heap readi remov heap complet execut sinc insert delet heap take ologn time total simul edf take onlogn time thu time complex entir procedur onlogn henc given task set specif fault pattern f suffici necessari condit feasibl edf f comput use corollari 1 2 logn time step less effici simul edf f directli done onlogn step howev describ next section simul edf extrem advantag consid arbitrari fault pattern rather specif fault pattern 5 feasibl test task set fault pattern turn attent determin feasibl given task set fault pattern k less fault use f w denot fault pattern exactli w fault also defin function ffi w repres maximum extra work time induc exactli w fault occur time word extra work induc worstcas fault pattern w fault note although use f w definit specifi w fault occur time valu reach maximum possibl w fault occur time theorem 3 given task set given number fault w fault pattern f w lowest prioriti task complet edf f w e proof theorem extens theorem 2 prove similar manner ffl order comput ffi w effici defin valu use comput directli deriv equat 3 valu ffi w defin maximum extra work induc fault pattern w fault maximum valu obtain consid worst scenario follow two case ffl w fault alreadi occur henc maximum extra work e maximum extra work e igamma1 decrement slack avail e igamma1 e alreadi occur addit fault occur case maximum extra work e increas v recoveri time henc note e function slack deriv edf depend particular fault pattern valu ffi w comput use follow recurs formula gammaslack comput equat 6 graphic repres use graph g n column k row row correspond particular number fault w column correspond particular e see figur 3b node correspond row w column e denot n w vertic edg n w n w1 repres execut one recoveri block task thu label v horizont edg n w n w mean fault occur task thu label gammaslack indic extra work remain e igamma1 decrement slack avail e igamma1 e path start n 0 1 g repres particular fault pattern see figur 4 valu ffi w correspond worst case pattern w fault comput equat 6 correspond dynam program algorithm comput longest path n 0 1 n w r e task set slack b fault free schedul comput of00 04 figur 3 calcul 43 e e d00 figur 4 two fault pattern task set figur 3 correspond path g figur 3 depict exampl comput ffi w specif task set 2 valu ffi w written insid node n w see exampl equat 5 satisfi condit theorem 3 thu lowest prioriti task 3 finish presenc two fault similar corollari 1 discuss last section necessari suffici condit feasibl edf f requir repeat applic theorem 3 corollari 3 necessari suffici condit feasibl edf f given r c v1 122 6 29 1 e 14e e 3b fault free schedul comput task set 1202 figur 5 exampl three task fault pattern f k less fault obtain appli theorem 3 n task set contain j highest prioriti task figur 5 show comput ffi exampl three task note although applic theorem 3 exampl show lowest prioriti task 3 finish deadlin presenc two fault set three task feasibl presenc two fault 1 sinc case either 1 2 miss deadlin detect theorem 3 appli task set g summar given task set maximum number fault k follow algorithm use optim check edf f feasibl fault pattern k fault algorithm exact highest prioriti task one earliest deadlin lowest prioriti task task 1 ffl 1 simul edf j comput e well slack 2 renumb task j e 1 e j 3 comput equat 6 4 let e comput conveni 5 ffi w 6 j n edf f feasibl exit 7 let highest prioriti task 8 note lowest prioriti task j1 henc order determin lowest prioriti task task set finish deadlin presenc k fault step 15 appli theorem step gener edf j appli equat 6 order determin feasibl repeat loop n time note howev care edf j1 deriv edf j step thu result total 2 feasibl test compar k1 logn complex requir simul edf possibl k fault pattern algorithm smaller time complex even indic corollari 2 suffici necessari feasibl test may obtain comput ffi simul edf make sure task ffi equal zero e complet onlognnk time shown follow algorithm algorithm suffici 1 simul edf comput e well slack 2 renumb task j e 1 e n 3 comput equat 6 4 let e comput conveni 5 tee 200 0021 task set b comput figur exampl f toler two fault exampl shown figur 6 show task even valu ffi comput simul edf equal zero e exampl yet easi see shown edf schedul toler two fault two fault 1 two fault 2 one fault 1 2 intuit explain result note although 2 repres maximum recoveri work need done inform kept prioriti recoveri work execut edf f specif given exampl work ffi 2 execut edf f prioriti 1 lower prioriti thu necessari finish deadlin gener may happen possibl lower prioriti task finish higher prioriti task j e final note observ given last paragraph algorithm suffici provid suffici necessari feasibl test special case task complet execut edf order prioriti deadlin comput edf satisfi e e i1 i1 case recoveri work ffi w would execut edf f prioriti higher equal thu necessari work complet complet deadlin 6 relat work earlier work deal toler transient fault aperiod task carri perspect singl fault system lc88 ks86 recent fault model enhanc encompass singl fault occur everi interv time uniprocessor multiprocessor system bjpg89 gmm94 gmm97 toler transient fault period task also address uniprocessor rt93 rts94 os94 pm98 gmm98 multiprocessor system bmr99 os95 lmm98 ks86 processor failur handl maintain conting backup schedul schedul use event processor failur gener backup schedul assum optim schedul exist schedul enhanc addit ghost task function primarili standbi task sinc schedul permit addit scheme optimist detail found ks97 duplic resourc use faulttoler realtim system os92 ever algorithm present restrict case task period ad duplic error recoveri doubl amount resourc necessari schedul bjpg89 best effort approach provid fault toler discuss hard realtim distribut system primarybackup scheme use primari backup start execut simultan fault affect primari result backup use scheme also tri balanc workload processor recent work done problem dynam dispatch algorithm framebas comput dynam prioriti one consid singl fault llmm99 shown simpli gener n edf schedul one possibl task failur suffici determin task set schedul deadlin also work kop97 describ approach taken mar system framebas fault toler mar pioneer system timelin dispatch task develop timetrigg protocol take account schedul overhead well need explicit fault toler embed realtim system howev mar requir special hardwar perform faulttoler relat task vote thu use broad rang realtim system 7 conclus address problem guarante time recoveri multipl fault aperiod task work assum earliestdeadlinefirst schedul aperiod preemptiv task develop necessari suffici feasibilitytest faulttoler admiss con trol test use dynam program techniqu explor possibl fault pattern system complex 2 delta k n number task schedul k maximum number fault toler edf optim schedul polici task set sens task miss deadlin edf schedul deadlin miss edf also optim faulttoler schedul polici specif edf f fault pattern f equival edf 0 0 obtain replac comput time c task henc work present paper answer follow question optim given task set feasibl schedul allow time recoveri combin k fault acknowledg author would like thank sanjoy baruah propos problem toler k fault edf schedul valuabl discuss feedback cours work author would also like acknowledg support darpa contract dabt6396c 0044 univers pittsburgh r workload redistribut fault toler hard realtim distribut comput system layer control binocular camera head singl event upset rate space deriv caliber transient error reliabl model implement analysi faulttoler schedul algorithm program structur error detect recoveri measurementbas model workload depend cpu error measur model comput reliabl affect system activ schedul task quick recoveri failur faulttoler schedul problem architectur principl safetycrit realtim applic global fault toler realtim schedul multiprocessor effici rm admiss control applic multiprocessor schedul imprecis realtim imag magnif algorithm algorithm realtim faulttoler schedul multiprocessor system enhanc faulttoler ratemonoton schedul alloc fixedprior period task multiprocessor sy tem minimum achiev util faulttoler process period task fault toler comput theori techniqu enhanc fault toler realtim system time redund schedul fault recoveri oper timecrit applic algorithm base fault toler matrix invers maximum pivot tr ctr alireza ejlali marcu schmitz bashir alhashimi sey ghassem miremadi paul rosing energi effici seutoler dvsenabl realtim system inform redund proceed 2005 intern symposium low power electron design august 0810 2005 san diego ca usa alireza ejlali bashir alhashimi marcu schmitz paul rosing sey ghassem miremadi combin time inform redund seutoler energyeffici realtim system ieee transact larg scale integr vlsi system v14 n4 p323335 april 2006 xiao qin hong jiang novel faulttoler schedul algorithm preced constrain task realtim heterogen system parallel comput v32 n5 p331356 june 2006