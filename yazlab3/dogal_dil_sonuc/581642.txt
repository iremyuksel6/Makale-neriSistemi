bit section instruct set extens arm embed applic program manipul data subword level ie bit section within word common place embed domain exampl applic includ media process well network process code applic spend signific amount time pack unpack narrow width data memori word execut time memori overhead pack unpack oper greatli reduc provid direct instruct set support manipul bit sectionsin paper present bit section extens bsx arm instruct set select arm processor research one popular embed processor also use basi build mani commerci network process architectur present design bsx instruct encod arm instruct set incorpor implement bsx simplescalar arm simul michigan result experi program variou benchmark suit show use bsx instruct total number instruct execut runtim mani transform function reduc 426 2727 code size reduc 127 2105 b introduct program embed applic frequent manipul data repres bit section within singl word need oper upon bit section aris applic often involv data smaller word even byte moreov also characterist mani applic point data maintain pack form multipl data item must pack togeth singl word memori fact case input output applic consist pack data input consist pack data applic typic unpack process output requir pack form applic comput result explicitli pack gener output sinc pack unpack data characterist applic domain reflect sourc program work assum program written c languag wide use languag embed domain c program pack unpack data involv perform mani bitwis logic oper shift oper import applic manipul subword data includ media process applic manipul pack narrow width media data network process applic manipul packet typic embed applic receiv media data data packet transmiss medium therefor order make best use commun bandwidth desir individu subword data item express natur size expand 32 bit entiti conveni howev data deposit memori either upon arriv input prior transmiss output clearli exist pack form process pack data typic involv unpack data gener pack data typic involv pack data requir execut addit instruct carri shift logic bitwis oper instruct cost cycl also increas code size exampl given taken adpcm audio gsm speech applic respect first exampl illustr unpack oper extract 4 bit entiti inputbuff second exampl illustr pack 5 bit entiti taken larc2 3 bit entiti taken larc3 unpack pack addit gener extra instruct pack unpack data consequ pack unpack addit memori locat regist requir hold valu pack unpack form increas regist pressur result increas memori requir cach activ final factor influenc total energi comsumpt vital concern paper present bit section extens bsx arm processor instruct set bit section subword entiti manipul program select arm processor research one popular embed processor also use mani commerci network process architectur built today present design bsx instruct encod arm instruct set newli design instruct allow us specifi regist operand bit section 32 bit valu contain within regist result data store pack form directli access manipul thu need perform explicit unpack oper elimin similarli comput result store directli pack form elimin need explicit pack oper incorpor implement bsx simplescalar arm simul michigan result experi program variou benchmark suit show use bsx instruct number instruct execut program significantli reduc function bsx instruct use observ reduct dynam instruct count rang 426 2727 code size function reduc 127 2105 remaind paper organ follow section 2 describ design bit section specif method incorpor variou type instruct also show new instruct encod use unus encod space arm instruct set section 3 describ approach gener code make use bsx instruct section 4 describ experiment setup result experi relat work instruct set design compil techniqu take advantag instruct discuss section 5 conclud remark given section 5 2 bit section extens bsx 21 bit section descriptor subword level data entiti call bit section bit section sequenc consecut bit within word bit section vari 1 bit long 32 bit long specifi bit section use bit section descriptor bsd specifi bit section within word two option one way specifi start bit posit end bit posit within word anoth way specifi start bit posit bit section length either way take 10 bit specifi singl bit section 5 bit start posit 5 bit length end posit use form specifi length bit section analyz mediabench commbench program found mani oper involv multipl bit section operand size therefor one instruct involv multipl bit section operand share bit section length specif length multipl bit section use instruct often specifi end bit posit bit section often differ thu unlik length end posit specif share 22 bit section address mode two differ address mode bit section descriptor specifi posit mani bit section within word boundari determin compil time posit bit section determin run time therefor need two address mode specifi bit section bit section operand specifi immedi valu encod within instruct bit section specifi regist express immedi constant number bit section operand use variou instruct vari one three 221 immedi bit section descriptor immedi bit section descriptor encod part struction let us assum r regist operand instruct specifi use 4 bit arm contain 16 regist r0r15 operand bit section within r whose posit within r known fix immedi bit section descriptor associ regist follow rstart len refer bit startstart len 1 r constant start 5 bit start posit bit section may vari bit 0 bit 31 len also 5 bit number bit bit section includ bit 031 regist note valid bit section descriptor start len 1 never greater 31 immedi bit section descriptor use either instruct one bit section operand two bit section operand two bit section descriptor need specifi len specif henc share two descriptor shown r1start1 r2start2 len refer bit start1start1 len 1 r1 bit start2start2 len 1 r2 222 regist bit section descriptor operand instruct well result bit section three bit section descriptor need specifi even though three bit section share length possibl specifi three bit section immedi enough bit avail instruct carri task therefor case specif bit section descriptor store regist rather immedi valu instruct anoth reason specifi bit section descriptor regist situat posit length bit section within regist fix rather determin runtim program case bit section descriptor immedi valu specifi part instruct rather descriptor comput regist specifi part instruct regist specifi bit section descriptor may specifi one two three bit section one two three possibl differ regist shown regist r contain bit section descriptor appropri operand regist r1 r3 content r organ shown figur 1 2 3 len figur 1 bit section descriptor 1 bit section len start115 figur 2 bit section descriptor 2 bit section len start21520 start1 figur 3 bit section descriptor 3 bit section 23 bit section instruct encod next describ arm instruct allow use bit section operand principl possibl allow exist arm instruct regist operand access bit section within regist operand allow instruct flexibl would mani new variat instruct enough space encod arm instruct accommod new instruct therefor choos select subset instruct like involv bit section oper develop variat benchmark studi possibl oper relat data process therefor eight data process instruct chosen version 5t arm instruct set includ six alu instruct add sub eor orr rsb well compar move cmp mov instruct select instruct base studi number multimedia benchmark determin type instruct commonli need figur 4 show percantag total execut instruct fall categori instruct type select support bit section operand see select instruct account signific percentag dynam instruct count adpcmdecod adpcmencod jpegcjpeg g721decod g721encod castdecod castencod frag thre bilint histogram convolv softfloat dh 0 10 20 30 40 50 70 80 90 100 percentag select instruct count figur 4 dynam frequenc select instruct 231 instruct immedi bsd instruct provid three variat immedi bit section operand use version 5t arm instruct set encod space prefix 11110 undefin use remain 27 bit space undefin instruct deploy new instruct 27 bit three bit use distinguish eight oper involv let us discuss three variat alu instruc tion first variat fv alu instruct correspond instruct two bit section operand therefor one operand act sourc operand destin variant cmp mov instruct slightli differ requir two operand unlik alu instruct requir three operand cmp two bit section operand sourc operand mov one operand sourc destin allow three operand bit section operand time three bit section operand need least 32 bit specifi encod instruct shown prefix 11110 bit 31 27 indic presenc bsx instruct three bit encod eight oper bit 24 26 bit 23 0 indic first variat instruc tion remain bit encod two bit section descriptor rdrd len rmrm lenopcode1 1 1 1 rd rd rm len 28 27 26 24 23 22 19 rm figur 5 first variat alu instruct second variat sv instruct three operand one destin regist bit section one sourc regist bit secion third operand bit section operand variat oper done bit section zero extend specifi variat bit 23 must 1 bit 14 must 0 instruct format encod shown 28 27 26 24 23 22 19 rm figur instruct cmp mov slightli differ need two operand bit 15 flag indic whether bit section treat unsign sign entiti 0 unsign zero extend oper 1 bit section sign therefor first bit bit section extend oper 28 27 26 24 23 22 19 rm figur 7 cmp mov instruct rm figur 8 third variat alu instruct third variat tv one 8 bit immedi valu one operand one bit section descriptor repres second operand latter bit section also serv destin operand specifi variat bit 23 must 1 bit 14 must 1 instruct format encod shown 232 instruct regist bsd instruct three variat regist bit section operand use variat differ number bit section operand found anoth undefin instruct space prefix 11111111 encod instruct version 5t arm instruct set encod instruct follow bit 19 21 contain opcod bit 17 stand number bit section operand instructon therefor 01 10 11 correspond presenc 1 2 3 bit section operand bit specifi whether bit section contain unsign sign integ format encod instruct given rn figur 9 alu instruct regist bsd figur 10 cmp mov instruct regist bsd rm rn figur figur 12 setup specifi instruct cmp mov littl bit differ two bit section operand therefor bit 17 01 10 bit 8 11 specifi bit section descriptor contain sever bit section therefor setup cost bit section descriptor regist high therefor introduc new instruct opcod setup set bit section descriptor effici instruct set multipl valu bit section descriptor simultan format encod instruct given figur 11 12 instruct setup rd rn rm len set valu rn rm len field bit section descriptor held rd simultan 6bit setup specif describ field set setup specifi bit 5 1 bit 0 4 repres immedi valu field setup copi immedi valu bit 5 0 bit 4 0 bit 0 3 use specifi regist field setup copi last five digit regist rn specifi bit 5 0 bit 4 1 rn valid bit section specifi must ignor gener sinc three valu rn rm len regist need read regist implement instruct one cycl howev practic never encount situat need read three regist 24 bsx implement implement bsx instruct two approach possi ble one approach involv redesign regist file bit section directli suppli regist file read write oper logic insid regist file ensur appropri bit regist read written altern approach requir modif regist file read write entir regist read entir regist read logic provid relev bit section select gener bit section operand instruct similarli write updat bit regist cycl immedi cycl write back oper occur content regist partial overwritten read valu read made avail instruct write back stage relev bit section first updat written regist file extra dedic read port provid perform extra read associ write oper advantag first approach energi effi cient even though requir redesign regist file also quit simpl second approach energi effici requir greater number regist read also somewhat complex implement 3 gener bsx arm code approach gener code use bsx instruct take exist arm code gener program use unmodifi compil postpass select replac use arm instruct bsx instruct gener optim code optim aim pack unpack oper context bit section compil time fix dynam vari posit 31 fix unpack unpack oper involv mere extract bit section regist contain pack data place bit section lower order bit anoth regist exampl illustr unpack extract bit section 47 inputbuff place lower order bit delta higher order bit delta 0 shown arm code requir two instruct shift instruct howev singl bsx instruct take bit 4 7 zero extend place regist suffici perform unpack arm code mov r3 r8 asr 4 r12 r3 15 0xf bsx arm code mov r12 r844 gener transform optim unpack oper take follow form arm code instruct extract bit regist ri place regist rj extract bit section place rj use possibl multipl time transform code instruct elimin use rj replac direct use bit section ri transform also elimin temporari use regist rj therefor transform legal compil must ensur regist rj inde temporarili use valu regist rj referenc follow code fragment transform rj ri masksl inst1 use rj instn use rj precondit bit section ri remain unchang instn rj dead instn transform inst1 use risl instn use risl 32 fix pack arm code bit section extract data word must perform shift oper oper elimin bsx instruct use directli refer bit section situat illustr exampl given c code take bit 04 larc2 concaten bit 24 larc3 first two instruct arm code extract relev bit larc3 third instruct extract relev bit larc2 last instruct concaten bit larc2 larc3 see bsx arm code two instruct first instruct extract bit larc3 zero extend store regist r0 second instruct move relev bit larc2 regist r1 place proper posit regist r0 arm code mov r0 r0 lsr 2 r0 r0 7 r2 r1 31 orr r0 r0 r2 asl 3 bsx arm code mov r0 r023 mov r035 r105 gener transform elimin pack oper character follow instruct defin bit section place temporari regist ri need place bit section temporari regist ri aris bit section possibl use multipl time eventu bit section pack anoth regist rj use orr instruct optim code bit section defin directli comput posit place pack oper rj use bit section directli refer bit section rj therefor need temporari regist ri elimin pack orr instruct elimin transform legal compil must ensur regist ri inde temporarili use valu ri referenc code fragment transform ri bit section definit whole regist inst1 use ri use regist instn use ri use regist orr rj rj ri pack bit section precondit bit section ri rj remain unchang orr ri dead orr transform defin pack inst1 use rj use bit section instn use rj use bit section 33 dynam unpack situat extract bit section carri posit bit section determin run time exampl number lower order bit number equal valu variabl size extract put buffer zero extend place back put buffer sinc valu size known compil time immedi valu use specifi bit section descriptor instead first three arm instruct shown use dynam construct mask use instruct extract requir valu put buffer optim code bit section descriptor setup regist r3 use mov instruct extract requir bit place r7 arm code mov r3 1 mov r3 r3 lsl r5 sub r3 r3 1 r7 r7 r3 bsx arm code setup r3 0 r5 mov r7 r7r3 gener form transform shown arm instruct construct mask replac singl setup instruct instruct replac mov bit section whose descriptor found regist set setup instruct arm code mov ri 1 mov ri ri lsl rj sub ri ri 1 rd rn ri precondit valu ri dead instruct bsx arm code setup ri rj rj mov rd rnri 34 dynam pack pack bit section togeth whose size known till runtim cost sever instruct c code given extract lower order p bit higher order bit n pack togeth arm code oper involv mani instruct first requir mask n gener next relev bit extract use mask final pack togeth use orr instruc tion contrast bsx arm code use far fewer instruct sinc ps valu known compil time must use regist bit section descriptor n arm code mov r12 1 r1 r1 r2 lsl r3 n1 16 p 1 r0 r0 r12 m1 p 1 bsx arm code setup r12 0 r3 descriptor ms bit section rsb r2 r3 16 setup r2 r3 r2 descriptor ns bit section relev bit r0 relev bit r0 gener transform optim dynam pack oper describ follow two bit section whose posit length unknown compil time extract regist current resid put separ regist respect mask construct instruct use perform extract final pack togeht one regist use orr instruct optim code bit section setup regist bit section descriptor first move bit section final regist bit section descriptor directli result orr instruct remov use setup instruct simultan setup sever field bit section descriptor reduc number instruct comparison instruct sequenc use creat mask origin code differ type instruct sequenc use creat mask thu alway possibl identifi sequenc current implement handl commonli encount sequenc arm code instruct sequenc creat mask1 ra rb mask1 instruct sequenc creat mask2 rc rd mask2 orr rm ra rc bsx arm code setup regist bit section descriptor 1 move bit section 1 rm use bit section descriptor 1 setup regist bit section descriptor 2 move bit section 2 rm use bit section descriptor 2 4 experiment evalu 41 experiment setup present result experi describ experiment setup includ simul arm optim compil set relev benchmark processor simul start port cycl level simul simplescalar 1 arm avail univers michigan version simul five stage pipelin describ preced section intel sa1 strongarm pipelin 8 found exampl sa110 icach configur processor 16kb cach size 32b line size 32way asso ciativ miss penalti 64 cycl miss requir go chip time model valid rebel netwind develop workstat 16 develop system michigan extend simul number import way research first modifi simplescalar use system call convent follow newlib c librari instead glibc current use made modif newlib develop use embed system 10 second incorpor implement bsx instruct purpos evalu addit also incorpor thumb instruct set simplescalar howev featur relev paper optim compil compil use work gcc compil built creat version support gener arm thumb well mix arm thumb code specif use xscaleelfgcc compil version 29xscale program compil o2 level optim use o3 level optim function inlin loop unrol enabl clearli sinc code size import concern embed system want enabl function inlin loop unrol translat arm code optim bsx arm code carri optim postpass frequent execut function program involv pack unpack ing use bit section data translat bsx arm code remaind program modifi seen transform preced section temporari regist freed optim may possibl improv code qualiti make use regist time due limit implement repres benchmark benchmark use taken mediabench 12 commbench 21 netbench 14 bitwis 18 suit repres class applic import embed domain also ad imag process applic thre follow program use adpcm encod encod jpeg cjpeg frag cast decod encod imag process thre bitwis bilint histogram convolv softfloat dh 42 result next present result experi measur improv code qualiti due use bsx instruct measur reduct instruct count cycl count bsx arm code comparison pure arm code result given tabl 1 2 result provid percentag improv function modifi well improv total count entir program reduct instruct count modifi function vari 426 2727 net instruct count reduct entir program lower rang 045 879 expect subset function program make signific use bsx struction reduct cycl count modifi function vari 066 2727 net cycl count reduct entir program rang 039 867 tabl 5 reduct code size function transform make use bsx instruct given code size reduct rang 127 2105 final also studi usag bsx instruct transform use benchmark tabl 3 show type bsx instruct use benchmark particular indic whether fix bsd use instruct dynam bsd use fix bsd also indic three variat bit section referenc instruct use benchmark dynam bsd also indic use setup instruct see fix bsd commonli use situat involv three variat bit section operand aris tabl 4 show kind transform found applic benchmark pack unpack involv fix dynam bsd see optim everi bsx instruct use program result tabl 3 4 indic fix bsd instruct includ bsx appropri use result regist bsd neg found instanc posit bsd vari runtim abl develop appropri compil transform effect take advantag situat use instruct one benefit use bsx instruct often number regist requir reduc multipl subword data item simultan resid singl regist longer separ hold differ regist perform data present base upon bsx arm code take advantag addit regist may becom avail regist use one expect addit perform gain problem global regist alloc subword data beyond scope paper relat paper 19 shown regist requir reduc 12 50 function take advantag bsx instruct 5 relat work wide varieti instruct set support develop support multimedia network process applic extens exploit subword 5 super word 11 parallel instruct set extens propos yang lee 22 focu permut subword data pack togeth regist network processor describ 15 also support bit section referenc paper care design extens consist small subset flexibl bitsect referenc instruct show easili incorpor popular embed arm processor compil research subword data divid two cat egori first work done automat identifi narrow width data second techniqu automat pack narrow width data perform regist alloc instruct select gener simd parallel instruct carri sever complementari techniqu identifi subword data stephenson et al 18 propos bitwidth analysi discov narrow width data perform valu rang analysi budiu et al 2 propos analysi infer individu bit valu use narrow width data tallam gupta 19 propos new type dead bit analysi narrow width data analysi zhang et al 7 aim automat discoveri multipl data item pack program variabl work pack narrow width data discoveri includ follow davidson jinturkar 3 first propos compil optim exploit narrow width data propos memori coalesc improv cach perform program zhang gupta 23 propos techniqu compress narrow width pointer data improv cach perform techniqu explor context gener purpos processor chang data layout memori pack aggress pack scalar variabl regist studi 19 mention earlier regist alloc techniqu combin work paper improv perform anoth work regist alloc presenc bit section referenc wagner leuper tabl 1 reduct dynam instruct count benchmark instruct count save function arm bsx arm adpcmdecod adpcm decod 6124744 5755944 602 total 6156561 5787760 599 adpcmencod adpcm encod 7097316 6654756 624 total 7129778 6687534 620 jpegcjpeg emit bit 634233 586291 756 total 15765616 15694887 045 g721decod fmult 47162982 43282495 823 predictor zero 9293760 8408640 952 step size 1468377 1320857 1005 reconstruct 2628342 2480822 561 total 258536428 253180667 207 g721encod fmult 48750464 44367638 899 predictor zero 9293760 8408640 952 step size 2372877 2225357 622 reconstruct 2645593 2498073 558 total 264021499 258163419 222 castdecod cast encrypt 41942016 37850112 976 total 109091228 103209100 540 castencod cast encrypt 41942016 37850112 976 total 105378485 99496358 558 frag cksum 26991150 25494952 554 total 37506531 36010318 399 threshold coalesc 3012608 2602208 1362 memo 3223563 2814963 1268 block memo 2941542 2531826 1393 total bilint main 87 79 920 total 496 488 161 histogram main 317466 301082 516 total 327311 310857 503 convolv main 30496 30240 084 total 30799 30542 083 softfloat float32 signal nan 132 96 2727 addfloat32sig 29 23 2070 subfloat32sig 29 23 2070 float32 mul float32 div rem 28 23 1786 total 898 819 879 dh nn digitmult 153713163 141768387 777 total 432372762 419604191 295 tabl 2 reduct dynam cycl count benchmark instruct count save function arm bsx arm adpcmdecod adpcm decod 6424241 6202961 344 total 6499880 6278786 340 adpcmencod adpcm encod 7958088 7515456 556 total 8035001 7592761 550 jpegcjpeg emit bit 1047235 999163 459 total 19611965 19535002 039 g721decod fmult 63914793 60034237 607 predictor zero 12834446 11949382 690 step size 1564728 1269752 1885 reconstruct 2601534 2454014 567 total 347037906 341531879 159 g721encod fmult 65798336 61415518 666 predictor zero 12834447 11949327 690 step size 2630082 2335106 1122 reconstruct 2636030 2488439 560 total 353610636 347605462 170 castdecod cast encrypt 46557053 40674664 1263 total 141113081 133440304 544 castencod cast encrypt 46557174 40674817 1263 total 135572465 127900147 566 frag cksum 32698919 31205099 457 total 57745393 56207197 266 threshold coalesc 4355796 3937458 960 memo 4725060 4307735 883 block memo 22092904 21683166 185 total 181425566 180186381 068 bilint main 887 808 891 total 5957 5878 132 histogram main 481531 462532 395 total 496650 477807 379 convolv main 40215 39949 066 total 44945 44803 032 softfloat float32 signal nan 132 96 2727 addfloat32sig 324 247 2377 subfloat32sig 675 595 1185 float32 mul 577 513 1109 float32 div 397 380 428 rem 453 314 3068 total 10255 9366 867 dh nn digitmult 236874768 224929644 504 total 578187905 565434086 221 tabl 3 bsx instruct usag benchmark fix bsd dynam setup adpcmdecod ye ye adpcmencod ye ye jpegcjpeg ye ye ye g721decod ye ye g721encod ye ye castdecod ye ye castencod ye ye frag ye thre ye bilint ye histogram ye ye convolv ye softfloat ye ye ye dh ye ye tabl 4 transform appli benchmark fix bsd dynam bsd pack unpack pack unpack adpcmdecod ye adpcmencod ye ye jpegcjpeg ye g721decod ye g721encod ye castdecod ye ye castencod ye ye frag ye thre ye bilint ye histogram ye convolv ye softfloat ye ye dh ye tabl 5 reduct code size benchmark code size reduct function arm bsx arm adpcmdecod adpcm decod 260 248 462 adpcmencod adpcm encod 300 284 533 jpegcjpeg emit bit 228 216 526 g721decod g721encod fmult 196 176 102 predictor zero 92 84 87 step size 76 72 526 reconstruct 96 92 417 castdecod castencod cast encrypt 1328 1200 964 frag cksum 108 88 1852 threshold coalesc 148 136 811 memo 296 284 405 block memo 212 200 566 bilint main 352 320 909 histogram main 316 312 127 convolv main 652 648 061 softfloat addfloat32sig 348 324 690 subfloat32sig 396 372 606 float32 mul 428 400 654 float32 div 544 520 441 rem 648 628 309 float32 sqrt 484 464 413 dh nn digitmult 112 104 714 20 work exploit bit section referenc context variabl alreadi contain pack data carri addit variabl pack compil techniqu carri simd oper narrow width data pack regist found 4 11 6 conclus present design bit section extens bsx arm processor easili encod free encod space arm instruct set found bit section frequent manipul multimedia network data process code therefor bsx instruct use quit effect improv perform benchmark addit reduct code size regist requir also result bsx instruct use incorpor implement bsx simplescalar arm simul michigan result experi program variou benchmark suit show use bsx instruct number instruct execut program significantli duce futur work focu integr use bsx instruct regist alloc techniqu aggress pack subword variabl singl regist acknowledg work support darpa award f296010010183 nation scienc foundat grant ccr0220334 ccr0208756 ccr0105355 eia0080123 univers arizona 7 r simplescalar tool set version 20 bitvalu infer detect exploit narrow width comput memori access coalesc techniqu elimin redund memori access compil simd within regist data align subword parallel dsp arm system architectur represent bit section base analysi optim sa110 microprocessor technic refer manual intel xscale microarchitectur technic summari exploit superword level parallel multimedia instruct set tool evalu synthes multimedia commun system 160mhz 32b 05w cmo risc microprocessor benchmark suit network processor new network processor architectur high speed commun httpwww arm architectur refer manual bitwidth analysi applic silicon compil bitwidth awar global regist alloc c compil design industri network processor commbench telecommun benchmark network processor fast subword permut instruct use omega flip network stage data compress transform dynam alloc data structur tr memori access coalesc mediabench simplescalar tool set version 20 bidwidth analysi applic silicon compil exploit superword level parallel multimedia instruct set compil design industri network processor arm architectur refer manual arm system architectur netbench compil simd within regist bitvalu infer represent bit section base analysi optim data compress transform dynam alloc data structur fast subword permut instruct use omega flip network stage ctr sriraman tallam rajiv gupta bitwidth awar global regist alloc acm sigplan notic v38 n1 p8596 januari bengu li rajiv gupta simpl offset assign presenc subword data proceed intern confer compil architectur synthesi embed system octob 30novemb 01 2003 san jose california usa ranjit jhala rupak majumdar bit level type high level reason proceed 14th acm sigsoft intern symposium foundat softwar engin novemb 0511 2006 portland oregon usa