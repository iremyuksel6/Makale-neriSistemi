parallel dynam program solv string edit problem cgmbsp paper present coarsegrain parallel algorithm solv string edit distanc problem string substr string c method base novel cgmbsp parallel dynam program techniqu comput highest score path weight grid graph algorithm requir log p roundssuperstep ofracn2plog local comput p number processor p2 leq leq n knowledg first effici cgmbsp algorithm align substr c furthermor cgmbsp parallel dynam program techniqu present interest right expect lead parallel dynam program method cgmbsp b introduct molecular biolog import field applic parallel comput sequenc comparison among fundament tool comput molecular biolog use solv complex problem 14 includ comput similar biosequ 11 13 15 besid molecular biolog applic sequenc comparison also use sever applic 8 9 17 notion similar distanc case interchang use infer function aspect relat evolut histori evolv sequenc either case look numer valu measur degre sequenc alik dierent give formal definit string edit prob lem let string symbol fix size alphabet string follow edit op erat delet insert substitut edit oper assign non neg real number repres cost oper dx delet symbol x ix insert symbol x x exchang symbol x symbol edit sequenc sequenc edit oper cost sum cost oper let c two string respect n string edit problem input string c consist find edit sequenc minimum cost transform c figur 1 grid dag g cost edit distanc c let ei j minimum cost transform prefix r ij figur 2 processor p ij store submatrix g ij length prefix c length j follow ei easi see string edit problem model grid graph 1 12 figur 1 n grid graph e direct acycl weight graph whose vertic point grid row column 0 n vertex j direct edg endpoint within boundari grid 12 14 author describ obtain similar align two string use string edit assum similar score satisfi triangl equal similar problem solv comput largest sourcesink path weight direct acycl graph g grid dag correspond edit sequenc transform c standard sequenti algorithm string edit problem base dynam program complex algorithm omn time given similar matrix construct optim align done omn sequenti time 14 parallel dynam program well studi topic ecient parallel pram algorithm dynam program present galil park 5 6 pram algorithm string edit problem propos apostolico et al 1 gener studi parallel algorithm dynam program found 7 paper studi parallel dynam program string edit problem use bsp 16 coars grain multicomput cgm 3 4 model cgm consist set p processor p1 pp onp local memori per processor n space need sequenti algorithm processor connect router send messag pointtopoint fash ion cgm algorithm consist altern local comput global commun round separ barrier synchron round equival superstep bsp model commun round consist rout singl hrelat onp requir inform sent given processor anoth processor one commun round pack one long messag therebi minim messag overhead cgm model commun cost model number commun round main advantag bspcgm algorithm map well standard parallel hardwar particular beowulf type processor cluster 4 main concern commun requir goal minim number commun round present cgmbsp algorithm solv string edit distanc problem string substr string c via parallel dynam program 2 log sequenti algorithm present 12 solv approxim repeat string problem problem also aris common substr align problem 10 method requir log p roundssuperstep n 2 log local comput knowledg first e cient cgmbsp algorithm problem furthermor cgmbsp parallel dynam program techniqu present interest right expect result lead parallel dynam program method cgmbsp 2 cgm algorithm comput highest score path section present parallel algorithm comput highest score path ahsp weight n grid graph use cgm p processor mn local memori per processor use method find optim align c divid grid graph g p subgrid g ij 1 processor p ij store subgrid g ij figur 2 let left boundari l g set point leftmost column right top bottom boundari r b respect defin analog boundari g union left right top bottom boundari l r b let distg ij mn1 contain length shortest path begin left boundari g ij end right r ij bottom b ij boundari g ij matrix consist four submatric l ij r ij stor ing shortest path begin left boundari end right boundari g ij l ij b ij store shortest path begin left boundari end bottom boundari g ij ij r ij store shortest path begin top boundari end right boundari g ij store shortest path begin left boundari end bottom boundari g ij use algorithm schmidt 12 processor comput distanc path left top boundari right bottom boundari g ij time mn log gener strategi cgmbsp algorithm fol low gener step algorithm sever processor collabor join previous calcul subgrid begin step subgrid distanc matrix distribut among group processor two neighbor grid join processor hold two distanc trice result new distanc matrix distribut among processor step algorithm reduc factor 12 number subgrid remain merg 21 join grid show sequenti algorithm join two adjac grid common horizont boundari case common vertic boundari analog next subsect show distanc matric two grid size l k store q processor use 2q processor build distanc matrix 2l 1k size merg grid procedur take time ol provid q small compar l k constant number commun round round transfer ol data fromto processor local memori requir processor ol simplic refer upper grid gu boundari lu tu bu ru lower grid g l boundari l l l b l r l refer distanc matric upper lower final grid distu dist l dist ul respect import note size result distanc matrix dierent total size two origin distanc matric howev four grid join 2 2 configur size add precis initi distanc matrix store matrix evenli distribut among q processor 1 definit account top left bottom right corner q processor store distu consecut column distu q processor store dist l p l1 p l2 p lq store consecut row dist l note distanc matric actual band matric great portion matric involv join oper figur 3 illustr part old matric copi part use build new matrix copi part requir redistribut end step concentr calcul submatrix dist ul shade area illustr region path exist submatric eectiv involv calcul thicker border b b l r l r u dist u dist l dist ul figur 3 matric distu dist l dist ul exist unus shade part distanc matric impact constant paper import result therefor ignor simplic defin indic interest part dist ul let us concentr path lu tu b l r l path cross common boundari sourc sequenc point lu tu begin lower left corner lu end top right corner let destin sequenc point b l r l start lower left corner g l end top right corner let middl sequenc point taken left right figur 4 denot mi j index k leftmost point mk belong optimum path j path mi valu use sentinel mean determin singl mi j involv search entir sequenc find x minim use previous calcul result restrict search use follow r l g l r u g u figur 4 merg gu g l mong properti 1 12 properti 1 valid j properti 2 j1 j2 mi j1 valid basic properti impli two optimum leftmost path share common extrem cross proof base fact take two cross path exchang part build even better path build path left henc know mi1 j 1 2 search mi mi1 j mi2 j furthermor certain j mi j sequenc 1 one valu interv sequenc use one sweep doubl number known path oper call sweep use sever row distu jth column dist l similar procedur use calcul mi sever valu j properti lead follow sequenti algorithm obtain new distanc matrix algorithm base parallel algorithm base recurs version present 1 calcul use mi j calcul distanc j process step begin mark point sequenc j mark mi j alreadi known interv mark point contain point yet use comput step pick middl point interv mark calcul requir path cross point begin extrem mark algorithm 1 sequenti merg distu dist l input two distanc matric distu dist l output dist ul 31 take middl point remain interv calcul path mark point 32 take middl point remain interv calcul path mark point 33 take alreadi use middl point calcul path mark point unmark point end algorithm theorem 1 algorithm 1 requir ktt 2 sequenti time proof step 31 make one sweep mark point requir time kr number mark point step 32 also requir time kr 33 done time kr mark point hard see loop execut log iter valu r approxim doubl iter 2 henc follow total time algorithm 22 parallel join oper show algorithm 1 modifi comput dist ul cgm natur way parallel algorithm make processor determin dier ent part dist ul divis distu dist l accomplish data depend solut base dynam schedul block dist ul processor cgm version algorithm 1 three main phase determin subproblem use part distu dist l determin schedul subproblem solut subproblem adapt algorithm 1 calcul distanc point interv 1 point interv j1 j2 interv size assum alreadi calcul j j1 j j2 mi j1 mi j2 alreadi calcul word alreadi know solut border subproblem import dierenc subproblem entir problem part matrix distu dist l use shape part irregular shown figur 5 henc order make sweep one point segment one row distu segment one column dist l run time sweep determin size segment therefor variabl total run time subproblem size necessari segment calcul time ot know mani time algorithm sweep segment thu total run time subproblem estim complet problem divid sever subproblem solv parallel 2q processor let us divid 2q equal segment size suppos simplic integ overlap extrem lead 4q 2 subproblem grid u grid l dist u figur 5 data requir comput block dist ul distribut among 2q processor fact subproblem involv tu b l empti omit signific asymptot perform work 4q 2 subproblem instead natur quantiti q 2 order distribut workload evenli begin cgmbsp algorithm problem calcul mi j belong subproblem boundari impli calcul equal space row 2q1 equal space column dist ul associ mi j lemma 1 valu dist ul multipl 1 correspond valu mi calcul parallel 2q processor store distu dist l time ok log qt space 2 two commun round oqt data sentr ceiv processor proof processor store dist l distribut row calcul 2q row one know length path interv point point henc need receiv pu1 pu2 puq length path chosen point sampl interv also send inform allow pu1 pu2 puq calcul 2q 1 requir column dist ul commun processor sendsrec ok data data processor p l1 p l2 p lq calcul path sampl use variat algorithm 1 sinc 2q 1 run time step domin last log iter loop point sampl mark sever iter make 2q sweep segment size k q total run time ok logtq processor among p l1 p l2 p lq version path length cross point sampl one consid cross certain interv calcul better path partit q equal interv processor receiv q version path point certain interv tq point processor sendsrec oqt data spend oqt time nave search ot time use mong properti avoid search version path omit detail latter due lack space conclud procedur processor among p l1 p l2 p lq store inform 4q 4q 2 subproblem mkx mk frontier subproblem previous de scribe defin part dist l use subproblem pu1 pu2 puq contain inform mxk mxk border subproblem defin usag distu processor contain actual data necessari process sub problem inform border inform sent proper processor one identifi data use subproblem besid inform use estim timespac requir subproblem 23 schedul subproblem processor comment earlier solv subproblem algorithm sometim sweep segment row dist l sometim sweep segment column distu estim run time subproblem divid estim base use part dist l base use part distu run time thu estim eort two processor appli total memori necessari store need part distu dist l processor take ot time work estim one sub work 4q subproblem processor send timespac estim singl pro cessor say pu1 receiv process oq 2 data need distribut 4q 2 subproblem 2q processor object distribut minim complet time balanc load processor special case well known nphard multiprocessor schedul problem case addit restrict space requir subproblem assign singl processor perform entir distribut singl commun round follow present solut ensur claim time space bound met lemma 2 4q 2 subproblem schedul among 2q processor time oq 2 log q result 2 time requir processor proof sinc subproblem overlap bor der total space requir worst case one subproblem requir entir column row space2q total run time subproblem dicult calcul sweep along segment row column take dierent time let us consid case dist l get 2q subproblem vertic align dist l use sweep pattern segment column dist l segment add size total run time sweep basic run time sweep sequenti algorithm final conclus time sum run time subproblem approxim equal run time sequenti algorithm ot 2 worst case one subproblem run time2q guarante processor spend ot 2 q time need ot 2 q space calcul cost pro cessor equal sum time space requir sum cost cost ot 2 problem distribut subproblem among processor local cost processor sum cost subproblem assign tri minim maximum among processor local cost sinc maximum cost subproblem cost2q maximum local cost greater minimum local cost plu cost2q would possibl reassign subproblem better way henc optimum solut cost less twice cost best possibl solut use list schedul heurist alloc greedi way costli subproblem first obtain solut cost 43 optimum solut 2 henc maximum local cost less equal sinc cost sum space time requir ment processor requir ot 2 q time ot 2 q space solv subproblem schedul calcul pu1 time oq 2 log q time domin requir sort subproblem assign establish processor pu1 broadcast inform processor oq 3 data sent processor send data proper processor receiv data subproblem assign complic commun step requir consider bookkeep total data sentr ceiv oktq per processor final processor solv subproblem gener submatrix dist ul subproblem space requir data dist l distu discard subproblem solv subproblem solv last commun step redistribut submatric dist ul way adequ join new grid neighbor left right theorem 2 2l1k l 2k1 grid two lk halv distanc matrix half distribut local memori dierent set q processor possibl calcul distanc matrix full grid parallel 2q processor given time ol constant number commun step local memori total data sentreceiv step one processor ol theorem follow algorithm describ total commun requir consist follow step 1 distribut sampl allow processor start calcul boundari subproblem 2 distribut tent length cross point path determin previou step processor concentr candid certain path 3 distribut result search best path defin boundari subproblem estim size time requir subproblem sent one processor 4 one processor send assign subproblem processor 5 data subproblem distribut among processor follow predetermin assign 6 result redistribut among processor 24 overal analysi given nm grid p processor grid initi divid p smaller grid simplifi exposit assum number processor even power two subgrid process one processor obtain distanc matrix divis grid must aim best overal perform algorithm knowledg best sequenti algorithm problem requir onm logminn time 12 algorithm propos build complex structur would support sever kind queri take onm logminn space howev easili adapt use 2 space case interest boundari boundari distanc result make tempt divid grid strip minim logarithm factor small gain local memori requir would prohibit previous state divid grid p p configur ensur local memori requir distanc matrix 2 p lead follow conclus theorem 3 distanc matrix nm grid calcul parallel cgm p processor time n 2 log olog p commun round nm local memori proof base previou discuss algorithm requir mn log time calcul distanc matric p subgrid build final distanc matrix requir log p merg step merg step requir constant number commun round p bound sucient ensur commun round involv nm data per processor process time merg step nm 2 result total n 2 log p thu whole algorithm run n 2 log time final distanc matrix find score align substr c length path top bottom grid among result kind 3 conclus paper present ecient algorithm comput edit distanc string substr string c cgm model algorithm requir log p roundssuperstep n 2 log local comput thu present linear speedup number commun round independ problem size 4 acknowledg author wish thank refere help comment 5 addit author w song universidad de sao paulo sao paulo sp brazil email song ime usp br partial support fapesp grant 98061382 cnpq grant 52377896 1 461230003 cnpqnsf collabor research program grant 680037993 6 r bound multiprocess time anomali scalabl parallel geometr algorithm coars grain multicomput parallel dynam program dynam program convex introduct parallel dynam program approxim string match algorithm di common substr align problem gener method applic search similar amino acid sequenc two protein highest score path weight graph applic find approxim repeat string theori comput evolutionari distanc pattern recognit introduct comput molecular biolog common molecular subsequ bridg model parallel comput fast text search allow error tr bridg model parallel comput effici parallel algorithm string edit relat problem fast text search dynam program convex concav sparsiti scalabl parallel geometr algorithm coars grain multicomput highest score path weight grid graph applic find approxim repeat string approxim string match fast algorithm comput longest common subsequ common substr align problem introduct parallel dynam program ctr stjepan rajko sriniva aluru space time optim parallel sequenc align ieee transact parallel distribut system v15 n12 p10701081 decemb 2004