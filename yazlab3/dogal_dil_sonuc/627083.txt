character perform algorithm lockfre object abstractconcurr access share data object must regul concurr control protocol ensur correct mani concurr control protocol requir process set lock data access recent consider interest lockfre concurr control algorithm lockfre algorithm offer potenti better system perform slow fail process block fast process process slowdown occur due cach line fault memori bu content page fault context switch numa architectur heterogen architectur differ oper execut time much work done character perform lock algorithm littl done character perform lockfre algorithm paper present perform model analyz lockfre algorithm studi effect slowdown perform find lockfre algorithm better lock algorithm slowdown transient wors slowdown perman one implic result lockfre concurr object appropri uma architectur numa architectur requir special protocol b introduct process task thread etc concurr system often access share object coordin activ whether perform user comput maintain system resourc regard share object share data structur set oper data structur paper dont allow nest call inherit process access share data object must follow concurr control protocol ensur correct execut concurr access share data often moder lock data item protect lock process must acquir lock access data item type lock process request depend natur share data access differ lock type differ compat differ prioriti exampl readonli access data item grant acquisit share lock read write access requir exclus lock share lock compat exclus lock compat lock lock protocol concurr databas access wellknown 10 addit lock protocol concurr access wide varieti special data structur propos exampl includ binari search tree 33 37 avl tree 15 btree 8 53 prioriti queue 12 46 30 shasha goodman 54 develop framework prove correct lockbas concurr search structur algorithm analyt tool need studi perform lockbas data structur algorithm establish 27 28 47 gener analyt model model perform lockbas concurr data structur algorithm develop 29 28 perform lock protocol also well studi tay suri goodman 57 ryu thomasian 52 develop analyt model perform twophas lock variant databas system herlihi propos gener method implement nonblock concurr object ie concurr data structur 21 nonblock object one process access object guarante make progress comput within finit number step nonblock algorithm fault toler sinc fail process make object unavail addit fast process execut expens slow oper hope improv perform object typic nonblock algorithm read state object comput modif attempt commit modif conflict oper modifi object commit success oper finish otherwis oper tri oper typic use compar andswap 65 9 43 atom readmodifywrit instruct tri commit modif one work use loadlockedstorecondit instruct 22 sever special architectur support lockfre algorithm develop 23 56 mani addit nonblock lockfre algorithm propos essenti form herlihi also propos method waitfre concurr object everi oper guarante complet within bound number step address perform waitfre object paper consider research lockfre concurr algorithm done late 25 22 58 2 23 56 research work lockfre algorithm claim lockfre algorithm improv perform concurr system fast oper execut expens slow oper process slowdown occur due cach line fault memori bu content page fault context switch numa architectur heterogen architectur differ oper execut time work done measur perform lockfre algorithm 22 23 45 perform lockfre algorithm rel block algorithm receiv littl studi 45 work develop perform model lockfre algorithm model studi effect transient perman slowdown speed oper execut find lockfre algorithm better lock algorithm slowdown transient wors slowdown perman extend explanatori model model accur predict util share object algorithm herlihi 21 introduc idea nonblock algorithm implement concurr data structur concurr algorithm nonblock guarante processor make progress comput finit number step process set lock fail process make progress henc nonblock algorithm must avoid convent lock herlihi describ method transform sequenti implement object concurr nonblock implement object repres pointer current instanti process perform oper object take snapshot object comput new valu object privat share workspac use sequenti implement commit updat set object pointer address newli comput object interfer oper succeed commit interf oper modifi object commit fail sinc object updat chang object pointer process set object pointer address updat object object pointer valu process read initi snapshot action perform atom use compareandswap cn instruct cn instruct avail ibm370 cedar bbn motorola 68000 famili intel 80486 cn instruct equival atom execut program code 1 object pointoldnew f ifpointoldf point new returnsuccess els returnfailur typic nonblock algorithm form herlihi smallobject protocol shown code 2 paper abstract away memori manag problem result aba problem 26 object accesspointparamet object point f object old object new object old object snapshotpoint new object serial updateold objectparamet ifcnspointold objectnew break smallobject lockfre protocol one problem protocol code 2 entir object must copi wast time memori herlihi also propos larg object protocol effici updat serial object largeobject protocol similar shadowpag techniqu use atom updat diskresid index often modifi portion object must copi replac largeobject protocol essenti form smallobject protocol herlihi algorithm serial access share object research propos algorithm permit concurr access nonblock object stone 55 propos queue permit concurr enqueu dequeu enqueuer put record empti queue block dequeuer categor algorithm lockfre instead nonblock stone algorithm perform characterist nonblock algorithm prakash lee johnson 44 45 give algorithm nonblock queue permit concurr enqueu dequeu solut base classifi everi possibl queue configur one finit number state current state defin atom snapshot valu head pointer tail pointer nextrecord pointer tail record author provid protocol take atom snapshot oper execut might find queue valid state case oper tri commit updat decis instruct via compareandswap queue invalid state oper take queue valid state start execut plj queue shown program code 3 object accessobject instanceparamet object object instanc f boolean done obj state object state donefals whilenot done f object state snapshotobject instanc ifobject state valid comput action object instanc appli action object instanc done true els cleanupobject instanc cleanupobject instanc code 3 plj concurr lockfre protocol valoi 59 develop similar nonblock algorithm queue link list binari search tree herlihi moss 25 present nonblock algorithm garbag collect anderson woll 3 present waitfre algorithm unionfind problem turek shasha prakash 58 techniqu transform concurr object implement lock concurr nonblock object everi oper keep program publicli avail locat instead set lock record process attempt make lock field record point program attempt fail block process execut program process hold lock lock remov content set lock similar phenomena model work research investig hybrid techniqu primarili lock forc process releas lock process experi context switch 2 11 method use nonlock algorithm ensur correct sever architectur support lockfre algorithm propos 56 23 cach coher mechan allow processor reserv sever word share memori inform processor conflict occur 3 processor slowdown sinc claim advantag lockfre algorithm superior perform spite processor slowdown must examin possibl caus variat time execut oper first type processor slowdown small slowdown small slowdown caus cach line fault content memori modul content bu interconnect network 13 anoth sourc small slowdown lie depend execut time oper data data structur exampl prioriti queue might implement sort list enqueu slow list big fast list small lockfre algorithm take advantag small slowdown give temporarili fast oper prioriti temporarili slow oper exampl lock free algorithm would give prefer dequeu oper prioriti queue larg enqueu oper prioriti queue small permit greater overal throughput second type processor slowdown larg slowdown slowdown caus page fault context switch multitask parallel comput process hold critic lock experi context switch process compet lock delay lock hold process regain control processor mani research work avoid problem caus long slowdown one approach delay context switch process process hold lock 5 38 64 author report larg improv effici multitask parallel processor avoid larg slowdown howev approach sever drawback requir complex kernel requir complex userkernel interact allow user grab control multiprocessor process lock dummi semaphor alemani felton 2 bershad 11 propos hybrid scheme primarili lock forc process releas lock context switch use techniqu similar nonlock protocol ensur correct scheme avoid possibl user grab processor still requir addit kernel complex complex user interfac contrast lockfre algorithm solv larg slowdown problem without oper system support type slowdown discuss literatur transient slowdown caus slowdown eventu resolv process execut oper fast process system anoth type slowdown perman slowdown process execut oper share object alway slower process system access object perman slowdown occur processor henc process execut execut slower rate processor system multiprocessor might contain heterogen cpu perhap due increment upgrad multiprocessor architectur might nonuniform memori access numa architectur processor access memori modul faster other typic numa architectur global share memori coloc processor addit topolog multicomput processor closer togeth other exampl hierarch bu mesh topolog numa architectur share object access quickli processor close slowli processor far process might experi perman slowdown execut oper oper differ oper share object might requir differ time comput exampl herlihi 22 observ enqueu prioriti queue experienc discrimin take longer comput earlier work 45 ran sever simul studi compar perform nonblock queue lockbas implement differ condit expect nonblock queue would perform better equival lockbas queue execut time oper vari consider simul studi oper arriv poisson stream assign processor execut oper program first set experi assign fast processor 90 time slow processor 10 time thu simul perman slowdown surpris find lock queue substanti better perform nonblock queue processor experi perman slowdown second set experi oper assign ident processor processor occasion becom slow thu simul transient slowdown transient slowdown nonblock algorithm substanti better perform lock algorithm key observ perform lockfre algorithm rel block algorithm depend natur slowdown process experi lockfre algorithm work well transient slowdown occur poorli perman slowdown occur model develop work explor phenomenon 4 previou work consider work done analyz perform synchron method mani analys synchron method examin rel perform share memori lock mellorcrummey scott 39 present perform measur show good perform algorithm rel testandset ticketbas algorithm agraw cherian 1 present simul result simpl analyt model explor perform adapt backoff synchron scheme anderson present measur result perform sever spin lock suggest new ticketbas spin lock woest goodman 61 present simul result compar queueonlockbit synchron techniqu testandset spin lock mellorcrummey scott lock graunk thakkar 18 present perform measur testandset ticket base lock author examin particular aspect synchron perform lim agraw 36 examin perform tradeoff spin block present analyt model deriv best point block process switch spin block glenn pryor conroy johnson 16 present analyt model show thrash phenomenon occur due content synchron variabl anderson lazowska levi 6 present simpl queu model critic section access studi thread manag scheme zahoran lazowska eager 64 present varieti analyt simul model studi interact synchron schedul polici multitask parallel processor previou analyt studi multiprocessor synchron address effect slowdown perform share object work zahoran lazowska eager 64 use simul studi effect schedul polici furthermor spin lock algorithm essenti differ natur lockfre algorithm mani algorithm ie ticket lock mc lock qolb lock competit occur lock free afterward block process cooper perform synchron lock grant atom step testandset lock henc analys primarili queu model count number access requir obtain lock lockfre algorithm differ natur process attempt perform oper must complet oper anoth process perform conflict oper henc synchron competit nonatom two synchron algorithm similar form lamport fast mutual exclus algorithm 35 process compet obtain lock use read write oper howev algorithm use practic perform studi analyt simul model testandtestandset lock 50 similar lockfre algorithm block processor receiv signal lock free cach line invalid compet lock effect slowdown testandtestandset lock never analyz though method describ paper appli howev result like great interest testandtestandset lock wide use discrimin due numa architectur like great effect system perform consider work done analyz perform concurr data structur algorithm 29 28 techniqu assum algorithm lockbas concentr analyz wait time lock queue sinc queu lockfre algorithm techniqu appli research 22 observ nonblock data structur algorithm similar optimist concurr control occ databas 10 optimist concurr control name make optimist assumpt data conflict rare transact access data without regard possibl conflict data conflict occur transact abort restart given relationship occ nonlock algorithm tri appli perform model develop analyz occ analyz nonlock algorithm menasc nakanishi 40 present markov chain model occ abort transact leav reenter transact process system new transact morri wong 41 42 note gener new transact replac abort one bias transact process system toward execut short fast transact author provid altern solut method avoid bia requir transact replac abort transact ident abort transact ryu thomasian 51 extend model occ permit wide varieti execut time distribut varieti occ execut model yu et al 63 62 develop approxim model occ lock concurr control evalu perform transact process system model approach ryu thomasian best suit applic analyz nonlock algorithm previou model similar natur 40 41 42 gener analys 63 62 focu issu buffer resourc content assum data conflict rare contrast ryu thomasian abstract away oper environ focus analyz effect data conflict furthermor ryu thomasian model produc accur result rate data conflict high approach extend simpl flexibl model ryu thomasian 51 analyz lockfre algorithm ryuthomasian model requir transact abort execut time ident first execut howev explicitli want account variat execut time work load model sinc lockfre algorithm intend fast spite temporarili perman slow processor therefor start extend ryuthomasian perform model account two new workload model next appli perform model analyz sever lockfre algorithm show closedsystem model ryu thomasian convert open system model valid analyt tool use explor rel perform algorithm 5 model descript data access conflict occ detect use timestamp data granul g smallest unit concurr control associ timestamp tg contain last time data granul written transact keep track read set rt write set w assum rt oe w everi time new data granul access time access record commit point data granul last write time greater access time transact abort otherwis transact commit last write time granul w set current time procedur use shown code 4 readgt read g ts local workspac access timegglob time g 2 rt access timegtg abortt g 2 w tgglobal time code 4 occ valid note elsewher 22 lockfre protocol type describ code 2 3 essenti similar occ valid describ code 4 type algorithm read data valu commit interf write occur although mani implement detail differ occ lock free algorithm detect conflict differ mechan abort make oper reexecut loop analysi count conflict calcul probabl commit appli equal well type algorithm oper execut nonblock algorithm act like transact obey occ develop analyt method context transact appli method analyz oper follow ryu thomasian distinguish static dynam concurr control static concurr control data item access read transact start dynam concurr control data item read need also distinguish silent broadcast concurr control pseudocod code 4 silent optimist concurr control oper doesnt advertis commit transact abort continu execut altern transact broadcast commit conflict transact restart immedi 48 20 model transact process system close system v transact execut one c transact type new transact enter system class c transact probabl f c class c transact assum execut time fiv b c x fiv increas execut time due resourc content factor fiv exampl resourc content decomposit approxim 57 51 28 let us focu concurr control mechan allow analysi appli differ comput model assum analysi ie one processor per oper transact execut transact commit execut commit transact conflict must abort denot phik c probabl commit class transact conflict execut class c transact model stochast process commit transact conflict execut transact poisson process ryu thomasian 51 show assumpt make analysi tractabl lead accur model predict wide varieti condit differenti three model depend action occur transact abort 51 transact sampl execut time first enter system transact abort execut execut time first execut time call transact model fix timefix class model ff model 1 ff model avoid bia fast transact permit fair comparison lockbas concurr control analyz transact process system variabl execut time oper could due resourc content decis oper make execut combin case execut time oper chang oper reexecut abort howev processor might slower other oper might take longer comput other introduc variabl timefix class vf model repres situat processor experi transient perman slowdown vf model abort transact choos new execut time next execut howev new oper still class ie processor type oper might want model situat processor experi temporari slowdown ie uma processor oper requir amount comput fast next execut variabl timevari class vv model new transact type pick replac abort transact possibl transact type 51 model solut method given transact model solv system occ model way method solv system depend transact model ff vf model use method vv model solv use differ method 511 solv ff vf model solut method ff vf model involv take system util u portion time spent use work find perclass util u c system util u comput perclass util ryu thomasian show equat solv quickli iter mean use resid time class c transact denot r c v transact might requir restart sever time due data conflict expect time transact spend execut abort attempt denot r c v total resid time class c transact 1 result present ff model taken 51 v util class proport expect resid time spent execut commit u v expect resid time transact r v r v rv calcul take expect perclass expect resid time system effici u calcul take expect perclass util f c r c 1 order calcul perclass effici need calcul probabl transact abort due data conflict defin phik c probabl class k transact conflict class c transact know proport commit transact calcul probabl commit transact conflict class c transact phi c calcul rate commit transact conflict class c transact fl c set fl c proport commit transact conflict class c transact b expect execut time transact given system util calcul perclass conflict rate perclass conflict rate calcul perclass util perclass util calcul system util output system util decreas function input system util ff model util bound 1 uniqu root 01 found use binari search iter vf model possibl util greater 1 bia toward fast execut root finder must use one standard nonlinear equat solut method 7 512 solv vv model vv transact model transact abort leav system new transact enter result proport commit class c transact longer f c instead depend probabl class c transact commit p c averag execut time class c transact solut method vv model base iter find root vector p order calcul conflict rate need know proport transact k execut class k transact process execut class k transact execut expect b k second one observ larg number transact execut say class k transact would execut mf k time thu observ period would take second class k transact would execut mf k b k second theori altern renew process 49 process execut class k transact finish rate 1b k transact complet commit rate p k commit conflict class c transact probabl phik c therefor given probabl transact transact class commit c calcul conflict rate fl c transact class given conflict rate transact class fl c calcul probabl transact commit p c unlik case ff vf model vv model need iter vector make use properti system equat find rapidli converg iter solut f transform f p old new f p vector relat refer componentwis comparison word jacobian f strictli nonposit algorithm use find solut vv calcul th valu p c 6 analysi section present calcul need solv system discuss previou section four type optimist concurr control present calcul three transact model 61 analysi silentstat occ section examin simplest occ scheme silentstat scheme transact access entir data set start execut detect conflict attempt commit 611 fix timefix class 51 transact execut second abort execut second restart oper requir second probabl commit e gammafl sinc assum conflict form poisson process therefor number time class c transact run time must execut distribut mean e fl c class c transact run time therefor mean resid time te class c transact run time r 1te c first deriv laplac transform b c 32 final perclass util calcul iter note b c must ot gamma1 e gammafl c integr converg 612 variabl time fix class variabl timefix class model everi time class c transact execut run time sampl b c therefor uncondit probabl oper commit number time oper execut geometr distribut oper execut 1p c time first 1p c gamma 1 time oper execut unsuccess know oper unsuccess tell us probabl requir somewhat longer averag execut sinc slow oper like abort similarli success oper like faster particular oper success reach commit point conflict occur unsuccess conflict occur reach commit point distribut execut time success unsuccess oper calcul take order statist 14 k k f normal constant comput z 1e gammafl c b c tdt c b f c expect valu b c b f c respect expect time complet class c oper c 12 observ need calcul b c combin 11 13 get therefor find c b c note variabl time model restrict distribut b c finit mean 613 variabl time variabl class silentstat vv model calcul conflict rate formula 4 probabl class c transact commit formula 8 62 analysi staticbroadcast occ staticbroadcast occ transact access entir data set start execut abort whenev conflict transact commit 621 fixedfix probabl transact restart calcul way silentstat model given conflict rate wast time per transact truncat exponenti distribut result 622 variablefix probabl transact commit p c expect execut time transact commit c calcul way silentstat model execut time abort transact differ sinc transact abort transact conflict second start yet commit c theta fl c e gammafl c r 1fl c e gammafl c 1gammab c tdt r 1e gammafl c r tb c ddt sinc conflict abort transact earli make use equat 13 simplifi equat 11 instead must actual calcul expect valu b c b f c ds b c ss put formula equat 11 r c v find note b c exponenti distribut u relat use directli solv system execut time exponenti distribut simplifi calcul execut time distribut exponenti distribut 623 variablevari silentstat case class k transact execut expect b k second broadcaststat case transact termin earli abort averag amount time transact spend execut class k transact b k weight averag execut time depend whether transact commit use equat 17 18 find therefor proport time process spend execut class k transact conflict rate class c transact given conflict rate fl c calcul p c use equat 8 63 analysi silentdynam dynam optimist concurr control transact access data item need class c transact request n c data item n c phase transact access data item acquir higher conflict rate redefin conflict function phi model differ phase transact class k transact commit conflict class c transact stage probabl phik c probabl commit transact conflict class c transact stage conflict rate class c transact stage amount time class c transact spend stage distribut b ci mean ci averag time execut transact b 631 fixedfix transact move differ stage encount differ conflict rate conflict rate class c transact vector similarli execut time class c transact vector distribut densiti b ci x probabl class c transact abort therefor take expect time process stage ryu thomasian find c gammafl ci 632 variablefix use transact model fixedfix case transact commit complet everi stage without conflict defin p ci probabl class c transact complet th stage without conflict calcul p ci use formula 8 substitut b ci b fl ci given p ci calcul p c case silentstat concurr control uncondit expect time spent execut class c transact b c variablevari vv model use formula 4 appropri modifi calcul conflict rate formula 26 calcul p c 64 dynamicbroadcast 641 fixedfix analysi dynamicbroadcast concurr control fixedfix model use combin previous discuss techniqu ryu thomasian show r c d2 r c c 0 theta r c 642 variablefix use formula 26 calcul p c process phase use formula 17 18 calcul b ci b f ci transact commit success complet phase ci 28 transact fail commit might fail one stage defin c probabl transact abort q ci probabl transact abort stage given abort transact abort stage must success complet previou stage transact abort exactli one stage transact abort stage expect execut time cj therefor b f c uncondit expect execut time cia use formula 28 29 formula 11 find r c v variablevari use formula 26 calcul p c formula 28 29 formula 21 23 calcul conflict rate 7 model valid experi wrote occ simul valid analyt model parameter number transact execut concurr commit transact conflict transact depend sampl phi ran simul 10000 transact execut report statist throughput execut time commit probabl ryu thomasian alreadi valid ff model present valid vf vv model also simul ff model found close agreement simul analysi first valid studi model system singl transact type one transact type vf vv model present result vf model also ran simul analyt calcul vv model obtain nearli ident result calcul phi assum transact randomli access data item databas contain data item transact overlap data set conflict ryu thomasian provid follow formula probabl two access set size n overlap databas n data item report probabl transact commit varieti access set size degre concurr tabl 1 execut time static concurr control experi phase execut time dynam concurr control experi exponenti distribut experi show close agreement analyt simul result though calcul least accur dynam concurr control level conflict high also perform valid studi system two transact class first transact class access four data item second access eight data item save space report result dynamicbroadcast occ least accur model tabl 2 report simul analyt result vf vv transact model varieti degre concurr experi f close agreement simul analyt predict staticsil staticbroadcast access set size 4 ana 9444 6366 4586 9414 5272 2797 ana ana 7755 3481 2241 7281 1567 0608 dynamicsil dynamicbroadcast ana 9704 7189 4879 9700 6967 4325 ana ana 8554 3703 1910 8479 3078 1319 tabl 1 valid studi vf model p c report singl transact class exponenti distribut execut time varyingfix varyingvari analyt simul analyt simul class 1 class 2 class 1 class 2 class 1 class 2 class 1 class 2 tabl 2 valid studi dynamicbroadcast occ two transact class p c report execut phase time exponenti distribut 8 analysi nonblock data structur section appli analyt framework model perform nonblock data structur explor sever perform implic analyt framework use model nonblock data structur algorithm basic form describ section 2 code 2 3 nonblock algorithm use differ mechan 24 17 34 recent propos method 45 58 19 55 59 60 56 23 similar techniqu 81 atom snapshot examin first algorithm similar code 2 take snapshot consist perform one read ie read pointer object approach use herlihi 21 step turek algorithm 58 approxim algorithm propos prakash et al 45 valoi 59 60 harathi johnson 19 want model transient perman slowdown vf model account transient perman slowdown vv model permit transient slowdown model algorithm snapshot perform atom oper execut ss transact herlihi algorithm everi oper conflict everi experi use two transact class model fast slow processor first transact class model fast processor execut time chosen uniformli randomli 8 12 f 9 execut time second transact class repres slow processor chosen uniformli randomli 8 12 plot throughput nonblock queue perman transient slowdown model vf vv increas v figur 1 comparison also plot throughput lock algorithm algorithm constant 119 nonblock queue perman slowdown model lower throughput lock queue spite prefer shown toward fast execut phenomena occur extrem long time requir complet oper execut slow processor run time shown figur 2 throughput transient slowdown model increas increas v consider greater lock queue model predict agreement simul result 45 ryu thomasian model assum close system calcul throughput respons time function number compet oper access share data structur better model open system oper arriv receiv servic depart use result closedsystem model approxim perform measur open system throughput valu close system use statedepend servic rate flowequival server 31 step comput open system respons time ff vf transact model 1 calcul perclass averag respons time 2 model number job system finitebuff queue use averag respons time across transact type statedepend servic time given arriv rate calcul state occup probabl 3 use state occup probabl weight perclass respons time comput averag respons time take sum vv model perclass execut time arent meaning instead one calcul averag transact execut time expect probabl vv transact commit transact reexecut commit thu number execut geometr distribut expect valu 1p vv c therefor expect time execut transact c use paramet previou experi plot respons time singlesnapshot algorithm perman transient slowdown processor model increas arriv rate figur 3 also report result simul processor model chart show vv analyt model accur predict respons time transient slowdown model vf model overli optimist figur 4 compar analyt simul predict probabl system idl processor model see vv model make accur predict vf model optimist includ figur 3 plot respons time equival lock algorithm model mg1 queue 32 lock algorithm consider better respons time nonblock algorithm perman slowdown model nonblock algorithm transient slowdown model similar respons time light load lower respons time heavi load observ simul notic respons time oper alon system complet close respons time two oper system occur job complet alon system often slow job forc restart sever time therefor make approxim call vf approx flowequival set servic rate one oper system two job system predict made approxim vf model label vf approx figur 3 4 vf approx make poor predict respons time accur predict system util test robust model face differ servic time distribut ran experi perman slowdown processor model servic time distribut exponenti distribut result experi shown figur 5 6 figur also show vf model optimist vf approx model make poor predict respons time good predict system util 82 composit snapshot sever nonblock algorithm take snapshot sever variabl determin state data structur 45 59 60 19 22 take atom composit snapshot requir complex algorithm reduc amount copi need perform oper improv perform addit architectur support lockfre algorithm propos 23 56 architectur allow process reserv sever word share memori inform processor conflict write occur code 5 taken 45 show typic protocol take atom snapshot algorithm implement nonblock queue nonblock queue need determin simultan valu three variabl order determin state queue call three variabl b c protocol read simultan valu b c repeat aa repeat bb cc code 5 composit snapshot time oper take snapshot modif data structur caus snapshot fail snapshot taken differ modif caus snapshot fail thu snapshot progress oper use db optimist concurr control snapshot success taken oper calcul updat attempt commit updat oper abort time calcul updat stage oper use ss optimist concurr control sinc optimist concurr control use compositesnapshot nonblock algorithm variat db concurr control use method similar discuss section 64 calcul execut time probabl success last stage calcul termin earli conflict commit therefor valu b f cn c 1 29 calcul use method describ section 612 b fss assum oper equal like enqueu dequeu oper queue usual full case enqueu oper commit kill enqueu oper appli dequeu oper therefor one oper kill anoth upon commit probabl 12 start count oper execut point execut statement aa first stage end first statement execut requir 4 instruct second stage end second statement execut requir 1 instruct third stage end oper tri commit oper requir 8 instruct fast processor requir time uniformli randomli chosen 8 12 execut instruct stage slow processor requir time uniformli randomli chosen 8 12 time execut stage number instruct stage multipli sampl uniformli randomli select lo hi result experi shown figur 7 8 figur show respons time idl probabl respect draw conclus vv model make accur predict vf model optimist vf approx model make poor predict respons time good predict idl probabl 9 conclus work present model analyz perform larg class nonlock algorithm model extens ryu thomasian model optimist concurr control extens allow oper resampl execut time abort vf transact model also chang chang oper class vv transact model valid model close system varieti concurr control model next appli analyt tool compar perform nonlock lock algorithm share object use two processor model perman slowdown model execut speed processor fix modulo small variat transient slowdown model execut speed processor chang execut use vf transact model perman slowdown processor model vv transact model transient slowdown processor model perman slowdown occur due numa architectur heterogen architectur differ oper execut time transient slowdown occur due cach line fault memori bu content page fault context switch datadepend oper execut time compar perform nonlock lock algorithm close system found nonlock algorithm variabl speed model significantli better throughput lock algorithm nonlock algorithm perman slowdown model significantli wors throughput close system model give direct perform result real system indic rel perform algorithm provid bound rate oper execut extend close system model open system use flowequival approxim analyt result approxim show perform rank respect respons time exist close system vv model slightli pessimist vf model optimist make us confid perform rank describ approxim let us accur calcul util concurr object vf model analyt model accur enough use predict impact nonlock concurr object system perform work indic nonlock algorithm potenti provid better perform lock algorithm processor execut oper experi transient slowdown thu lockfre algorithm appropri uma architectur oper data requir process time howev work show lockfre algorithm poor perform processor experi perman slowdown slow processor receiv signific discrimin reduc overal throughput thu lockfre algorithm appropri heterogen numa architectur type oper requir significantli comput other case nonblock algorithm must incorpor fair mechan provid good perform approach mechan describ 2 11 r adapt backoff synchron techniqu perform issu nonblock synchron share memori multiprocessor perform spin lock altern share memori multiprocessor schedul activ effect kernel support userlevel manag parallel perform implic thread manag altern share memori multiprocessor introduct numer analysi concurr oper btree concurr control recoveri databas system practic consider nonblock concurr object simultan updat prioriti structur model access delay multiprocessor memori order statist concurr search insert avl tree bistabl throughput phenomenon sharedmemori mimd machin coordin larg number processor synchron mechan sharedmemori multiprocessor prioriti synchron algorithm multiprocessor observ optimist concurr control scheme methodolog implement highli concurr data structur methodolog implement highli concurr data object transact memori architectur support lockfre data structur axiom concurr object watson research center approxim analysi reader writer access share resourc perform concurr data structur algorithm perform concurr data structur algorithm concurr oper prioriti queue introduct comput system perform evalu queue system concurr manipul binari search tree specifi concurr program modul fast mutual exclus algorithm wait algorithm synchron largescal multiprocessor concurr control dynam search structur dynam processor alloc polici multiprogram sharedmemori multiprocessor algorithm scalabl synchron sharedmemori multiprocessor optimist vs pessimist concurr control mechan databas manag system perform concurr control algorithm nonexclus access perform analysi lock optimist concurr control algorithm concurr access prioriti queue perform analysi concurrentread exclusivewrit experi transact process multiprocessor stochast process dynam decentr cach scheme mimd parallel processor perform analysi central databas optimist concurr control analysi databas perform dynam lock concurr oper b concurr search structur algorithm simpl correct sharedqueu algorithm use compareandswap multipl reserv oklahoma updat lock perform central databas lock without block make lock base concurr data structur algorithm nonblock analysi lockfre queue concurr dictionari without lock analysi synchron mechan sharedmemori mul tiprocessor model databas concurr control model analysi timestamp histori base certif protocol concurr control effect schedul disciplin spin overhead share memori parallel system tr ctr salvator march charl wood gove n allen research frontier object technolog inform system frontier v1 n1 p5174 juli 1999